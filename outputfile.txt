File to show the of test files and the number of assert statements in each Test file 
========================================================================================== 


Filename, 	 Linenumber:Line_containing_assert_statement 	 Total asserts for that file 

Filename: doc/source/conf.py
43:     assert 'numpy.core._add_newdocs_scalars' not in sys.modules

Total asserts: 1

Filename: doc/source/reference/simd/gen_features.py
117:         assert(not rows or len(field_names) == len(rows[0]))

Total asserts: 1

Filename: numpy/distutils/misc_util.py
144:         assert apath[len(pd)] in [os.sep], repr((path, apath[len(pd)]))

192:             assert is_string(p)

267:     assert is_sequence(paths), repr(type(paths))

269:     assert not is_string(paths), repr(paths)

1000:         assert '*' not in subpackage_name, repr((subpackage_name, subpackage_path, parent_name))

1063:             assert isinstance(d, dict), repr(type(d))

1170:                             assert s==path_list[i], repr((s, path_list[i], data_path, d, path, rpath))

1182:         assert not is_glob_pattern(d), repr(d)

1296:         assert len(files)==1

1345:         assert not is_glob_pattern(d), repr((d, filepat))

1504:                 assert isinstance(info, dict), repr(info)

1884:             assert isinstance(extlib, Extension), repr(extlib)

Total asserts: 12

Filename: numpy/distutils/tests/test_system_info.py
8: from numpy.testing import assert_, assert_equal, assert_raises

193:         assert_equal(tsi.get_lib_dirs(), [self._dir1, self._dir2])

194:         assert_equal(tsi.get_libraries(), [self._lib1, self._lib2])

195:         assert_equal(tsi.get_runtime_lib_dirs(), [self._dir1])

197:         assert_equal(extra['extra_compile_args'], ['-I/fake/directory', '-I/path with/spaces', '-Os'])

202:         assert_equal(tsi.get_lib_dirs(), [self._dir1])

203:         assert_equal(tsi.get_libraries(), [self._lib1])

204:         assert_equal(tsi.get_runtime_lib_dirs(), [self._dir1])

209:         assert_equal(tsi.get_lib_dirs(), [self._dir2])

210:         assert_equal(tsi.get_libraries(), [self._lib2])

212:         assert_equal(tsi.get_runtime_lib_dirs(key='rpath'), [self._dir2])

214:         assert_equal(extra['extra_link_args'], ['-Wl,-rpath=' + self._lib2])

219:         assert_raises(AliasedOptionError, tsi.get_option_single, "mylib_libs", "libraries")

220:         assert_equal(tsi.get_libs("mylib_libs", [self._lib1]), [self._lib1])

221:         assert_equal(tsi.get_libs("libraries", [self._lib2]), [self._lib2])

233:             assert_(os.path.isfile(self._src1.replace('.c', '.o')) or

253:             assert_(os.path.isfile(self._src2.replace('.c', '.o')))

271:             assert info.get_lib_dirs() != lib_dirs

280:             assert info.get_lib_dirs() == lib_dirs

288:             assert info.get_lib_dirs() == lib_dirs

301:     assert len(order) == 3

302:     assert order == list('bef')

303:     assert len(unknown) == 1

308:     assert len(order) == 0

309:     assert len(unknown) == 0

314:         assert len(order) == 4

315:         assert order == list('acdf')

316:         assert len(unknown) == 1

Total asserts: 28

Filename: numpy/distutils/tests/test_from_template.py
3: from numpy.testing import assert_equal

44:     assert_equal(normalized_pyf, normalized_expected_pyf)

Total asserts: 2

Filename: numpy/distutils/tests/test_log.py
29:     assert out  # sanity check

32:     assert line == f"{func_name.upper()}
Total asserts: 2

Filename: numpy/distutils/tests/test_fcompiler_intel.py
2: from numpy.testing import assert_

22:             assert_(v == version)

30:             assert_(v == version)

Total asserts: 3

Filename: numpy/distutils/tests/test_misc_util.py
7:     assert_, assert_equal

15:         assert_equal(appendpath('prefix', 'name'), join('prefix', 'name'))

16:         assert_equal(appendpath('/prefix', 'name'), ajoin('prefix', 'name'))

17:         assert_equal(appendpath('/prefix', '/name'), ajoin('prefix', 'name'))

18:         assert_equal(appendpath('prefix', '/name'), join('prefix', 'name'))

21:         assert_equal(appendpath('prefix/sub', 'name'),

23:         assert_equal(appendpath('prefix/sub', 'sup/name'),

25:         assert_equal(appendpath('/prefix/sub', '/prefix/name'),

29:         assert_equal(appendpath('/prefix/sub', '/prefix/sup/name'),

31:         assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sup/sup2/name'),

33:         assert_equal(appendpath('/prefix/sub/sub2', '/prefix/sub/sup/name'),

40:         assert_equal(minrelpath(n('aa/bb')), n('aa/bb'))

41:         assert_equal(minrelpath('..'), '..')

42:         assert_equal(minrelpath(n('aa/..')), '')

43:         assert_equal(minrelpath(n('aa/../bb')), 'bb')

44:         assert_equal(minrelpath(n('aa/bb/..')), 'aa')

45:         assert_equal(minrelpath(n('aa/bb/../..')), '')

46:         assert_equal(minrelpath(n('aa/bb/../cc/../dd')), n('aa/dd'))

47:         assert_equal(minrelpath(n('.././..')), n('../..'))

48:         assert_equal(minrelpath(n('aa/bb/.././../dd')), n('dd'))

55:         assert_(join(local_path, 'command', 'build_src.py') in ls, repr(ls))

57:         assert_(join(local_path, 'system_info.py') == f[0], repr(f))

65:             assert_equal(ext, '.so')

67:             assert_equal(ext, '.so')

69:             assert_equal(ext, '.dylib')

71:             assert_equal(ext, '.dll')

73:         assert_(get_shared_lib_extension(is_python_ext=True))

81:     assert isinstance(info, dict)

82:     assert "define_macros" in info

Total asserts: 29

Filename: numpy/distutils/tests/test_fcompiler.py
1: from numpy.testing import assert_

28:         assert_(new_flags == [new_flag])

40:             assert_(new_flags == [new_flag])

42:             assert_(new_flags == prev_flags + [new_flag])

Total asserts: 4

Filename: numpy/distutils/tests/test_build_ext.py
72:     assert so is not None

Total asserts: 1

Filename: numpy/distutils/tests/test_shell_utils.py
64:     assert json.loads(json_out) == argv

74:         assert argv == Parser.split(joined)

Total asserts: 2

Filename: numpy/distutils/tests/test_exec_command.py
7: from numpy.testing import tempdir, assert_, assert_warns

69:             with assert_warns(DeprecationWarning)
77:                     with assert_warns(DeprecationWarning)
84:             with assert_warns(DeprecationWarning)
92:                     with assert_warns(DeprecationWarning)
102:         assert_(s == 0)

103:         assert_(o != '')

107:         assert_(s == 0)

108:         assert_(o == 'win32')

112:         assert_(s == 0)

113:         assert_(o == 'Hello')

116:         assert_(s == 0)

117:         assert_(o == '')

120:         assert_(s == 0)

121:         assert_(o == 'Tere')

124:         assert_(s == 0)

125:         assert_(o == '')

130:             assert_(s == 0)

131:             assert_(o == 'Hi')

134:             assert_(s == 0)

135:             assert_(o == 'Hey')

138:             assert_(s == 0)

139:             assert_(o == 'Hi')

144:             assert_(s == 0)

145:             assert_(o == '')

149:         assert_(s != 0)

150:         assert_(o != '')

153:         assert_(s == 0)

154:         assert_(o != '')

159:         assert_(s == 0)

160:         assert_(o == 'posix')

165:         assert_(s != 0)

166:         assert_(o != '')

172:         assert_(s == 0)

173:         assert_(o == '012')

177:         assert_(s == 15)

178:         assert_(o == '')

182:         assert_(s == 0)

183:         assert_(o == 'Heipa')

195:             assert_(s != 0)

196:             assert_(o != '')

200:             assert_(s == 0)

201:             assert_(o == 'Hello')

206:                 with assert_warns(DeprecationWarning)
Total asserts: 44

Filename: numpy/distutils/tests/test_npy_pkg_config.py
4: from numpy.testing import temppath, assert_

45:         assert_(out.cflags() == simple_d['cflags'])

46:         assert_(out.libs() == simple_d['libflags'])

47:         assert_(out.name == simple_d['name'])

48:         assert_(out.version == simple_d['version'])

57:         assert_(out.cflags() == simple_variable_d['cflags'])

58:         assert_(out.libs() == simple_variable_d['libflags'])

59:         assert_(out.name == simple_variable_d['name'])

60:         assert_(out.version == simple_variable_d['version'])

62:         assert_(out.cflags() == '-I/Users/david/include')

67:         assert_(d['include_dirs'] == ['/usr/include'])

70:         assert_(d['include_dirs'] == ['/usr/include'])

71:         assert_(d['macros'] == ['FOO'])

74:         assert_(d['include_dirs'] == ['/usr/include'])

75:         assert_(d['macros'] == ['FOO'])

79:         assert_(d['library_dirs'] == ['/usr/lib', '/usr/lib'])

80:         assert_(d['libraries'] == ['foo', 'bar'])

83:         assert_(d['library_dirs'] == ['/usr/lib', '/usr/lib'])

84:         assert_(d['libraries'] == ['foo', 'bar'])

Total asserts: 19

Filename: numpy/distutils/tests/test_fcompiler_nagfor.py
1: from numpy.testing import assert_

22:             assert_(v == version)

Total asserts: 2

Filename: numpy/distutils/tests/test_ccompiler_opt.py
20:     def assert_(expr, msg='')
25:     from numpy.testing import assert_, tempdir

57:         assert(isinstance(sources, list))

58:         assert(isinstance(flags, list))

170:                 assert(isinstance(regex, str))

259:         assert(isinstance(match_dict, dict))

282:         assert_(getattr(opt, "cc_on_" + self.arch))

283:         assert_(not getattr(opt, "cc_on_" + wrong_arch))

284:         assert_(getattr(opt, "cc_is_" + self.cc))

285:         assert_(not getattr(opt, "cc_is_" + wrong_cc))

298:             assert(len(opt.cpu_baseline_names()) == 0)

299:             assert(len(opt.cpu_dispatch_names()) == 0)

Total asserts: 12

Filename: numpy/distutils/tests/test_fcompiler_gnu.py
1: from numpy.testing import assert_

36:             assert_(v == version, (vs, v))

42:             assert_(v is None, (vs, v))

49:             assert_(v == version, (vs, v))

55:             assert_(v is None, (vs, v))

Total asserts: 5

Filename: numpy/distutils/system_info.py
737:         assert isinstance(self.search_static_first, int)

1010:         assert is_string(lib_dir)

1023:                 assert len(p) == 1

Total asserts: 3

Filename: numpy/distutils/exec_command.py
113:         assert os.path.isfile(pythonexe), '%r is not a file' % (pythonexe,)

Total asserts: 1

Filename: numpy/distutils/fcompiler/gnu.py
255:         assert "," not in dir

Total asserts: 1

Filename: numpy/distutils/fcompiler/intel.py
25:         assert "," not in dir

Total asserts: 1

Filename: numpy/distutils/fcompiler/__init__.py
245:             assert self._is_customised

272:         assert value is None or is_sequence_of_strings(value[1
294:         assert self._is_customised

423:         assert self._is_customised

592:         assert self.compile_switch.strip()

Total asserts: 5

Filename: numpy/distutils/extension.py
68:         # Avoid assert statements checking that sources contains strings
Total asserts: 1

Filename: numpy/distutils/command/__init__.py
11:         assert_raises(AttributeError, delattr, a, s)

Total asserts: 1

Filename: numpy/distutils/_shell_utils.py
68:         assert not ctypes.windll.kernel32.LocalFree(lpargs)

71:         assert args[0] == "dummy"

Total asserts: 2

Filename: numpy/distutils/ccompiler_opt.py
601:         assert(isinstance(sources, list))

602:         assert(isinstance(flags, list))

613:         assert(isinstance(source, str))

1053:                 assert(isinstance(flags, str))

1066:         assert(isinstance(flags, list))

1097:         assert(isinstance(flags, list))

1254:         assert(

1260:         assert(force_flags is None or isinstance(force_flags, list))

1281:         assert(name.isupper())

1351:             assert(hasattr(names, "__iter__"))

1393:         assert(

1427:         assert(

1558:         assert(name.isupper())

1559:         assert(force_flags is None or isinstance(force_flags, list))

1575:         assert(isinstance(name, str))

1596:         assert isinstance(name, str)

1646:         assert(feature_name.isupper())

1648:         assert(feature is not None)

1915:         assert(isinstance(tokens, str))

2511:         assert(isinstance(target, (str, tuple)))

Total asserts: 20

Filename: numpy/compat/tests/test_compat.py
4: from numpy.testing import assert_

13:             assert_(isfileobj(f))

16:             assert_(isfileobj(f))

19:             assert_(isfileobj(f))

Total asserts: 4

Filename: numpy/core/tests/test_numerictypes.py
6: from numpy.testing import assert_, assert_equal, assert_raises, IS_PYPY

107:         assert_(normalize_descr(self._descr) == h.dtype.descr)

108:         assert_(h.dtype.fields['x'][0].name[
109:         assert_(h.dtype.fields['x'][0].char == 'V')

110:         assert_(h.dtype.fields['x'][0].type == np.void)

112:         assert_equal(h['z'], np.zeros((), dtype='u1'))

117:         assert_(normalize_descr(self._descr) == h.dtype.descr)

118:         assert_(h.dtype['y'].name[
119:         assert_(h.dtype['y'].char == 'V')

120:         assert_(h.dtype['y'].type == np.void)

122:         assert_equal(h['z'], np.zeros((2,), dtype='u1'))

127:         assert_(normalize_descr(self._descr) == h.dtype.descr)

128:         assert_(h.dtype['z'].name == 'uint8')

129:         assert_(h.dtype['z'].char == 'B')

130:         assert_(h.dtype['z'].type == np.uint8)

132:         assert_equal(h['z'], np.zeros((2, 3), dtype='u1'))

150:         assert_(normalize_descr(self._descr) == h.dtype.descr)

152:             assert_(h.shape == (2,))

154:             assert_(h.shape == ())

159:         assert_(normalize_descr(self._descr) == h.dtype.descr)

161:             assert_(h.shape == (1, 2))

163:             assert_(h.shape == (1,))

168:         assert_(normalize_descr(self._descr) == h.dtype.descr)

170:             assert_(h.shape == (1, 1, 2))

172:             assert_(h.shape == (1, 1))

210:             assert_(h.shape == ())

211:             assert_equal(h['x'], np.array(self._buffer[0], dtype='i4'))

212:             assert_equal(h['y'], np.array(self._buffer[1], dtype='f8'))

213:             assert_equal(h['z'], np.array(self._buffer[2], dtype='u1'))

215:             assert_(len(h) == 2)

216:             assert_equal(h['x'], np.array([self._buffer[0][0],

218:             assert_equal(h['y'], np.array([self._buffer[0][1],

220:             assert_equal(h['z'], np.array([self._buffer[0][2],

243:             assert_(h.shape == ())

244:             assert_equal(h['x'], np.array(self._buffer[0], dtype='i4'))

245:             assert_equal(h['y'], np.array(self._buffer[4], dtype='f8'))

246:             assert_equal(h['z'], np.array(self._buffer[5], dtype='u1'))

248:             assert_(len(h) == 2)

249:             assert_equal(h['x'], np.array([self._buffer[0][0],

251:             assert_equal(h['y'], np.array([self._buffer[0][4],

253:             assert_equal(h['z'], np.array([self._buffer[0][5],

260:             assert_equal(h['Info']['value'],

262:             assert_equal(h['Info']['y2'],

264:             assert_equal(h['info']['Name'],

266:             assert_equal(h['info']['Value'],

269:             assert_equal(h['Info']['value'],

273:             assert_equal(h['Info']['y2'],

277:             assert_equal(h['info']['Name'],

281:             assert_equal(h['info']['Value'],

290:             assert_equal(h['Info']['Info2']['value'],

292:             assert_equal(h['Info']['Info2']['z3'],

295:             assert_equal(h['Info']['Info2']['value'],

299:             assert_equal(h['Info']['Info2']['z3'],

307:         assert_(h.dtype['Info']['value'].name == 'complex128')

308:         assert_(h.dtype['Info']['y2'].name == 'float64')

309:         assert_(h.dtype['info']['Name'].name == 'str256')

310:         assert_(h.dtype['info']['Value'].name == 'complex128')

315:         assert_(h.dtype['Info']['Info2']['value'].name == 'void256')

316:         assert_(h.dtype['Info']['Info2']['z3'].name == 'void64')

335:         assert_(a['int'].shape == (5, 0))

336:         assert_(a['float'].shape == (5, 2))

341:         assert_(res == 'f4')

345:         assert_(res == 'f4')

349:         assert_(res == 'c8')

353:         assert_(res == 'f8')

357:         assert_(res == 'f8')

367:         assert_raises(IndexError, self._bad_call)

371:         assert_(res == [(1, 3), (5, 7)])

379:         assert_(np.issubdtype(np.floating, np.inexact))

380:         assert_(not np.issubdtype(np.inexact, np.floating))

385:                 assert_(np.issubdtype(w1(cls), w2(cls)))

391:             assert_(np.issubdtype(w(np.float32), np.floating))

392:             assert_(np.issubdtype(w(np.float64), np.floating))

396:             assert_(not np.issubdtype(np.floating, w(np.float32)))

397:             assert_(not np.issubdtype(np.floating, w(np.float64)))

401:             assert_(not np.issubdtype(w1(np.float32), w2(np.float64)))

402:             assert_(not np.issubdtype(w1(np.float64), w2(np.float32)))

407:         assert not np.issubdtype(np.float32, 'float64')

408:         assert not np.issubdtype(np.float32, 'f8')

409:         assert not np.issubdtype(np.int32, str)

410:         assert not np.issubdtype(np.int32, 'int64')

411:         assert not np.issubdtype(np.str_, 'void')

414:         assert not np.issubdtype(np.int8, int)  # np.int8 is never np.int_

415:         assert not np.issubdtype(np.float32, float)

416:         assert not np.issubdtype(np.complex64, complex)

417:         assert not np.issubdtype(np.float32, "float")

418:         assert not np.issubdtype(np.float64, "f")

422:         assert np.issubdtype(np.float64, 'float64')

423:         assert np.issubdtype(np.float64, 'f8')

424:         assert np.issubdtype(np.str_, str)

425:         assert np.issubdtype(np.int64, 'int64')

426:         assert np.issubdtype(np.void, 'void')

427:         assert np.issubdtype(np.int8, np.integer)

428:         assert np.issubdtype(np.float32, np.floating)

429:         assert np.issubdtype(np.complex64, np.complexfloating)

430:         assert np.issubdtype(np.float64, "float")

431:         assert np.issubdtype(np.float32, "f")

436:         assert_(np.sctypeDict['f8'] is not np.longdouble)

437:         assert_(np.sctypeDict['c16'] is not np.clongdouble)

443:         assert_(np.sctypeDict['ulong'] is np.uint)

444:         assert_(not hasattr(np, 'ulong'))

449:         assert_raises(ValueError, np.core.numerictypes.bitname, np.floating)

459:         assert_equal(np.maximum_sctype(t), np.sctypes['int'][-1])

463:         assert_equal(np.maximum_sctype(t), np.sctypes['uint'][-1])

467:         assert_equal(np.maximum_sctype(t), np.sctypes['float'][-1])

471:         assert_equal(np.maximum_sctype(t), np.sctypes['complex'][-1])

475:         assert_equal(np.maximum_sctype(t), t)

483:         assert_equal(np.sctype2char(np.double), 'd')

484:         assert_equal(np.sctype2char(np.int_), 'l')

485:         assert_equal(np.sctype2char(np.unicode_), 'U')

486:         assert_equal(np.sctype2char(np.bytes_), 'S')

489:         assert_equal(np.sctype2char(float), 'd')

490:         assert_equal(np.sctype2char(list), 'O')

491:         assert_equal(np.sctype2char(np.ndarray), 'O')

495:         assert_raises(KeyError, np.sctype2char, rational)

496:         assert_raises(KeyError, np.sctype2char, rational(1))

499:         assert_equal(np.sctype2char(np.array([1.0, 2.0])), 'd')

502:         assert_raises(KeyError, np.sctype2char, np.floating)

505:         assert_raises(ValueError, np.sctype2char, 1)

520:     assert_equal(actual, expected)

530:             assert_('int64' in np.int_.__doc__)

532:             assert_('int64' in np.longlong.__doc__)

547:         assert len(set(self.numeric_types)) == len(self.numeric_types)

551:         assert len(set(names)) == len(names)

556:         assert getattr(np, t.__name__) is t

561:         assert np.dtype(t.__name__).type is t

Total asserts: 126

Filename: numpy/core/tests/test_scalar_methods.py
13: from numpy.testing import assert_equal, assert_raises

28:         assert_equal(ftype(f).as_integer_ratio(), ratio)

34:         assert_equal(R(0, 1),

36:         assert_equal(R(5, 2),

38:         assert_equal(R(1, 2),

40:         assert_equal(R(-2100, 1),

46:         assert_raises(OverflowError, ftype('inf').as_integer_ratio)

47:         assert_raises(OverflowError, ftype('-inf').as_integer_ratio)

48:         assert_raises(ValueError, ftype('nan').as_integer_ratio)

52:         assert_equal(R(1075, 512),

54:         assert_equal(R(-1075, 512),

56:         assert_equal(R(4404019, 2097152),

58:         assert_equal(R(-4404019, 2097152),

60:         assert_equal(R(4728779608739021, 2251799813685248),

62:         assert_equal(R(-4728779608739021, 2251799813685248),

96:             assert f.dtype == ftype

107:             assert_equal(nf / df, f, "{}/{}".format(n, d))

116:         assert not value.is_integer()

124:             assert value.is_integer()

133:             assert not value.is_integer()

148:         assert isinstance(alias, types.GenericAlias)

149:         assert alias.__origin__ is cls

153:         assert isinstance(alias, types.GenericAlias)

154:         assert alias.__origin__ is np.complexfloating

171:             assert np.number[arg_tup]

177:         assert np.number[Any]

195:             assert itype(a).bit_count() == bin(a).count("1"), msg

200:             assert np.uint64(a).bit_count() == 1

201:             assert np.uint64(a - 1).bit_count() == exp

202:             assert np.uint64(a ^ 63).bit_count() == 7

203:             assert np.uint64((a - 1) ^ 510).bit_count() == exp - 8

Total asserts: 31

Filename: numpy/core/tests/test_scalarmath.py
14:     assert_, assert_equal, assert_raises, assert_almost_equal,

15:     assert_array_equal, IS_PYPY, suppress_warnings, _gen_alignment_data,

16:     assert_warns,

34:             assert_(a == 1, "error with %r
52:                 assert_equal(c_scalar.dtype, c_array.dtype,

60:             assert_equal(a, b)

80:                 assert_almost_equal(np.add(inp1, inp2), exp1, err_msg=msg)

81:                 assert_almost_equal(np.add(inp1, 2), exp1 + 2, err_msg=msg)

82:                 assert_almost_equal(np.add(1, inp2), exp1, err_msg=msg)

85:                 assert_almost_equal(out, exp1, err_msg=msg)

88:                 assert_almost_equal(np.square(inp2),

92:                     assert_almost_equal(np.reciprocal(inp2),

97:                 assert_almost_equal(out, exp1 + 2, err_msg=msg)

100:                 assert_almost_equal(out, exp1 + 2, err_msg=msg)

107:         assert_almost_equal(d + d, d * 2)

120:             assert_(b == 81, "error with %r
128:                 assert_(b == 6765201, msg)

130:                 assert_almost_equal(b, 6765201, err_msg=msg)

142:                 assert_raises(ValueError, operator.pow, i1, i2)

145:                 assert_(res.dtype.type is np.float64)

146:                 assert_almost_equal(res, 1.)

152:                 assert_raises(ValueError, operator.pow, i1, i2)

155:                 assert_(res.dtype.type is np.float64)

156:                 assert_almost_equal(res, -1.)

162:                 assert_raises(ValueError, operator.pow, i1, i2)

165:                 assert_(res.dtype.type is np.float64)

166:                 assert_almost_equal(res, .5)

180:                     assert_(result == 9, msg)

182:                     assert_almost_equal(result, 9, err_msg=msg)

192:             assert_raises(TypeError, operator.pow, t(a), b, c)

193:             assert_raises(TypeError, operator.pow, np.array(t(a)), b, c)

219:                     assert_equal(div*b + rem, a, err_msg=msg)

221:                         assert_(b < rem <= 0, msg)

223:                         assert_(b > rem >= 0, msg)

249:                 assert_equal(div, tgtdiv, err_msg=msg)

250:                 assert_equal(rem, tgtrem, err_msg=msg)

263:                     # Equal assertion should hold when fmod is used

264:                     assert_equal(div*b + rem, a, err_msg=msg)

266:                         assert_(b < rem <= 0, msg)

268:                         assert_(b > rem >= 0, msg)

276:             assert_(rem <= b, 'dt
278:             assert_(rem >= -b, 'dt
293:                 assert_(np.isnan(rem), 'dt
296:                 #assert_(rem == fone, 'dt
298:                 assert_(np.isnan(rem), 'dt
300:                 assert_(np.isnan(rem), 'dt
303:                     assert_(np.isinf(div)) and assert_(np.isnan(mod))

322:                 assert_(np.isinf(b/a))

324:                 assert_(np.isinf(b/a))

326:                 assert_(np.isinf(b/a))

328:                 assert_(np.isinf(b/a))

330:                 assert_(np.isnan(b/a))

332:                 assert_(np.isnan(b/a))

356:                     assert_equal(result.real, ex[0])

357:                     assert_equal(result.imag, ex[1])

384:                     assert_equal(result.real, ex[0])

385:                     assert_equal(result.imag, ex[1])

394:             assert_equal([int(_m) for _m in a], li)

397:         assert_equal([int(_m) for _m in a], li[
403:             assert_(res == tgt)

408:             assert_(res == tgt)

413:             assert_(res == tgt)

420:             assert_raises(OverflowError, overflow_error_func, code)

425:         assert_raises(OverflowError, int, x)

429:             assert_raises(OverflowError, int, x)

430:             assert_equal(len(sup.log), 1)

435:         assert_raises(OverflowError, x.__int__)

439:             assert_raises(OverflowError, x.__int__)

440:             assert_equal(len(sup.log), 1)

452:         assert_(huge_ld != np.inf)

453:         assert_equal(int(huge_ld), huge_i)

457:         assert_equal(int(x), 1)

459:         assert_equal(int(x), -10)

464:             assert_(1 > np.array(0, dtype=dt1)[()], "type %s failed" % (dt1,))

465:             assert_(not 1 < np.array(0, dtype=dt1)[()], "type %s failed" % (dt1,))

468:                 assert_(np.array(1, dtype=dt1)[()] > np.array(0, dtype=dt2)[()],

470:                 assert_(not np.array(1, dtype=dt1)[()] < np.array(0, dtype=dt2)[()],

475:             assert_(-1 < np.array(1, dtype=dt1)[()], "type %s failed" % (dt1,))

476:             assert_(not -1 > np.array(1, dtype=dt1)[()], "type %s failed" % (dt1,))

477:             assert_(-1 != np.array(1, dtype=dt1)[()], "type %s failed" % (dt1,))

481:                 assert_(np.array(1, dtype=dt1)[()] > np.array(-1, dtype=dt2)[()],

483:                 assert_(not np.array(1, dtype=dt1)[()] < np.array(-1, dtype=dt2)[()],

485:                 assert_(np.array(1, dtype=dt1)[()] != np.array(-1, dtype=dt2)[()],

490:             assert_(1 > np.array(-1, dtype=dt1)[()], "type %s failed" % (dt1,))

491:             assert_(not 1 < np.array(-1, dtype=dt1)[()], "type %s failed" % (dt1,))

492:             assert_(-1 == np.array(-1, dtype=dt1)[()], "type %s failed" % (dt1,))

495:                 assert_(np.array(1, dtype=dt1)[()] > np.array(-1, dtype=dt2)[()],

497:                 assert_(not np.array(1, dtype=dt1)[()] < np.array(-1, dtype=dt2)[()],

499:                 assert_(np.array(-1, dtype=dt1)[()] == np.array(-1, dtype=dt2)[()],

507:             assert_(not np.float32(1) == None)

508:             assert_(not np.str_('test') == None)

510:             assert_(not np.datetime64('NaT') == None)

512:             assert_(np.float32(1) != None)

513:             assert_(np.str_('test') != None)

515:             assert_(np.datetime64('NaT') != None)

516:         assert_(len(w) == 0)

521:         assert_(np.equal(np.datetime64('NaT'), None))

530: #            assert_equal( val, val2 )

557:                 assert_equal(val, val2)

573:                 assert_(sys.getsizeof(x) > x.nbytes)

577:             assert_raises(TypeError, d.__sizeof__, "a")

596:                 assert_equal(seq * i, seq * int(i))

597:                 assert_equal(i * seq, int(i) * seq)

601:                 assert_equal(

602:                     assert_warns(DeprecationWarning, operator.mul, seq, i),

604:                 assert_equal(

605:                     assert_warns(DeprecationWarning, operator.mul, i, seq),

610:                 assert_raises(TypeError, operator.mul, seq, i)

611:                 assert_raises(TypeError, operator.mul, i, seq)

625:             assert_array_equal(arr_like * np.float32(3.), np.full(3, 3.))

626:             assert_array_equal(np.float32(3.) * arr_like, np.full(3, 3.))

627:             assert_array_equal(arr_like * np.int_(3), np.full(3, 3))

628:             assert_array_equal(np.int_(3) * arr_like, np.full(3, 3))

634:         assert_raises(TypeError, operator.neg, a)

642:                 assert_equal(operator.neg(a) + a, 0)

648:         assert_raises(TypeError, operator.sub, a, a)

656:                 assert_equal(operator.sub(a, a), 0)

662:         assert_equal(absfunc(x), 1.5)

665:         # assert_equal() checks zero signedness

666:         assert_equal(res, 0.0)

669:         assert_equal(res, 0.0)

672:         assert_equal(absfunc(x), x.real)

677:             assert_equal(absfunc(x), x.real)

680:         assert_equal(absfunc(x), -x.real)

727:                     assert_equal(res_scl, -1)

729:                     assert_equal(res_scl, 0)

735:                 assert_equal(res_arr, res_scl)

743:             assert hash(i) == hash(scalar(i))

755:             assert val == numpy_val

757:             assert hash(val) == hash(numpy_val)

761:             assert hash(scalar(np.nan)) != hash(scalar(np.nan))

769:             assert hash(complex(numpy_val)) == hash(numpy_val)

Total asserts: 132

Filename: numpy/core/tests/test_item_selection.py
5:     assert_, assert_raises, assert_array_equal, HAS_REFCOUNT

39:                             assert_raises(IndexError, ta.take, index_array,

44:                             assert_array_equal(res, tresult[real_index])

47:                             assert_(res.shape == (2,) + index_array.shape)

57:                 assert_(all(sys.getrefcount(o) == 3 for o in objects))

63:                 assert_(all(sys.getrefcount(o) == 3 for o in objects))

68:         assert_raises(ValueError, d.take, 5, mode=k)

78:         assert_array_equal(a, a_original)

86:         assert_array_equal(a, b)

Total asserts: 9

Filename: numpy/core/tests/test_array_coercion.py
17:     assert_array_equal, assert_warns, IS_PYPY)

118:     assert isinstance(structured, np.void)

119:     assert structured.dtype == np.dtype("i,i")

158:         assert np.array(obj, dtype="S").dtype == expected

159:         assert np.array([obj], dtype="S").dtype == expected

163:         assert np.array(arr, dtype="S").dtype == expected

165:         assert arr.astype("S").dtype == expected

174:         assert np.array([arr, arr], dtype="S").dtype == expected

188:         assert arr.shape == (1, 1)

189:         assert arr.dtype == expected

196:         assert arr.shape == ()

198:         assert arr.shape == (1,)

202:         assert arr.shape == (6,)

203:         assert arr.dtype.char == "c"

205:         assert arr.shape == (1, 6)

206:         assert arr.dtype.char == "c"

216:         assert arr.shape == (1,) * (np.MAXDIMS - 1) + (6,)

222:         assert arr.shape == ()

223:         assert arr.dtype == np.dtype("O")

228:         assert arr.shape == ()

229:         assert arr.dtype == scalar.dtype

232:         assert arr.shape == (1, 2)

233:         assert arr.dtype == scalar.dtype

248:             assert arr.shape == (2,)

252:                 assert arr.dtype == expected_dtype

255:                 assert arr.dtype == np.dtype("O")

281:         assert_array_equal(arr, arr1)

282:         assert_array_equal(arr, arr2)

283:         assert_array_equal(arr, arr3)

284:         assert_array_equal(arr, arr4)

339:             assert_array_equal(arr, cast)

343:             assert_array_equal(ass, cast)

357:         assert_array_equal(res, expected)

372:         assert discovered_dtype == dtype

373:         assert discovered_dtype.itemsize == dtype.itemsize

391:             assert_array_equal(coerced, cast)

412:         assert_array_equal(arr, cast)

422:             assert_array_equal(ass, cast)

436:         assert_array_equal(arr, cast)

437:         assert_array_equal(cast, cast)

454:         assert arr[()] == cut_string

457:         assert ass[()] == cut_string

477:         assert cast[()] == expected

478:         assert ass[()] == expected

488:         assert arr.shape == (1,) * np.MAXDIMS

493:         with assert_warns(np.VisibleDeprecationWarning)
495:         assert arr.dtype == np.dtype("O")

496:         assert arr.shape == (1,) * np.MAXDIMS

497:         assert arr.item() is initial

504:         assert arr.shape == (3,) + (1,) * (np.MAXDIMS - 1)

508:         assert arr.shape == (3, 1)

533:         assert arr.shape == (1,) * np.MAXDIMS

534:         assert arr.item() == np.array(initial).item()

543:         assert out.shape == (2,)

544:         assert out[0] is arr

545:         assert type(out[1]) is list

555:         assert arr.shape == (3,)

572:         assert shape == (2, 3)

576:         assert shape == (2,)

580:         assert res[0] is arr

581:         assert res[1] is mismatch_first_dim

645:         assert_array_equal(arr, res)

649:         assert res[0] is obj

660:         assert_array_equal(arr, res)

671:         assert_array_equal(arr, res)

681:         assert arr[()] is np.int64

683:         assert arr[0] is np.int64

699:         assert arr[()] is ArrayLike

701:         assert arr[0] is ArrayLike

Total asserts: 69

Filename: numpy/core/tests/test_unicode.py
2: from numpy.testing import assert_, assert_equal, assert_array_equal

36:     assert_(str_arr != uni_arr1)

37:     assert_(str_arr != uni_arr2)

38:     assert_array_equal(uni_arr1, uni_arr2)

51:         assert_(int(ua.dtype.str[2
53:         assert_(buffer_length(ua) == nbytes)

55:         assert_(ua_scalar == u'')

57:         assert_(ua_scalar.encode('ascii') == b'')

59:         assert_(buffer_length(ua_scalar) == 0)

100:         assert_(int(ua.dtype.str[2
102:         assert_(buffer_length(ua) == nbytes)

104:         assert_(ua_scalar == self.ucs_value*self.ulen)

106:         assert_(ua_scalar.encode('utf-8') ==

112:             assert_(buffer_length(ua_scalar) == 2*2*self.ulen)

116:             assert_(buffer_length(ua_scalar) == 2*self.ulen)

182:         assert_(int(ua.dtype.str[2
184:         assert_(buffer_length(ua) == nbytes)

186:         assert_(ua_scalar == self.ucs_value*self.ulen)

188:         assert_(ua_scalar.encode('utf-8') ==

194:             assert_(buffer_length(ua_scalar) == 2*2*self.ulen)

198:             assert_(buffer_length(ua_scalar) == 2*self.ulen)

273:         assert_(ua[()] != ua2[()])

276:         assert_equal(ua, ua3)

282:         assert_((ua != ua2).all())

283:         assert_(ua[-1] != ua2[-1])

286:         assert_equal(ua, ua3)

293:         assert_((ua != ua2).all())

294:         assert_(ua[-1, -1, -1] != ua2[-1, -1, -1])

297:         assert_equal(ua, ua3)

306:             assert_((ua == ua2).all())

307:             assert_(ua[-1] == ua2[-1])

310:             assert_equal(ua, ua3)

321:             assert_((ua == ua2).all())

322:             assert_(ua[-1] == ua2[-1])

326:             assert_equal(ua, ua3)

Total asserts: 35

Filename: numpy/core/tests/test_cpu_dispatcher.py
3: from numpy.testing import assert_equal

31:     assert_equal(test["func"], "func" + highest_sfx)

32:     assert_equal(test["var"], "var"  + highest_sfx)

35:         assert_equal(test["func_xb"], "func" + highest_sfx)

36:         assert_equal(test["var_xb"], "var"  + highest_sfx)

38:         assert_equal(test["func_xb"], "nobase")

39:         assert_equal(test["var_xb"], "nobase")

42:     assert_equal(test["all"], all_sfx)

Total asserts: 8

Filename: numpy/core/tests/test_arrayprint.py
9:     assert_, assert_equal, assert_raises, assert_warns, HAS_REFCOUNT,

10:     assert_raises_regex,

17:         assert_equal(repr(x), 'array([nan, inf])')

24:         assert_equal(repr(x1d), 'sub([1, 2])')

28:         assert_equal(repr(x2d),

34:         assert_equal(repr(xstruct),

52:         assert_equal(repr(x), 'sub([None, None], dtype=object)')

53:         assert_equal(str(x), '[None None]')

56:         assert_equal(repr(x),

58:         assert_equal(str(x), '[None sub([None, None], dtype=object)]')

73:         assert_equal(repr(x), 'sub(1)')

74:         assert_equal(str(x), '1')

77:         assert_equal(repr(x), 'sub([1, 1])')

78:         assert_equal(str(x), '[1 1]')

82:         assert_equal(repr(x), 'sub(None, dtype=object)')

83:         assert_equal(str(x), 'None')

89:         assert_equal(repr(x),

91:         assert_equal(str(x), '...')

97:         assert_equal(repr(x), 'sub(sub(None, dtype=object), dtype=object)')

98:         assert_equal(str(x), 'None')

119:         assert_equal(str(dc), "[zero one two many many]")

120:         assert_equal(str(dc[0]), "zero")

125:         assert_equal(repr(arr0d),

131:         assert_equal(repr(arr1d),

139:         assert_equal(repr(first),

148:         assert_equal(repr(arr1d),

159:         assert_equal(repr(arr_no_fields), 'array([(), (), (), ()], dtype=[])')

207:             assert_equal(res, val)

213:         assert_(np.array2string(a) == '[0 1 2]')

214:         assert_(np.array2string(a, max_line_width=4, legacy='1.13') == '[0 1\n 2]')

215:         assert_(np.array2string(a, max_line_width=4) == '[0\n 1\n 2]')

222:         with assert_raises_regex(TypeError, 'nonsense')
239:         assert_(np.array2string(x, formatter={'all'
241:         assert_(np.array2string(x, formatter={'int_kind'
243:         assert_(np.array2string(x, formatter={'all'
245:         assert_equal(np.array2string(x, formatter={'int'
247:         assert_equal(np.array2string(x, formatter={'int'
251:         assert_(np.array2string(x, formatter={'float_kind'
253:         assert_(np.array2string(x, formatter={'float'
257:         assert_(np.array2string(s, formatter={'numpystr'
264:         assert_equal(np.array2string(x),

272:             assert_equal(

283:         assert_equal(

296:         assert_equal(

305:         assert_equal(np.array2string(struct_int),

309:         assert_equal(np.array2string(struct_2dint),

315:         assert_equal(np.array2string(array_scalar), "(1., 2.12345679, 3.)")

320:         assert_equal(repr(a[0]), r"void(b'\x1B\x5B\x32\x4B\x07\x41\x0A\x08')")

321:         assert_equal(str(a[0]), r"b'\x1B\x5B\x32\x4B\x07\x41\x0A\x08'")

322:         assert_equal(repr(a),

326:         assert_equal(eval(repr(a), vars(np)), a)

327:         assert_equal(eval(repr(a[0]), vars(np)), a[0])

332:         assert_equal(

340:         assert_equal(str(A), strA)

343:         assert_equal(repr(A), reprA)

349:         assert_equal(str(A), strA)

353:         assert_equal(repr(A), reprA)

361:         assert_equal(make_str(a, 8, legacy='1.13'), '[111111]')

362:         assert_equal(make_str(a, 7, legacy='1.13'), '[111111]')

363:         assert_equal(make_str(a, 5, legacy='1.13'), '[1111\n'

366:         assert_equal(make_str(a, 8), '[111111]')

367:         assert_equal(make_str(a, 7), '[11111\n'

369:         assert_equal(make_str(a, 5), '[111\n'

374:         assert_equal(make_str(b, 12, legacy='1.13'), '[[[111111]]]')

375:         assert_equal(make_str(b,  9, legacy='1.13'), '[[[111111]]]')

376:         assert_equal(make_str(b,  8, legacy='1.13'), '[[[11111\n'

379:         assert_equal(make_str(b, 12), '[[[111111]]]')

380:         assert_equal(make_str(b,  9), '[[[111\n'

382:         assert_equal(make_str(b,  8), '[[[11\n'

388:         assert_equal(

392:         assert_equal(

404:         assert_equal(

411:         assert_equal(

420:         assert_equal(

433:         assert_equal(

442:         assert_equal(

461:         assert_equal(

478:         assert_equal(a[0], text)

482:         assert_equal(result, expected_repr)

496:         assert_(r1 == r2)

509:         assert_equal(repr(x), "array([1.5       , 0.        , 1.23456789])")

511:         assert_equal(repr(x), "array([1.5   , 0.    , 1.2346])")

521:             assert_equal(repr(x), "array([%s])" % string)

526:         assert_equal(repr(x), "array([-1, 0, 1])")

531:         assert_equal(repr(x), "array([-1, 0, 1])")

533:         assert_equal(repr(x), "array([0, 1, 2])")

536:         assert_equal(repr(x), "array([-1, 0, 1])")

538:         assert_equal(repr(x), "array([0, 1, 2])")

541:         assert_equal(repr(x), "array([-1, 0, 1])")

543:         assert_equal(repr(x), "array([0, 1, 2])")

547:         assert_equal(repr(x), "array([-1.0, 0.0, 1.0])")

549:         assert_equal(repr(x), "array([0., 1., 2.])")

552:         assert_equal(str(np.array(u'café', '<U4')), u'café')

554:         assert_equal(repr(np.array('café', '<U4')),

556:         assert_equal(str(np.array('test', np.str_)), 'test')

559:         assert_equal(str(a[0]), '([0, 0, 0],)')

561:         assert_equal(repr(np.datetime64('2005-02-25')[...]),

564:         assert_equal(repr(np.timedelta64('10', 'Y')[...]),

570:         assert_equal(repr(x), "array(test)")

572:         assert_equal(str(x), "1")

575:         assert_warns(DeprecationWarning, np.array2string,

588:         assert_equal(repr(x), 'array([1., 2., 3.])')

589:         assert_equal(repr(y), 'array([  1.,   2., -10.])')

590:         assert_equal(repr(np.array(y[0])), 'array(1.)')

591:         assert_equal(repr(np.array(y[-1])), 'array(-10.)')

592:         assert_equal(repr(z), 'array([100.,   2.,  -1.])')

593:         assert_equal(repr(w), 'array([-100.,    2.,    1.])')

595:         assert_equal(repr(np.array([np.nan, np.inf])), 'array([nan, inf])')

596:         assert_equal(repr(np.array([np.nan, -np.inf])), 'array([ nan, -inf])')

602:         assert_equal(repr(x), 'array([     inf, 1.00e+05, 1.12e+00])')

603:         assert_equal(repr(y), 'array([      inf,  1.00e+05, -1.12e+00])')

604:         assert_equal(repr(z), 'array([       inf,  1.12e+000, -1.00e+120])')

607:         assert_equal(repr(np.array([True,  True])),

609:         assert_equal(repr(np.array([True, False])),

611:         assert_equal(repr(np.array([True])),

613:         assert_equal(repr(np.array(True)),

615:         assert_equal(repr(np.array(False)),

623:         assert_equal(repr(a), 'array([0., 1., 2., 3.])')

624:         assert_equal(repr(np.array(1.)), 'array(1.)')

625:         assert_equal(repr(b), 'array([1.234e+09])')

626:         assert_equal(repr(np.array([0.])), 'array([0.])')

627:         assert_equal(repr(c),

629:         assert_equal(repr(np.array([0., -0.])), 'array([ 0., -0.])')

632:         assert_equal(repr(a), 'array([ 0.,  1.,  2.,  3.])')

633:         assert_equal(repr(np.array(1.)), 'array( 1.)')

634:         assert_equal(repr(b), 'array([ 1.234e+09])')

635:         assert_equal(repr(c),

637:         assert_equal(repr(np.array([0., -0.])), 'array([ 0., -0.])')

640:         assert_equal(repr(a), 'array([+0., +1., +2., +3.])')

641:         assert_equal(repr(np.array(1.)), 'array(+1.)')

642:         assert_equal(repr(b), 'array([+1.234e+09])')

643:         assert_equal(repr(c),

647:         assert_equal(repr(a), 'array([ 0.,  1.,  2.,  3.])')

648:         assert_equal(repr(b),  'array([  1.23400000e+09])')

649:         assert_equal(repr(-b), 'array([ -1.23400000e+09])')

650:         assert_equal(repr(np.array(1.)), 'array(1.0)')

651:         assert_equal(repr(np.array([0.])), 'array([ 0.])')

652:         assert_equal(repr(c),

655:         assert_equal(str(np.array([-1., 10])), "[ -1.  10.]")

657:         assert_raises(TypeError, np.set_printoptions, wrongarg=True)

666:         assert_equal(repr(a),

668:         assert_equal(repr(a[0]), "(1., 1.)")

690:         assert_equal(repr(x),

693:         assert_equal(repr(y),

697:         assert_equal(repr(z),

699:         assert_equal(repr(w),

704:         assert_equal(repr(wp), "array([1.234e+001, 1.000e+002, 1.000e+123])")

705:         assert_equal(repr(c),

710:         assert_equal(repr(x),

713:         assert_equal(repr(y),

716:         assert_equal(repr(z),

718:         assert_equal(repr(w[
720:         assert_equal(repr(wp), "array([1.234e+001, 1.000e+002, 1.000e+123])")

721:         assert_equal(repr(c),

726:         assert_equal(repr(x),

729:         assert_equal(repr(y),

731:         assert_equal(repr(z),

733:         assert_equal(repr(w[
735:         assert_equal(repr(wp), "array([1.2340e+001, 1.0000e+002, 1.0000e+123])")

736:         assert_equal(repr(np.zeros(3)), "array([0.0000, 0.0000, 0.0000])")

737:         assert_equal(repr(c),

741:         assert_equal(repr(z),

747:         assert_equal(repr(x),

750:         assert_equal(repr(y),

753:         assert_equal(repr(z),

755:         assert_equal(repr(w[
757:         assert_equal(repr(wp), "array([1.234e+001, 1.000e+002, 1.000e+123])")

758:         assert_equal(repr(c),

763:         assert_equal(np.float64(np.array2string(a, floatmode='unique')), a)

769:         assert_equal(str(np.float64(1.123456789123456789)), '1.12345678912')

770:         assert_equal(str(np.complex128(complex(1, np.nan))), '(1+nan*j)')

773:         assert_equal(str(np.float64(1.123456789123456789)),

775:         assert_equal(str(np.complex128(complex(1, np.nan))), '(1+nanj)')

779:         assert_equal(str(np.arange(10000)), '[   0    1    2 ..., 9997 9998 9999]')

782:         assert_equal(str(np.arange(10000)), '[   0    1    2 ... 9997 9998 9999]')

786:         assert_equal(repr(np.arange(10,20., dtype='f4')),

788:         assert_equal(repr(np.arange(10,23., dtype='f4')), textwrap.dedent("""\

793:         assert_equal(repr(np.ones(3, dtype=styp)),

795:         assert_equal(repr(np.ones(12, dtype=styp)), textwrap.dedent("""\

802:         assert_equal(

810:         assert_equal(

820:         assert_equal(

829:         assert_equal(

839:         assert_equal(

847:         assert_equal(

857:         assert_equal(

872:         assert_equal(

895:         assert_equal(

908:         assert_equal(

925:         assert_raises(ValueError, np.set_printoptions, threshold=float('nan'))

926:         assert_raises(TypeError, np.set_printoptions, threshold='1')

927:         assert_raises(TypeError, np.set_printoptions, threshold=b'1')

929:         assert_raises(TypeError, np.set_printoptions, precision='1')

930:         assert_raises(TypeError, np.set_printoptions, precision=1.5)

935:     assert_equal(repr(x), expected)

943:         assert_equal(s, '[0.67]')

951:         assert_equal(np.get_printoptions(), opts)

961:         assert_equal(np.get_printoptions(), opts)

967:         assert_equal({k
Total asserts: 199

Filename: numpy/core/tests/test_scalarbuffer.py
9: from numpy.testing import assert_, assert_equal, assert_raises

43:         assert_equal(mv_x.format, mv_a.format)

49:         assert_equal(mv_x.itemsize, np.dtype(scalar).itemsize)

50:         assert_equal(mv_x.ndim, 0)

51:         assert_equal(mv_x.shape, ())

52:         assert_equal(mv_x.strides, ())

53:         assert_equal(mv_x.suboffsets, ())

63:         assert self._as_dict(mv_x) == expected

74:         assert_(isinstance(x, np.void))

78:         assert_equal(mv_x.itemsize, expected_size)

79:         assert_equal(mv_x.ndim, 0)

80:         assert_equal(mv_x.shape, ())

81:         assert_equal(mv_x.strides, ())

82:         assert_equal(mv_x.suboffsets, ())

86:         assert_(isinstance(a, np.ndarray))

88:         assert_equal(mv_x.itemsize, mv_a.itemsize)

89:         assert_equal(mv_x.format, mv_a.format)

109:         assert self._as_dict(v) == expected

112:         assert self._as_dict(v) == expected

117:         assert_raises((ValueError, BufferError), memoryview, a[0])

136:         assert self._as_dict(v) == expected

141:         assert_equal(code_points, [ord(c) for c in s])

149:         with assert_raises(TypeError)
Total asserts: 23

Filename: numpy/core/tests/test_indexerrors.py
3:         assert_raises, assert_raises_regex,

13:         assert_raises(IndexError, x.take, [0], axis=2)

14:         assert_raises(IndexError, x.take, [1], axis=2)

15:         assert_raises(IndexError, x.take, [0], axis=2, mode='wrap')

16:         assert_raises(IndexError, x.take, [0], axis=2, mode='clip')

21:         assert_raises(IndexError, d.take, [6])

25:         assert_raises(IndexError, d.take, [1], axis=1)

26:         assert_raises(IndexError, d.take, [0], axis=1)

27:         assert_raises(IndexError, d.take, [0])

28:         assert_raises(IndexError, d.take, [0], mode='wrap')

29:         assert_raises(IndexError, d.take, [0], mode='clip')

33:         assert_raises(IndexError, a.item, 20)

35:         assert_raises(IndexError, a.item, (0, 0))

38:         assert_raises(IndexError, a.itemset, 20, 0)

40:         assert_raises(IndexError, a.itemset, (0, 0), 0)

44:         assert_raises(IndexError, a.put, 100, 0)

46:         assert_raises(IndexError, a.put, 100, 0)

48:         assert_raises(IndexError, a.put, 100, 0)

50:         assert_raises(IndexError, a.put, 100, 0)

58:         assert_raises(IndexError, lambda
59:         assert_raises(IndexError, lambda
60:         assert_raises(IndexError, lambda
61:         assert_raises(IndexError, lambda
64:         assert_raises(IndexError, lambda
65:         assert_raises(IndexError, lambda
68:         assert_raises(IndexError, lambda
69:         assert_raises(IndexError, lambda
71:         assert_raises(IndexError, lambda
72:         assert_raises(IndexError, lambda
75:         assert_raises(IndexError, lambda
76:         assert_raises(IndexError, lambda
78:         assert_raises(IndexError, lambda
79:         assert_raises(IndexError, lambda
82:         assert_raises(IndexError, lambda
83:         assert_raises(IndexError, lambda
85:         assert_raises(IndexError, lambda
86:         assert_raises(IndexError, lambda
95:         assert_raises(IndexError, lambda
98:         assert_raises(IndexError, lambda
99:         assert_raises(IndexError, lambda
101:         assert_raises(IndexError, lambda
102:         assert_raises(IndexError, lambda
105:         assert_raises(IndexError, lambda
107:         assert_raises(IndexError, lambda
110:         assert_raises(IndexError, lambda
111:         assert_raises(IndexError, lambda
113:         assert_raises(IndexError, lambda
114:         assert_raises(IndexError, lambda
119:         assert_raises_regex(

129:         assert_raises(IndexError, lambda
130:         assert_raises(IndexError, lambda
132:         assert_raises(IndexError, lambda
133:         assert_raises(IndexError, lambda
Total asserts: 53

Filename: numpy/core/tests/test_print.py
6: from numpy.testing import assert_, assert_equal

25:         assert_equal(str(tp(x)), str(float(x)),

29:         assert_equal(str(tp(1e16)), str(float('1e16')),

33:         assert_equal(str(tp(1e16)), ref,

47:         assert_equal(str(tp(x)), _REF[x],

61:         assert_equal(str(tp(x)), str(complex(x)),

63:         assert_equal(str(tp(x*1j)), str(complex(x*1j)),

65:         assert_equal(str(tp(x + x*1j)), str(complex(x + x*1j)),

69:         assert_equal(str(tp(1e16)), str(complex(1e16)),

73:         assert_equal(str(tp(1e16)), ref,

99:         assert_equal(str(dtype(c)), s)

118:     assert_equal(file.getvalue(), file_tp.getvalue(),

179:             assert_equal(fmat.format(val), fmat.format(valtype(val)),

182:             assert_(False,

194:         assert_equal(str(np.float32(1.2)), str(float(1.2)))

197:         assert_equal(str(np.double(1.2)), str(float(1.2)))

200:         assert_equal(str(np.longdouble('1.2')), str(float(1.2)))

Total asserts: 17

Filename: numpy/core/tests/test_half.py
6: from numpy.testing import assert_, assert_equal

9: def assert_raises_fpe(strmatch, callable, *args, **kwargs)
13:         assert_(str(exc).find(strmatch) >= 0,

16:         assert_(False,

48:         assert_equal(self.all_f16.view(dtype=uint16),

53:         assert_equal(self.all_f16.view(dtype=uint16),

61:         assert_equal(self.nonan_f16.view(dtype=uint16),

68:         assert_equal(i_int, j)

74:         assert np.promote_types(np.float16, string_dt) == expected_dt

75:         assert np.promote_types(string_dt, np.float16) == expected_dt

78:         assert arr.dtype == expected_dt

83:         assert string.astype(np.float16) == np.array(3.1416, dtype=np.float16)

139:         assert_equal(res_patterns, cmp_patterns)

150:         assert smallest_value == 2**-24

154:         assert rounded_to_zero.astype(np.float16) == 0

162:             assert larger_value.astype(np.float16) == smallest_value

167:             assert_equal(np.isnan(self.all_f16), np.isnan(self.all_f32))

168:             assert_equal(np.isinf(self.all_f16), np.isinf(self.all_f32))

169:             assert_equal(np.isfinite(self.all_f16), np.isfinite(self.all_f32))

170:             assert_equal(np.signbit(self.all_f16), np.signbit(self.all_f32))

171:             assert_equal(np.spacing(float16(65504)), np.inf)

176:             assert_(not (self.all_f16 == nan).any())

177:             assert_(not (nan == self.all_f16).any())

179:             assert_((self.all_f16 != nan).all())

180:             assert_((nan != self.all_f16).all())

182:             assert_(not (self.all_f16 < nan).any())

183:             assert_(not (nan < self.all_f16).any())

185:             assert_(not (self.all_f16 <= nan).any())

186:             assert_(not (nan <= self.all_f16).any())

188:             assert_(not (self.all_f16 > nan).any())

189:             assert_(not (nan > self.all_f16).any())

191:             assert_(not (self.all_f16 >= nan).any())

192:             assert_(not (nan >= self.all_f16).any())

213:         assert_equal(a, b)

237:         assert_equal(b, rounded)

242:         assert_equal(b, rounded)

265:             assert_equal(self.finite_f32, a_manual,

274:             assert_equal(self.finite_f64, a_manual,

292:         assert_equal(a, b)

295:         assert_((a[
296:         assert_(not (a[
297:         assert_((a[1
298:         assert_(not (a[1
300:         assert_equal(np.nonzero(a[
301:         assert_equal(np.nonzero(a[1
307:         assert_equal(np.arange(10, dtype=float16),

313:         assert_equal(a, np.ones((5,), dtype=float16))

317:         assert_equal(a.nonzero()[0],

320:         assert_equal(a.nonzero()[0],

326:         assert_equal(np.dot(a, b),

331:         assert_equal(a.argmax(),

334:         assert_equal(a.argmax(),

340:             assert_equal(a.item(i), i)

350:         assert_equal(np.spacing(a_f16[
352:         assert_equal(np.nextafter(a_f16[
353:         assert_equal(np.nextafter(a_f16[0], -hinf), -a_f16[1])

354:         assert_equal(np.nextafter(a_f16[1
356:         assert_equal(np.nextafter(hinf, a_f16), a_f16[-1])

357:         assert_equal(np.nextafter(-hinf, a_f16), -a_f16[-1])

359:         assert_equal(np.nextafter(hinf, hinf), hinf)

360:         assert_equal(np.nextafter(hinf, -hinf), a_f16[-1])

361:         assert_equal(np.nextafter(-hinf, hinf), -a_f16[-1])

362:         assert_equal(np.nextafter(-hinf, -hinf), -hinf)

364:         assert_equal(np.nextafter(a_f16, hnan), hnan[0])

365:         assert_equal(np.nextafter(hnan, a_f16), hnan[0])

367:         assert_equal(np.nextafter(hnan, hnan), hnan)

368:         assert_equal(np.nextafter(hinf, hnan), hnan)

369:         assert_equal(np.nextafter(hnan, hinf), hnan)

374:         assert_equal(np.spacing(a_f16[0]), np.spacing(a_f16[1]))

375:         assert_equal(np.spacing(a_f16[1
377:         assert_equal(np.nextafter(a_f16[0], hinf), -a_f16[1])

378:         assert_equal(np.nextafter(a_f16[1
379:         assert_equal(np.nextafter(a_f16[
381:         assert_equal(np.nextafter(hinf, a_f16), -a_f16[-1])

382:         assert_equal(np.nextafter(-hinf, a_f16), a_f16[-1])

384:         assert_equal(np.nextafter(a_f16, hnan), hnan[0])

385:         assert_equal(np.nextafter(hnan, a_f16), hnan[0])

394:         assert_equal(np.add(a, b), [-2, 6, 3, 8, 5])

395:         assert_equal(np.subtract(a, b), [2, -4, 1, 0, -1])

396:         assert_equal(np.multiply(a, b), [0, 5, 2, 16, 6])

397:         assert_equal(np.divide(a, b), [0, 0.199951171875, 2, 1, 0.66650390625])

399:         assert_equal(np.equal(a, b), [False, False, False, True, False])

400:         assert_equal(np.not_equal(a, b), [True, True, True, False, True])

401:         assert_equal(np.less(a, b), [False, True, False, False, True])

402:         assert_equal(np.less_equal(a, b), [False, True, False, True, True])

403:         assert_equal(np.greater(a, b), [True, False, True, False, False])

404:         assert_equal(np.greater_equal(a, b), [True, False, True, True, False])

405:         assert_equal(np.logical_and(a, b), [False, True, True, True, True])

406:         assert_equal(np.logical_or(a, b), [True, True, True, True, True])

407:         assert_equal(np.logical_xor(a, b), [True, False, False, False, False])

408:         assert_equal(np.logical_not(a), [True, False, False, False, False])

410:         assert_equal(np.isnan(c), [False, False, False, True, False])

411:         assert_equal(np.isinf(c), [False, False, True, False, False])

412:         assert_equal(np.isfinite(c), [True, True, False, False, True])

413:         assert_equal(np.signbit(b), [True, False, False, False, False])

415:         assert_equal(np.copysign(b, a), [2, 5, 1, 4, 3])

417:         assert_equal(np.maximum(a, b), [0, 5, 2, 4, 3])

420:         assert_(np.isnan(x[3]))

422:         assert_equal(x, [0, 5, 1, 0, 6])

424:         assert_equal(np.minimum(a, b), [-2, 1, 1, 4, 2])

427:         assert_(np.isnan(x[3]))

429:         assert_equal(x, [-2, -1, -np.inf, 0, 3])

431:         assert_equal(np.fmax(a, b), [0, 5, 2, 4, 3])

432:         assert_equal(np.fmax(b, c), [0, 5, 1, 4, 6])

433:         assert_equal(np.fmin(a, b), [-2, 1, 1, 4, 2])

434:         assert_equal(np.fmin(b, c), [-2, -1, -np.inf, 4, 3])

436:         assert_equal(np.floor_divide(a, b), [0, 0, 2, 1, 0])

437:         assert_equal(np.remainder(a, b), [0, 1, 0, 0, 2])

438:         assert_equal(np.divmod(a, b), ([0, 0, 2, 1, 0], [0, 1, 0, 0, 2]))

439:         assert_equal(np.square(b), [4, 25, 1, 16, 9])

440:         assert_equal(np.reciprocal(b), [-0.5, 0.199951171875, 1, 0.25, 0.333251953125])

441:         assert_equal(np.ones_like(b), [1, 1, 1, 1, 1])

442:         assert_equal(np.conjugate(b), b)

443:         assert_equal(np.absolute(b), [2, 5, 1, 4, 3])

444:         assert_equal(np.negative(b), [2, -5, -1, -4, -3])

445:         assert_equal(np.positive(b), b)

446:         assert_equal(np.sign(b), [-1, 1, 1, 1, 1])

447:         assert_equal(np.modf(b), ([0, 0, 0, 0, 0], b))

448:         assert_equal(np.frexp(b), ([-0.5, 0.625, 0.5, 0.5, 0.75], [2, 3, 1, 3, 2]))

449:         assert_equal(np.ldexp(b, [0, 1, 2, 4, 2]), [-2, 10, 4, 64, 12])

458:         assert_equal(np.power(a16, 2).dtype, float16)

459:         assert_equal(np.power(a16, 2.0).dtype, float16)

460:         assert_equal(np.power(a16, b16).dtype, float16)

461:         assert_equal(np.power(a16, b32).dtype, float16)

462:         assert_equal(np.power(a16, a16).dtype, float16)

463:         assert_equal(np.power(a16, a32).dtype, float32)

465:         assert_equal(np.power(b16, 2).dtype, float64)

466:         assert_equal(np.power(b16, 2.0).dtype, float64)

467:         assert_equal(np.power(b16, b16).dtype, float16)

468:         assert_equal(np.power(b16, b32).dtype, float32)

469:         assert_equal(np.power(b16, a16).dtype, float16)

470:         assert_equal(np.power(b16, a32).dtype, float32)

472:         assert_equal(np.power(a32, a16).dtype, float32)

473:         assert_equal(np.power(a32, b16).dtype, float32)

474:         assert_equal(np.power(b32, a16).dtype, float16)

475:         assert_equal(np.power(b32, b16).dtype, float32)

487:             assert_raises_fpe('underflow', lambda a, b
488:             assert_raises_fpe('underflow', lambda a, b
489:             assert_raises_fpe('underflow', lambda a, b
490:             assert_raises_fpe('underflow', lambda a, b
491:             assert_raises_fpe('underflow', lambda a, b
492:             assert_raises_fpe('underflow', lambda a, b
493:             assert_raises_fpe('underflow', lambda a, b
494:             assert_raises_fpe('underflow', lambda a, b
495:             assert_raises_fpe('underflow', lambda a, b
497:             assert_raises_fpe('underflow', lambda a, b
499:             assert_raises_fpe('underflow', lambda a, b
501:             assert_raises_fpe('underflow', lambda a, b
503:             assert_raises_fpe('underflow', lambda a, b
507:             assert_raises_fpe('overflow', lambda a, b
508:             assert_raises_fpe('overflow', lambda a, b
509:             assert_raises_fpe('overflow', lambda a, b
510:             assert_raises_fpe('overflow', lambda a, b
511:             assert_raises_fpe('overflow', lambda a, b
512:             assert_raises_fpe('overflow', lambda a, b
513:             assert_raises_fpe('overflow', lambda a, b
514:             assert_raises_fpe('overflow', lambda a, b
515:             assert_raises_fpe('overflow', lambda a, b
517:             assert_raises_fpe('overflow', lambda a, b
519:             assert_raises_fpe('overflow', np.nextafter, float16(65504), float16(np.inf))

520:             assert_raises_fpe('overflow', np.nextafter, float16(-65504), float16(-np.inf))

521:             assert_raises_fpe('overflow', np.spacing, float16(65504))

524:             assert_raises_fpe('invalid', np.divide, float16(np.inf), float16(np.inf))

525:             assert_raises_fpe('invalid', np.spacing, float16(np.inf))

526:             assert_raises_fpe('invalid', np.spacing, float16(np.nan))

553:         assert_(c.dtype == float16)

554:         assert_equal(a, c)

Total asserts: 167

Filename: numpy/core/tests/test_arraymethod.py
73:         assert isinstance(alias, types.GenericAlias)

74:         assert alias.__origin__ is cls

80:             assert np.ndarray[arg_tup]

Total asserts: 3

Filename: numpy/core/tests/test_mem_overlap.py
9:     assert_, assert_raises, assert_equal, assert_array_equal

65:     assert_(np.all(arr == cpy),

118:                 assert_(X_simplified is None, (A, U, b, X_simplified))

129:                     assert_(not any(sum(w) == b for w in itertools.product(*ranges)))

134:                 assert_(X_simplified is not None, (A, U, b, X_simplified))

137:                 assert_(sum(a*x for a, x in zip(A, X)) == b)

138:                 assert_(all(0 <= x <= ub for x, ub in zip(X, U)))

154:         assert_equal(solve_diophantine(A, U, b), (1, 1))

160:     assert_equal(np.may_share_memory(a, b),

180:     assert_equal(got, exact, err_msg=err_msg)

201:         assert_(np.may_share_memory(x[
202:         assert_(np.may_share_memory(x[
341:             # assert_equal is slow...

342:             assert_equal(easy_answer, exact_answer)

345:             assert_equal(may_share_answer, bounds_overlap)

381:     assert_equal(np.shares_memory(x, x), True)

382:     assert_equal(np.shares_memory(x, x.copy()), False)

386:     assert_equal(np.shares_memory(a, b), True)

387:     assert_equal(np.shares_memory(a, b, max_work=None), True)

388:     assert_raises(np.TooHardError, np.shares_memory, a, b, max_work=1)

393:     assert_raises(OverflowError, np.may_share_memory, x, x, max_work=10**100)

394:     assert_raises(OverflowError, np.shares_memory, x, x, max_work=10**100)

405:             assert_(sum(a*x for a, x in zip(A, X)) == sum(a*u//2 for a, u in zip(A, U)))

406:             assert_(all(0 <= x <= u for x, u in zip(X, U)))

407:             assert_(any(x != u//2 for x, u in zip(X, U)))

410:             assert_(X is not None, repr(X))

412:             assert_(X is None, repr(X))

446:         assert_(not internal_overlap(a))

468:         assert_equal(got, expected, err_msg=repr((a.strides, a.shape)))

470:         assert_equal(expected, manual_expected)

560:         assert_(np.may_share_memory(cls(x[
561:         assert_(not np.shares_memory(cls(x[
563:         assert_(np.shares_memory(cls(x[1
564:         assert_(np.may_share_memory(cls(x[1
576: def assert_copy_equivalent(operation, args, out, **kwargs)
594:         assert_equal(got, expected)

623:                     assert_copy_equivalent(operation, [a], out=b)

652:                                 assert b.shape[axis] >= outsize

663:                         assert_copy_equivalent(operation, [a], out=b_out, axis=axis)

721:             assert_array_equal(c1, c2)

773:                     assert_copy_equivalent(gufunc, [a], out=b)

788:             assert_array_equal(c1, c2)

809:             assert_array_equal(c1, c2)

827:             assert_array_equal(c1, c2)

828:             assert_array_equal(c1, c3)

874:             assert_array_equal(c1, c2)

890:             assert_array_equal(c1, c2)

931:         assert_array_equal(x - x.T, 0)

Total asserts: 48

Filename: numpy/core/tests/test_shape_base.py
10:     assert_, assert_raises, assert_array_equal, assert_equal,

11:     assert_raises_regex, assert_warns, IS_PYPY

21:         assert_array_equal(res, desired)

28:         assert_array_equal(res, desired)

35:         assert_array_equal(res, desired)

44:         assert_array_equal(res, desired)

49:         assert_(atleast_1d(3).shape == (1,))

50:         assert_(atleast_1d(3j).shape == (1,))

51:         assert_(atleast_1d(3.0).shape == (1,))

52:         assert_(atleast_1d([[2, 3], [4, 5]]).shape == (2, 2))

61:         assert_array_equal(res, desired)

68:         assert_array_equal(res, desired)

75:         assert_array_equal(res, desired)

84:         assert_array_equal(res, desired)

89:         assert_(atleast_2d(3).shape == (1, 1))

90:         assert_(atleast_2d([3j, 1]).shape == (1, 2))

91:         assert_(atleast_2d([[[3, 1], [4, 5]], [[3, 5], [1, 2]]]).shape == (2, 2, 2))

100:         assert_array_equal(res, desired)

107:         assert_array_equal(res, desired)

114:         assert_array_equal(res, desired)

123:         assert_array_equal(res, desired)

128:         assert_raises(TypeError, hstack, 1)

131:         assert_raises(ValueError, hstack, ())

138:         assert_array_equal(res, desired)

145:         assert_array_equal(res, desired)

152:         assert_array_equal(res, desired)

155:         with assert_warns(FutureWarning)
157:         with assert_warns(FutureWarning)
163:         assert_raises(TypeError, vstack, 1)

166:         assert_raises(ValueError, vstack, ())

173:         assert_array_equal(res, desired)

180:         assert_array_equal(res, desired)

187:         assert_array_equal(res, desired)

194:         assert_array_equal(res, desired)

197:         with assert_warns(FutureWarning)
206:         assert b[0, 0] != a[0, 0]

213:             assert_raises(np.AxisError, np.concatenate, (a, a), axis=ndim)

214:             assert_raises(np.AxisError, np.concatenate, (a, a), axis=-(ndim + 1))

217:         assert_raises(ValueError, concatenate, (0,))

218:         assert_raises(ValueError, concatenate, (np.array(0),))

221:         assert_raises_regex(

234:             assert_raises_regex(

241:             assert_raises(ValueError, np.concatenate, (a, b), axis=axis[2])

247:         assert_raises(ValueError, concatenate, ())

254:         assert_equal(r.dtype, a.dtype)

255:         assert_equal(r.ndim, 1)

257:         assert_equal(r.size, a.size + len(b))

258:         assert_equal(r.dtype, a.dtype)

262:         assert_array_equal(r, d)

267:         assert_(out is rout)

268:         assert_equal(r, rout)

275:         assert_array_equal(x, r)

279:         assert_array_equal(x, r)

285:         assert_array_equal(concatenate((r4,)), r4)

287:         assert_array_equal(concatenate((tuple(r4),)), r4)

288:         assert_array_equal(concatenate((array(r4),)), r4)

291:         assert_array_equal(concatenate((r4, r3)), r4 + r3)

293:         assert_array_equal(concatenate((tuple(r4), r3)), r4 + r3)

294:         assert_array_equal(concatenate((array(r4), r3)), r4 + r3)

296:         assert_array_equal(concatenate((r4, r3), 0), r4 + r3)

298:         assert_array_equal(concatenate((r4, r3), -1), r4 + r3)

303:         assert_array_equal(concatenate((a23, a13)), res)

304:         assert_array_equal(concatenate((a23, a13), 0), res)

305:         assert_array_equal(concatenate((a23.T, a13.T), 1), res.T)

306:         assert_array_equal(concatenate((a23.T, a13.T), -1), res.T)

308:         assert_raises(ValueError, concatenate, (a23.T, a13.T), 0)

314:         assert_array_equal(concatenate((a0, a1, a2), 2), res)

315:         assert_array_equal(concatenate((a0, a1, a2), -1), res)

316:         assert_array_equal(concatenate((a0.T, a1.T, a2.T), 0), res.T)

320:         assert_(out is rout)

321:         assert_equal(res, rout)

330:         assert_raises(TypeError, operator.concat, a, b)

331:         assert_raises(TypeError, operator.concat, a, n)

332:         assert_raises(TypeError, operator.concat, n, a)

333:         assert_raises(TypeError, operator.concat, a, 1)

334:         assert_raises(TypeError, operator.concat, 1, a)

340:         assert_raises(ValueError, concatenate, (a, b), out=np.empty(5))

341:         assert_raises(ValueError, concatenate, (a, b), out=np.empty((4,1)))

342:         assert_raises(ValueError, concatenate, (a, b), out=np.empty((1,4)))

355:             with assert_raises(TypeError)
357:             with assert_raises(TypeError)
365:             assert res_out is out

366:             assert_array_equal(out, res_dtype)

367:             assert res_dtype.dtype == out_dtype

369:         with assert_raises(TypeError)
381:         assert res.dtype == np.array(1.).astype(string_dt).dtype

398:     assert_raises(TypeError, stack, 1)

404:         assert_array_equal(stack(input_), [1, 2, 3])

409:     assert_array_equal(np.stack((a, b)), r1)

410:     assert_array_equal(np.stack((a, b), axis=1), r1.T)

412:     assert_array_equal(np.stack(list([a, b])), r1)

413:     assert_array_equal(np.stack(array([a, b])), r1)

419:         assert_equal(np.stack(arrays, axis).shape, expected_shape)

420:     assert_raises_regex(np.AxisError, 'out of bounds', stack, arrays, axis=2)

421:     assert_raises_regex(np.AxisError, 'out of bounds', stack, arrays, axis=-3)

428:         assert_equal(np.stack(arrays, axis).shape, expected_shape)

430:     assert_(stack([[], [], []]).shape == (3, 0))

431:     assert_(stack([[], [], []], axis=1).shape == (0, 3))

435:     assert_array_equal(out, r1)

437:     assert_raises_regex(ValueError, 'need at least one array', stack, [])

438:     assert_raises_regex(ValueError, 'must have the same shape',

440:     assert_raises_regex(ValueError, 'must have the same shape',

442:     assert_raises_regex(ValueError, 'must have the same shape',

444:     assert_raises_regex(ValueError, 'must have the same shape',

446:     assert_raises_regex(ValueError, 'must have the same shape',

449:     with assert_warns(FutureWarning)
451:     assert_array_equal(result, np.array([0, 1, 2]))

485:         assert b[0, 0] != a[0, 0]

489:         assert total_size == 1

492:         assert total_size == 1

495:         assert total_size == 2

498:         assert total_size == 2

501:         assert total_size == 4

509:         assert_equal(desired, result)

519:         assert_equal(expected, result)

527:         assert_equal(expected, result)

535:         assert_equal(expected, result)

544:         assert_equal(expected, result)

553:         assert_equal(expected, result)

577:         assert_equal(result, expected)

607:         assert_equal(result, expected)

662:         assert_array_equal(result, expected)

667:         assert_raises(ValueError, block, [a, b])

668:         assert_raises(ValueError, block, [b, a])

672:         assert_raises(ValueError, block, to_block)

674:         assert_equal(block(1),         np.array(1))

675:         assert_equal(block(np.eye(3)), np.eye(3))

679:         assert_raises_regex(ValueError, msg, block, [1, [2]])

680:         assert_raises_regex(ValueError, msg, block, [1, []])

681:         assert_raises_regex(ValueError, msg, block, [[1], 2])

682:         assert_raises_regex(ValueError, msg, block, [[], 2])

683:         assert_raises_regex(ValueError, msg, block, [

690:         assert_raises_regex(ValueError, 'empty', block, [])

691:         assert_raises_regex(ValueError, 'empty', block, [[]])

692:         assert_raises_regex(ValueError, 'empty', block, [[1], []])

695:         assert_raises_regex(TypeError, 'tuple', block, ([1, 2], [3, 4]))

696:         assert_raises_regex(TypeError, 'tuple', block, [(1, 2), (3, 4)])

706:         assert_equal(result, expected)

718:         assert_equal(result, expected)

735:         assert block(b_c).flags['C_CONTIGUOUS']

736:         assert block(b_f).flags['F_CONTIGUOUS']

747:         assert block(b_c).flags['C_CONTIGUOUS']

748:         assert block(b_f).flags['F_CONTIGUOUS']

757:     assert_equal(list(_block_dispatcher(a)), [a])

758:     assert_equal(list(_block_dispatcher([a])), [a])

759:     assert_equal(list(_block_dispatcher([a, b])), [a, b])

760:     assert_equal(list(_block_dispatcher([[a], [b, [c]]])), [a, b, c])

762:     assert_equal(list(_block_dispatcher((a, b))), [(a, b)])

Total asserts: 148

Filename: numpy/core/tests/test_hashtable.py
25:     assert res is expected

Total asserts: 1

Filename: numpy/core/tests/test_array_interface.py
182:     assert np.allclose(arr, expected_value)

211:     assert np.allclose(arr, expected_value)

Total asserts: 2

Filename: numpy/core/tests/test_deprecations.py
16:     assert_raises, assert_warns, assert_, assert_array_equal, SkipTest,

52:     def assert_deprecated(self, function, num=1, ignore_others=False,

125:     def assert_not_deprecated(self, function, args=(), kwargs={})
130:         self.assert_deprecated(function, num=0, ignore_others=True,

133:         self.assert_deprecated(function, num=0, ignore_others=True,

155:             self.assert_deprecated(op, args=(np.zeros(3), []))

158:             self.assert_deprecated(op, args=(a, a[
163:             self.assert_deprecated(op, args=(a, b), num=None)

169:         assert_raises(ValueError, lambda x, y
174:         assert_warns(FutureWarning, lambda
185:         self.assert_deprecated(lambda
186:         self.assert_deprecated(lambda
191:         assert_warns(FutureWarning, lambda
192:         assert_warns(FutureWarning, lambda
193:         assert_warns(FutureWarning, lambda
194:         assert_warns(FutureWarning, lambda
197:         # It doesn't really work to use assert_deprecated here, b/c part of

198:         # the point of assert_deprecated is to check that when warnings are

202:         # different warnings. So assert_warns will have to be sufficient.

203:         assert_warns(FutureWarning, lambda
204:         assert_warns(FutureWarning, lambda
208:             assert_(not (np.array(0) == "a"))

209:             assert_(np.array(0) != "a")

210:             assert_(not (np.int16(0) == "a"))

211:             assert_(np.int16(0) != "a")

219:                         assert_raises(TypeError, f, arg1, arg2)

220:                         assert_(not l)

233:         self.assert_deprecated(np.datetime64, args=('2000-01-01T00+01',))

234:         self.assert_deprecated(np.datetime64, args=('2000-01-01T00Z',))

241:         self.assert_deprecated(np.datetime64, args=(dt,))

259:         self.assert_deprecated(a.__setattr__, args=('data', b.data))

277:         self.assert_deprecated(np.binary_repr, args=args, kwargs=kwargs)

285:         self.assert_deprecated(np.binary_repr, args=args, kwargs=kwargs)

299:         self.assert_deprecated(lambda
300:         self.assert_deprecated(lambda
301:         self.assert_deprecated(lambda
302:         self.assert_deprecated(lambda
306:     def test_assert_deprecated(self)
309:         assert_raises(AssertionError,

310:                       test_case_instance.assert_deprecated,

316:         test_case_instance.assert_deprecated(foo)

327:             self.assert_not_deprecated(a.conjugate)

330:             self.assert_deprecated(a.conjugate)

337:         self.assert_deprecated(npy_char_deprecation)

338:         assert_(npy_char_deprecation() == 'S1')

344:         assert_raises(NotImplementedError, npy_pyarrayas1d_deprecation)

350:         assert_raises(NotImplementedError, npy_pyarrayas2d_deprecation)

358:             self.assert_not_deprecated(cls, args=(1, ('ms', 2)))

359:             self.assert_not_deprecated(cls, args=(1, ('ms', 2, 1, None)))

363:             self.assert_deprecated(cls, args=(1, ('ms', 2, 'event')))

364:             self.assert_deprecated(cls, args=(1, ('ms', 2, 63)))

365:             self.assert_deprecated(cls, args=(1, ('ms', 2, 1, 'event')))

366:             self.assert_deprecated(cls, args=(1, ('ms', 2, 1, 63)))

374:         self.assert_deprecated(bool, args=(np.array([]),))

377:         self.assert_deprecated(bool, args=(np.zeros((1, 0)),))

378:         self.assert_deprecated(bool, args=(np.zeros((0, 1)),))

379:         self.assert_deprecated(bool, args=(np.zeros((0, 0)),))

385:         self.assert_deprecated(lambda
392:         self.assert_deprecated(np.sum, args=((i for i in range(5)),))

398:         self.assert_deprecated(operator.pos, args=(np.array('foo'),))

404:         self.assert_deprecated(np.fromstring, args=('\x00'*80,))

421:             self.assert_deprecated(lambda
423:             self.assert_deprecated(lambda
429:                 assert_array_equal(res, x)

436:         self.assert_deprecated(lambda
437:         self.assert_deprecated(lambda
442:         self.assert_deprecated(lambda
444:         with assert_warns(DeprecationWarning)
449:             assert_array_equal(res[
456:             assert_array_equal(res, x)

463:         self.assert_deprecated(getset_numericops, num=2)

467:         self.assert_deprecated(np.set_numeric_ops, kwargs={})

468:         assert_raises(ValueError, np.set_numeric_ops, add='abc')

476:         self.assert_deprecated(np.dtype, args=([('a', int, 1)],))

482:         self.assert_deprecated(lambda
483:         self.assert_deprecated(lambda
494:     with assert_warns(np.VisibleDeprecationWarning)
507:         self.assert_not_deprecated(np.array, args=(nested,))

508:         self.assert_not_deprecated(np.array,

511:         self.assert_deprecated(np.array, args=([nested],))

520:         self.assert_deprecated(arr.tostring)

525:         with assert_warns(DeprecationWarning)
527:         assert s == b

544:             self.assert_deprecated(np.dtype, args=(scalar_type,))

548:             self.assert_deprecated(np.array, args=([], scalar_type,))

554:                 self.assert_not_deprecated(np.dtype, args=(scalar_type,))

558:             self.assert_not_deprecated(np.dtype, args=(scalar_type,))

573:             self.assert_deprecated(round, args=(scalar,))

574:             self.assert_deprecated(round, args=(scalar, 0))

575:             self.assert_deprecated(round, args=(scalar,), kwargs={'ndigits'
580:             self.assert_not_deprecated(round, args=(scalar,))

581:             self.assert_not_deprecated(round, args=(scalar, 0))

582:             self.assert_not_deprecated(round, args=(scalar,), kwargs={'ndigits'
594:         self.assert_deprecated(arr.__getitem__, args=(index,))

595:         self.assert_deprecated(arr.__setitem__, args=(index, 0.))

600:         self.assert_deprecated(arr2.__getitem__, args=(index2,))

601:         self.assert_deprecated(arr2.__setitem__, args=(index2, 0.))

607:         self.assert_not_deprecated(arr.__getitem__, args=(index,))

608:         self.assert_not_deprecated(arr.__setitem__,

617:         self.assert_deprecated(lambda
619:         self.assert_deprecated(lambda
629:         self.assert_deprecated(lambda
630:         self.assert_deprecated(lambda
631:         self.assert_deprecated(lambda
632:         self.assert_deprecated(lambda
633:         self.assert_deprecated(lambda
634:         self.assert_deprecated(lambda
637:         self.assert_deprecated(lambda
638:         self.assert_deprecated(lambda
641:         self.assert_deprecated(lambda
652:         self.assert_deprecated(np.add.outer, args=(m, m), num=2)

653:         self.assert_deprecated(np.add.outer, args=(arr, m))

654:         self.assert_deprecated(np.add.outer, args=(m, arr))

655:         self.assert_not_deprecated(np.add.outer, args=(arr, arr))

665:         self.assert_deprecated(lambda
666:         self.assert_deprecated(lambda
668:         self.assert_deprecated(lambda
669:         self.assert_deprecated(lambda
677:         self.assert_deprecated(np.concatenate,

682:         self.assert_not_deprecated(np.concatenate,

687:         with assert_raises(TypeError)
701:         self.assert_deprecated(lambda
705:         assert_array_equal(res, [[1, 2], [1, 2]])

707:         self.assert_deprecated(lambda
711:         assert_array_equal(res, [[1, 2], [1, 2]])

716:         assert_array_equal(res, [[[1, 1], [2, 2]], [[1, 2], [1, 2]]])

726:         self.assert_deprecated(check)

732:         self.assert_deprecated(check)

753:         self.assert_deprecated(lambda
764:         self.assert_not_deprecated(lambda
768:         assert_array_equal(res, expected)

777:         self.assert_not_deprecated(lambda
779:         assert_array_equal(res, blueprint)

796:         assert res.shape == (1, 1)

797:         assert res.dtype == "f4"

798:         assert res[0, 0] == 0.5

815:         self.assert_not_deprecated(set)

816:         assert res[0] is myarr

817:         assert res[1] is myarr

818:         assert res[2] is myarr

832:         self.assert_deprecated(lambda
855:             assert_(slow_func.slow)

856:         self.assert_deprecated(_test_slow)

872:             assert_(f_default.__test__)

873:             assert_(f_istest.__test__)

874:             assert_(not f_isnottest.__test__)

875:         self.assert_deprecated(_test_setastest, num=3)

900:         self.assert_deprecated(_test_skip_functions_hardcoded, num=2)

930:         self.assert_deprecated(_test_skip_functions_callable, num=2)

958:         self.assert_deprecated(_test_skip_generators_hardcoded, num=2)

991:         self.assert_deprecated(_test_skip_generators_callable, num=2)

1016:             assert_raises(AssertionError, non_deprecated_func)

1022:                 assert_raises(ValueError, deprecated_func2)

1024:                 assert_raises(AssertionError, deprecated_func3)

1025:         self.assert_deprecated(_test_deprecated, num=4)

1037:                 assert_(base**power == expected)

1043:             assert_(count == 3)

1044:         self.assert_deprecated(_test_parametrize)

1052:         self.assert_deprecated(lambda
1053:         self.assert_deprecated(lambda
1061:         self.assert_deprecated(lambda
1063:         self.assert_deprecated(lambda
1076:         self.assert_deprecated(lambda
1077:         self.assert_deprecated(

1091:         self.assert_deprecated(lambda
1097:         self.assert_not_deprecated(lambda
1106:         # it if the `assert int64 is not int64_2` should start failing.

1109:         assert int64 is not int64_2

1110:         self.assert_not_deprecated(lambda
1114:         self.assert_deprecated(lambda
1115:         self.assert_deprecated(lambda
1148:         self.assert_deprecated(lambda
1149:         self.assert_deprecated(lambda
1152:         self.assert_not_deprecated(lambda
1153:         self.assert_not_deprecated(lambda
1161:         self.assert_deprecated(lambda
1164:         self.assert_deprecated(lambda
1168:         self.assert_deprecated(lambda
1176:         self.assert_deprecated(

1178:         self.assert_deprecated(

1218:         self.assert_deprecated(lambda
Total asserts: 181

Filename: numpy/core/tests/test_errstate.py
5: from numpy.testing import assert_, assert_raises

24:             with assert_raises(FloatingPointError)
36:             with assert_raises(FloatingPointError)
39:             with assert_raises(FloatingPointError)
48:             assert_(np.geterrcall() is foo, 'call is not foo')

50:                 assert_(np.geterrcall() is None, 'call is not None')

51:         assert_(np.geterrcall() is olderrcall, 'call is not olderrcall')

Total asserts: 7

Filename: numpy/core/tests/test_records.py
10:     assert_, assert_equal, assert_array_equal, assert_array_almost_equal,

11:     assert_raises, temppath,

20:         assert_equal(r[0].item(), (456, 'dbe', 1.2))

21:         assert_equal(r['col1'].dtype.kind, 'i')

22:         assert_equal(r['col2'].dtype.kind, 'U')

23:         assert_equal(r['col2'].dtype.itemsize, 12)

24:         assert_equal(r['col3'].dtype.kind, 'f')

30:         assert_equal(r.shape, (0,))

42:         assert_equal(r1['a'], expected_a)

43:         assert_equal(r1['b'], expected_b)

47:         assert_equal(r2['a'], expected_a)

48:         assert_equal(r2['b'], expected_b)

50:         assert_equal(r1, r2)

54:         assert_equal(r[1].item(), (25444, b'efg', 1633837924))

59:         assert_equal(r[1].item(), (2, 22.0, b'b'))

64:         assert_equal(r[1
71:         assert_equal(r[1].item(), (2, 'dd', 2.0))

73:         assert_equal(r.a, np.array([1, 2, 3, 4]))

89:         assert_equal(r1, r2)

90:         assert_equal(r2, r3)

102:             assert_((mine.date[i] == list(range(1, 10))))

103:             assert_((mine.data1[i] == 0.0))

104:             assert_((mine.data2[i] == 0.0))

110:         assert_equal(

119:         assert_(repr(np.rec.array(a)).startswith('rec.array'))

123:         assert_equal(repr(a).find('numpy.record'), -1)

125:         assert_(repr(a).find('dtype=int32') != -1)

129:         assert_equal(repr(arr_0d), textwrap.dedent("""\

134:         assert_equal(repr(record), "(1, 2., '2003')")

138:             assert_equal(repr(record), '(1, 2.0, datetime.date(2003, 1, 1))')

153:         assert_equal(type(recordarr_r), np.recarray)

154:         assert_equal(recordarr_r.dtype.type, np.record)

155:         assert_equal(recordarr, recordarr_r)

157:         assert_equal(type(recarr_r), np.recarray)

158:         assert_equal(recarr_r.dtype.type, np.record)

159:         assert_equal(recarr, recarr_r)

161:         assert_equal(type(recordview_r), np.ndarray)

162:         assert_equal(recordview.dtype.type, np.record)

163:         assert_equal(recordview, recordview_r)

171:         assert_equal(np.rec.array(a).dtype.type, np.record)

172:         assert_equal(type(np.rec.array(a)), np.recarray)

173:         assert_equal(np.rec.array(b).dtype.type, np.int64)

174:         assert_equal(type(np.rec.array(b)), np.recarray)

177:         assert_equal(a.view(np.recarray).dtype.type, np.record)

178:         assert_equal(type(a.view(np.recarray)), np.recarray)

179:         assert_equal(b.view(np.recarray).dtype.type, np.int64)

180:         assert_equal(type(b.view(np.recarray)), np.recarray)

185:         assert_equal(type(rv), np.recarray)

186:         assert_equal(rv.dtype.type, np.record)

191:         assert_equal(r['c'].dtype.type, np.record)

192:         assert_equal(type(r['c']), np.recarray)

199:         assert_equal(type(c['c']), C)

207:         assert_equal(r.a.dtype.type, np.record)

208:         assert_equal(r.b.dtype.type, np.void)

209:         assert_equal(r.c.dtype.type, np.float32)

210:         assert_equal(r.d.dtype.type, np.int64)

213:         assert_equal(r.view('f4,f4').dtype.type, np.record)

214:         assert_equal(r.view(('i4',2)).dtype.type, np.int32)

215:         assert_equal(r.view('V8').dtype.type, np.void)

216:         assert_equal(r.view(('i8', 'i4,i4')).dtype.type, np.int64)

224:             assert_equal(arr2.dtype.type, arr.dtype.type)

225:             assert_equal(type(arr2), type(arr))

238:         assert_(ra.dtype == pa.dtype)

239:         assert_(ra.shape == pa.shape)

241:             assert_(ra[k].item() == pa[k].item())

248:         assert_array_almost_equal(ra['mean'], [1.1, 2.2, 3.3])

249:         assert_(type(ra.mean) is type(ra.var))

251:         assert_(ra.shape == (1, 3))

253:         assert_array_equal(ra['shape'], [['A', 'B', 'C']])

255:         assert_array_equal(ra['field'], [[5, 5, 5]])

256:         assert_(isinstance(ra.field, collections.abc.Callable))

261:         assert_equal(a.a, [1, 2])

262:         assert_equal(a[0].a, 1)

263:         assert_equal(a.b, ['a', 'bbb'])

264:         assert_equal(a[-1].b, 'bbb')

268:         assert_equal(a.a, [1, 2])

269:         assert_equal(a[0].a, 1)

270:         assert_equal(a.b, ['a', 'bbb'])

271:         assert_equal(a[-1].b, 'bbb')

278:         assert_equal(a.foo[0] == a.foo[1], False)

287:         assert_equal(type(a.foo), np.ndarray)

288:         assert_equal(type(a['foo']), np.ndarray)

289:         assert_equal(type(a.bar), np.recarray)

290:         assert_equal(type(a['bar']), np.recarray)

291:         assert_equal(a.bar.dtype.type, np.record)

292:         assert_equal(type(a['qux']), np.recarray)

293:         assert_equal(a.qux.dtype.type, np.record)

294:         assert_equal(dict(a.qux.dtype.fields), qux_fields)

295:         assert_equal(type(a.baz), np.ndarray)

296:         assert_equal(type(a['baz']), np.ndarray)

297:         assert_equal(type(a[0].bar), np.record)

298:         assert_equal(type(a[0]['bar']), np.record)

299:         assert_equal(a[0].bar.A, 1)

300:         assert_equal(a[0].bar['A'], 1)

301:         assert_equal(a[0]['bar'].A, 1)

302:         assert_equal(a[0]['bar']['A'], 1)

303:         assert_equal(a[0].qux.D, b'fgehi')

304:         assert_equal(a[0].qux['D'], b'fgehi')

305:         assert_equal(a[0]['qux'].D, b'fgehi')

306:         assert_equal(a[0]['qux']['D'], b'fgehi')

313:         assert_equal(rec['f0'], ['test', 'test', 'test'])

314:         assert_equal(rec['f1'], ['', '', ''])

318:         assert_equal(rec.itemsize, 4)

319:         assert_equal(rec['f0'], [b'test', b'test', b'test'])

320:         assert_equal(rec['f1'], [b'', b'', b''])

336:             assert_array_equal(x, a)

348:         assert_equal(a.col1[0], 1)

350:         assert_equal(a.col1[0], 0)

354:         assert_equal(a.col1[0], 1)

356:         assert_equal(a.col1[0], 0)

364:         assert_raises(AttributeError, assign_invalid_column, a)

370:         with assert_raises(ValueError)
372:         with assert_raises(ValueError)
378:         assert_equal(x.dtype.names, ('col1', 'col2'))

379:         assert_equal(x.dtype.descr,

385:         assert_equal(y.dtype.names, ('col2', 'col1'))

386:         assert_raises(ValueError, lambda
392:             assert_equal(a, pickle.loads(pickle.dumps(a, protocol=proto)))

393:             assert_equal(a[0], pickle.loads(pickle.dumps(a[0],

399:             assert_equal(a, pickle.loads(pickle.dumps(a, protocol=proto)))

400:             assert_equal(a[0], pickle.loads(pickle.dumps(a[0],

408:             assert_(pa.flags.c_contiguous)

409:             assert_(pa.flags.f_contiguous)

410:             assert_(pa.flags.writeable)

411:             assert_(pa.flags.aligned)

422:         assert ctor is np.core.multiarray.scalar

425:         assert not isinstance(obj, bytes)

427:         assert_raises(RuntimeError, ctor, dtype, 13)

432:         assert a[0] == unpickled

436:             assert ctor(np.dtype("O"), data) is data

452:         assert_equal(rec[0].x, np.ones(5))

457:         assert_raises(KeyError, lambda
472:         assert data.dtype.type == np.record

473:         assert dt.type != np.record

477:         assert data.dtype.type == np.record

486:         assert isinstance(data, np.recarray)

487:         assert isinstance(data['inner'], np.recarray)

490:         assert isinstance(data0, np.record)

491:         assert isinstance(data0['inner'], np.record)

498:         assert dt_padded_end.itemsize == dt.itemsize

503:         assert_equal(data['inner'].dtype, dt_padded_end)

506:         assert_equal(data0['inner'].dtype, dt_padded_end)

511:     assert_(np.rec.find_duplicate(l1) == [])

514:     assert_(np.rec.find_duplicate(l2) == [1])

517:     assert_(np.rec.find_duplicate(l3) == [1, 2])

520:     assert_(np.rec.find_duplicate(l3) == [2, 1])

Total asserts: 146

Filename: numpy/core/tests/test_mem_policy.py
8: from numpy.testing import extbuild, assert_warns

220:     assert get_handler_name(a) is None

221:     assert get_handler_version(a) is None

222:     assert get_handler_name(a.base) == orig_policy_name

223:     assert get_handler_version(a.base) == 1

228:     assert get_handler_name(b) is None

229:     assert get_handler_version(b) is None

230:     assert get_handler_name(b.base) == 'secret_data_allocator'

231:     assert get_handler_version(b.base) == 1

235:         assert get_handler_name() == 'default_allocator'

238:         assert get_handler_name() == orig_policy_name

247:     assert get_handler_name() == 'default_allocator'

252:     assert get_handler_name() == 'default_allocator'

259:     assert def_policy_1 is def_policy_2 is get_module.get_default_policy()

271:     assert get_handler_name(a) is None

272:     assert a.flags.owndata is False

274:     assert get_handler_name(a.base) is None

275:     assert a.base.flags.owndata is False

277:     assert get_handler_name(a.base.base) == orig_policy_name

278:     assert a.base.base.flags.owndata is True

284:         assert np.core.multiarray.get_handler_name() == 'secret_data_allocator'

287:         assert np.core.multiarray.get_handler_name() == 'default_allocator'

294:     assert np.core.multiarray.get_handler_name() == orig_policy_name

298:         assert np.core.multiarray.get_handler_name() == 'secret_data_allocator'

301:         assert np.core.multiarray.get_handler_name() == 'default_allocator'

317:     assert np.core.multiarray.get_handler_name() == orig_policy_name

329:     assert np.core.multiarray.get_handler_name() == 'secret_data_allocator'

336:     assert np.core.multiarray.get_handler_name() == 'default_allocator'

356:     assert np.core.multiarray.get_handler_name() == orig_policy_name

367:     assert np.core.multiarray.get_handler_name(b) == 'secret_data_allocator'

378:         assert np.core.test('full', verbose=2, extra_argv=['-vv'])

380:         assert np.ma.test('full', verbose=2, extra_argv=['-vv'])

385:     assert np.core.multiarray.get_handler_name(c) == orig_policy_name

393:     assert np.core.multiarray.get_handler_name(a) is None

405:             with assert_warns(RuntimeWarning) as w
Total asserts: 35

Filename: numpy/core/tests/test_simd.py
138:         assert vand == data_and

142:         assert vor == data_or

146:         assert vxor == data_xor

149:         assert vnot == data_b

157:             assert tobits == bin(data_bits)

176:             assert shl == data_shl_a

181:             assert shr == data_shr_a

189:             assert shli == data_shl_a

194:             assert shri == data_shr_a

206:         assert adds == data_adds

210:         assert subs == data_subs

219:         assert simd_max == data_max

223:         assert simd_min == data_min

246:         assert vround == data_round

263:         assert vround == data_round

275:         assert fma == data_fma

279:         assert fms == data_fms

283:         assert nfma == data_nfma

287:         assert nfms == data_nfms

298:             assert vabs == pytest.approx(data_abs, nan_ok=True)

301:         assert vabs == data

312:             assert sqrt == pytest.approx(data_sqrt, nan_ok=True)

316:         assert sqrt == data_sqrt

327:             assert square == pytest.approx(data_square, nan_ok=True)

331:         assert square == data_square

351:             assert _round == pytest.approx(data_round, nan_ok=True)

358:                 assert _round == data_round

369:             assert _round == data_round

382:         assert _max == data_max

384:         assert maxp == data_max

396:             assert maxp == pytest.approx(data_max, nan_ok=True)

400:             assert _max == data_max

413:         assert _min == data_min

415:         assert minp == data_min

427:             assert minp == pytest.approx(data_min, nan_ok=True)

431:             assert _min == data_min

442:             assert recip == pytest.approx(data_recip, nan_ok=True)

446:         assert recip == data_recip

454:         assert nnan == [0]*self.nlanes

464:         assert load_data == data

467:         assert loada_data == data

470:         assert loads_data == data

475:         assert loadl_half == data_half

476:         assert loadl != data # detect overflow

484:         assert store == data

488:         assert store_a == data

492:         assert store_s == data

496:         assert store_l[
497:         assert store_l != vdata # detect overflow

501:         assert store_h[
502:         assert store_h != vdata  # detect overflow

514:             assert load_till == data_till

517:             assert load_tillz == data_tillz

533:             assert store_till == data_till

543:             assert loadn == data_stride

549:             assert loadn == data_stride

563:                 assert loadn_till == data_stride_till

566:                 assert loadn_tillz == data_stride_tillz

574:                 assert loadn_till == data_stride_till

577:                 assert loadn_tillz == data_stride_tillz

590:             assert storen[
591:             assert storen[-64
599:             assert storen[64
600:             assert storen[
617:                 assert storen_till[
618:                 assert storen_till[-64
627:                 assert storen_till[64
628:                 assert storen_till[
649:             assert lut == broadi

653:         assert broadcast_zero == [0] * self.nlanes

656:             assert broadcasti == [i] * self.nlanes

664:         assert vset == data_a

668:         assert vsetf == data_a

678:             assert vec_name == "npyv_" + sfx

682:         assert select_a == data_a

684:         assert select_b == data_b

702:         assert combinel == data_a_lo + data_b_lo

705:         assert combineh == data_a_hi + data_b_hi

708:         assert combine == (data_a_lo + data_b_lo, data_a_hi + data_b_hi)

713:         assert vzip == (data_zipl, data_ziph)

725:         assert rev64 == data_rev64

741:         assert cmpeq == data_eq

745:         assert cmpneq == data_neq

749:         assert cmpgt == data_gt

753:         assert cmpge == data_ge

757:         assert cmplt == data_lt

761:         assert cmple == data_le

781:         assert vxor == data_xor

785:         assert vor == data_or

789:         assert vand == data_and

793:         assert vnot == data_not

802:         assert false_vb != true_vb

806:         assert false_vsfx != true_vsfx

826:         assert edata == (data_lo, data_hi)

839:         assert add == data_add

842:         assert sub == data_sub

857:         assert mul == data_mul

869:         assert div == data_div

916:             assert divc == data_divc

931:         assert vsum == data_sum

946:             assert vsum == data_sum

961:         assert ifsub == data_sub

963:         assert ifsub == vdata_b

967:         assert ifadd == data_add

969:         assert ifadd == vdata_b

Total asserts: 105

Filename: numpy/core/tests/test_scalarinherit.py
7: from numpy.testing import assert_, assert_raises

36:         assert_(str(x) == '1.0')

38:         assert_(str(y) == '2.0')

40:         assert_(str(z) == '3.0')

44:         assert_(str(x) == '1.0')

46:         assert_(str(y) == '2.0')

51:         assert_(str(x) == '1.0')

65:         assert_(np_s.__radd__(np_s) is NotImplemented)

66:         assert_(np_s.__radd__(np_u) is NotImplemented)

67:         assert_(np_s.__radd__(s) is NotImplemented)

68:         assert_(np_s.__radd__(u) is NotImplemented)

69:         assert_(np_u.__radd__(np_s) is NotImplemented)

70:         assert_(np_u.__radd__(np_u) is NotImplemented)

71:         assert_(np_u.__radd__(s) is NotImplemented)

72:         assert_(np_u.__radd__(u) is NotImplemented)

73:         assert_(s + np_s == b'defabc')

74:         assert_(u + np_u == u'defabc')

80:         with assert_raises(TypeError)
89:         assert(type(ret) is type(s))

90:         assert ret == b"defabc"

97:         assert_(np_s * 5 == res_s)

98:         assert_(np_u * 5 == res_u)

Total asserts: 22

Filename: numpy/core/tests/test_indexing.py
12:     assert_, assert_equal, assert_raises, assert_raises_regex,

13:     assert_array_equal, assert_warns, HAS_REFCOUNT,

21:         assert_raises(IndexError, lambda
22:         assert_raises(IndexError, lambda
23:         assert_raises(IndexError, lambda
24:         assert_raises(IndexError, lambda
25:         assert_raises(IndexError, lambda
26:         assert_raises(IndexError, lambda
27:         assert_raises(IndexError, lambda
28:         assert_raises(IndexError, lambda
29:         assert_raises(IndexError, lambda
30:         assert_raises(IndexError, lambda
31:         assert_raises(IndexError, lambda
32:         assert_raises(IndexError, lambda
33:         assert_raises(IndexError, lambda
34:         assert_raises(IndexError, lambda
35:         assert_raises(IndexError, lambda
36:         assert_raises(IndexError, lambda
37:         assert_raises(IndexError, lambda
38:         assert_raises(IndexError, lambda
39:         assert_raises(IndexError, lambda
40:         assert_raises(IndexError, lambda
41:         assert_raises(IndexError, lambda
42:         assert_raises(IndexError, lambda
48:         assert_raises(TypeError, lambda
49:         assert_raises(TypeError, lambda
50:         assert_raises(TypeError, lambda
51:         assert_raises(TypeError, lambda
52:         assert_raises(TypeError, lambda
54:         assert_raises(TypeError, lambda
55:         assert_raises(TypeError, lambda
56:         assert_raises(TypeError, lambda
57:         assert_raises(TypeError, lambda
58:         assert_raises(TypeError, lambda
60:         assert_raises(TypeError, lambda
61:         assert_raises(TypeError, lambda
62:         assert_raises(TypeError, lambda
63:         assert_raises(TypeError, lambda
64:         assert_raises(TypeError, lambda
66:         assert_raises(TypeError, lambda
67:         assert_raises(TypeError, lambda
68:         assert_raises(TypeError, lambda
69:         assert_raises(TypeError, lambda
70:         assert_raises(TypeError, lambda
71:         assert_raises(TypeError, lambda
73:         assert_raises(TypeError, lambda
79:         assert_raises(TypeError, lambda
84:         assert_equal(a[None], a[np.newaxis])

85:         assert_equal(a[None].ndim, a.ndim + 1)

90:         assert_equal(a[()], a)

91:         assert_(a[()].base is a)

93:         assert_(isinstance(a[()], np.int_))

97:         assert_equal(s[()].dtype, s.dtype)

98:         assert_equal(s[()], s)

99:         assert_equal(type(s[...]), np.ndarray)

108:         assert_array_equal(arr[index], arr[u_index])

110:         assert_array_equal(arr, np.arange(10))

113:         assert_array_equal(arr[index], arr[u_index])

116:         assert_array_equal(arr, np.arange(5)[
119:         assert_array_equal(arr[u_index, u_index], arr[index, index])

125:         assert_equal(a[[]], [])

126:         assert_equal(a[[]].dtype, a.dtype)

129:         assert_equal(a[[]], [])

130:         assert_equal(a[[]].dtype, a.dtype)

133:         assert_raises(IndexError, a.__getitem__, b)

139:         assert_(a[...] is not a)

140:         assert_equal(a[...], a)

142:         assert_(a[...].base is a)

146:         assert_equal(a[0, ...], a[0])

147:         assert_equal(a[0, ...], a[0,
148:         assert_equal(a[..., 0], a[
152:         assert_equal(a[0, ..., 1], np.array(2))

157:         assert_equal(b, 2)

165:         assert_equal(a[0], [1, 2, 3])

166:         assert_equal(a[-1], [7, 8, 9])

169:         assert_raises(IndexError, a.__getitem__, 1 << 30)

171:         assert_raises(IndexError, a.__getitem__, 1 << 64)

179:         assert_equal(a[np.array(True)], a[None])

180:         assert_equal(a[np.array(False)], a[None][0
186:         assert_raises(IndexError, arr.__getitem__, index)

189:         assert_raises(IndexError, arr.__getitem__, index)

192:         assert_raises(IndexError, arr.__getitem__, index)

194:         assert_raises(IndexError, arr.__getitem__, (slice(None), index))

201:         assert_equal(a[b], a)

204:         assert_equal(a, [[1., 1., 1.]])

214:         assert_raises(ValueError, f, a, [])

215:         assert_raises(ValueError, f, a, [1, 2, 3])

216:         assert_raises(ValueError, f, a[
230:         assert_array_equal(arr, expected)

241:         assert_equal(a[b], [1, 3, 5, 7, 9])

242:         assert_equal(a[b[1]], [[4, 5, 6]])

243:         assert_equal(a[b[0]], a[b[2]])

247:         assert_equal(a, [[0, 2, 0],

257:         assert_equal(a[b], [1, 3])

258:         assert_equal(a[None, b], [[1, 3]])

269:         assert_equal(a[0], 0)

275:         assert_equal(a[0], [0, 1])

282:         assert_array_equal(a[i], a[i.copy('C')])

295:         assert_equal(a, b)

300:         assert_raises(IndexError, a.__getitem__, (np.array([0]),) * 32)

305:         assert_equal(a[np.bool_(True)], a[np.array(True)])

306:         assert_equal(a[np.bool_(False)], a[np.array(False)])

310:         #assert_equal(a[True, 
311:         #assert_equal(a[
313:         #assert_(not np.may_share_memory(a, a[True, 
319:         assert_(a is not a[()])

320:         assert_(a is not a[...])

321:         assert_(a is not a[
325:         assert_raises(IndexError, a.__getitem__, ([0, 1], [0, 1, 2]))

326:         assert_raises(IndexError, a.__setitem__, ([0, 1], [0, 1, 2]), 0)

332:         assert_raises(IndexError, a.__getitem__, ind)

333:         assert_raises(IndexError, a.__setitem__, ind, 0)

336:         assert_raises(IndexError, a.__getitem__, ind)

337:         assert_raises(IndexError, a.__setitem__, ind, 0)

344:         assert_array_equal(a[idx], idx)

352:         assert_array_equal(a, res)

365:         assert_((a == 1).all())

369:         assert_((a == 1).all())

373:         assert_((a == 1).all())

381:         assert_array_equal(a, s)

384:         assert_array_equal(a, s)

387:         assert_array_equal(a, s)

393:         assert_(d[ind].flags.writeable)

395:         assert_(d[ind].flags.writeable)

396:         assert_(d[...].flags.writeable)

397:         assert_(d[0].flags.writeable)

404:         assert_(a[b].flags.f_contiguous)

408:         assert_(a[b, 0].flags.f_contiguous)

426:         assert_(isinstance(a[()], np.float_))

428:         assert_(isinstance(a[z], np.float_))

430:         assert_(isinstance(a[z, np.array(0)], np.float_))

431:         assert_(isinstance(a[z, ArrayLike()], np.float_))

437:         assert_(isinstance(a[()], np.ndarray))

439:         assert_(isinstance(a[z], np.ndarray))

441:         assert_(isinstance(a[z, np.array(0)], np.ndarray))

442:         assert_(isinstance(a[z, ArrayLike()], np.ndarray))

452:         assert_raises(IndexError, a.__setitem__,

454:         assert_raises(IndexError, a.__setitem__,

458:             assert_equal(sys.getrefcount(np.dtype(np.intp)), refcount)

469:         assert_equal(d[b], d)

476:         assert_equal(d[b.astype(np.int16)], d)

490:         assert_(arr[index].shape == (1,))

492:         assert_(arr[index,].shape != (1,))

511:         assert_array_equal(arr[SequenceLike()], arr[SequenceLike(),])

516:         assert_array_equal(arr[SequenceLike()], arr[SequenceLike(),])

528:         assert_array_equal(x[ind], x[ind.copy()])

531:         assert_array_equal(x2[ind, zind], x2[ind.copy(), zind])

541:         assert_array_equal(arr, 10.)

549:         assert_array_equal(arr[0], np.array("asdfg", dtype="c"))

550:         assert arr[0, 1] == b"s"  # make sure not all were set to "a" for both

588:         assert arr.dtype is dt

592:         assert_equal(a[[0, 1]], np.array([a[0], a[1]]))

593:         assert_equal(a[[0, 1], [0, 1]], np.array([0, 6]))

594:         assert_raises(IndexError, a.__getitem__, [slice(None)])

602:         assert_(isinstance(a['a'], np.ndarray))

603:         assert_(isinstance(a[['a']], np.ndarray))

627:         assert_raises(ValueError, assign, a, s_[...],  np.ones((2, 1)))

628:         assert_raises(ValueError, assign, a, s_[[1, 2, 3],], np.ones((2, 1)))

629:         assert_raises(ValueError, assign, a, s_[[[1], [2]],], np.ones((2,2,1)))

636:         assert_raises(ValueError, assign, a, s_[...], np.zeros((5, 2)))

637:         assert_raises(ValueError, assign, a, s_[...], np.zeros((5, 0)))

638:         assert_raises(ValueError, assign, a, s_[
639:         assert_raises(ValueError, assign, a, s_[
640:         assert_raises(ValueError, assign, a, s_[[0], 
656:         assert str(e.value).endswith(shape_str)

663:         assert_((a[
670:         assert_((a[
685:         assert_(type(s_slice) is SubClass)

686:         assert_(s_slice.base is s)

687:         assert_array_equal(s_slice, a[
690:         assert_(type(s_fancy) is SubClass)

691:         assert_(s_fancy.base is not s)

692:         assert_(type(s_fancy.base) is np.ndarray)

693:         assert_array_equal(s_fancy, a[[0, 1, 2]])

694:         assert_array_equal(s_fancy.base, a[[0, 1, 2]])

697:         assert_(type(s_bool) is SubClass)

698:         assert_(s_bool.base is not s)

699:         assert_(type(s_bool.base) is np.ndarray)

700:         assert_array_equal(s_bool, a[a > 0])

701:         assert_array_equal(s_bool.base, a[a > 0])

713:         assert_(s_fancy.flags.writeable)

725:         assert_array_equal(new_s.finalize_status, new_s)

726:         assert_array_equal(new_s.old, s)

729:         assert_array_equal(new_s.finalize_status, new_s)

730:         assert_array_equal(new_s.old, s)

733:         assert_array_equal(new_s.finalize_status, new_s)

734:         assert_array_equal(new_s.old, s)

747:         assert_equal(zero_array[0, 1], 1)

750:         assert_warns(np.ComplexWarning,

752:         assert_equal(zero_array[0, 1], 2)  # No complex part

755:         assert_warns(np.ComplexWarning,

757:         assert_equal(zero_array[0, 1], 0)

767:         assert_array_equal(a, b)

772:         assert_array_equal(a, b[0])

779:         assert_array_equal(a, b[
787:         assert_array_equal(arr, cmp_arr)

790:         assert_array_equal(arr, cmp_arr)

799:         assert_array_equal(a, b)

804:         assert_array_equal(a, b[0])

1113:             assert_raises(type(e), arr.__getitem__, index)

1114:             assert_raises(type(e), arr.__setitem__, index, 0)

1116:                 assert_equal(prev_refcount, sys.getrefcount(arr))

1137:             assert_raises(type(e), arr.__getitem__, index)

1138:             assert_raises(type(e), arr.__setitem__, index, 0)

1140:                 assert_equal(prev_refcount, sys.getrefcount(arr))

1150:         assert_array_equal(indexed_arr, mimic_get)

1154:             assert_(np.may_share_memory(indexed_arr, arr) == no_copy)

1159:                     assert_equal(sys.getrefcount(arr), 3)

1161:                     assert_equal(sys.getrefcount(arr), 2)

1171:             assert_array_equal(arr, b)

1175:         assert_array_equal(arr, b)

1179:         assert_equal(a[np.array(True)], 5)

1181:         assert_equal(a, 1)

1219:         assert_raises(IndexError, self.a.__getitem__, (0, 0, 0, 0, 0))

1220:         assert_raises(IndexError, self.a.__setitem__, (0, 0, 0, 0, 0), 0)

1221:         assert_raises(IndexError, self.a.__getitem__, (0, 0, [1], 0, 0))

1222:         assert_raises(IndexError, self.a.__setitem__, (0, 0, [1], 0, 0), 0)

1262:         assert_raises(TypeError, np.reshape, a, (1., 1., -1))

1263:         assert_raises(TypeError, np.reshape, a, (np.array(1.), -1))

1264:         assert_raises(TypeError, np.take, a, [0], 1.)

1265:         assert_raises(TypeError, np.take, a, [0], np.float64(1.))

1272:         assert_raises(TypeError, mult, [1], np.float_(3))

1278:         assert_raises(TypeError, np.min, d, 0.5)

1279:         assert_raises(TypeError, np.min, d, (0.5, 1))

1280:         assert_raises(TypeError, np.min, d, (1, 2.2))

1281:         assert_raises(TypeError, np.min, d, (.2, 1.2))

1289:         assert_raises(TypeError, np.reshape, a, (True, -1))

1290:         assert_raises(TypeError, np.reshape, a, (np.bool_(True), -1))

1293:         assert_raises(TypeError, operator.index, np.array(True))

1294:         assert_warns(DeprecationWarning, operator.index, np.True_)

1295:         assert_raises(TypeError, np.take, args=(a, [0], False))

1302:         assert_raises(IndexError, lambda
1312:         assert_raises_regex(IndexError,

1319:         assert_raises_regex(IndexError,

1326:         assert_raises_regex(IndexError,

1334:         assert_raises_regex(IndexError,

1348:         assert_raises(TypeError, operator.index, np.array([1]))

1349:         assert_raises(TypeError, np.reshape, a, (a, -1))

1350:         assert_raises(TypeError, np.take, a, [0], a)

1363:         assert_raises(IndexError, a.__getitem__, [0.5, 1.5])

1364:         assert_raises(IndexError, a.__getitem__, (['1', '2'],))

1376:         assert_raises(IndexError, lambda
1377:         assert_raises(IndexError, a.__getitem__, ((Ellipsis,) * 2,))

1378:         assert_raises(IndexError, a.__getitem__, ((Ellipsis,) * 3,))

1386:         assert_raises(IndexError, subscript, np.ones(()), 0)

1388:         assert_raises(IndexError, subscript, np.ones(10), 11)

1389:         assert_raises(IndexError, subscript, np.ones(10), -11)

1390:         assert_raises(IndexError, subscript, np.ones((10, 10)), 11)

1391:         assert_raises(IndexError, subscript, np.ones((10, 10)), -11)

1394:         assert_array_equal(a[4], subscript(a, 4))

1396:         assert_array_equal(a[-4], subscript(a, -4))

1402:         assert_raises(ValueError, assign, np.ones(10), 0)

1404:         assert_raises(IndexError, assign, np.ones(()), 0, 0)

1406:         assert_raises(IndexError, assign, np.ones(10), 11, 0)

1407:         assert_raises(IndexError, assign, np.ones(10), -11, 0)

1408:         assert_raises(IndexError, assign, np.ones((10, 10)), 11, 0)

1409:         assert_raises(IndexError, assign, np.ones((10, 10)), -11, 0)

1413:         assert_(a[4] == 10)

1417:         assert_array_equal(a[-1], [10, 10])

Total asserts: 259

Filename: numpy/core/tests/test_umath.py
15:     assert_, assert_equal, assert_raises, assert_raises_regex,

16:     assert_array_equal, assert_almost_equal, assert_array_almost_equal,

17:     assert_array_max_ulp, assert_allclose, assert_no_warnings, suppress_warnings,

18:     _gen_alignment_data, assert_array_almost_equal_nulp

52:         assert_allclose(ncu.pi, 3.141592653589793, 1e-15)

55:         assert_allclose(ncu.e, 2.718281828459045, 1e-15)

58:         assert_allclose(ncu.euler_gamma, 0.5772156649015329, 1e-15)

68:             assert_(r is o)

70:             assert_(r is o)

72:             assert_(r is o)

79:             assert_(r1 is o1)

81:             assert_(r2 is o2)

83:             assert_(r1 is o1)

84:             assert_(r2 is o2)

87:             assert_(r1 is o1)

89:             assert_(r2 is o2)

91:             assert_(r1 is o1)

92:             assert_(r2 is o2)

94:             with assert_raises(TypeError)
98:             assert_raises(TypeError, np.add, a, 2, o, o, subok=subok)

99:             assert_raises(TypeError, np.add, a, 2, o, out=o, subok=subok)

100:             assert_raises(TypeError, np.add, a, 2, None, out=o, subok=subok)

101:             assert_raises(ValueError, np.add, a, 2, out=(o, o), subok=subok)

102:             assert_raises(ValueError, np.add, a, 2, out=(), subok=subok)

103:             assert_raises(TypeError, np.add, a, 2, [], subok=subok)

104:             assert_raises(TypeError, np.add, a, 2, out=[], subok=subok)

105:             assert_raises(TypeError, np.add, a, 2, out=([],), subok=subok)

107:             assert_raises(ValueError, np.add, a, 2, o, subok=subok)

108:             assert_raises(ValueError, np.add, a, 2, out=o, subok=subok)

109:             assert_raises(ValueError, np.add, a, 2, out=(o,), subok=subok)

126:                 assert_(isinstance(r, ArrayWrap))

128:                 assert_(type(r) == np.ndarray)

132:                 assert_(isinstance(r, ArrayWrap))

134:                 assert_(type(r) == np.ndarray)

138:                 assert_(isinstance(r, ArrayWrap))

140:                 assert_(type(r) == np.ndarray)

144:                 assert_(isinstance(r, ArrayWrap))

146:                 assert_(type(r) == np.ndarray)

154:                 assert_(isinstance(r2, ArrayWrap))

156:                 assert_(type(r2) == np.ndarray)

160:                 assert_(isinstance(r2, ArrayWrap))

162:                 assert_(type(r2) == np.ndarray)

166:                 assert_(isinstance(r1, ArrayWrap))

168:                 assert_(type(r1) == np.ndarray)

172:                 assert_(isinstance(r2, ArrayWrap))

174:                 assert_(type(r2) == np.ndarray)

178:                 assert_(isinstance(r1, ArrayWrap))

180:                 assert_(type(r1) == np.ndarray)

182:             with assert_raises(TypeError)
192:         assert_raises(ValueError, np.equal, a, a)

200:         assert_raises(TypeError, np.equal, a, a)

204:         assert_equal(np.equal(a, a), [False])

210:         assert_raises(ValueError, np.not_equal, a, a)

218:         assert_raises(TypeError, np.not_equal, a, a)

222:         assert_equal(np.not_equal(a, a), [True])

233:         assert_equal(a['b'].sum(), 0)

241:             assert_equal(x / 100, [0.05, 0.1, 0.9, 1,

244:             assert_equal(x / 100, [0, 0, 0, 1, -1, -1, -1, -1, -2])

245:         assert_equal(x // 100, [0, 0, 0, 1, -1, -1, -1, -1, -2])

246:         assert_equal(x % 100, [5, 10, 90, 0, 95, 90, 10, 0, 80])

293:         assert all(div_ab == div_lst), msg

295:         assert all(ac == div_lst), msg_eq

304:             assert all(div_a == div_lst), msg

305:             assert all(ac == div_lst), msg_eq

347:         assert div_a == div_lst, msg

378:             assert dividend // divisor == quotient, msg

384:             assert all(dividend_array // divisor == quotient_array), msg

394:         assert_almost_equal(x**2/x, x, err_msg=msg)

399:         assert_almost_equal(y/x, [1, 1], err_msg=msg)

405:             assert_(np.isinf(y)[0])

407:             assert_(np.isinf(y)[0])

409:             assert_(np.isinf(y)[0])

411:             assert_(np.isinf(y)[0])

413:             assert_(np.isnan(y)[0])

429:         assert_equal(np.signbit(x//1), 0)

430:         assert_equal(np.signbit((-x)//1), 1)

440:             assert_raises(FloatingPointError, np.floor_divide, fone, fzer)

463:             assert(np.isnan(div)), "dt
465:             assert(np.isnan(div)), "dt
467:             assert(np.isnan(div)), "dt
471:             assert_(np.isinf(z).all())

496:                     assert_equal(div*b + rem, a, err_msg=msg)

498:                         assert_(b < rem <= 0, msg)

500:                         assert_(b > rem >= 0, msg)

525:                 assert_equal(div, tgtdiv, err_msg=msg)

526:                 assert_equal(rem, tgtrem, err_msg=msg)

539:                     # Equal assertion should hold when fmod is used

540:                     assert_equal(div*b + rem, a, err_msg=msg)

542:                         assert_(b < rem <= 0, msg)

544:                         assert_(b > rem >= 0, msg)

559:             assert_raises(FloatingPointError, np.divmod, fone, fzero)

561:             assert_raises(FloatingPointError, np.divmod, fone, fzero)

563:             assert_raises(FloatingPointError, np.divmod, fzero, fzero)

565:             assert_raises(FloatingPointError, np.divmod, finf, finf)

567:             assert_raises(FloatingPointError, np.divmod, finf, fzero)

598:             assert_(mod == 0)

600:             assert_raises(FloatingPointError, np.divmod, 4, a)

602:             assert_raises(FloatingPointError, np.divmod, 4, a)

615:                 assert(np.isinf(div)), 'dt
616:                 assert(np.isnan(rem)), 'dt
618:                 assert(np.isnan(rem)), 'dt
619:                 assert_(np.isnan(div)), 'dt
621:                 assert(np.isnan(div)), 'dt
622:                 assert(np.isnan(rem)), 'dt
624:                 assert(np.isinf(div)), 'dt
625:                 assert(np.isnan(rem)), 'dt
627:                 assert(np.isnan(rem)), "dt
628:                 assert(np.isnan(div)), "dt
630:                 assert(np.isnan(rem)), "dt
631:                 assert(np.isnan(div)), "dt
633:                 assert(np.isnan(rem)), "dt
634:                 assert(np.isnan(div)), "dt
645:             assert_(rem <= b, 'dt
647:             assert_(rem >= -b, 'dt
659:                 assert_(np.isnan(rem), 'dt
662:                 #assert_(rem == fone, 'dt
665:                 assert_(np.isnan(fmod), 'dt
666:                 assert_(np.isnan(rem), 'dt
669:                 assert_(np.isnan(rem), 'dt
670:                 assert_(np.isnan(fmod), 'dt
673:                 assert_(np.isnan(rem), 'dt
674:                 assert_(np.isnan(fmod), 'dt
677:                 assert_(np.isnan(rem), 'dt
678:                 assert_(np.isnan(fmod), 'dt
681:                 assert_(np.isnan(rem), 'dt
682:                 assert_(np.isnan(fmod), 'dt
685:                 assert_(np.isnan(rem), 'dt
686:                 assert_(np.isnan(fmod), 'dt
691:         assert_almost_equal((np.cbrt(np.float32(-2.5)**3)), -2.5)

695:         assert_almost_equal(np.cbrt(x**3), x)

697:         assert_(np.isnan(np.cbrt(np.nan)))

698:         assert_equal(np.cbrt(np.inf), np.inf)

699:         assert_equal(np.cbrt(-np.inf), -np.inf)

705:         assert_equal(x**0, [1., 1., 1.])

706:         assert_equal(x**1, x)

707:         assert_equal(x**2, [1., 4., 9.])

710:         assert_equal(y, [1., 4., 9.])

711:         assert_almost_equal(x**(-1), [1., 0.5, 1./3])

712:         assert_almost_equal(x**(0.5), [1., ncu.sqrt(2), ncu.sqrt(3)])

718:             assert_almost_equal(inp**(0.5), exp, err_msg=msg)

720:             assert_equal(out, exp, err_msg=msg)

726:             assert_almost_equal(inp**(0.5), exp, err_msg=msg)

728:             assert_equal(out, exp, err_msg=msg)

732:         assert_equal(x**0, [1., 1., 1.])

733:         assert_equal(x**1, x)

734:         assert_almost_equal(x**2, [-3+4j, -5+12j, -7+24j])

735:         assert_almost_equal(x**3, [(1+2j)**3, (2+3j)**3, (3+4j)**3])

736:         assert_almost_equal(x**4, [(1+2j)**4, (2+3j)**4, (3+4j)**4])

737:         assert_almost_equal(x**(-1), [1/(1+2j), 1/(2+3j), 1/(3+4j)])

738:         assert_almost_equal(x**(-2), [1/(1+2j)**2, 1/(2+3j)**2, 1/(3+4j)**2])

739:         assert_almost_equal(x**(-3), [(-11+2j)/125, (-46-9j)/2197,

741:         assert_almost_equal(x**(0.5), [ncu.sqrt(1+2j), ncu.sqrt(2+3j),

744:         assert_almost_equal(x**14 * norm,

749:         def assert_complex_equal(x, y)
750:             assert_array_equal(x.real, y.real)

751:             assert_array_equal(x.imag, y.imag)

756:                 assert_complex_equal(z**1, z)

757:                 assert_complex_equal(z**2, z*z)

758:                 assert_complex_equal(z**3, z*z*z)

768:         def assert_complex_equal(x, y)
770:             assert_array_equal(x.real, y.real)

771:             assert_array_equal(x.imag, y.imag)

775:             assert_complex_equal(np.power(zero, p), zero)

778:         assert_complex_equal(np.power(zero, 0), one)

780:             assert_complex_equal(np.power(zero, 0+1j), cnan)

784:                 assert_complex_equal(np.power(zero, -p), cnan)

785:             assert_complex_equal(np.power(zero, -1+0.2j), cnan)

790:         assert_((x**2.00001).dtype is res.dtype)

791:         assert_array_equal(res, [1, 4, 9])

793:         assert_(not np.may_share_memory(res, x))

794:         assert_array_equal(x, [1, 2, 3])

798:         assert_equal(res.shape, (1, 1, 3))

803:         assert_equal(b, [437893890380859375, 437893890380859375])

809:             assert_equal(np.power(arr, 0), np.ones_like(arr))

814:             assert_equal(np.power(arr, 0), np.ones_like(arr))

820:             assert_equal(np.power(1, arr), np.ones_like(arr))

826:             assert_equal(np.power(0, arr), np.zeros_like(arr))

835:             assert_raises(ValueError, np.power, a, b)

836:             assert_raises(ValueError, np.power, a, minusone)

837:             assert_raises(ValueError, np.power, one, b)

838:             assert_raises(ValueError, np.power, one, minusone)

849:             assert_(res.dtype.name == np.dtype(dtout).name, msg)

859:         assert_almost_equal(np.log2(xf), yf)

866:         assert_equal(v, float(i), err_msg='at exponent %d' % i)

869:         assert_equal(np.log2(1.), 0.)

870:         assert_equal(np.log2(np.inf), np.inf)

871:         assert_(np.isnan(np.log2(np.nan)))

875:             assert_(np.isnan(np.log2(-1.)))

876:             assert_(np.isnan(np.log2(-np.inf)))

877:             assert_equal(np.log2(0.), -np.inf)

878:             assert_(w[0].category is RuntimeWarning)

879:             assert_(w[1].category is RuntimeWarning)

880:             assert_(w[2].category is RuntimeWarning)

890:             assert_almost_equal(np.exp2(yf), xf)

903:             assert_almost_equal(np.logaddexp2(xf, yf), zf, decimal=dec_)

913:             assert_almost_equal(np.logaddexp2(logxf, logyf), logzf)

925:                 assert_equal(np.logaddexp2(logxf, logyf), logzf)

928:         assert_(np.isnan(np.logaddexp2(np.nan, np.inf)))

929:         assert_(np.isnan(np.logaddexp2(np.inf, np.nan)))

930:         assert_(np.isnan(np.logaddexp2(np.nan, 0)))

931:         assert_(np.isnan(np.logaddexp2(0, np.nan)))

932:         assert_(np.isnan(np.logaddexp2(np.nan, np.nan)))

935:         assert_equal(np.logaddexp2.identity, -np.inf)

936:         assert_equal(np.logaddexp2.reduce([]), -np.inf)

937:         assert_equal(np.logaddexp2.reduce([-np.inf]), -np.inf)

938:         assert_equal(np.logaddexp2.reduce([-np.inf, 0]), 0)

949:             assert_almost_equal(np.log(xf), yf)

954:         assert_almost_equal(np.log(x, out=x), xf)

973:                 assert_array_almost_equal_nulp(np.log(x_f64[
974:                 assert_array_almost_equal_nulp(np.log(x_special[
984:             assert_almost_equal(np.exp(yf), xf)

994:                 assert_array_almost_equal_nulp(np.exp(x_f64[
1004:                 assert_equal(np.exp(yf), xf)

1013:             assert_raises(FloatingPointError, np.exp, np.float32(100.))

1014:             assert_raises(FloatingPointError, np.exp, np.float32(1E19))

1015:             assert_raises(FloatingPointError, np.exp, np.float64(800.))

1016:             assert_raises(FloatingPointError, np.exp, np.float64(1E19))

1019:             assert_raises(FloatingPointError, np.exp, np.float32(-1000.))

1020:             assert_raises(FloatingPointError, np.exp, np.float32(-1E19))

1021:             assert_raises(FloatingPointError, np.exp, np.float64(-1000.))

1022:             assert_raises(FloatingPointError, np.exp, np.float64(-1E19))

1033:                 assert_equal(np.log(yf), xf)

1034:                 assert_equal(np.log2(yf), xf)

1035:                 assert_equal(np.log10(yf), xf)

1036:                 assert_equal(np.log1p(yf1p), xf)

1040:                 assert_raises(FloatingPointError, np.log,

1042:                 assert_raises(FloatingPointError, np.log2,

1044:                 assert_raises(FloatingPointError, np.log10,

1046:                 assert_raises(FloatingPointError, np.log1p,

1051:                 assert_raises(FloatingPointError, np.log,

1053:                 assert_raises(FloatingPointError, np.log,

1055:                 assert_raises(FloatingPointError, np.log2,

1057:                 assert_raises(FloatingPointError, np.log2,

1059:                 assert_raises(FloatingPointError, np.log10,

1061:                 assert_raises(FloatingPointError, np.log10,

1063:                 assert_raises(FloatingPointError, np.log1p,

1065:                 assert_raises(FloatingPointError, np.log1p,

1069:         with assert_no_warnings()
1080:                 assert_equal(np.sin(yf), xf)

1081:                 assert_equal(np.cos(yf), xf)

1084:             assert_raises(FloatingPointError, np.sin, np.float32(-np.inf))

1085:             assert_raises(FloatingPointError, np.sin, np.float32(np.inf))

1086:             assert_raises(FloatingPointError, np.cos, np.float32(-np.inf))

1087:             assert_raises(FloatingPointError, np.cos, np.float32(np.inf))

1096:             assert_equal(np.sqrt(yf), xf)

1099:         #     assert_raises(

1109:             assert_equal(np.abs(yf), xf)

1118:                 assert_equal(np.square(yf), xf)

1121:             assert_raises(FloatingPointError, np.square,

1123:             assert_raises(FloatingPointError, np.square,

1133:                 assert_equal(np.reciprocal(yf), xf)

1137:                 assert_raises(FloatingPointError, np.reciprocal,

1147:                 assert_equal(np.tan(in_arr), out_arr)

1151:                 assert_raises(FloatingPointError, np.tan,

1153:                 assert_raises(FloatingPointError, np.tan,

1163:                 assert_equal(np.arcsin(in_arr), out_arr)

1164:                 assert_equal(np.arccos(in_arr), out_arr)

1170:                         assert_raises(FloatingPointError, callable,

1180:                 assert_equal(np.arctan(in_arr), out_arr)

1188:             assert_equal(np.sinh(in_arr), out_arr)

1191:             assert_raises(FloatingPointError, np.sinh,

1193:             assert_raises(FloatingPointError, np.sinh,

1202:             assert_equal(np.cosh(in_arr), out_arr)

1205:             assert_raises(FloatingPointError, np.cosh,

1207:             assert_raises(FloatingPointError, np.cosh,

1216:             assert_equal(np.tanh(in_arr), out_arr)

1224:             assert_equal(np.arcsinh(in_arr), out_arr)

1233:                 assert_equal(np.arccosh(in_arr), out_arr)

1238:                     assert_raises(FloatingPointError, np.arccosh,

1248:                 assert_equal(np.arctanh(in_arr), out_arr)

1253:                     assert_raises(FloatingPointError, np.arctanh,

1268:                 assert_equal(np.exp2(in_arr), out_arr)

1273:                     assert_raises(FloatingPointError, np.exp2,

1283:                 assert_equal(np.expm1(in_arr), out_arr)

1287:                 assert_raises(FloatingPointError, np.expm1,

1299:         assert_equal(np.isnan(arr_f32[
1300:         assert_equal(np.isnan(arr_f64[
1301:         assert_equal(np.isinf(arr_f32[
1302:         assert_equal(np.isinf(arr_f64[
1303:         assert_equal(np.signbit(arr_f32[
1304:         assert_equal(np.signbit(arr_f64[
1305:         assert_equal(np.isfinite(arr_f32[
1306:         assert_equal(np.isfinite(arr_f64[
1315:         assert_equal(np.ldexp(mant[
1316:         assert_equal(out[
1330:         assert_equal(mant_true[
1331:         assert_equal(exp_true[
1332:         assert_equal(out_mant[
1333:         assert_equal(out_exp[
1362:                     assert_equal(myfunc(x_f32), np.float32(y_true128))

1363:                     assert_equal(myfunc(x_f64), np.float64(y_true128))

1365:                     assert_array_max_ulp(myfunc(x_f32), np.float32(y_true128),

1367:                     assert_array_max_ulp(myfunc(x_f64), np.float64(y_true128),

1374:                         assert_equal(myfunc(x_f64[
1375:                         assert_equal(myfunc(x_f32[
1382:         assert_array_max_ulp(np.exp(x_f32), np.float32(np.exp(x_f64)), maxulp=3)

1388:         assert_array_max_ulp(np.log(x_f32), np.float32(np.log(x_f64)), maxulp=4)

1401:         assert_array_max_ulp(np.sin(x_f32), np.float32(np.sin(x_f64)), maxulp=2)

1402:         assert_array_max_ulp(np.cos(x_f32), np.float32(np.cos(x_f64)), maxulp=2)

1405:         assert_array_max_ulp(np.sin(x_f32, out=x_f32), np.float32(np.sin(x_f64)), maxulp=2)

1406:         assert_array_max_ulp(np.cos(tx_f32, out=tx_f32), np.float32(np.cos(x_f64)), maxulp=2)

1421:                 assert_array_almost_equal_nulp(np.exp(x_f32[
1422:                 assert_array_almost_equal_nulp(np.log(x_f32[
1423:                 assert_array_almost_equal_nulp(np.sin(x_f32_large[
1424:                 assert_array_almost_equal_nulp(np.cos(x_f32_large[
1435:             assert_almost_equal(np.logaddexp(xf, yf), zf, decimal=dec_)

1445:             assert_almost_equal(np.logaddexp(logxf, logyf), logzf)

1457:                 assert_equal(np.logaddexp(logxf, logyf), logzf)

1460:         assert_(np.isnan(np.logaddexp(np.nan, np.inf)))

1461:         assert_(np.isnan(np.logaddexp(np.inf, np.nan)))

1462:         assert_(np.isnan(np.logaddexp(np.nan, 0)))

1463:         assert_(np.isnan(np.logaddexp(0, np.nan)))

1464:         assert_(np.isnan(np.logaddexp(np.nan, np.nan)))

1467:         assert_equal(np.logaddexp.identity, -np.inf)

1468:         assert_equal(np.logaddexp.reduce([]), -np.inf)

1473:         assert_almost_equal(ncu.log1p(0.2), ncu.log(1.2))

1474:         assert_almost_equal(ncu.log1p(1e-6), ncu.log(1+1e-6))

1478:             assert_equal(ncu.log1p(np.nan), np.nan)

1479:             assert_equal(ncu.log1p(np.inf), np.inf)

1480:             assert_equal(ncu.log1p(-1.), -np.inf)

1481:             assert_equal(ncu.log1p(-2.), np.nan)

1482:             assert_equal(ncu.log1p(-np.inf), np.nan)

1487:         assert_almost_equal(ncu.expm1(0.2), ncu.exp(0.2)-1)

1488:         assert_almost_equal(ncu.expm1(1e-6), ncu.exp(1e-6)-1)

1491:         assert_equal(ncu.expm1(np.inf), np.inf)

1492:         assert_equal(ncu.expm1(0.), 0.)

1493:         assert_equal(ncu.expm1(-0.), -0.)

1494:         assert_equal(ncu.expm1(np.inf), np.inf)

1495:         assert_equal(ncu.expm1(-np.inf), -1.)

1499:         assert_allclose(x, ncu.expm1(x))

1501:         assert_allclose(x, ncu.expm1(x))

1506:         assert_almost_equal(ncu.hypot(1, 1), ncu.sqrt(2))

1507:         assert_almost_equal(ncu.hypot(0, 0), 0)

1510:         assert_almost_equal(ncu.hypot.reduce([3.0, 4.0]), 5.0)

1511:         assert_almost_equal(ncu.hypot.reduce([3.0, 4.0, 0]), 5.0)

1512:         assert_almost_equal(ncu.hypot.reduce([9.0, 12.0, 20.0]), 25.0)

1513:         assert_equal(ncu.hypot.reduce([]), 0.0)

1516: def assert_hypot_isnan(x, y)
1518:         assert_(np.isnan(ncu.hypot(x, y)),

1522: def assert_hypot_isinf(x, y)
1524:         assert_(np.isinf(ncu.hypot(x, y)),

1530:         assert_hypot_isnan(np.nan, np.nan)

1531:         assert_hypot_isnan(np.nan, 1)

1534:         assert_hypot_isinf(np.nan, np.inf)

1535:         assert_hypot_isinf(np.inf, np.nan)

1536:         assert_hypot_isinf(np.inf, 0)

1537:         assert_hypot_isinf(0, np.inf)

1538:         assert_hypot_isinf(np.inf, np.inf)

1539:         assert_hypot_isinf(np.inf, 23.0)

1542:         assert_no_warnings(ncu.hypot, np.inf, 0)

1545: def assert_arctan2_isnan(x, y)
1546:     assert_(np.isnan(ncu.arctan2(x, y)), "arctan(%s, %s) is %s, not nan" % (x, y, ncu.arctan2(x, y)))

1549: def assert_arctan2_ispinf(x, y)
1550:     assert_((np.isinf(ncu.arctan2(x, y)) and ncu.arctan2(x, y) > 0), "arctan(%s, %s) is %s, not +inf" % (x, y, ncu.arctan2(x, y)))

1553: def assert_arctan2_isninf(x, y)
1554:     assert_((np.isinf(ncu.arctan2(x, y)) and ncu.arctan2(x, y) < 0), "arctan(%s, %s) is %s, not -inf" % (x, y, ncu.arctan2(x, y)))

1557: def assert_arctan2_ispzero(x, y)
1558:     assert_((ncu.arctan2(x, y) == 0 and not np.signbit(ncu.arctan2(x, y))), "arctan(%s, %s) is %s, not +0" % (x, y, ncu.arctan2(x, y)))

1561: def assert_arctan2_isnzero(x, y)
1562:     assert_((ncu.arctan2(x, y) == 0 and np.signbit(ncu.arctan2(x, y))), "arctan(%s, %s) is %s, not -0" % (x, y, ncu.arctan2(x, y)))

1568:         assert_almost_equal(ncu.arctan2(1, 1), 0.25 * np.pi)

1569:         assert_almost_equal(ncu.arctan2(-1, 1), -0.25 * np.pi)

1570:         assert_almost_equal(ncu.arctan2(1, -1), 0.75 * np.pi)

1574:         assert_almost_equal(ncu.arctan2(np.PZERO, np.NZERO), np.pi)

1575:         assert_almost_equal(ncu.arctan2(np.NZERO, np.NZERO), -np.pi)

1579:         assert_arctan2_ispzero(np.PZERO, np.PZERO)

1580:         assert_arctan2_isnzero(np.NZERO, np.PZERO)

1584:         assert_almost_equal(ncu.arctan2(np.PZERO, -1), np.pi)

1585:         assert_almost_equal(ncu.arctan2(np.NZERO, -1), -np.pi)

1589:         assert_arctan2_ispzero(np.PZERO, 1)

1590:         assert_arctan2_isnzero(np.NZERO, 1)

1594:         assert_almost_equal(ncu.arctan2(1, np.PZERO), 0.5 * np.pi)

1595:         assert_almost_equal(ncu.arctan2(1, np.NZERO), 0.5 * np.pi)

1599:         assert_almost_equal(ncu.arctan2(-1, np.PZERO), -0.5 * np.pi)

1600:         assert_almost_equal(ncu.arctan2(-1, np.NZERO), -0.5 * np.pi)

1604:         assert_almost_equal(ncu.arctan2(1, np.NINF),  np.pi)

1605:         assert_almost_equal(ncu.arctan2(-1, np.NINF), -np.pi)

1609:         assert_arctan2_ispzero(1, np.inf)

1610:         assert_arctan2_isnzero(-1, np.inf)

1614:         assert_almost_equal(ncu.arctan2( np.inf, 1),  0.5 * np.pi)

1615:         assert_almost_equal(ncu.arctan2(-np.inf, 1), -0.5 * np.pi)

1619:         assert_almost_equal(ncu.arctan2( np.inf, -np.inf),  0.75 * np.pi)

1620:         assert_almost_equal(ncu.arctan2(-np.inf, -np.inf), -0.75 * np.pi)

1624:         assert_almost_equal(ncu.arctan2( np.inf, np.inf),  0.25 * np.pi)

1625:         assert_almost_equal(ncu.arctan2(-np.inf, np.inf), -0.25 * np.pi)

1629:         assert_arctan2_isnan(np.nan, np.inf)

1630:         assert_arctan2_isnan(np.inf, np.nan)

1631:         assert_arctan2_isnan(np.nan, np.nan)

1636:         assert_almost_equal(ncu.ldexp(np.array(2., np.float32),

1638:         assert_almost_equal(ncu.ldexp(np.array(2., np.float64),

1640:         assert_almost_equal(ncu.ldexp(np.array(2., np.longdouble),

1645:         assert_almost_equal(ncu.ldexp(2., 3),  16.)

1658:             assert_equal(ncu.ldexp(2., imax), np.inf)

1659:             assert_equal(ncu.ldexp(2., imin), 0)

1672:             assert_equal(func(tmp1), 10)

1673:             assert_equal(func(tmp2), 10)

1677:             assert_equal(func(tmp1), 10)

1678:             assert_equal(func(tmp2), 10)

1681:             assert_equal(func(tmp1), np.nan)

1682:             assert_equal(func(tmp2), np.nan)

1685:         assert_equal(np.maximum.reduce([1, 2j]), 1)

1686:         assert_equal(np.maximum.reduce([1+3j, 2j]), 1+3j)

1693:         assert_equal(np.maximum(arg1, arg2), out)

1703:             assert_(np.maximum(x, y) == 1.0)

1704:             assert_(np.maximum(z, y) == 1.0)

1712:             assert_equal(np.maximum(arg1, arg2), out)

1717:         assert_equal(np.maximum(arg1, arg2), arg2)

1725:         assert_equal(np.maximum(arr1,arr2), maxtrue)

1726:         assert_equal(np.maximum(arr1[
1727:         assert_equal(np.maximum(arr1[
1728:         assert_equal(np.maximum(arr1[
1729:         assert_equal(np.maximum(arr1[
1730:         assert_equal(out, out_maxtrue)

1750:                 assert_equal(np.maximum([v1], [v2]), [expected])

1751:                 assert_equal(np.maximum.reduce([v1, v2]), expected)

1764:             assert_equal(func(tmp1), 0)

1765:             assert_equal(func(tmp2), 0)

1769:             assert_equal(func(tmp1), 0)

1770:             assert_equal(func(tmp2), 0)

1773:             assert_equal(func(tmp1), np.nan)

1774:             assert_equal(func(tmp2), np.nan)

1777:         assert_equal(np.minimum.reduce([1, 2j]), 2j)

1778:         assert_equal(np.minimum.reduce([1+3j, 2j]), 2j)

1785:         assert_equal(np.minimum(arg1, arg2), out)

1795:             assert_(np.minimum(x, y) == 1.0)

1796:             assert_(np.minimum(z, y) == 1.0)

1804:             assert_equal(np.minimum(arg1, arg2), out)

1809:         assert_equal(np.minimum(arg1, arg2), arg1)

1817:         assert_equal(np.minimum(arr1,arr2), mintrue)

1818:         assert_equal(np.minimum(arr1[
1819:         assert_equal(np.minimum(arr1[
1820:         assert_equal(np.minimum(arr1[
1821:         assert_equal(np.minimum(arr1[
1822:         assert_equal(out, out_mintrue)

1842:                 assert_equal(np.minimum([v1], [v2]), [expected])

1843:                 assert_equal(np.minimum.reduce([v1, v2]), expected)

1856:             assert_equal(func(tmp1), 10)

1857:             assert_equal(func(tmp2), 10)

1861:             assert_equal(func(tmp1), 10)

1862:             assert_equal(func(tmp2), 10)

1865:             assert_equal(func(tmp1), 9)

1866:             assert_equal(func(tmp2), 9)

1869:         assert_equal(np.fmax.reduce([1, 2j]), 1)

1870:         assert_equal(np.fmax.reduce([1+3j, 2j]), 1+3j)

1877:         assert_equal(np.fmax(arg1, arg2), out)

1885:             assert_equal(np.fmax(arg1, arg2), out)

1905:                 assert_equal(np.fmax([v1], [v2]), [expected])

1906:                 assert_equal(np.fmax.reduce([v1, v2]), expected)

1919:             assert_equal(func(tmp1), 0)

1920:             assert_equal(func(tmp2), 0)

1924:             assert_equal(func(tmp1), 0)

1925:             assert_equal(func(tmp2), 0)

1928:             assert_equal(func(tmp1), 1)

1929:             assert_equal(func(tmp2), 1)

1932:         assert_equal(np.fmin.reduce([1, 2j]), 2j)

1933:         assert_equal(np.fmin.reduce([1+3j, 2j]), 2j)

1940:         assert_equal(np.fmin(arg1, arg2), out)

1948:             assert_equal(np.fmin(arg1, arg2), out)

1968:                 assert_equal(np.fmin([v1], [v2]), [expected])

1969:                 assert_equal(np.fmin.reduce([v1, v2]), expected)

1975:         assert_raises(TypeError, np.negative, a)

1976:         assert_raises(TypeError, np.positive, a)

1977:         assert_raises(TypeError, np.subtract, a, a)

1994:                 assert_equal(func(arg1, arg2).astype(bool), out)

1998:                 assert_equal(func(arg1, arg2).astype(bool), out)

2002:                 assert_equal(func(arg1, arg2).astype(bool), out)

2009:         assert_equal(np.bitwise_or(arg1, arg2), out)

2012:         assert_equal(np.bitwise_and(arg1, arg2), out)

2015:         assert_equal(np.bitwise_xor(arg1, arg2), out)

2026:             assert_equal(np.logical_and.reduce(arr), all(arr))

2029:             assert_equal(np.logical_or.reduce(arr), any(arr))

2032:             assert_equal(np.logical_xor.reduce(arr), arr.sum() % 2 == 1)

2045:             assert_equal(np.bitwise_not(zeros), ones, err_msg=msg)

2046:             assert_equal(np.bitwise_not(ones), zeros, err_msg=msg)

2048:             assert_equal(np.bitwise_or(zeros, zeros), zeros, err_msg=msg)

2049:             assert_equal(np.bitwise_or(zeros, ones), ones, err_msg=msg)

2050:             assert_equal(np.bitwise_or(ones, zeros), ones, err_msg=msg)

2051:             assert_equal(np.bitwise_or(ones, ones), ones, err_msg=msg)

2053:             assert_equal(np.bitwise_xor(zeros, zeros), zeros, err_msg=msg)

2054:             assert_equal(np.bitwise_xor(zeros, ones), ones, err_msg=msg)

2055:             assert_equal(np.bitwise_xor(ones, zeros), ones, err_msg=msg)

2056:             assert_equal(np.bitwise_xor(ones, ones), zeros, err_msg=msg)

2058:             assert_equal(np.bitwise_and(zeros, zeros), zeros, err_msg=msg)

2059:             assert_equal(np.bitwise_and(zeros, ones), zeros, err_msg=msg)

2060:             assert_equal(np.bitwise_and(ones, zeros), zeros, err_msg=msg)

2061:             assert_equal(np.bitwise_and(ones, ones), ones, err_msg=msg)

2069:             assert_(np.bitwise_not(zeros).dtype == dt, msg)

2070:             assert_(np.bitwise_or(zeros, zeros).dtype == dt, msg)

2071:             assert_(np.bitwise_xor(zeros, zeros).dtype == dt, msg)

2072:             assert_(np.bitwise_and(zeros, zeros).dtype == dt, msg)

2075:         assert_(np.bitwise_or.identity == 0, 'bitwise_or')

2076:         assert_(np.bitwise_xor.identity == 0, 'bitwise_xor')

2077:         assert_(np.bitwise_and.identity == -1, 'bitwise_and')

2087:                 assert_equal(f.reduce(zeros), zeros, err_msg=msg)

2088:                 assert_equal(f.reduce(ones), ones, err_msg=msg)

2098:                 assert_equal(res, tgt, err_msg=msg)

2099:                 assert_(res.dtype == tgt.dtype, msg)

2110:             assert_equal(res, tgt, err_msg=msg)

2116:             assert_(type(f.reduce(btype)) is bool, msg)

2126:         assert_array_equal(np.logical_not(x, out=os), False)

2127:         assert_array_equal(o, tgt)

2132:         assert_equal(ncu.FLOATING_POINT_SUPPORT, 1)

2137:         assert_almost_equal(ncu.degrees(np.pi), 180.0)

2138:         assert_almost_equal(ncu.degrees(-0.5*np.pi), -90.0)

2143:         assert_almost_equal(ncu.radians(180.0), np.pi)

2144:         assert_almost_equal(ncu.radians(-90.0), -0.5*np.pi)

2155:         assert_equal(h, expectedhalf)

2158:         assert_equal(h, expected1)

2163:         assert_equal(h, expectedhalf.astype(np.float32))

2166:         assert_equal(h, expected1.astype(np.float32))

2177:             assert_equal(res, tgt)

2179:             assert_equal(res, tgt)

2180:             assert_equal(out, tgt)

2189:         assert_array_equal(a, b)

2198:         assert_raises(TypeError, test_nan)

2214:                         assert_(np.isnan(inp.max()), msg=emsg)

2215:                         assert_(np.isnan(inp.min()), msg=emsg)

2218:                     assert_equal(inp.max(), 1e10, err_msg=msg)

2220:                     assert_equal(inp.min(), -1e10, err_msg=msg)

2226:         assert_equal(d.max(), d[0])

2227:         assert_equal(d.min(), d[0])

2236:                     assert_equal(np.min(r), np.nan)

2240:         assert_equal(a, np.nan)

2251:                 assert_equal(out, tgt, err_msg=msg)

2252:                 assert_((out >= 0).all())

2256:                 assert_equal(out, tgt, err_msg=msg)

2264:                         assert_array_equal(np.abs(inp), d, err_msg=msg)

2266:                         assert_array_equal(out, d, err_msg=msg)

2268:                         assert_array_equal(-inp, -1*inp, err_msg=msg)

2271:                         assert_array_equal(out, d, err_msg=msg)

2277:         assert_equal(np.abs(d), d)

2278:         assert_equal(np.negative(d), -d)

2291:             assert_equal(x, result, err_msg=str(dtype))

2294:         with assert_raises(TypeError)
2296:         with assert_raises(TypeError)
2298:         with assert_raises(TypeError)
2300:         with assert_raises(TypeError)
2319:         assert_equal(x.arr, np.zeros(1))

2321:         assert_(func is ncu.minimum)

2322:         assert_equal(len(args), 2)

2323:         assert_equal(args[0], a)

2324:         assert_equal(args[1], a)

2325:         assert_equal(i, 0)

2345:                 # any other ufuncs are called by the assertions

2356:                 assert_equal(p, expected)

2357:                 assert_equal(w, expected)

2359:                 # assert_equal produces truly useless error messages

2396:         assert_(isinstance(x, with_wrap))

2397:         assert_array_equal(x, np.array((1, 2, 3)))

2410:         assert_(isinstance(x, A))

2411:         assert_array_equal(x, np.array(1))

2426:         assert_equal(x.arr, np.zeros(1))

2451:         assert_(type(f(x, x)) is np.ndarray)

2452:         assert_(type(f(x, a)) is A)

2453:         assert_(type(f(x, b)) is B)

2454:         assert_(type(f(x, c)) is C)

2455:         assert_(type(f(a, x)) is A)

2456:         assert_(type(f(b, x)) is B)

2457:         assert_(type(f(c, x)) is C)

2459:         assert_(type(f(a, a)) is A)

2460:         assert_(type(f(a, b)) is B)

2461:         assert_(type(f(b, a)) is B)

2462:         assert_(type(f(b, b)) is B)

2463:         assert_(type(f(b, c)) is C)

2464:         assert_(type(f(c, b)) is C)

2465:         assert_(type(f(c, c)) is C)

2467:         assert_(type(ncu.exp(a) is A))

2468:         assert_(type(ncu.exp(b) is B))

2469:         assert_(type(ncu.exp(c) is C))

2481:         assert_raises(RuntimeError, ncu.maximum, a, a)

2482:         assert_raises(RuntimeError, ncu.maximum.reduce, a)

2500:             assert_raises(RuntimeError, ncu.frexp, 1, ok, bad)

2513:         assert_equal(ncu.maximum(a, a), None)

2528:         assert_equal(x, np.zeros(1))

2529:         assert_equal(type(x), np.ndarray)

2546:         assert_equal(x, np.array(2))

2547:         assert_equal(type(x), with_prepare)

2565:         assert_(not np.shares_memory(x, a))

2566:         assert_equal(x, np.array([2]))

2567:         assert_equal(type(x), with_prepare)

2579:         assert_raises(RuntimeError, ncu.maximum, a, a)

2580:         assert_raises(RuntimeError, ncu.maximum, a, a, where=False)

2589:         assert_raises_regex(TypeError, '2 required positional', np.sum, a)

2606:         assert_equal(res0[0], a)

2607:         assert_equal(res1[0], a)

2608:         assert_equal(res0[1], np.multiply)

2609:         assert_equal(res1[1], np.multiply)

2610:         assert_equal(res0[2], '__call__')

2611:         assert_equal(res1[2], '__call__')

2612:         assert_equal(res0[3], (a, b))

2613:         assert_equal(res1[3], (b, b))

2614:         assert_equal(res0[4], {})

2615:         assert_equal(res1[4], {'out'
2662:         assert_equal(res, "ASub")

2664:         assert_equal(res, "ASub")

2668:         assert_equal(res, "A")

2669:         assert_equal(c.count, 1)

2672:         assert_equal(c.count, 2)

2677:         assert_raises(TypeError, np.multiply, c, c_sub)

2678:         assert_equal(c.count, 1)

2679:         assert_equal(c_sub.count, 1)

2681:         assert_raises(TypeError, np.multiply, c_sub, c)

2682:         assert_equal(c.count, 1)

2683:         assert_equal(c_sub.count, 1)

2685:         assert_raises(TypeError, np.multiply, c, c)

2686:         assert_equal(c.count, 1)

2688:         assert_raises(TypeError, np.multiply, 2, c)

2689:         assert_equal(c.count, 1)

2692:         assert_equal(three_mul_ufunc(a, 1, 2), "A")

2693:         assert_equal(three_mul_ufunc(1, a, 2), "A")

2694:         assert_equal(three_mul_ufunc(1, 2, a), "A")

2696:         assert_equal(three_mul_ufunc(a, a, 6), "A")

2697:         assert_equal(three_mul_ufunc(a, 2, a), "A")

2698:         assert_equal(three_mul_ufunc(a, 2, b), "A")

2699:         assert_equal(three_mul_ufunc(a, 2, a_sub), "ASub")

2700:         assert_equal(three_mul_ufunc(a, a_sub, 3), "ASub")

2702:         assert_equal(three_mul_ufunc(c, a_sub, 3), "ASub")

2703:         assert_equal(c.count, 1)

2705:         assert_equal(three_mul_ufunc(1, a_sub, c), "ASub")

2706:         assert_equal(c.count, 0)

2709:         assert_equal(three_mul_ufunc(a, b, c), "A")

2710:         assert_equal(c.count, 0)

2712:         assert_equal(three_mul_ufunc(a, b, c_sub), "A")

2713:         assert_equal(c_sub.count, 0)

2714:         assert_equal(three_mul_ufunc(1, 2, b), "B")

2716:         assert_raises(TypeError, three_mul_ufunc, 1, 2, c)

2717:         assert_raises(TypeError, three_mul_ufunc, c_sub, 2, c)

2718:         assert_raises(TypeError, three_mul_ufunc, c_sub, 2, 3)

2721:         assert_equal(four_mul_ufunc(a, 1, 2, 3), "A")

2722:         assert_equal(four_mul_ufunc(1, a, 2, 3), "A")

2723:         assert_equal(four_mul_ufunc(1, 1, a, 3), "A")

2724:         assert_equal(four_mul_ufunc(1, 1, 2, a), "A")

2726:         assert_equal(four_mul_ufunc(a, b, 2, 3), "A")

2727:         assert_equal(four_mul_ufunc(1, a, 2, b), "A")

2728:         assert_equal(four_mul_ufunc(b, 1, a, 3), "B")

2729:         assert_equal(four_mul_ufunc(a_sub, 1, 2, a), "ASub")

2730:         assert_equal(four_mul_ufunc(a, 1, 2, a_sub), "ASub")

2734:         assert_raises(TypeError, four_mul_ufunc, 1, 2, 3, c)

2735:         assert_equal(c.count, 1)

2737:         assert_raises(TypeError, four_mul_ufunc, 1, 2, c_sub, c)

2738:         assert_equal(c_sub.count, 1)

2739:         assert_equal(c.count, 1)

2742:         assert_raises(TypeError, four_mul_ufunc, 1, c, c_sub, c2)

2743:         assert_equal(c_sub.count, 1)

2744:         assert_equal(c.count, 1)

2745:         assert_equal(c2.count, 0)

2747:         assert_raises(TypeError, four_mul_ufunc, c2, c, c_sub, c)

2748:         assert_equal(c_sub.count, 1)

2749:         assert_equal(c.count, 0)

2750:         assert_equal(c2.count, 1)

2760:         with assert_raises(TypeError)
2763:         assert_equal(res[0], a)

2764:         assert_equal(res[1], np.multiply)

2765:         assert_equal(res[2], '__call__')

2766:         assert_equal(res[3], (1, a))

2767:         assert_equal(res[4], {'subok'
2770:         assert_raises(TypeError, np.multiply, a)

2771:         assert_raises(TypeError, np.multiply, a, a, a, a)

2772:         assert_raises(TypeError, np.multiply, a, a, sig='a', signature='a')

2773:         assert_raises(TypeError, ncu_tests.inner1d, a, a, axis=0, axes=[0, 0])

2777:         assert_equal(res[0], a)

2778:         assert_equal(res[1], np.multiply)

2779:         assert_equal(res[2], 'reduce')

2780:         assert_equal(res[3], (a,))

2781:         assert_equal(res[4], {'dtype'
2790:         assert_equal(res[0], a)

2791:         assert_equal(res[1], np.multiply)

2792:         assert_equal(res[2], 'reduce')

2793:         assert_equal(res[3], (a,))

2794:         assert_equal(res[4], {'dtype'
2804:         assert_equal(res[4], {'axis'
2806:         assert_equal(res[4], {'axis'
2808:         assert_equal(res[4], {'axis'
2810:         assert_equal(res[4], {'axis'
2815:         assert_equal(res[4], {'axis'
2819:         assert_equal(res[4], {'axis'
2823:         assert_raises(ValueError, np.multiply.reduce, a, out=())

2824:         assert_raises(ValueError, np.multiply.reduce, a, out=('out0', 'out1'))

2825:         assert_raises(TypeError, np.multiply.reduce, a, 'axis0', axis='axis0')

2829:         assert_equal(res[0], a)

2830:         assert_equal(res[1], np.multiply)

2831:         assert_equal(res[2], 'accumulate')

2832:         assert_equal(res[3], (a,))

2833:         assert_equal(res[4], {'dtype'
2840:         assert_equal(res[0], a)

2841:         assert_equal(res[1], np.multiply)

2842:         assert_equal(res[2], 'accumulate')

2843:         assert_equal(res[3], (a,))

2844:         assert_equal(res[4], {'dtype'
2850:         assert_equal(res[4], {'axis'
2852:         assert_equal(res[4], {'axis'
2854:         assert_equal(res[4], {'axis'
2857:         assert_raises(ValueError, np.multiply.accumulate, a, out=())

2858:         assert_raises(ValueError, np.multiply.accumulate, a,

2860:         assert_raises(TypeError, np.multiply.accumulate, a,

2865:         assert_equal(res[0], a)

2866:         assert_equal(res[1], np.multiply)

2867:         assert_equal(res[2], 'reduceat')

2868:         assert_equal(res[3], (a, [4, 2]))

2869:         assert_equal(res[4], {'dtype'
2876:         assert_equal(res[0], a)

2877:         assert_equal(res[1], np.multiply)

2878:         assert_equal(res[2], 'reduceat')

2879:         assert_equal(res[3], (a, [4, 2]))

2880:         assert_equal(res[4], {'dtype'
2886:         assert_equal(res[4], {'axis'
2888:         assert_equal(res[4], {'axis'
2890:         assert_equal(res[4], {'axis'
2893:         assert_raises(ValueError, np.multiply.reduce, a, [4, 2], out=())

2894:         assert_raises(ValueError, np.multiply.reduce, a, [4, 2],

2896:         assert_raises(TypeError, np.multiply.reduce, a, [4, 2],

2901:         assert_equal(res[0], a)

2902:         assert_equal(res[1], np.multiply)

2903:         assert_equal(res[2], 'outer')

2904:         assert_equal(res[3], (a, 42))

2905:         assert_equal(res[4], {})

2908:         assert_raises(TypeError, np.multiply.outer, a)

2909:         assert_raises(TypeError, np.multiply.outer, a, a, a, a)

2910:         assert_raises(TypeError, np.multiply.outer, a, a, sig='a', signature='a')

2914:         assert_equal(res[0], a)

2915:         assert_equal(res[1], np.multiply)

2916:         assert_equal(res[2], 'at')

2917:         assert_equal(res[3], (a, [4, 2], 'b0'))

2920:         assert_raises(TypeError, np.multiply.at, a)

2921:         assert_raises(TypeError, np.multiply.at, a, a, a, a)

2942:         assert_equal(res0['out'][0], 'out_arg')

2943:         assert_equal(res1['out'][0], 'out_arg')

2944:         assert_equal(res2['out'][0], 'out_arg')

2945:         assert_equal(res3['out'][0], 'out_arg')

2946:         assert_equal(res4['out'][0], 'out_arg')

2947:         assert_equal(res5['out'][0], 'out_arg')

2952:         assert_equal(res6['out'][0], 'out0')

2953:         assert_equal(res6['out'][1], 'out1')

2954:         assert_equal(res7['out'][0], 'out0')

2955:         assert_equal(res7['out'][1], 'out1')

2958:         assert_(np.sin(a, None) == {})

2959:         assert_(np.sin(a, out=None) == {})

2960:         assert_(np.sin(a, out=(None,)) == {})

2961:         assert_(np.modf(a, None) == {})

2962:         assert_(np.modf(a, None, None) == {})

2963:         assert_(np.modf(a, out=(None, None)) == {})

2964:         with assert_raises(TypeError)
2970:         assert_raises(TypeError, np.multiply, a, b, 'one', out='two')

2971:         assert_raises(TypeError, np.multiply, a, b, 'one', 'two')

2972:         assert_raises(ValueError, np.multiply, a, b, out=('one', 'two'))

2973:         assert_raises(TypeError, np.multiply, a, out=())

2974:         assert_raises(TypeError, np.modf, a, 'one', out=('two', 'three'))

2975:         assert_raises(TypeError, np.modf, a, 'one', 'two', 'three')

2976:         assert_raises(ValueError, np.modf, a, out=('one', 'two', 'three'))

2977:         assert_raises(ValueError, np.modf, a, out=('one',))

2986:         assert_raises(ValueError, np.negative, 1, out=a)

2987:         assert_raises(ValueError, np.negative, a)

2988:         assert_raises(ValueError, np.divide, 1., a)

2998:         with assert_raises_regex(TypeError, fnmatch.translate(msg))
3004:         with assert_raises_regex(TypeError, fnmatch.translate(msg))
3016:         with assert_raises_regex(TypeError, msg)
3018:         with assert_raises_regex(TypeError, msg)
3020:         with assert_raises_regex(TypeError, msg)
3031:         assert_(np.negative(greedy) is greedy)

3032:         with assert_raises_regex(TypeError, msg)
3034:         with assert_raises_regex(TypeError, msg)
3047:         assert_equal(res[0], a)

3048:         assert_equal(res[1], inner1d)

3049:         assert_equal(res[2], '__call__')

3050:         assert_equal(res[3], (a, a))

3051:         assert_equal(res[4], {})

3054:         assert_equal(res[0], a)

3055:         assert_equal(res[1], inner1d)

3056:         assert_equal(res[2], '__call__')

3057:         assert_equal(res[3], (1, 1))

3058:         assert_equal(res[4], {'out'
3061:         assert_raises(TypeError, inner1d, a, out='two')

3062:         assert_raises(TypeError, inner1d, a, a, 'one', out='two')

3063:         assert_raises(TypeError, inner1d, a, a, 'one', 'two')

3064:         assert_raises(ValueError, inner1d, a, a, out=('one', 'two'))

3065:         assert_raises(ValueError, inner1d, a, a, out=())

3134:         assert_(np.all(check == b))

3135:         assert_equal(b.info, {'inputs'
3137:         assert_(np.all(check == b))

3138:         assert_equal(b.info, {'outputs'
3139:         assert_(b is a)

3142:         assert_(np.all(check == b))

3143:         assert_equal(b.info, {'inputs'
3148:         assert_equal(b1.info, {'inputs'
3150:         assert_(b2 is a)

3151:         assert_equal(b1.info, {'outputs'
3155:         assert_(c1 is a)

3156:         assert_(c2 is b)

3157:         assert_equal(c1.info, {'inputs'
3163:         assert_(c is a)

3164:         assert_equal(c.info, {'inputs'
3168:         assert_(a.__array_ufunc__(np.add, '__call__', a, b) is NotImplemented)

3169:         assert_(b.__array_ufunc__(np.add, '__call__', a, b) is NotImplemented)

3170:         assert_raises(TypeError, np.add, a, b)

3172:         assert_(a.__array_ufunc__(np.add, '__call__', a, b) is NotImplemented)

3173:         assert_(b.__array_ufunc__(np.add, '__call__', a, b) == "A!")

3174:         assert_(np.add(a, b) == "A!")

3180:         assert_equal(c, check)

3181:         assert_(c.info, {'inputs'
3184:         assert_equal(c, check)

3185:         assert_(c.info, {'inputs'
3188:         assert_equal(c, check)

3189:         assert_(c is b)

3190:         assert_(c.info, {'inputs'
3194:         assert_equal(c, check)

3195:         assert_(c is b)

3196:         assert_(c.info, {'inputs'
3200:         assert_equal(c, check)

3201:         assert_(c.info, {'inputs'
3204:         assert_equal(c, check)

3205:         assert_(c is b)

3206:         assert_(c.info, {'inputs'
3209:         assert_equal(c, check)

3210:         assert_(c.info, {'inputs'
3213:         assert_equal(c, check)

3214:         assert_(c is b)

3215:         assert_(c.info, {'inputs'
3219:         assert_equal(c, check)

3220:         assert_(c.info, {'inputs'
3223:         assert_equal(c, check)

3224:         assert_(c is b)

3225:         assert_(c.info, {'inputs'
3232:         assert_equal(a, check)

3233:         assert_(a.info, {'inputs'
3237:         assert_equal(a, check)

3238:         assert_(a.info, {'inputs'
3245:         assert_equal(np.choose(c, (a, 1)), np.array([1, 1]))

3267:         assert_equal(np.lcm(a, b), [60, 600])

3273:             assert_equal(np.lcm(a, b), [60]*4)

3277:         assert_equal(np.lcm.reduce([3, 12, 20]), 60)

3282:         assert_equal(np.lcm(a, b), [0, 20, 20, 60, 20, 20])

3288:         assert_equal(np.gcd(a, b), [4, 40])

3294:             assert_equal(np.gcd(a, b), [4]*4)

3298:         assert_equal(np.gcd.reduce(a), 5)

3303:         assert_equal(np.gcd(a, b), [20,  1,  2,  1,  4,  5])

3310:         assert_equal(np.lcm(a, b), 10*big)

3318:             assert_equal(np.gcd(a,  q*3), q)

3319:             assert_equal(np.gcd(a, -q*3), q)

3326:         assert_equal(np.gcd(a, b), 4*[Decimal('0.04')])

3327:         assert_equal(np.lcm(a, b), 4*[Decimal('0.60')])

3331:         assert_raises(TypeError, np.gcd, 0.3, 0.4)

3332:         assert_raises(TypeError, np.lcm, 0.3, 0.4)

3336:         assert_equal(np.array(2**200).item(), 2**200)

3341:         assert_equal(np.gcd(a, b), [2**100,               2**50 * 3**5])

3342:         assert_equal(np.lcm(a, b), [2**100 * 3**5 * 5**7, 2**100 * 3**10])

3344:         assert_equal(np.gcd(2**100, 3**100), 1)

3360:         assert_equal(np.floor(arr), [1, 1])

3361:         assert_equal(np.ceil(arr),  [2, 2])

3362:         assert_equal(np.trunc(arr), [3, 3])

3371:         assert_equal(np.floor(arr), [-3, -3])

3372:         assert_equal(np.ceil(arr),  [-2, -2])

3378:         assert_equal(np.floor(f), -2)

3379:         assert_equal(np.ceil(f), -1)

3380:         assert_equal(np.trunc(f), -1)

3397:             assert_almost_equal(fz.real, fr, err_msg='real part %s' % f)

3398:             assert_almost_equal(fz.imag, 0., err_msg='imag part %s' % f)

3406:             assert_almost_equal(fcf, fcd, decimal=6, err_msg='fch-fcd %s' % f)

3407:             assert_almost_equal(fcl, fcd, decimal=15, err_msg='fch-fcl %s' % f)

3425:         # check against bogus branch cuts
3450:         # check against bogus branch cuts
3476:                 assert_(abs(a - b) < atol, "%s %s
3493:             assert_(np.all(d < rtol), (np.argmax(d), x[np.argmax(d)], d.max(),

3498:             assert_(np.all(d < rtol), (np.argmax(d), x[np.argmax(d)], d.max(),

3503:             assert_(np.all(d < rtol), (np.argmax(d), x[np.argmax(d)], d.max(),

3508:             assert_(np.all(d < rtol), (np.argmax(d), x[np.argmax(d)], d.max(),

3535:         assert_(np.all(d < 1e-15))

3539:         assert_(np.all(d < 1e-15))

3543:         assert_(np.all(d < 1e-15))

3547:         assert_(np.all(d < 1e-15))

3555:             assert_(np.all(zp != zm), (zp, zm))

3559:             assert_(np.all(good), (func, z0[~good]))

3572:         assert_equal(add.__name__, 'add')

3573:         assert_(add.ntypes >= 18)  # don't fail if types added

3574:         assert_('ii->i' in add.types)

3575:         assert_equal(add.nin, 2)

3576:         assert_equal(add.nout, 1)

3577:         assert_equal(add.identity, 0)

3582:         assert_(ncu.add.__doc__.startswith(

3584:         assert_(ncu.frexp.__doc__.startswith(

3599:         assert_equal(a+a, a)

3610:         assert_equal(mul_ufunc.reduce([2, 3, 4]), 24)

3611:         assert_equal(mul_ufunc.reduce(np.ones((2, 2)), axis=(0, 1)), 1)

3612:         assert_equal(mul_ufunc.reduce([]), 1)

3616:         assert_equal(mul_ufunc.reduce([2, 3, 4]), 24)

3617:         assert_equal(mul_ufunc.reduce(np.ones((2, 2)), axis=(0, 1)), 1)

3618:         assert_raises(ValueError, lambda
3622:         assert_equal(mul_ufunc.reduce([2, 3, 4]), 24)

3623:         assert_raises(ValueError, lambda
3624:         assert_raises(ValueError, lambda
3665:     assert_(np.all(np.absolute(y0.real - yp.real) < atol), (y0, yp))

3666:     assert_(np.all(np.absolute(y0.imag - yp.imag) < atol), (y0, yp))

3667:     assert_(np.all(np.absolute(y0.real - ym.real*re_sign) < atol), (y0, ym))

3668:     assert_(np.all(np.absolute(y0.imag - ym.imag*im_sign) < atol), (y0, ym))

3678:             assert_(np.all(np.absolute(y0[jr].real - ym.real*re_sign) < atol), (y0[jr], ym))

3679:             assert_(np.all(np.absolute(y0[jr].imag - ym.imag*im_sign) < atol), (y0[jr], ym))

3685:             assert_(np.all(np.absolute(y0[ji].real - ym.real*re_sign) < atol), (y0[ji], ym))

3686:             assert_(np.all(np.absolute(y0[ji].imag - ym.imag*im_sign) < atol), (y0[ji], ym))

3689:     assert_(np.copysign(1, -1) == -1)

3691:         assert_(1 / np.copysign(0, -1) < 0)

3692:         assert_(1 / np.copysign(0, 1) > 0)

3693:     assert_(np.signbit(np.copysign(np.nan, -1)))

3694:     assert_(not np.signbit(np.copysign(np.nan, 1)))

3701:     assert_(np.nextafter(one, two) - one == eps)

3702:     assert_(np.nextafter(one, zero) - one < 0)

3703:     assert_(np.isnan(np.nextafter(np.nan, one)))

3704:     assert_(np.isnan(np.nextafter(one, np.nan)))

3705:     assert_(np.nextafter(one, one) == one)

3726:         # assert

3731:                 assert_(

3733:         assert_equal(np.nextafter(t(0), t(direction)) / t(2.1), direction * 0.0)

3741:         assert_(np.spacing(one) == eps)

3742:         assert_(np.isnan(np.spacing(nan)))

3743:         assert_(np.isnan(np.spacing(inf)))

3744:         assert_(np.isnan(np.spacing(-inf)))

3745:         assert_(np.spacing(t(1e30)) != 0)

3789:         assert_array_almost_equal(np.spacing(x), ref[dt], decimal=dec_)

3797:             assert_(np.nextafter(f, f1) - f == np.spacing(f))

3801:     assert_(np.signbit(np.nan) == 0)

3822:     assert_array_almost_equal(h1, h2)

3829:     assert_array_almost_equal(h1, h2)

3836:     assert_equal(result.dtype, x.dtype)

3837:     assert_equal(result.shape, (0,))

3841:     assert_equal(result.dtype, x.dtype)

3842:     assert_equal(result.shape, (0, 2))

3844:     assert_equal(result.dtype, x.dtype)

3845:     assert_equal(result.shape, (5, 0))

3861:                 assert_equal(x < y, False, err_msg="%r < %r" % (x, y))

3862:                 assert_equal(x > y, False, err_msg="%r > %r" % (x, y))

3863:                 assert_equal(x <= y, False, err_msg="%r <= %r" % (x, y))

3864:                 assert_equal(x >= y, False, err_msg="%r >= %r" % (x, y))

3865:                 assert_equal(x == y, False, err_msg="%r == %r" % (x, y))

3873:     assert_equal(val, int(float(val)))

3875:     assert_equal(val, np.rint(val))

3883:     assert_equal(np.maximum.accumulate(arr), out_max)

3884:     assert_equal(np.minimum.accumulate(arr), out_min)

3887:     with assert_no_warnings()
3900:     assert actual.__class__.__name__ == 'foo'

3924:         with assert_raises(TypeError) as a
3930:         assert type(np.add.outer([1, 2], arr)) is cls

3934:     with assert_raises(ValueError)
Total asserts: 940

Filename: numpy/core/tests/test_numeric.py
13:     assert_, assert_equal, assert_raises, assert_raises_regex,

14:     assert_array_equal, assert_almost_equal, assert_array_almost_equal,

15:     assert_warns, assert_array_max_ulp, HAS_REFCOUNT

27:         assert_equal(np.resize(A, (2, 4)), Ar1)

30:         assert_equal(np.resize(A, (4, 2)), Ar2)

33:         assert_equal(np.resize(A, (4, 3)), Ar3)

38:         assert_equal(np.resize(A, (2, 4)), Ar1)

41:         assert_equal(np.resize(A, (4, 2)), Ar2)

44:         assert_equal(np.resize(A, (4, 3)), Ar3)

49:         assert_array_equal(Ar, np.array([]))

50:         assert_equal(A.dtype, Ar.dtype)

53:         assert_equal(Ar.shape, (0, 2))

56:         assert_equal(Ar.shape, (2, 0))

62:         assert_array_equal(Ar, np.zeros((2, 1), Ar.dtype))

63:         assert_equal(A.dtype, Ar.dtype)

76:         assert type(np.resize(my_arr, 5)) is MyArray

77:         assert type(np.resize(my_arr, 0)) is MyArray

80:         assert type(np.resize(my_arr, 5)) is MyArray

93:         assert_equal(out, tgt)

99:         assert_equal(out, tgt)

106:         assert_equal(out, tgt)

113:         assert_equal(out, tgt)

117:         assert_(np.all(np.cumproduct(A) == np.array([1, 2, 6, 24, 120, 720])))

126:         assert_equal(out, tgt)

130:         assert_(np.mean(A) == 3.5)

131:         assert_(np.all(np.mean(A, 0) == np.array([2.5, 3.5, 4.5])))

132:         assert_(np.all(np.mean(A, 1) == np.array([2., 5.])))

136:             assert_(np.isnan(np.mean([])))

137:             assert_(w[0].category is RuntimeWarning)

141:         assert_equal(np.ptp(a, axis=0), 15.0)

149:         assert_equal(np.prod(arr, axis=-1), tgt)

154:         assert_equal(np.ravel(a), tgt)

161:         assert_equal(out, tgt)

166:         assert_equal(np.reshape(arr, (2, 6)), tgt)

171:         assert_equal(np.around(arr, decimals=1), tgt)

173:         assert_(isinstance(s.round(), np.float64))

174:         assert_equal(s.round(), 1.)

183:         assert_(isinstance(round(s), int))

184:         assert_(isinstance(round(s, None), int))

185:         assert_(isinstance(round(s, ndigits=None), int))

186:         assert_equal(round(s), 1)

187:         assert_equal(round(s, None), 1)

188:         assert_equal(round(s, ndigits=None), 1)

198:         assert_equal(round(val, ndigits), round(np.int32(val), ndigits))

202:         assert_(isinstance(round(f, -73), np.float64))

203:         assert_array_max_ulp(round(f, -73), 5.0 * 10**73)

204:         assert_(isinstance(round(f, ndigits=-73), np.float64))

205:         assert_array_max_ulp(round(f, ndigits=-73), 5.0 * 10**73)

208:         assert_(isinstance(round(i, -2), np.int64))

209:         assert_array_max_ulp(round(i, -2), 500)

210:         assert_(isinstance(round(i, ndigits=-2), np.int64))

211:         assert_array_max_ulp(round(i, ndigits=-2), 500)

216:         assert_equal(round(np.float64(f), -73), round(f, -73))

221:         assert_equal(out, 3)

225:         assert_(np.size(A) == 6)

226:         assert_(np.size(A, 0) == 2)

227:         assert_(np.size(A, 1) == 3)

231:         assert_equal(np.squeeze(A).shape, (3, 3))

232:         assert_equal(np.squeeze(np.zeros((1, 3, 1))).shape, (3,))

233:         assert_equal(np.squeeze(np.zeros((1, 3, 1)), axis=0).shape, (3, 1))

234:         assert_equal(np.squeeze(np.zeros((1, 3, 1)), axis=-1).shape, (1, 3))

235:         assert_equal(np.squeeze(np.zeros((1, 3, 1)), axis=2).shape, (1, 3))

236:         assert_equal(np.squeeze([np.zeros((3, 1))]).shape, (3,))

237:         assert_equal(np.squeeze([np.zeros((3, 1))], axis=0).shape, (3, 1))

238:         assert_equal(np.squeeze([np.zeros((3, 1))], axis=2).shape, (1, 3))

239:         assert_equal(np.squeeze([np.zeros((3, 1))], axis=-1).shape, (1, 3))

243:         assert_almost_equal(np.std(A), 1.707825127659933)

244:         assert_almost_equal(np.std(A, 0), np.array([1.5, 1.5, 1.5]))

245:         assert_almost_equal(np.std(A, 1), np.array([0.81649658, 0.81649658]))

249:             assert_(np.isnan(np.std([])))

250:             assert_(w[0].category is RuntimeWarning)

256:         assert_equal(out, tgt)

265:         assert_equal(tgt, out)

273:         assert_equal(out, tgt)

277:         assert_equal(np.trace(c), 5)

282:         assert_equal(np.transpose(arr, (1, 0)), tgt)

286:         assert_almost_equal(np.var(A), 2.9166666666666665)

287:         assert_almost_equal(np.var(A, 0), np.array([2.25, 2.25, 2.25]))

288:         assert_almost_equal(np.var(A, 1), np.array([0.66666667, 0.66666667]))

292:             assert_(np.isnan(np.var([])))

293:             assert_(w[0].category is RuntimeWarning)

297:         assert_almost_equal(np.var(B), 0.25)

302:         assert_(np.isscalar(3.1))

303:         assert_(np.isscalar(np.int16(12345)))

304:         assert_(np.isscalar(False))

305:         assert_(np.isscalar('numpy'))

306:         assert_(not np.isscalar([3.1]))

307:         assert_(not np.isscalar(None))

311:         assert_(np.isscalar(Fraction(5, 17)))

313:         assert_(np.isscalar(Number()))

321:         assert_((t and s) is s)

322:         assert_((f and s) is f)

327:         assert_((t | t) is t)

328:         assert_((f | t) is t)

329:         assert_((t | f) is t)

330:         assert_((f | f) is f)

335:         assert_((t & t) is t)

336:         assert_((f & t) is f)

337:         assert_((t & f) is f)

338:         assert_((f & f) is f)

343:         assert_((t ^ t) is f)

344:         assert_((f ^ t) is t)

345:         assert_((t ^ f) is t)

346:         assert_((f ^ f) is f)

363:         assert_(self.t.all())

364:         assert_(self.t.any())

365:         assert_(not self.f.all())

366:         assert_(not self.f.any())

367:         assert_(self.nm.any())

368:         assert_(self.im.any())

369:         assert_(not self.nm.all())

370:         assert_(not self.im.all())

375:             assert_(np.any(d))

378:             assert_(not np.all(e))

379:             assert_array_equal(e, ~d)

384:             assert_(np.any(d), msg="%r" % i)

387:             assert_(not np.all(e), msg="%r" % i)

390:         assert_array_equal(~self.t, self.f)

391:         assert_array_equal(np.abs(~self.t), self.f)

392:         assert_array_equal(np.abs(~self.f), self.t)

393:         assert_array_equal(np.abs(self.f), self.f)

394:         assert_array_equal(~np.abs(self.f), self.t)

395:         assert_array_equal(~np.abs(self.t), self.f)

396:         assert_array_equal(np.abs(~self.nm), self.im)

398:         assert_array_equal(self.o, self.f)

400:         assert_array_equal(self.o, self.t)

403:         assert_array_equal(self.t | self.t, self.t)

404:         assert_array_equal(self.f | self.f, self.f)

405:         assert_array_equal(self.t | self.f, self.t)

406:         assert_array_equal(self.f | self.t, self.t)

408:         assert_array_equal(self.o, self.t)

409:         assert_array_equal(self.t & self.t, self.t)

410:         assert_array_equal(self.f & self.f, self.f)

411:         assert_array_equal(self.t & self.f, self.f)

412:         assert_array_equal(self.f & self.t, self.f)

414:         assert_array_equal(self.o, self.t)

415:         assert_array_equal(self.t ^ self.t, self.f)

416:         assert_array_equal(self.f ^ self.f, self.f)

417:         assert_array_equal(self.t ^ self.f, self.t)

418:         assert_array_equal(self.f ^ self.t, self.t)

420:         assert_array_equal(self.o, self.f)

422:         assert_array_equal(self.nm & self.t, self.nm)

423:         assert_array_equal(self.im & self.f, False)

424:         assert_array_equal(self.nm & True, self.nm)

425:         assert_array_equal(self.im & False, self.f)

426:         assert_array_equal(self.nm | self.t, self.t)

427:         assert_array_equal(self.im | self.f, self.im)

428:         assert_array_equal(self.nm | True, self.t)

429:         assert_array_equal(self.im | False, self.im)

430:         assert_array_equal(self.nm ^ self.t, self.im)

431:         assert_array_equal(self.im ^ self.f, self.im)

432:         assert_array_equal(self.nm ^ True, self.im)

433:         assert_array_equal(self.im ^ False, self.im)

486:             assert_array_equal(self.f[i
487:             assert_array_equal(self.f[i
488:             assert_array_equal(self.f[i
489:             assert_array_equal(-self.f[i
490:             assert_array_equal(-self.f[i
492:             assert_array_equal(r, self.ef[i
495:             assert_array_equal(r, r2)

496:             assert_array_equal(r, r3)

498:             assert_array_equal(r.view(np.int8), r.astype(np.int8))

499:             assert_array_equal(r2.view(np.int8), r2.astype(np.int8))

500:             assert_array_equal(r3.view(np.int8), r3.astype(np.int8))

503:             assert_array_equal(np.isnan(self.nf[i
504:             assert_array_equal(np.isfinite(self.nf[i
505:             assert_array_equal(np.isfinite(self.inff[i
506:             assert_array_equal(np.isinf(self.inff[i
507:             assert_array_equal(np.signbit(self.signf[i
512:             assert_array_equal(self.d[i
513:             assert_array_equal(self.d[i
514:             assert_array_equal(self.d[i
515:             assert_array_equal(-self.d[i
516:             assert_array_equal(-self.d[i
518:             assert_array_equal(r, self.ed[i
521:             assert_array_equal(r, r2)

522:             assert_array_equal(r, r3)

524:             assert_array_equal(r.view(np.int8), r.astype(np.int8))

525:             assert_array_equal(r2.view(np.int8), r2.astype(np.int8))

526:             assert_array_equal(r3.view(np.int8), r3.astype(np.int8))

529:             assert_array_equal(np.isnan(self.nd[i
530:             assert_array_equal(np.isfinite(self.nd[i
531:             assert_array_equal(np.isfinite(self.infd[i
532:             assert_array_equal(np.isinf(self.infd[i
533:             assert_array_equal(np.signbit(self.signd[i
539:         assert_equal(err,

550:             assert_(err == old)

552:             assert_(new['divide'] == 'print')

554:             assert_(np.geterr()['over'] == 'raise')

555:             assert_(new['divide'] == 'print')

557:             assert_(np.geterr() == old)

562:             with assert_raises(FloatingPointError)
577:                     assert_equal(len(w), 1)

582:                 assert_(len(extobj_err) == 2)

583:                 assert_("divide" in extobj_err[0])

588:             assert_equal(self.called, 1)

593:             assert_equal(self.called, 2)

618:     def assert_raises_fpe(self, fpeerr, flop, x, y)
622:             assert_(False,

625:             assert_(str(exc).find(fpeerr) >= 0,

628:     def assert_op_raises_fpe(self, fpeerr, flop, sc1, sc2)
635:         self.assert_raises_fpe(fpeerr, flop, sc1, sc2)

636:         self.assert_raises_fpe(fpeerr, flop, sc1[()], sc2)

637:         self.assert_raises_fpe(fpeerr, flop, sc1, sc2[()])

638:         self.assert_raises_fpe(fpeerr, flop, sc1[()], sc2[()])

668:             # pass the assert

670:                 self.assert_raises_fpe(underflow,

672:                 self.assert_raises_fpe(underflow,

674:             self.assert_raises_fpe(overflow,

676:             self.assert_raises_fpe(overflow,

678:             self.assert_raises_fpe(overflow,

680:             self.assert_raises_fpe(overflow,

682:             self.assert_raises_fpe(overflow,

684:             self.assert_raises_fpe(divbyzero,

686:             self.assert_raises_fpe(

689:             self.assert_raises_fpe(invalid,

691:             self.assert_raises_fpe(

694:             self.assert_raises_fpe(

697:             self.assert_raises_fpe(invalid,

706:                 assert_equal(len(w), 1)

707:                 assert_("divide by zero" in str(w[0].message))

709:                 assert_equal(len(w), 2)

710:                 assert_("overflow" in str(w[-1].message))

712:                 assert_equal(len(w), 3)

713:                 assert_("invalid value" in str(w[-1].message))

715:                 assert_equal(len(w), 4)

716:                 assert_("underflow" in str(w[-1].message))

729:         assert_equal(promote_func(i8, i16), np.dtype(np.int16))

730:         assert_equal(promote_func(i32, i8), np.dtype(np.int32))

731:         assert_equal(promote_func(i16, i64), np.dtype(np.int64))

732:         assert_equal(promote_func(u8, u32), np.dtype(np.uint32))

733:         assert_equal(promote_func(f32, f64), np.dtype(np.float64))

734:         assert_equal(promote_func(fld, f32), np.dtype(np.longdouble))

735:         assert_equal(promote_func(f64, fld), np.dtype(np.longdouble))

736:         assert_equal(promote_func(c128, c64), np.dtype(np.complex128))

737:         assert_equal(promote_func(cld, c128), np.dtype(np.clongdouble))

738:         assert_equal(promote_func(c64, fld), np.dtype(np.clongdouble))

741:         assert_equal(promote_func(b, i32), np.dtype(np.int32))

742:         assert_equal(promote_func(b, u8), np.dtype(np.uint8))

743:         assert_equal(promote_func(i8, u8), np.dtype(np.int16))

744:         assert_equal(promote_func(u8, i32), np.dtype(np.int32))

745:         assert_equal(promote_func(i64, u32), np.dtype(np.int64))

746:         assert_equal(promote_func(u64, i32), np.dtype(np.float64))

747:         assert_equal(promote_func(i32, f32), np.dtype(np.float64))

748:         assert_equal(promote_func(i64, f32), np.dtype(np.float64))

749:         assert_equal(promote_func(f32, i16), np.dtype(np.float32))

750:         assert_equal(promote_func(f32, u32), np.dtype(np.float64))

751:         assert_equal(promote_func(f32, c64), np.dtype(np.complex64))

752:         assert_equal(promote_func(c128, f32), np.dtype(np.complex128))

753:         assert_equal(promote_func(cld, f64), np.dtype(np.clongdouble))

756:         assert_equal(promote_func(np.array([b]), i8), np.dtype(np.int8))

757:         assert_equal(promote_func(np.array([b]), u8), np.dtype(np.uint8))

758:         assert_equal(promote_func(np.array([b]), i32), np.dtype(np.int32))

759:         assert_equal(promote_func(np.array([b]), u32), np.dtype(np.uint32))

760:         assert_equal(promote_func(np.array([i8]), i64), np.dtype(np.int8))

761:         assert_equal(promote_func(u64, np.array([i32])), np.dtype(np.int32))

762:         assert_equal(promote_func(i64, np.array([u32])), np.dtype(np.uint32))

763:         assert_equal(promote_func(np.int32(-1), np.array([u64])),

765:         assert_equal(promote_func(f64, np.array([f32])), np.dtype(np.float32))

766:         assert_equal(promote_func(fld, np.array([f32])), np.dtype(np.float32))

767:         assert_equal(promote_func(np.array([f64]), fld), np.dtype(np.float64))

768:         assert_equal(promote_func(fld, np.array([c64])),

770:         assert_equal(promote_func(c64, np.array([f64])),

772:         assert_equal(promote_func(np.complex64(3j), np.array([f64])),

777:         assert_equal(promote_func(np.array([b]), f64), np.dtype(np.float64))

778:         assert_equal(promote_func(np.array([b]), i64), np.dtype(np.int64))

779:         assert_equal(promote_func(np.array([b]), u64), np.dtype(np.uint64))

780:         assert_equal(promote_func(np.array([i8]), f64), np.dtype(np.float64))

781:         assert_equal(promote_func(np.array([u16]), f64), np.dtype(np.float64))

785:         assert_equal(promote_func(np.array([u16]), i32), np.dtype(np.uint16))

791:         assert_equal(promote_func(np.array([f32]), c128),

804:             assert_equal(b.dtype, np.dtype('f8'), "array type %s" % a.dtype)

806:             assert_equal(b.dtype, np.dtype(np.longdouble),

809:             assert_equal(b.dtype, np.dtype('f8'), "array type %s" % a.dtype)

811:             assert_equal(b.dtype, np.dtype('f4'), "array type %s" % a.dtype)

813:             assert_equal(b.dtype, np.dtype('f2'), "array type %s" % a.dtype)

816:             assert_equal(b.dtype, np.dtype('c16'), "array type %s" % a.dtype)

818:             assert_equal(b.dtype, np.dtype(np.clongdouble),

821:             assert_equal(b.dtype, np.dtype('c16'), "array type %s" % a.dtype)

823:             assert_equal(b.dtype, np.dtype('c8'), "array type %s" % a.dtype)

834:         # assert_equal(b, [1.0, 0.0])

835:         # assert_equal(b.dtype, np.dtype('f4'))

837:         # assert_equal(b, [0.0, 1.5])

838:         # assert_equal(b.dtype, np.dtype('f4'))

845:         # assert_equal(b, [0.0, 1.5])

846:         # assert_equal(b.dtype, np.dtype('f4'))

850:         assert_(np.result_type(None) == np.dtype(None))

854:         assert_equal(np.promote_types('<i8', '<i8'), np.dtype('i8'))

855:         assert_equal(np.promote_types('>i8', '>i8'), np.dtype('i8'))

857:         assert_equal(np.promote_types('>i8', '>U16'), np.dtype('U21'))

858:         assert_equal(np.promote_types('<i8', '<U16'), np.dtype('U21'))

859:         assert_equal(np.promote_types('>U16', '>i8'), np.dtype('U21'))

860:         assert_equal(np.promote_types('<U16', '<i8'), np.dtype('U21'))

862:         assert_equal(np.promote_types('<S5', '<U8'), np.dtype('U8'))

863:         assert_equal(np.promote_types('>S5', '>U8'), np.dtype('U8'))

864:         assert_equal(np.promote_types('<U8', '<S5'), np.dtype('U8'))

865:         assert_equal(np.promote_types('>U8', '>S5'), np.dtype('U8'))

866:         assert_equal(np.promote_types('<U5', '<U8'), np.dtype('U8'))

867:         assert_equal(np.promote_types('>U8', '>U5'), np.dtype('U8'))

869:         assert_equal(np.promote_types('<M8', '<M8'), np.dtype('M8'))

870:         assert_equal(np.promote_types('>M8', '>M8'), np.dtype('M8'))

871:         assert_equal(np.promote_types('<m8', '<m8'), np.dtype('m8'))

872:         assert_equal(np.promote_types('>m8', '>m8'), np.dtype('m8'))

885:             assert np.can_cast(numpy_dtype, rational_dt)

886:             assert np.promote_types(numpy_dtype, rational_dt) is rational_dt

890:             assert not np.can_cast(numpy_dtype, rational_dt)

895:         assert np.can_cast(rational_dt, double_dt)

896:         assert np.promote_types(double_dt, rational_dt) is double_dt

909:         assert_equal(promote_types('bool', S), np.dtype(S+'5'))

910:         assert_equal(promote_types('b', S), np.dtype(S+'4'))

911:         assert_equal(promote_types('u1', S), np.dtype(S+'3'))

912:         assert_equal(promote_types('u2', S), np.dtype(S+'5'))

913:         assert_equal(promote_types('u4', S), np.dtype(S+'10'))

914:         assert_equal(promote_types('u8', S), np.dtype(S+'20'))

915:         assert_equal(promote_types('i1', S), np.dtype(S+'4'))

916:         assert_equal(promote_types('i2', S), np.dtype(S+'6'))

917:         assert_equal(promote_types('i4', S), np.dtype(S+'11'))

918:         assert_equal(promote_types('i8', S), np.dtype(S+'21'))

920:         assert_equal(promote_types('bool', S+'1'), np.dtype(S+'5'))

921:         assert_equal(promote_types('bool', S+'30'), np.dtype(S+'30'))

922:         assert_equal(promote_types('b', S+'1'), np.dtype(S+'4'))

923:         assert_equal(promote_types('b', S+'30'), np.dtype(S+'30'))

924:         assert_equal(promote_types('u1', S+'1'), np.dtype(S+'3'))

925:         assert_equal(promote_types('u1', S+'30'), np.dtype(S+'30'))

926:         assert_equal(promote_types('u2', S+'1'), np.dtype(S+'5'))

927:         assert_equal(promote_types('u2', S+'30'), np.dtype(S+'30'))

928:         assert_equal(promote_types('u4', S+'1'), np.dtype(S+'10'))

929:         assert_equal(promote_types('u4', S+'30'), np.dtype(S+'30'))

930:         assert_equal(promote_types('u8', S+'1'), np.dtype(S+'20'))

931:         assert_equal(promote_types('u8', S+'30'), np.dtype(S+'30'))

933:         assert_equal(promote_types('O', S+'30'), np.dtype('O'))

945:         assert res.metadata == dtype.metadata

956:             assert res.metadata is None

958:             assert res.metadata == metadata

961:             assert res.isnative

992:             assert res.metadata is None

995:             assert res is dtype1

1005:             assert res.metadata is None

1009:         assert dtype1.metadata == metadata1

1013:             assert res_bs.newbyteorder() == res

1015:             assert res_bs == res

1016:         assert res_bs.metadata == res.metadata

1035:         assert np.promote_types(dtype1, dtype2) is dtype1

1038:         assert_(np.can_cast(np.int32, np.int64))

1039:         assert_(np.can_cast(np.float64, complex))

1040:         assert_(not np.can_cast(complex, float))

1042:         assert_(np.can_cast('i8', 'f8'))

1043:         assert_(not np.can_cast('i8', 'f4'))

1044:         assert_(np.can_cast('i4', 'S11'))

1046:         assert_(np.can_cast('i8', 'i8', 'no'))

1047:         assert_(not np.can_cast('<i8', '>i8', 'no'))

1049:         assert_(np.can_cast('<i8', '>i8', 'equiv'))

1050:         assert_(not np.can_cast('<i4', '>i8', 'equiv'))

1052:         assert_(np.can_cast('<i4', '>i8', 'safe'))

1053:         assert_(not np.can_cast('<i8', '>i4', 'safe'))

1055:         assert_(np.can_cast('<i8', '>i4', 'same_kind'))

1056:         assert_(not np.can_cast('<i8', '>u4', 'same_kind'))

1058:         assert_(np.can_cast('<i8', '>u4', 'unsafe'))

1060:         assert_(np.can_cast('bool', 'S5'))

1061:         assert_(not np.can_cast('bool', 'S4'))

1063:         assert_(np.can_cast('b', 'S4'))

1064:         assert_(not np.can_cast('b', 'S3'))

1066:         assert_(np.can_cast('u1', 'S3'))

1067:         assert_(not np.can_cast('u1', 'S2'))

1068:         assert_(np.can_cast('u2', 'S5'))

1069:         assert_(not np.can_cast('u2', 'S4'))

1070:         assert_(np.can_cast('u4', 'S10'))

1071:         assert_(not np.can_cast('u4', 'S9'))

1072:         assert_(np.can_cast('u8', 'S20'))

1073:         assert_(not np.can_cast('u8', 'S19'))

1075:         assert_(np.can_cast('i1', 'S4'))

1076:         assert_(not np.can_cast('i1', 'S3'))

1077:         assert_(np.can_cast('i2', 'S6'))

1078:         assert_(not np.can_cast('i2', 'S5'))

1079:         assert_(np.can_cast('i4', 'S11'))

1080:         assert_(not np.can_cast('i4', 'S10'))

1081:         assert_(np.can_cast('i8', 'S21'))

1082:         assert_(not np.can_cast('i8', 'S20'))

1084:         assert_(np.can_cast('bool', 'S5'))

1085:         assert_(not np.can_cast('bool', 'S4'))

1087:         assert_(np.can_cast('b', 'U4'))

1088:         assert_(not np.can_cast('b', 'U3'))

1090:         assert_(np.can_cast('u1', 'U3'))

1091:         assert_(not np.can_cast('u1', 'U2'))

1092:         assert_(np.can_cast('u2', 'U5'))

1093:         assert_(not np.can_cast('u2', 'U4'))

1094:         assert_(np.can_cast('u4', 'U10'))

1095:         assert_(not np.can_cast('u4', 'U9'))

1096:         assert_(np.can_cast('u8', 'U20'))

1097:         assert_(not np.can_cast('u8', 'U19'))

1099:         assert_(np.can_cast('i1', 'U4'))

1100:         assert_(not np.can_cast('i1', 'U3'))

1101:         assert_(np.can_cast('i2', 'U6'))

1102:         assert_(not np.can_cast('i2', 'U5'))

1103:         assert_(np.can_cast('i4', 'U11'))

1104:         assert_(not np.can_cast('i4', 'U10'))

1105:         assert_(np.can_cast('i8', 'U21'))

1106:         assert_(not np.can_cast('i8', 'U20'))

1108:         assert_raises(TypeError, np.can_cast, 'i4', None)

1109:         assert_raises(TypeError, np.can_cast, None, 'i4')

1112:         assert_(np.can_cast(from_=np.int32, to=np.int64))

1116:         assert_(not np.can_cast('i4', 'i4,i4'))

1117:         assert_(not np.can_cast('i4', 'i4,i2'))

1118:         assert_(np.can_cast('i4', 'i4,i4', casting='unsafe'))

1119:         assert_(np.can_cast('i4', 'i4,i2', casting='unsafe'))

1121:         assert_(not np.can_cast('i2', [('f1', 'i4')]))

1122:         assert_(not np.can_cast('i2', [('f1', 'i4')], casting='same_kind'))

1123:         assert_(np.can_cast('i2', [('f1', 'i4')], casting='unsafe'))

1125:         assert_(not np.can_cast('i2', [('f1', 'i4,i4')]))

1126:         assert_(np.can_cast('i2', [('f1', 'i4,i4')], casting='unsafe'))

1127:         assert_(not np.can_cast('i2', [('f1', '(2,3)i4')]))

1128:         assert_(np.can_cast('i2', [('f1', '(2,3)i4')], casting='unsafe'))

1132:         assert_(not np.can_cast([('f1', 'i4')], 'i4'))

1133:         assert_(np.can_cast([('f1', 'i4')], 'i4', casting='unsafe'))

1134:         assert_(np.can_cast([('f1', 'i4')], 'i2', casting='unsafe'))

1137:         assert_(not np.can_cast('i4,i4', 'i4', casting='unsafe'))

1139:         assert_(not np.can_cast([('f1', [('x', 'i4')])], 'i4'))

1140:         assert_(np.can_cast([('f1', [('x', 'i4')])], 'i4', casting='unsafe'))

1143:         assert_(not np.can_cast([('f0', '(3,)i4')], 'i4'))

1144:         assert_(np.can_cast([('f0', '(3,)i4')], 'i4', casting='unsafe'))

1146:         assert_(not np.can_cast([('f0', ('i4,i4'), (2,))], 'i4',

1153:             assert_(np.can_cast(ii.min, dt))

1154:             assert_(np.can_cast(ii.max, dt))

1155:             assert_(not np.can_cast(ii.min - 1, dt))

1156:             assert_(not np.can_cast(ii.max + 1, dt))

1160:             assert_(np.can_cast(fi.min, dt))

1161:             assert_(np.can_cast(fi.max, dt))

1177:         assert_(ai32.dtype == np.dtype(np.int32))

1178:         assert_(ai64.dtype == np.dtype(np.int64))

1179:         assert_(af.dtype == np.dtype(float))

1185:         assert_(len(a) == len(expected))

1186:         assert_(len(a20) == 20)

1187:         assert_raises(ValueError, np.fromiter,

1194:         assert_(np.alltrue(a == expected, axis=0))

1195:         assert_(np.alltrue(a20 == expected[
1208:         assert_raises(NIterError, np.fromiter,

1215:         assert_raises(NIterError, np.fromiter,

1221:         assert_equal(np.count_nonzero(np.array([])), 0)

1222:         assert_equal(np.count_nonzero(np.array([], dtype='?')), 0)

1223:         assert_equal(np.nonzero(np.array([])), ([],))

1225:         assert_equal(np.count_nonzero(np.array([0])), 0)

1226:         assert_equal(np.count_nonzero(np.array([0], dtype='?')), 0)

1227:         assert_equal(np.nonzero(np.array([0])), ([],))

1229:         assert_equal(np.count_nonzero(np.array([1])), 1)

1230:         assert_equal(np.count_nonzero(np.array([1], dtype='?')), 1)

1231:         assert_equal(np.nonzero(np.array([1])), ([0],))

1234:         assert_equal(np.count_nonzero(np.array(0)), 0)

1235:         assert_equal(np.count_nonzero(np.array(0, dtype='?')), 0)

1236:         with assert_warns(DeprecationWarning)
1237:             assert_equal(np.nonzero(np.array(0)), ([],))

1239:         assert_equal(np.count_nonzero(np.array(1)), 1)

1240:         assert_equal(np.count_nonzero(np.array(1, dtype='?')), 1)

1241:         with assert_warns(DeprecationWarning)
1242:             assert_equal(np.nonzero(np.array(1)), ([0],))

1246:         assert_equal(np.count_nonzero(x), 4)

1247:         assert_equal(np.count_nonzero(x), 4)

1248:         assert_equal(np.nonzero(x), ([0, 2, 3, 6],))

1254:         assert_equal(np.count_nonzero(x['a']), 3)

1255:         assert_equal(np.count_nonzero(x['b']), 4)

1256:         assert_equal(np.count_nonzero(x['c']), 3)

1257:         assert_equal(np.count_nonzero(x['d']), 4)

1258:         assert_equal(np.nonzero(x['a']), ([0, 2, 3],))

1259:         assert_equal(np.nonzero(x['b']), ([0, 2, 3, 4],))

1263:         assert_equal(np.count_nonzero(x.astype('i1')), 3)

1264:         assert_equal(np.count_nonzero(x.astype('i2')), 3)

1265:         assert_equal(np.count_nonzero(x.astype('i4')), 3)

1266:         assert_equal(np.count_nonzero(x.astype('i8')), 3)

1267:         assert_equal(np.nonzero(x), ([0, 1, 1], [1, 0, 2]))

1270:         assert_equal(np.count_nonzero(x.astype('i1')), 3)

1271:         assert_equal(np.count_nonzero(x.astype('i2')), 3)

1272:         assert_equal(np.count_nonzero(x.astype('i4')), 3)

1273:         assert_equal(np.count_nonzero(x.astype('i8')), 3)

1274:         assert_equal(np.nonzero(x), ([0, 1, 2], [0, 1, 2]))

1279:         assert_equal(np.count_nonzero(x['a']), 4)

1280:         assert_equal(np.count_nonzero(x['b']), 5)

1281:         assert_equal(np.nonzero(x['a']), ([0, 1, 1, 2], [2, 0, 1, 1]))

1282:         assert_equal(np.nonzero(x['b']), ([0, 0, 1, 2, 2], [0, 2, 0, 1, 2]))

1284:         assert_(not x['a'].T.flags.aligned)

1285:         assert_equal(np.count_nonzero(x['a'].T), 4)

1286:         assert_equal(np.count_nonzero(x['b'].T), 5)

1287:         assert_equal(np.nonzero(x['a'].T), ([0, 1, 1, 2], [1, 1, 2, 0]))

1288:         assert_equal(np.nonzero(x['b'].T), ([0, 0, 1, 2, 2], [0, 1, 2, 0, 2]))

1295:             assert_equal(np.nonzero(c)[0], np.arange(i, 200 + i, 20))

1300:             assert_equal(np.nonzero(c)[0],

1313:                         assert_(type(nzx_i) is np.ndarray)

1314:                         assert_(nzx_i.flags.writeable)

1321:         assert_equal(np.count_nonzero(m, axis=0), expected)

1324:         assert_equal(np.count_nonzero(m, axis=1), expected)

1326:         assert_raises(ValueError, np.count_nonzero, m, axis=(1, 1))

1327:         assert_raises(TypeError, np.count_nonzero, m, axis='foo')

1328:         assert_raises(np.AxisError, np.count_nonzero, m, axis=3)

1329:         assert_raises(TypeError, np.count_nonzero,

1338:         def assert_equal_w_dt(a, b, err_msg)
1339:             assert_equal(a.dtype, b.dtype, err_msg=err_msg)

1340:             assert_equal(a, b, err_msg=err_msg)

1362:                 assert_equal_w_dt(np.count_nonzero(m, axis=0),

1366:                 assert_equal_w_dt(np.count_nonzero(m, axis=1),

1370:                 assert_equal(np.count_nonzero(m, axis=(0, 1)),

1372:                 assert_equal(np.count_nonzero(m, axis=None),

1374:                 assert_equal(np.count_nonzero(m),

1383:                 assert_equal_w_dt(np.count_nonzero(m, axis=0),

1387:                 assert_equal_w_dt(np.count_nonzero(m, axis=1),

1391:                 assert_equal(np.count_nonzero(m, axis=(0, 1)),

1393:                 assert_equal(np.count_nonzero(m, axis=None),

1395:                 assert_equal(np.count_nonzero(m),

1416:                     assert_equal(

1423:         assert_equal(np.count_nonzero(a, axis=()), a.astype(bool))

1429:         assert_equal(np.count_nonzero(a, axis=0, keepdims=True),

1431:         assert_equal(np.count_nonzero(a, axis=1, keepdims=True),

1433:         assert_equal(np.count_nonzero(a, keepdims=True),

1442:         assert_equal(m.nonzero(), tgt)

1447:         assert_raises(ValueError, np.nonzero, a)

1453:         assert_raises(ValueError, np.nonzero, np.array([BoolErrors()]))

1475:         assert_raises(RuntimeError, np.nonzero, a)

1478:         assert_raises(RuntimeError, np.nonzero, a)

1482:         assert_raises(RuntimeError, np.nonzero, a)

1485:         assert_raises(RuntimeError, np.nonzero, a)

1491:         assert arr.flags.aligned  # structs are considered "aligned"

1492:         assert not arr["f2"].flags.aligned

1495:         assert arr.flags.aligned

1497:         assert arr.flags.aligned

1520:         # assert that an exception in first pass is handled correctly

1522:         assert_raises(ValueError, np.nonzero, a)

1526:         assert_raises(ValueError, np.nonzero, a)

1530:         assert_raises(ValueError, np.nonzero, a)

1551:         assert arr.dtype is dt

1561:         assert_((np.array([a[0][V > 0], a[1][V > 0], a[2][V > 0]]) == a[
1567:         assert_equal(c, [])

1568:         assert_equal(c.dtype, np.dtype('int32'))

1573:         assert_equal(np.binary_repr(0), '0')

1576:         assert_equal(np.binary_repr(10), '1010')

1577:         assert_equal(np.binary_repr(12522),

1579:         assert_equal(np.binary_repr(10736848),

1583:         assert_equal(np.binary_repr(-1), '-1')

1584:         assert_equal(np.binary_repr(-10), '-1010')

1585:         assert_equal(np.binary_repr(-12522),

1587:         assert_equal(np.binary_repr(-10736848),

1591:         assert_equal(np.binary_repr(0, width=5), '00000')

1592:         assert_equal(np.binary_repr(10, width=7), '0001010')

1593:         assert_equal(np.binary_repr(-5, width=7), '1111011')

1600:         assert_equal(np.binary_repr(-128, width=8), '10000000')

1605:             assert_equal(np.binary_repr(num, width=width), exp)

1609:         assert_equal(np.binary_repr(np.int64(-2**62), width=64),

1615:         assert_equal(np.base_repr(3**5, 3), '100000')

1618:         assert_equal(np.base_repr(12, 10), '12')

1619:         assert_equal(np.base_repr(12, 10, 4), '000012')

1620:         assert_equal(np.base_repr(12, 4), '30')

1621:         assert_equal(np.base_repr(3731624803700888, 36), '10QR0ROFCEW')

1624:         assert_equal(np.base_repr(-12, 10), '-12')

1625:         assert_equal(np.base_repr(-12, 10, 4), '-000012')

1626:         assert_equal(np.base_repr(-12, 4), '-30')

1629:         with assert_raises(ValueError)
1631:         with assert_raises(ValueError)
1638:         assert_(res)

1639:         assert_(type(res) is bool)

1641:         assert_(not res)

1642:         assert_(type(res) is bool)

1644:         assert_(not res)

1645:         assert_(type(res) is bool)

1647:         assert_(not res)

1648:         assert_(type(res) is bool)

1650:         assert_(res)

1651:         assert_(type(res) is bool)

1654:         assert_(res)

1655:         assert_(type(res) is bool)

1664:         assert_(not np.array_equal(a1, a1))

1665:         assert_(np.array_equal(a1, a1, equal_nan=True))

1666:         assert_(not np.array_equal(a1, a2, equal_nan=True))

1668:         assert_(not np.array_equal(a1, a3, equal_nan=True))

1671:         assert_(not np.array_equal(a, a))

1672:         assert_(np.array_equal(a, a, equal_nan=True))

1675:         assert_(np.array_equal(a, a))

1676:         assert_(np.array_equal(a, a, equal_nan=True))

1679:         assert_(not np.array_equal(a, a))

1680:         assert_(np.array_equal(a, a, equal_nan=True))

1684:         assert_(not np.array_equal(a, b, equal_nan=False))

1685:         assert_(np.array_equal(a, b, equal_nan=True))

1689:         assert_equal(a == None, [True, False, True])

1690:         assert_equal(a != None, [False, True, False])

1693:         assert_equal(a == None, [False, False, False])

1694:         assert_equal(a != None, [True, True, True])

1698:         assert_(res)

1699:         assert_(type(res) is bool)

1701:         assert_(not res)

1702:         assert_(type(res) is bool)

1704:         assert_(not res)

1705:         assert_(type(res) is bool)

1707:         assert_(not res)

1708:         assert_(type(res) is bool)

1711:         assert_(res)

1712:         assert_(type(res) is bool)

1714:         assert_(res)

1715:         assert_(type(res) is bool)

1717:         assert_(not res)

1718:         assert_(type(res) is bool)

1720:         assert_(not res)

1721:         assert_(type(res) is bool)

1723:         assert_(not res)

1724:         assert_(type(res) is bool)

1730:         assert_array_equal(zeros, zeros)

1731:         assert not (zeros != zeros).any()

1739:         assert not (zeros == nonzeros).any()

1740:         assert (zeros != nonzeros).all()

1743: def assert_array_strict_equal(x, y)
1744:     assert_array_equal(x, y)

1749:         assert_(x.flags == y.flags)

1751:         assert_(x.flags.owndata == y.flags.owndata)

1752:         assert_(x.flags.writeable == y.flags.writeable)

1753:         assert_(x.flags.c_contiguous == y.flags.c_contiguous)

1754:         assert_(x.flags.f_contiguous == y.flags.f_contiguous)

1755:         assert_(x.flags.writebackifcopy == y.flags.writebackifcopy)

1757:     assert_(x.dtype.isnative == y.dtype.isnative)

1803:         assert_(not data.dtype.isnative)

1823:             assert actual.tolist() == expected.tolist()

1825:             assert_equal(actual, expected)

1834:         assert_array_strict_equal(ac, act)

1844:         assert_array_strict_equal(ac, act)

1853:         assert_array_strict_equal(ac, act)

1863:         assert_array_equal(ac, act)

1869:         assert_(not M.dtype.isnative)

1872:         assert_array_equal(ac, act)

1882:         assert_array_strict_equal(ac, act)

1890:         assert_array_strict_equal(ac, act)

1901:         assert_array_strict_equal(am, a)

1902:         assert_array_strict_equal(aM, a)

1908:         assert_(not a.flags['F_CONTIGUOUS'])

1909:         assert_(not a.flags['C_CONTIGUOUS'])

1912:         assert_array_strict_equal(ac, act)

1923:         assert_array_strict_equal(ac, act)

1934:             with assert_warns(DeprecationWarning)
1941:         assert_array_strict_equal(ac, act)

1952:         assert_array_strict_equal(ac, act)

1961:         with assert_warns(DeprecationWarning)
1965:         assert_array_strict_equal(ac, act)

1974:         with assert_warns(DeprecationWarning)
1978:         assert_array_strict_equal(ac, act)

1988:         assert_array_strict_equal(a, ac)

1998:         assert_array_strict_equal(a, ac)

2004:         assert_(not a.flags['F_CONTIGUOUS'])

2005:         assert_(not a.flags['C_CONTIGUOUS'])

2011:         assert_array_equal(a, ac)

2020:         assert_array_strict_equal(ac, act)

2030:         assert_array_strict_equal(ac, act)

2039:         assert_array_strict_equal(ac, act)

2048:         assert_array_strict_equal(ac, act)

2057:         assert_array_strict_equal(ac, act)

2067:         assert_array_strict_equal(ac, act)

2075:         assert_(not a_s.dtype.isnative)

2078:         assert_array_strict_equal(ac, act)

2086:         assert_(not a_s.dtype.isnative)

2089:         assert_array_strict_equal(ac, act)

2097:         assert_(not m_s.dtype.isnative)

2100:         assert_array_strict_equal(ac, act)

2110:         assert_array_strict_equal(ac, act)

2122:         assert_array_strict_equal(b, bt)

2132:         assert_array_strict_equal(ac, act)

2143:         assert_array_strict_equal(ac, act)

2152:         with assert_warns(DeprecationWarning)
2156:         assert_array_strict_equal(ac, act)

2167:         assert_array_strict_equal(ac, act)

2176:         with assert_warns(DeprecationWarning)
2180:         assert_array_strict_equal(ac, act)

2189:         with assert_warns(DeprecationWarning)
2193:         assert_array_strict_equal(ac, act)

2201:         assert_array_equal(out, expected)

2209:         assert_array_equal(a[1
2219:         assert_array_strict_equal(a, ac)

2229:         assert_array_strict_equal(a, ac)

2239:         assert_array_strict_equal(a2, ac)

2240:         assert_(a2 is a)

2244:         with assert_warns(DeprecationWarning)
2245:             assert_equal(d.clip(min=np.nan), d)

2246:         with assert_warns(DeprecationWarning)
2247:             assert_equal(d.clip(max=np.nan), d)

2248:         with assert_warns(DeprecationWarning)
2249:             assert_equal(d.clip(min=np.nan, max=np.nan), d)

2250:         with assert_warns(DeprecationWarning)
2251:             assert_equal(d.clip(min=-2, max=np.nan), d)

2252:         with assert_warns(DeprecationWarning)
2253:             assert_equal(d.clip(min=np.nan, max=10), d)

2259:         assert actual.tolist() == expected.tolist()

2263:         with assert_raises_regex(ValueError, 'max or min')
2268:         with assert_raises_regex(ValueError,

2285:         assert_equal(actual, expected)

2303:         assert_equal(actual, exp)

2320:         assert_equal(actual, expected)

2334:         assert_equal(actual, expected)

2382:         assert result.dtype == t

2383:         assert_array_equal(result, expected)

2397:         assert_(np.allclose(x, y), "%s and %s not close" % (x, y))

2400:         assert_(not np.allclose(x, y), "%s and %s shouldn't be close" % (x, y))

2447:         assert_array_equal(x, np.array([np.inf, 1]))

2448:         assert_array_equal(y, np.array([0, np.inf]))

2454:         assert_(np.allclose(a, a))

2458:         assert_(np.allclose(x, x, equal_nan=True))

2468:         assert_(type(np.allclose(a, a)) is bool)

2525:             assert_array_equal(np.isclose(x, y), result)

2528:         assert_(np.all(np.isclose(x, y)), "%s and %s not close" % (x, y))

2532:         assert_(not np.any(np.isclose(x, y)), msg % (x, y))

2538:             assert_(np.isclose(x, y) == np.allclose(x, y), msg=msg2 % (x, y))

2540:             assert_array_equal(np.isclose(x, y).all(), np.allclose(x, y), msg % (x, y))

2560:         assert_array_equal(np.isclose(np.nan, np.nan, equal_nan=True), [True])

2562:         assert_array_equal(np.isclose(arr, arr, equal_nan=True), [True, True])

2568:         assert_(type(x) is type(np.isclose(2, x)))

2569:         assert_(type(x) is type(np.isclose(x, 2)))

2572:         assert_(type(x) is type(np.isclose(np.inf, x)))

2573:         assert_(type(x) is type(np.isclose(x, np.inf)))

2577:         assert_(type(x) is type(y))

2579:         assert_array_equal([True, True, False], y.mask)

2581:         assert_(type(x) is type(y))

2583:         assert_array_equal([True, True, False], y.mask)

2587:         assert_(type(x) is type(y))

2589:         assert_array_equal([True, True, False], y.mask)

2592:         assert_(np.isscalar(np.isclose(1, 1)))

2598:         assert_array_equal(x, np.array([np.inf, 1]))

2599:         assert_array_equal(y, np.array([0, np.inf]))

2604:         assert_(np.isclose(np.inf, -np.inf) is np.False_)

2605:         assert_(np.isclose(0, np.inf) is np.False_)

2606:         assert_(type(np.isclose(0, np.inf)) is np.bool_)

2612:         assert np.isclose(a, a, atol=0, equal_nan=True).all()

2613:         assert np.isclose(a, a, atol=np.timedelta64(1, "ns"), equal_nan=True).all()

2614:         assert np.allclose(a, a, atol=0, equal_nan=True)

2615:         assert np.allclose(a, a, atol=np.timedelta64(1, "ns"), equal_nan=True)

2624:         assert_almost_equal(np.var(self.A), self.real_var)

2625:         assert_almost_equal(np.std(self.A)**2, self.real_var)

2628:         assert_equal(np.var(1), 0)

2629:         assert_equal(np.std(1), 0)

2632:         assert_almost_equal(np.var(self.A, ddof=1),

2634:         assert_almost_equal(np.std(self.A, ddof=1)**2,

2638:         assert_almost_equal(np.var(self.A, ddof=2),

2640:         assert_almost_equal(np.std(self.A, ddof=2)**2,

2647:         assert_(r is out)

2648:         assert_array_equal(r, out)

2650:         assert_(r is out)

2651:         assert_array_equal(r, out)

2653:         assert_(r is out)

2654:         assert_array_equal(r, out)

2661:         assert_almost_equal(np.var(A), real_var)

2662:         assert_almost_equal(np.std(A)**2, real_var)

2665:         assert_equal(np.var(1j), 0)

2666:         assert_equal(np.std(1j), 0)

2702:             assert_equal(arr.dtype, dtype)

2703:             assert_(getattr(arr.flags, self.orders[order]))

2710:                 assert_equal(arr, dtype.type(val))

2731:         assert_(sys.getrefcount(dim) == beg)

2733:         assert_(sys.getrefcount(dim) == beg)

2735:         assert_(sys.getrefcount(dim) == beg)

2737:         assert_(sys.getrefcount(dim) == beg)

2777:                     assert_(np.all(dz == z))

2779:                 assert_(np.all(dz == value))

2789:             assert_equal(dz.shape, d.shape)

2790:             assert_equal(np.array(dz.strides)*d.dtype.itemsize,

2792:             assert_equal(d.flags.c_contiguous, dz.flags.c_contiguous)

2793:             assert_equal(d.flags.f_contiguous, dz.flags.f_contiguous)

2795:                 assert_equal(dz.dtype, d.dtype)

2797:                 assert_equal(dz.dtype, np.dtype(dtype))

2802:             assert_equal(dz.shape, d.shape)

2803:             assert_(dz.flags.c_contiguous)

2805:                 assert_equal(dz.dtype, d.dtype)

2807:                 assert_equal(dz.dtype, np.dtype(dtype))

2812:             assert_equal(dz.shape, d.shape)

2813:             assert_(dz.flags.f_contiguous)

2815:                 assert_equal(dz.dtype, d.dtype)

2817:                 assert_equal(dz.dtype, np.dtype(dtype))

2822:             assert_equal(dz.shape, d.shape)

2824:                 assert_(dz.flags.f_contiguous)

2826:                 assert_(dz.flags.c_contiguous)

2828:                 assert_equal(dz.dtype, d.dtype)

2830:                 assert_equal(dz.dtype, np.dtype(dtype))

2838:                     assert_equal(sz.shape, s)

2840:                         assert_equal(sz.dtype, d.dtype)

2842:                         assert_equal(sz.dtype, np.dtype(dtype))

2844:                         assert_(sz.flags.c_contiguous)

2846:                         assert_(sz.flags.f_contiguous)

2850:                     assert_equal(np.argsort(like_function(d, dtype=dtype,

2856:                     assert_equal(np.argsort(like_function(d, dtype=dtype,

2868:         assert_(type(b) is MyNDArray)

2871:         assert_(type(b) is not MyNDArray)

2899:             assert result.strides == (16, 4)

2902:             assert result.strides == (4, 1)

2921:         assert_array_almost_equal(z, self.z1)

2923:         assert_array_almost_equal(z, self.z1_4)

2925:         assert_array_almost_equal(z, self.z2)

2927:         assert_array_almost_equal(z, self.z1r)

2929:         assert_array_almost_equal(z, self.z2r)

2931:         assert_array_almost_equal(z, self.zs)

2936:         assert_array_almost_equal(z, self.z1)

2938:         assert_array_almost_equal(z, self.z2)

2944:         assert_array_equal(d, np.ones(100))

2945:         assert_array_equal(k, np.ones(3))

2953:         assert_array_almost_equal(z, r_z)

2965:         with assert_warns(DeprecationWarning)
2967:         assert_array_equal(valid_mode, default_mode)

2969:         with assert_raises(ValueError)
2971:         assert_array_equal(np.correlate(d, k, mode=0), valid_mode)

2973:         with assert_raises(TypeError)
2981:         assert_array_almost_equal(np.convolve(d, k)[2
2987:         assert_array_equal(d, np.ones(100))

2988:         assert_array_equal(k, np.ones(3))

2994:         with assert_warns(DeprecationWarning)
2996:         assert_array_equal(full_mode, default_mode)

2998:         with assert_raises(ValueError)
3000:         assert_array_equal(np.convolve(d, k, mode=2), full_mode)

3002:         with assert_raises(TypeError)
3015:         assert_equal(np.argwhere(x).shape, (0, nd))

3020:         assert_equal(np.argwhere(x).shape, (1, nd))

3025:         assert_equal(np.argwhere(x).shape, (x.size - 1, nd))

3029:         assert_equal(np.argwhere(x).shape, (x.size, nd))

3033:         assert_array_equal(np.argwhere(x > 1),

3040:         assert_equal(np.argwhere([4, 0, 2, 1, 3]), [[0], [2], [3], [4]])

3048:         assert_equal(repr(a), "FOO")

3050:         assert_equal(repr(a), "array([1])")

3053:         assert_equal(str(a), "FOO")

3055:         assert_equal(str(a), "[1]")

3062:         assert_equal(xr, np.array([8, 9, 0, 1, 2, 3, 4, 5, 6, 7]))

3067:         assert_equal(x2r, np.array([[9, 0, 1, 2, 3], [4, 5, 6, 7, 8]]))

3070:         assert_equal(x2r, np.array([[5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]))

3073:         assert_equal(x2r, np.array([[4, 0, 1, 2, 3], [9, 5, 6, 7, 8]]))

3077:         assert_equal(x2r, np.array([[9, 5, 6, 7, 8], [4, 0, 1, 2, 3]]))

3080:         assert_equal(x2r, np.array([[5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]))

3083:         assert_equal(x2r, np.array([[5, 6, 7, 8, 9], [0, 1, 2, 3, 4]]))

3086:         assert_equal(x2r, np.array([[4, 0, 1, 2, 3], [9, 5, 6, 7, 8]]))

3089:         assert_equal(x2r, np.array([[1, 2, 3, 4, 0], [6, 7, 8, 9, 5]]))

3092:         assert_equal(x2r, np.array([[9, 5, 6, 7, 8], [4, 0, 1, 2, 3]]))

3095:         assert_equal(x2r, np.array([[6, 7, 8, 9, 5], [1, 2, 3, 4, 0]]))

3099:         assert_equal(x2r, np.array([[0, 1, 2, 3, 4], [5, 6, 7, 8, 9]]))

3102:         assert_equal(x2r, np.array([[3, 4, 0, 1, 2], [8, 9, 5, 6, 7]]))

3106:         assert_equal(x2r, np.array([[4, 0, 1, 2, 3], [9, 5, 6, 7, 8]]))

3109:         assert_equal(x2r, np.array([[4, 0, 1, 2, 3], [9, 5, 6, 7, 8]]))

3113:         assert_equal(np.roll(x, 1), np.array([]))

3135:         assert_raises(np.AxisError, np.rollaxis, a, -5, 0)

3136:         assert_raises(np.AxisError, np.rollaxis, a, 0, -5)

3137:         assert_raises(np.AxisError, np.rollaxis, a, 4, 0)

3138:         assert_raises(np.AxisError, np.rollaxis, a, 0, 5)

3143:         assert_(a.flags['OWNDATA'])

3148:             assert_(np.all(res[i0, i1, i2, i3] == a))

3149:             assert_(res.shape == self.tgtshape[(i, j)], str((i,j)))

3150:             assert_(not res.flags['OWNDATA'])

3156:             assert_(np.all(res[i0, i1, i2, i3] == a))

3157:             assert_(res.shape == self.tgtshape[(4 - ip, j)])

3158:             assert_(not res.flags['OWNDATA'])

3164:             assert_(np.all(res[i0, i1, i2, i3] == a))

3165:             assert_(res.shape == self.tgtshape[(i, 4 - jp)])

3166:             assert_(not res.flags['OWNDATA'])

3173:             assert_(np.all(res[i0, i1, i2, i3] == a))

3174:             assert_(res.shape == self.tgtshape[(4 - ip, 4 - jp)])

3175:             assert_(not res.flags['OWNDATA'])

3186:             assert_(actual, expected)

3196:             assert_(actual, expected)

3209:             assert_(actual, (1, 2, 3, 4))

3221:             assert_(actual, expected)

3225:         assert_raises_regex(np.AxisError, 'source.*out of bounds',

3227:         assert_raises_regex(np.AxisError, 'source.*out of bounds',

3229:         assert_raises_regex(np.AxisError, 'destination.*out of bounds',

3231:         assert_raises_regex(ValueError, 'repeated axis in `source`',

3233:         assert_raises_regex(ValueError, 'repeated axis in `destination`',

3235:         assert_raises_regex(ValueError, 'must have the same number',

3237:         assert_raises_regex(ValueError, 'must have the same number',

3243:         assert_(x.shape, result.shape)

3244:         assert_(isinstance(result, np.ma.MaskedArray))

3248:         assert_(x, list(result))

3249:         assert_(isinstance(result, np.ndarray))

3258:         assert_equal(cp, z)

3260:         assert_equal(cp, -z)

3267:         assert_equal(cp, z)

3269:         assert_equal(cp, -z)

3276:         assert_equal(cp, z)

3278:         assert_equal(cp, -z)

3285:         assert_equal(np.cross(u, v), z)

3286:         assert_equal(np.cross(v, u), -z)

3287:         assert_equal(np.cross(u, u), 0)

3292:         assert_equal(np.cross(u, v, axisa=0), z)

3293:         assert_equal(np.cross(v, u.T), -z)

3294:         assert_equal(np.cross(v, v), 0)

3299:         assert_equal(np.cross(u, v, axisa=0, axisb=0), z)

3300:         assert_equal(np.cross(v.T, u.T), -z)

3301:         assert_equal(np.cross(u.T, u.T), 0)

3306:         assert_equal(np.cross(u, v, axisb=0), z)

3307:         assert_equal(np.cross(v.T, u), -z)

3308:         assert_equal(np.cross(u, u), 0)

3313:         assert_equal(np.cross(u, v).shape, (2, 5, 3))

3316:         assert_equal(np.cross(u, v, axisa=1, axisb=0).shape, (10, 5, 3))

3317:         assert_raises(np.AxisError, np.cross, u, v, axisa=1, axisb=2)

3318:         assert_raises(np.AxisError, np.cross, u, v, axisa=3, axisb=0)

3321:         assert_equal(np.cross(u, v, axisa=1, axisc=2).shape, (10, 5, 3, 7))

3322:         assert_raises(np.AxisError, np.cross, u, v, axisa=-5, axisb=2)

3323:         assert_raises(np.AxisError, np.cross, u, v, axisa=1, axisb=-4)

3327:             assert_equal(np.cross(u, u, axisc=axisc).shape, (3, 4))

3337:     assert_equal(res1, out1)

3338:     assert_equal(np.outer(arr2, arr3, out2), out2)

3345:         assert_array_equal(x, np.array([[0, 0, 0],

3349:         assert_array_equal(y, np.array([[0, 1, 2],

3356:         assert_array_equal(x, np.array([0, 1, 2, 3]))

3359:         assert_array_equal(x, np.array([0, 1, 2, 3]))

3362:         assert_array_equal([], np.indices(()))

3363:         assert_array_equal([], np.indices((), sparse=True))

3364:         assert_array_equal([[]], np.indices((0,)))

3365:         assert_array_equal([[]], np.indices((0,), sparse=True))

3369:         assert_array_equal(x, np.array([[0], [1], [2], [3]]))

3370:         assert_array_equal(y, np.array([[0, 1, 2]]))

3376:         assert_(inds.dtype == dtype)

3379:             assert_(arr.dtype == dtype)

3393:         assert_(not a.flags['C'])

3394:         assert_(not a.flags['F'])

3395:         assert_(not a.flags['O'])

3396:         assert_(not a.flags['W'])

3397:         assert_(not a.flags['A'])

3404:         assert_(b.flags[flag])

3405:         assert_(b.dtype == dtype)

3411:             assert_(c is b)

3413:             assert_(c.flags[flag])

3425:         assert_raises(KeyError, np.require, a, None, 'Q')

3429:         assert_(a.flags['O'])

3430:         assert_(a.flags['C'])

3431:         assert_(a.flags['A'])

3432:         assert_(a.dtype == 'i4')

3433:         assert_equal(a, [1, 2, 3, 4])

3437:         assert_raises(ValueError, np.require, a, None, ['C', 'F'])

3445:         assert_(type(b) is np.ndarray)

3467:             assert_equal(mit.shape, (5, 6, 7))

3468:             assert_equal(mit.ndim, 3)

3469:             assert_equal(mit.nd, 3)

3470:             assert_equal(mit.numiter, 4)

3472:                 assert_(a is ia.base)

3478:         assert_equal(mit.shape, (5, 6, 7))

3479:         assert_equal(mit.ndim, 3)

3480:         assert_equal(mit.nd, 3)

3481:         assert_equal(mit.numiter, 1)

3482:         assert_(arrs[0] is mit.iters[0].base)

3489:                 assert_raises(ValueError, np.broadcast, *arrs)

3492:                 assert_equal(mit.numiter, j)

3499:         assert_equal(mit.shape, mit2.shape)

3500:         assert_equal(mit.ndim, mit2.ndim)

3501:         assert_equal(mit.nd, mit2.nd)

3502:         assert_equal(mit.numiter, mit2.numiter)

3503:         assert_(mit.iters[0].base is mit2.iters[0].base)

3505:         assert_raises(ValueError, np.broadcast, 1, **{'x'
3522:         assert_raises(TypeError, np.sum, x, keepdims=True)

3532:         assert_array_equal(td, np.dot(a, b))

3533:         assert_array_equal(td, np.einsum('ij,jk', a, b))

3539:         assert_array_equal(ret, arr_0d)

Total asserts: 941

Filename: numpy/core/tests/test_function_base.py
6:     assert_, assert_equal, assert_raises, assert_array_equal, assert_allclose,

15:         assert_(isinstance(x, PhysicalQuantity))

20:         assert_(isinstance(x, PhysicalQuantity))

24:         assert_(isinstance(x, PhysicalQuantity))

46:         assert_(len(y) == 50)

48:         assert_(y[-1] == 10 ** 6)

50:         assert_(y[-1] < 10 ** 6)

52:         assert_array_equal(y, [1, 10, 100, 1e3, 1e4, 1e5, 1e6])

60:         assert_equal(t1, t2)

64:         assert_equal(t3, t4)

66:         assert_equal(t5, t2.T)

70:         assert_equal(y.dtype, dtype('float32'))

72:         assert_equal(y.dtype, dtype('float64'))

74:         assert_equal(y.dtype, dtype('int32'))

79:         assert_equal(logspace(a, b), logspace(1.0, 5.0))

85:         assert type(ls) is PhysicalQuantity2

86:         assert_equal(ls, logspace(1.0, 7.0))

88:         assert type(ls) is PhysicalQuantity2

89:         assert_equal(ls, logspace(1.0, 7.0, 1))

96:         assert_(len(y) == 50)

98:         assert_(y[-1] == 10 ** 6)

100:         assert_(y[-1] < 10 ** 6)

102:         assert_array_equal(y, [1, 10, 100, 1e3, 1e4, 1e5, 1e6])

105:         assert_allclose(y, [8, 4, 2])

106:         assert_array_equal(y.imag, 0)

109:         assert_array_equal(y, [-1, -10, -100])

110:         assert_array_equal(y.imag, 0)

113:         assert_array_equal(y, [-100, -10, -1])

114:         assert_array_equal(y.imag, 0)

124:         assert_equal(y[0], start)

127:         assert_equal(y[0], start)

130:         assert_equal(y[0], start)

131:         assert_equal(y[-1], stop)

134:         assert_equal(y[0], start)

140:         assert_equal(y[0], -3.0)

141:         assert_(isnan(y[1
142:         assert_equal(y[3], 3.0)

147:         assert_equal(y[0], -3.0)

148:         assert_(isnan(y[1
153:         assert_allclose(y, [1j, 2j, 4j, 8j, 16j])

154:         assert_array_equal(y.real, 0)

157:         assert_allclose(y, [-4j, -12j, -36j, -108j, -324j])

158:         assert_array_equal(y.real, 0)

161:         assert_allclose(y, [1+1j, 10+10j, 100+100j, 1000+1000j])

164:         assert_allclose(y, [-1+1j, -10+10j, -100+100j, -1000+1000j])

168:         assert_allclose(y, [-1, 1j, +1])

171:         assert_allclose(y, [0+3j, -3/sqrt(2)+3j/sqrt(2), -3+0j])

173:         assert_allclose(y, [0+3j, 3/sqrt(2)+3j/sqrt(2), 3+0j])

175:         assert_allclose(y, [-3+0j, -3/sqrt(2)-3j/sqrt(2), 0-3j])

177:         assert_allclose(y, [0+3j, -3/sqrt(2)+3j/sqrt(2), -3+0j])

179:         assert_allclose(y, [-2-3j, -0.29058977-4.15771027j,

186:         assert_allclose(y, [3j, -5])

188:         assert_allclose(y, [-5, 3j])

192:         assert_equal(y.dtype, dtype('float32'))

194:         assert_equal(y.dtype, dtype('float64'))

196:         assert_equal(y.dtype, dtype('int32'))

200:         assert_equal(y.dtype, dtype('float_'))

202:         assert_equal(y.dtype, dtype('complex'))

216:         assert_allclose(t1, t4, rtol=1e-2)

217:         assert_allclose(t2, t5, rtol=1e-2)

218:         assert_allclose(t3, t6, rtol=1e-5)

227:         assert_equal(t1, t2)

231:         assert_equal(t3, t4)

233:         assert_equal(t5, t2.T)

238:         assert_equal(geomspace(a, b), geomspace(1.0, 5.0))

244:         assert type(gs) is PhysicalQuantity2

245:         assert_equal(gs, geomspace(1.0, 7.0))

247:         assert type(gs) is PhysicalQuantity2

248:         assert_equal(gs, geomspace(1.0, 7.0, 1))

251:         assert_raises(ValueError, geomspace, 0, 10)

252:         assert_raises(ValueError, geomspace, 10, 0)

253:         assert_raises(ValueError, geomspace, 0, 0)

260:         assert_(len(y) == 50)

262:         assert_(y[-1] == 10)

264:         assert_(y[-1] < 10)

265:         assert_raises(ValueError, linspace, 0, 10, num=-1)

269:         assert_(y == [0.0], y)

270:         assert_raises(TypeError, linspace, 0, 1, num=2.5)

276:         assert_equal(t1, t2)

277:         assert_equal(t2, t3)

281:         assert_equal(y.dtype, dtype('float32'))

283:         assert_equal(y.dtype, dtype('float64'))

285:         assert_equal(y.dtype, dtype('int32'))

297:         assert_equal(t1, t4)

298:         assert_equal(t2, t5)

299:         assert_equal(t3, t6)

307:         assert_equal(t1, t2)

311:         assert_equal(t3, t4)

313:         assert_equal(t5, t2.T)

320:         assert_equal(lim1, t1)

321:         assert_equal(lim2, t2)

326:         assert_equal(linspace(a, b), linspace(0.0, 1.0))

332:         assert type(ls) is PhysicalQuantity2

333:         assert_equal(ls, linspace(0.0, 1.0))

335:         assert type(ls) is PhysicalQuantity2

336:         assert_equal(ls, linspace(0.0, 1.0, 1))

370:         assert_equal(linspace(one, five), linspace(1, 5))

377:             assert_(any(linspace(0, stop, 10, endpoint=False, dtype=ftype)))

381:             assert_equal(linspace(0, j, j+1, dtype=int),

388:                 assert isinstance(y, tuple) and len(y) == 2

391:                     assert_array_equal(y[0], y0_expect)

392:                     assert_equal(y[1], y0_expect[1])

394:                     assert_array_equal(y[0], [0.0])

395:                     assert_equal(y[1], 1.0)

397:                     assert_array_equal(y[0], [0.0][
398:                     assert isnan(y[1])

404:         assert_array_equal(y, array([1., 1.5, 2.]))

409:         assert_array_equal(y, t)

Total asserts: 108

Filename: numpy/core/tests/test_datetime.py
7:     assert_, assert_equal, assert_raises, assert_warns, suppress_warnings,

8:     assert_raises_regex, assert_array_equal,

32:             assert_(dt1 == np.dtype('datetime64[750%s]' % unit))

34:             assert_(dt2 == np.dtype('timedelta64[%s]' % unit))

37:         assert_equal(str(np.dtype("M8")), "datetime64")

40:         assert_equal(np.dtype("=M8"), np.dtype("M8"))

41:         assert_equal(np.dtype("=M8[s]"), np.dtype("M8[s]"))

42:         assert_(np.dtype(">M8") == np.dtype("M8") or

44:         assert_(np.dtype(">M8[D]") == np.dtype("M8[D]") or

46:         assert_(np.dtype(">M8") != np.dtype("<M8"))

48:         assert_equal(np.dtype("=m8"), np.dtype("m8"))

49:         assert_equal(np.dtype("=m8[s]"), np.dtype("m8[s]"))

50:         assert_(np.dtype(">m8") == np.dtype("m8") or

52:         assert_(np.dtype(">m8[D]") == np.dtype("m8[D]") or

54:         assert_(np.dtype(">m8") != np.dtype("<m8"))

57:         assert_raises(TypeError, np.dtype, 'M8[badunit]')

58:         assert_raises(TypeError, np.dtype, 'm8[badunit]')

59:         assert_raises(TypeError, np.dtype, 'M8[YY]')

60:         assert_raises(TypeError, np.dtype, 'm8[YY]')

61:         assert_raises(TypeError, np.dtype, 'm4')

62:         assert_raises(TypeError, np.dtype, 'M7')

63:         assert_raises(TypeError, np.dtype, 'm7')

64:         assert_raises(TypeError, np.dtype, 'M16')

65:         assert_raises(TypeError, np.dtype, 'm16')

66:         assert_raises(TypeError, np.dtype, 'M8[3000000000ps]')

70:         assert_(not np.can_cast('m8', 'M8', casting='same_kind'))

71:         assert_(not np.can_cast('M8', 'm8', casting='same_kind'))

72:         assert_(not np.can_cast('m8', 'M8', casting='safe'))

73:         assert_(not np.can_cast('M8', 'm8', casting='safe'))

76:         assert_(np.can_cast('i8', 'm8', casting='same_kind'))

77:         assert_(np.can_cast('i8', 'm8', casting='safe'))

78:         assert_(np.can_cast('i4', 'm8', casting='same_kind'))

79:         assert_(np.can_cast('i4', 'm8', casting='safe'))

80:         assert_(np.can_cast('u4', 'm8', casting='same_kind'))

81:         assert_(np.can_cast('u4', 'm8', casting='safe'))

85:         assert_(np.can_cast('u8', 'm8', casting='same_kind'))

86:         assert_(not np.can_cast('u8', 'm8', casting='safe'))

89:         assert_(not np.can_cast('f4', 'm8', casting='same_kind'))

90:         assert_(not np.can_cast('f4', 'm8', casting='safe'))

93:         assert_(not np.can_cast('i8', 'M8', casting='same_kind'))

94:         assert_(not np.can_cast('i8', 'M8', casting='safe'))

97:         assert_(not np.can_cast('b1', 'M8', casting='same_kind'))

98:         assert_(not np.can_cast('b1', 'M8', casting='safe'))

100:         assert_(np.can_cast('b1', 'm8', casting='same_kind'))

101:         assert_(np.can_cast('b1', 'm8', casting='safe'))

104:         assert_(np.can_cast('M8[M]', 'M8[D]', casting='safe'))

105:         assert_(np.can_cast('M8[Y]', 'M8[D]', casting='safe'))

107:         assert_(not np.can_cast('m8[M]', 'm8[D]', casting='safe'))

108:         assert_(not np.can_cast('m8[Y]', 'm8[D]', casting='safe'))

110:         assert_(np.can_cast('M8[M]', 'M8[D]', casting='same_kind'))

111:         assert_(np.can_cast('M8[Y]', 'M8[D]', casting='same_kind'))

113:         assert_(not np.can_cast('m8[M]', 'm8[D]', casting='same_kind'))

114:         assert_(not np.can_cast('m8[Y]', 'm8[D]', casting='same_kind'))

116:         assert_(np.can_cast('M8[D]', 'M8[h]', casting='same_kind'))

118:         assert_(np.can_cast('m8[D]', 'm8[h]', casting='same_kind'))

119:         assert_(np.can_cast('m8[h]', 'm8[D]', casting='same_kind'))

122:         assert_(not np.can_cast('M8[7h]', 'M8[3h]', casting='safe'))

123:         assert_(not np.can_cast('M8[3h]', 'M8[6h]', casting='safe'))

125:         assert_(np.can_cast('M8[7h]', 'M8[3h]', casting='same_kind'))

127:         assert_(np.can_cast('M8[6h]', 'M8[3h]', casting='safe'))

131:         assert_(np.can_cast('m8', 'm8[h]', casting='same_kind'))

132:         assert_(np.can_cast('m8', 'm8[h]', casting='safe'))

133:         assert_(np.can_cast('M8', 'M8[h]', casting='same_kind'))

134:         assert_(np.can_cast('M8', 'M8[h]', casting='safe'))

136:         assert_(not np.can_cast('m8[h]', 'm8', casting='same_kind'))

137:         assert_(not np.can_cast('m8[h]', 'm8', casting='safe'))

138:         assert_(not np.can_cast('M8[h]', 'M8', casting='same_kind'))

139:         assert_(not np.can_cast('M8[h]', 'M8', casting='safe'))

168:             assert np.can_cast(larger_unit, smaller_unit, casting='safe')

169:             assert np.can_cast(smaller_unit, larger_unit, casting='safe')

174:         with assert_raises(TypeError)
179:         assert_(np.datetime64('NaT') !=

181:         assert_(np.datetime64('NaT') != np.datetime64('NaT', 'us'))

182:         assert_(np.datetime64('NaT', 'us') != np.datetime64('NaT'))

191:         assert_equal(np.argsort(arr, kind='mergesort'), expected)

200:         assert_equal(np.argsort(arr, kind='mergesort'), expected)

226:         assert_equal(arr, expected)

230:         assert_equal(np.datetime64('1950-03-12', 'D'),

232:         assert_equal(np.datetime64('1950-03-12T13', 's'),

236:         assert_equal(np.datetime64(), np.datetime64('NaT'))

239:         assert_equal(str(np.datetime64('NaT')), 'NaT')

240:         assert_equal(repr(np.datetime64('NaT')),

242:         assert_equal(str(np.datetime64('2011-02')), '2011-02')

243:         assert_equal(repr(np.datetime64('2011-02')),

247:         assert_equal(np.datetime64(None), np.datetime64('NaT'))

250:         assert_equal(np.datetime64().dtype, np.dtype('M8'))

251:         assert_equal(np.datetime64('NaT').dtype, np.dtype('M8'))

254:         assert_raises(ValueError, np.datetime64, 17)

261:         assert_equal(a.dtype, np.dtype('M8[h]'))

262:         assert_equal(b.dtype, np.dtype('M8[h]'))

264:         assert_equal(np.datetime64(a), a)

265:         assert_equal(np.datetime64(a).dtype, np.dtype('M8[h]'))

267:         assert_equal(np.datetime64(b), a)

268:         assert_equal(np.datetime64(b).dtype, np.dtype('M8[h]'))

270:         assert_equal(np.datetime64(a, 's'), a)

271:         assert_equal(np.datetime64(a, 's').dtype, np.dtype('M8[s]'))

273:         assert_equal(np.datetime64(b, 's'), a)

274:         assert_equal(np.datetime64(b, 's').dtype, np.dtype('M8[s]'))

277:         assert_equal(np.datetime64('1945-03-25'),

279:         assert_equal(np.datetime64('2045-03-25', 'D'),

282:         assert_equal(np.datetime64('1980-01-25T14
287:         assert_equal(np.datetime64('1920-03-13', 'h'),

289:         assert_equal(np.datetime64('1920-03', 'm'),

291:         assert_equal(np.datetime64('1920', 's'),

293:         assert_equal(np.datetime64(datetime.date(2045, 3, 25), 'ms'),

297:         assert_equal(np.datetime64('1920-03-13T18', 'D'),

299:         assert_equal(np.datetime64('1920-03-13T18
301:         assert_equal(np.datetime64('1920-03-13T18
306:         with assert_warns(DeprecationWarning)
307:             assert_equal(np.datetime64('2000-01-01T00Z'),

309:         with assert_warns(DeprecationWarning)
310:             assert_equal(np.datetime64('2000-01-01T00-08'),

316:         assert_equal(arr.dtype, np.dtype('M8[M]'))

322:         assert_equal(arr.dtype, np.dtype('O'))

326:         assert_equal(arr.dtype, np.dtype('O'))

336:         assert_equal(arr.dtype, np.dtype('O'))

339:         assert_equal(arr.dtype, np.dtype('O'))

342:         assert_equal(arr.dtype, np.dtype('O'))

345:         assert_equal(arr.dtype, np.dtype('M8[D]'))

348:         assert_equal(arr.dtype, np.dtype('M8[us]'))

359:             assert_equal(np.timedelta64(np.int64(123), unit),

362:             assert_equal(np.timedelta64(np.int64(123)),

367:         assert_equal(np.timedelta64(7, 'D'),

369:         assert_equal(np.timedelta64(120, 's'),

373:         assert_equal(np.timedelta64(), np.timedelta64(0))

376:         assert_equal(np.timedelta64(None), np.timedelta64('NaT'))

379:         assert_equal(str(np.timedelta64('NaT')), 'NaT')

380:         assert_equal(repr(np.timedelta64('NaT')),

382:         assert_equal(str(np.timedelta64(3, 's')), '3 seconds')

383:         assert_equal(repr(np.timedelta64(-3, 's')),

385:         assert_equal(repr(np.timedelta64(12)),

389:         assert_equal(np.timedelta64(12).dtype, np.dtype('m8'))

396:         assert_equal(a.dtype, np.dtype('m8[h]'))

397:         assert_equal(b.dtype, np.dtype('m8[h]'))

399:         assert_equal(np.timedelta64(a), a)

400:         assert_equal(np.timedelta64(a).dtype, np.dtype('m8[h]'))

402:         assert_equal(np.timedelta64(b), a)

403:         assert_equal(np.timedelta64(b).dtype, np.dtype('m8[h]'))

405:         assert_equal(np.timedelta64(a, 's'), a)

406:         assert_equal(np.timedelta64(a, 's').dtype, np.dtype('m8[s]'))

408:         assert_equal(np.timedelta64(b, 's'), a)

409:         assert_equal(np.timedelta64(b, 's').dtype, np.dtype('m8[s]'))

412:         assert_equal(np.timedelta64(5, 'D'),

414:         assert_equal(np.timedelta64(102347621, 's'),

416:         assert_equal(np.timedelta64(-10234760000, 'us'),

419:         assert_equal(np.timedelta64(10234760000, 'us'),

422:         assert_equal(np.timedelta64(1023476, 'ms'),

424:         assert_equal(np.timedelta64(10, 'm'),

426:         assert_equal(np.timedelta64(281, 'h'),

428:         assert_equal(np.timedelta64(28, 'W'),

433:         assert_raises(TypeError, np.timedelta64, a, 'M')

434:         assert_raises(TypeError, np.timedelta64, a, 'Y')

436:         assert_raises(TypeError, np.timedelta64, a, 'D')

437:         assert_raises(TypeError, np.timedelta64, a, 'h')

439:         assert_raises(TypeError, np.timedelta64, a, 'D')

440:         assert_raises(TypeError, np.timedelta64, a, 'm')

442:         assert_raises(TypeError, np.timedelta64, a, 'M')

443:         assert_raises(TypeError, np.timedelta64, a, 'Y')

445:         assert_raises(TypeError, np.timedelta64, a, 'M')

446:         assert_raises(TypeError, np.timedelta64, a, 'Y')

448:         assert_raises(TypeError, np.timedelta64, a, 'M')

449:         assert_raises(TypeError, np.timedelta64, a, 'Y')

458:         assert_equal(expected, actual)

468:         assert_equal(actual, expected)

472:         assert_equal('NaT', '{0}'.format(np.timedelta64('nat')))

476:         assert_equal(np.datetime64('2010').dtype,

478:         assert_equal(np.datetime64('2010-03').dtype,

480:         assert_equal(np.datetime64('2010-03-12').dtype,

482:         assert_equal(np.datetime64('2010-03-12T17').dtype,

484:         assert_equal(np.datetime64('2010-03-12T17
486:         assert_equal(np.datetime64('2010-03-12T17
489:         assert_equal(np.datetime64('2010-03-12T17
491:         assert_equal(np.datetime64('2010-03-12T17
493:         assert_equal(np.datetime64('2010-03-12T17
496:         assert_equal(np.datetime64('2010-03-12T17
498:         assert_equal(np.datetime64('2010-03-12T17
500:         assert_equal(np.datetime64('2010-03-12T17
503:         assert_equal(np.datetime64('1970-01-01T00
505:         assert_equal(np.datetime64('1970-01-01T00
507:         assert_equal(np.datetime64('1970-01-01T00
510:         assert_equal(np.datetime64('1970-01-01T00
512:         assert_equal(np.datetime64('1970-01-01T00
514:         assert_equal(np.datetime64('1970-01-01T00
517:         assert_equal(np.datetime64(

520:         assert_equal(np.datetime64(

523:         assert_equal(np.datetime64(

527:         assert_equal(np.datetime64(

530:         assert_equal(np.datetime64(

533:         assert_equal(np.datetime64(

538:         assert_equal(np.datetime64(datetime.date(2010, 4, 16)).dtype,

542:         assert_equal(np.datetime64(

547:         assert_equal(np.datetime64('today').dtype,

551:         assert_equal(np.datetime64('now').dtype,

559:         assert_equal(a.astype('M8[s]'), np.array('NaT', dtype='M8[s]'))

560:         assert_equal(a.astype('M8[ms]'), np.array('NaT', dtype='M8[ms]'))

561:         assert_equal(a.astype('M8[M]'), np.array('NaT', dtype='M8[M]'))

562:         assert_equal(a.astype('M8[Y]'), np.array('NaT', dtype='M8[Y]'))

563:         assert_equal(a.astype('M8[W]'), np.array('NaT', dtype='M8[W]'))

566:         assert_equal(np.datetime64(b, '[s]'), np.datetime64('NaT', '[s]'))

567:         assert_equal(np.datetime64(b, '[ms]'), np.datetime64('NaT', '[ms]'))

568:         assert_equal(np.datetime64(b, '[M]'), np.datetime64('NaT', '[M]'))

569:         assert_equal(np.datetime64(b, '[Y]'), np.datetime64('NaT', '[Y]'))

570:         assert_equal(np.datetime64(b, '[W]'), np.datetime64('NaT', '[W]'))

573:         assert_equal(np.datetime64(a, '[s]'), np.datetime64('NaT', '[s]'))

574:         assert_equal(np.datetime64(a, '[ms]'), np.datetime64('NaT', '[ms]'))

575:         assert_equal(np.datetime64(a, '[M]'), np.datetime64('NaT', '[M]'))

576:         assert_equal(np.datetime64(a, '[Y]'), np.datetime64('NaT', '[Y]'))

577:         assert_equal(np.datetime64(a, '[W]'), np.datetime64('NaT', '[W]'))

588:         assert_equal(nan.astype('M8[ns]'), nat)

589:         assert_equal(fnan.astype('M8[ns]'), nat)

590:         assert_equal(lnan.astype('M8[ns]'), nat)

591:         assert_equal(cnan.astype('M8[ns]'), nat)

592:         assert_equal(cfnan.astype('M8[ns]'), nat)

593:         assert_equal(clnan.astype('M8[ns]'), nat)

596:         assert_equal(nan.astype('timedelta64[ns]'), nat)

597:         assert_equal(fnan.astype('timedelta64[ns]'), nat)

598:         assert_equal(lnan.astype('timedelta64[ns]'), nat)

599:         assert_equal(cnan.astype('timedelta64[ns]'), nat)

600:         assert_equal(cfnan.astype('timedelta64[ns]'), nat)

601:         assert_equal(clnan.astype('timedelta64[ns]'), nat)

604:         assert_equal(np.array('1599', dtype='M8[D]').astype('i8'),

606:         assert_equal(np.array('1600', dtype='M8[D]').astype('i8'),

608:         assert_equal(np.array('1601', dtype='M8[D]').astype('i8'),

610:         assert_equal(np.array('1900', dtype='M8[D]').astype('i8'),

612:         assert_equal(np.array('1901', dtype='M8[D]').astype('i8'),

614:         assert_equal(np.array('1967', dtype='M8[D]').astype('i8'), -3*365 - 1)

615:         assert_equal(np.array('1968', dtype='M8[D]').astype('i8'), -2*365 - 1)

616:         assert_equal(np.array('1969', dtype='M8[D]').astype('i8'), -1*365)

617:         assert_equal(np.array('1970', dtype='M8[D]').astype('i8'), 0*365)

618:         assert_equal(np.array('1971', dtype='M8[D]').astype('i8'), 1*365)

619:         assert_equal(np.array('1972', dtype='M8[D]').astype('i8'), 2*365)

620:         assert_equal(np.array('1973', dtype='M8[D]').astype('i8'), 3*365 + 1)

621:         assert_equal(np.array('1974', dtype='M8[D]').astype('i8'), 4*365 + 1)

622:         assert_equal(np.array('2000', dtype='M8[D]').astype('i8'),

624:         assert_equal(np.array('2001', dtype='M8[D]').astype('i8'),

626:         assert_equal(np.array('2400', dtype='M8[D]').astype('i8'),

628:         assert_equal(np.array('2401', dtype='M8[D]').astype('i8'),

631:         assert_equal(np.array('1600-02-29', dtype='M8[D]').astype('i8'),

633:         assert_equal(np.array('1600-03-01', dtype='M8[D]').astype('i8'),

635:         assert_equal(np.array('2000-02-29', dtype='M8[D]').astype('i8'),

637:         assert_equal(np.array('2000-03-01', dtype='M8[D]').astype('i8'),

639:         assert_equal(np.array('2001-03-22', dtype='M8[D]').astype('i8'),

643:         assert_equal(np.array('1599', dtype='M8[D]').astype('O'),

645:         assert_equal(np.array('1600', dtype='M8[D]').astype('O'),

647:         assert_equal(np.array('1601', dtype='M8[D]').astype('O'),

649:         assert_equal(np.array('1900', dtype='M8[D]').astype('O'),

651:         assert_equal(np.array('1901', dtype='M8[D]').astype('O'),

653:         assert_equal(np.array('2000', dtype='M8[D]').astype('O'),

655:         assert_equal(np.array('2001', dtype='M8[D]').astype('O'),

657:         assert_equal(np.array('1600-02-29', dtype='M8[D]').astype('O'),

659:         assert_equal(np.array('1600-03-01', dtype='M8[D]').astype('O'),

661:         assert_equal(np.array('2001-03-22', dtype='M8[D]').astype('O'),

665:         assert_(not (np.dtype('M8[us]') == np.dtype('M8[ms]')))

666:         assert_(np.dtype('M8[us]') != np.dtype('M8[ms]'))

667:         assert_(np.dtype('M8[2D]') != np.dtype('M8[D]'))

668:         assert_(np.dtype('M8[D]') != np.dtype('M8[2D]'))

672:         assert_equal(a[0], a[1])

674:         assert_equal(a[0], a[1])

676:         assert_equal(a[0], a[1])

679:         assert_equal(a[0], a[1])

682:         #assert_equal(a[0], a[1])

685:         assert_equal(np.array(datetime.date(1960, 3, 12), dtype='M8[s]'),

695:         assert_equal(dt_a, str_a.astype('M'))

696:         assert_equal(dt_a.dtype, str_a.astype('M').dtype)

699:         assert_equal(dt_a, dt_b)

702:         assert_equal(str_a, dt_a.astype('S0'))

705:         assert_equal(str_a, str_b)

708:         assert_equal(dt_a, uni_a.astype('M'))

709:         assert_equal(dt_a.dtype, uni_a.astype('M').dtype)

712:         assert_equal(dt_a, dt_b)

715:         assert_equal(uni_a, dt_a.astype('U'))

718:         assert_equal(uni_a, uni_b)

721:         assert_equal(str_a, dt_a.astype((np.string_, 128)))

724:         assert_equal(str_a, str_b)

730:         assert_array_equal(times, times_swapped)

733:         assert_array_equal(unswapped, times.view(np.int64))

746:         assert_array_equal(res, expected)

748:         assert_array_equal(res, expected)

750:         assert_array_equal(res, expected)

763:         assert_array_equal(res, to_strings)

766:         assert_array_equal(res, to_strings)

769:         assert_array_equal(res, to_strings)

775:         assert_array_equal(res, times)

778:         assert_array_equal(res, times)

781:         assert_array_equal(res, times)

785:         assert_equal(str(a), "['2011-03-16' '1920-01-01' '2013-05-19']")

788:         assert_equal(np.array2string(a, separator=', ',

795:         assert_equal(str(a), "['2010'  'NaT' '2030']")

799:         assert_equal(str(a), "[ -1   0 100]")

801:         assert_equal(str(a), "['NaT' 'NaT']")

804:         assert_equal(str(a), "[   -1 'NaT'     0]")

806:         assert_equal(str(a), "[     -1   'NaT' 1234567]")

810:         assert_equal(str(a), "[     -1   'NaT' 1234567]")

812:         assert_equal(str(a), "[     -1   'NaT' 1234567]")

818:             assert_equal(pickle.loads(pickle.dumps(dt, protocol=proto)), dt)

820:             assert_equal(pickle.loads(pickle.dumps(dt, protocol=proto)), dt)

822:             assert_equal(pickle.loads(pickle.dumps(scalar, protocol=proto)),

825:             assert_equal(pickle.loads(pickle.dumps(delta, protocol=proto)),

832:         assert_equal(pickle.loads(pkl), np.dtype('<M8[7D]'))

836:         assert_equal(pickle.loads(pkl), np.dtype('<M8[W]'))

840:         assert_equal(pickle.loads(pkl), np.dtype('>M8[us]'))

845:         assert_raises(ValueError, dt.__setstate__, (4, '>', None, None, None, -1, -1, 0, 1))

846:         assert_(dt.__reduce__()[2] == np.dtype('>M8[us]').__reduce__()[2])

847:         assert_raises(TypeError, dt.__setstate__, (4, '>', None, None, None, -1, -1, 0, ({}, 'xxx')))

848:         assert_(dt.__reduce__()[2] == np.dtype('>M8[us]').__reduce__()[2])

854:             assert_equal(

857:             assert_equal(

860:             assert_equal(

863:             assert_equal(

866:             assert_equal(

869:             assert_equal(

873:         assert_raises(TypeError, np.promote_types,

875:         assert_raises(TypeError, np.promote_types,

878:         assert_raises(TypeError, np.promote_types, "float32", "m8")

879:         assert_raises(TypeError, np.promote_types, "m8", "float32")

880:         assert_raises(TypeError, np.promote_types, "uint64", "m8")

881:         assert_raises(TypeError, np.promote_types, "m8", "uint64")

884:         assert_raises(OverflowError, np.promote_types,

886:         assert_raises(OverflowError, np.promote_types,

893:         assert_raises(OverflowError, cast)

897:         assert_raises(OverflowError, cast2)

917:             assert_equal(b.astype(object).astype(unit), b,

933:             assert_equal(b.astype(object).astype(unit), b,

938:         assert_equal(np.array('1945-03-01', dtype='M8[M]'),

940:         assert_equal(np.array('1969-11-01', dtype='M8[M]'),

942:         assert_equal(np.array('1969-12-01', dtype='M8[M]'),

944:         assert_equal(np.array('1970-01-01', dtype='M8[M]'),

946:         assert_equal(np.array('1980-02-01', dtype='M8[M]'),

955:                 assert_equal(np.array('1945', dtype=dt1),

957:                 assert_equal(np.array('1970', dtype=dt1),

959:                 assert_equal(np.array('9999', dtype=dt1),

961:                 assert_equal(np.array('10000', dtype=dt1),

963:                 assert_equal(np.datetime64('1945', unit1),

965:                 assert_equal(np.datetime64('1970', unit1),

967:                 assert_equal(np.datetime64('9999', unit1),

969:                 assert_equal(np.datetime64('10000', unit1),

976:                 assert_equal(np.array('1945-03-12T18', dtype=dt1),

978:                 assert_equal(np.array('1970-03-12T18', dtype=dt1),

980:                 assert_equal(np.array('9999-03-12T18', dtype=dt1),

982:                 assert_equal(np.array('10000-01-01T00', dtype=dt1),

984:                 assert_equal(np.datetime64('1945-03-12T18', unit1),

986:                 assert_equal(np.datetime64('1970-03-12T18', unit1),

988:                 assert_equal(np.datetime64('9999-03-12T18', unit1),

990:                 assert_equal(np.datetime64('10000-01-01T00', unit1),

997:                 assert_(np.equal(np.array('1932-02-17', dtype='M').astype(dt1),

1000:                 assert_(np.equal(np.array('10000-04-27', dtype='M').astype(dt1),

1009:         #assert_raises(TypeError, np.less, a, b)

1010:         assert_raises(TypeError, np.less, a, b, casting='same_kind')

1016:         assert_equal(np.ones_like(a).dtype, a.dtype)

1017:         assert_equal(np.zeros_like(a).dtype, a.dtype)

1018:         assert_equal(np.empty_like(a).dtype, a.dtype)

1019:         assert_equal(np.ones_like(b).dtype, b.dtype)

1020:         assert_equal(np.zeros_like(b).dtype, b.dtype)

1021:         assert_equal(np.empty_like(b).dtype, b.dtype)

1039:             assert_equal(-tdb, tda)

1040:             assert_equal((-tdb).dtype, tda.dtype)

1041:             assert_equal(np.negative(tdb), tda)

1042:             assert_equal(np.negative(tdb).dtype, tda.dtype)

1045:             assert_equal(np.positive(tda), tda)

1046:             assert_equal(np.positive(tda).dtype, tda.dtype)

1047:             assert_equal(np.positive(tdb), tdb)

1048:             assert_equal(np.positive(tdb).dtype, tdb.dtype)

1051:             assert_equal(np.absolute(tdb), tda)

1052:             assert_equal(np.absolute(tdb).dtype, tda.dtype)

1055:             assert_equal(np.sign(tda), tdone)

1056:             assert_equal(np.sign(tdb), tdmone)

1057:             assert_equal(np.sign(tdzero), tdzero)

1058:             assert_equal(np.sign(tda).dtype, tda.dtype)

1061:             assert_

1083:             assert_equal(tda + tdb, tdc)

1084:             assert_equal((tda + tdb).dtype, np.dtype('m8[h]'))

1086:             assert_equal(tdb + True, tdb + 1)

1087:             assert_equal((tdb + True).dtype, np.dtype('m8[h]'))

1089:             assert_equal(tdb + 3*24, tdc)

1090:             assert_equal((tdb + 3*24).dtype, np.dtype('m8[h]'))

1092:             assert_equal(False + tdb, tdb)

1093:             assert_equal((False + tdb).dtype, np.dtype('m8[h]'))

1095:             assert_equal(3*24 + tdb, tdc)

1096:             assert_equal((3*24 + tdb).dtype, np.dtype('m8[h]'))

1098:             assert_equal(dta + True, dta + 1)

1099:             assert_equal(dtnat + True, dtnat)

1100:             assert_equal((dta + True).dtype, np.dtype('M8[D]'))

1102:             assert_equal(dta + 3, dtb)

1103:             assert_equal(dtnat + 3, dtnat)

1104:             assert_equal((dta + 3).dtype, np.dtype('M8[D]'))

1106:             assert_equal(False + dta, dta)

1107:             assert_equal(False + dtnat, dtnat)

1108:             assert_equal((False + dta).dtype, np.dtype('M8[D]'))

1110:             assert_equal(3 + dta, dtb)

1111:             assert_equal(3 + dtnat, dtnat)

1112:             assert_equal((3 + dta).dtype, np.dtype('M8[D]'))

1114:             assert_equal(dta + tda, dtb)

1115:             assert_equal(dtnat + tda, dtnat)

1116:             assert_equal((dta + tda).dtype, np.dtype('M8[D]'))

1118:             assert_equal(tda + dta, dtb)

1119:             assert_equal(tda + dtnat, dtnat)

1120:             assert_equal((tda + dta).dtype, np.dtype('M8[D]'))

1123:             assert_equal(np.add(dta, tdb, casting='unsafe'), dtc)

1124:             assert_equal(np.add(dta, tdb, casting='unsafe').dtype,

1126:             assert_equal(np.add(tdb, dta, casting='unsafe'), dtc)

1127:             assert_equal(np.add(tdb, dta, casting='unsafe').dtype,

1131:             assert_raises(TypeError, np.add, dta, dtb)

1157:             assert_equal(tda - tdb, tdc)

1158:             assert_equal((tda - tdb).dtype, np.dtype('m8[h]'))

1159:             assert_equal(tdb - tda, -tdc)

1160:             assert_equal((tdb - tda).dtype, np.dtype('m8[h]'))

1162:             assert_equal(tdc - True, tdc - 1)

1163:             assert_equal((tdc - True).dtype, np.dtype('m8[h]'))

1165:             assert_equal(tdc - 3*24, -tdb)

1166:             assert_equal((tdc - 3*24).dtype, np.dtype('m8[h]'))

1168:             assert_equal(False - tdb, -tdb)

1169:             assert_equal((False - tdb).dtype, np.dtype('m8[h]'))

1171:             assert_equal(3*24 - tdb, tdc)

1172:             assert_equal((3*24 - tdb).dtype, np.dtype('m8[h]'))

1174:             assert_equal(dtb - True, dtb - 1)

1175:             assert_equal(dtnat - True, dtnat)

1176:             assert_equal((dtb - True).dtype, np.dtype('M8[D]'))

1178:             assert_equal(dtb - 3, dta)

1179:             assert_equal(dtnat - 3, dtnat)

1180:             assert_equal((dtb - 3).dtype, np.dtype('M8[D]'))

1182:             assert_equal(dtb - tda, dta)

1183:             assert_equal(dtnat - tda, dtnat)

1184:             assert_equal((dtb - tda).dtype, np.dtype('M8[D]'))

1187:             assert_equal(np.subtract(dtc, tdb, casting='unsafe'), dte)

1188:             assert_equal(np.subtract(dtc, tdb, casting='unsafe').dtype,

1192:             assert_equal(np.subtract(dtc, dtd, casting='unsafe'),

1194:             assert_equal(np.subtract(dtc, dtd, casting='unsafe').dtype,

1196:             assert_equal(np.subtract(dtd, dtc, casting='unsafe'),

1198:             assert_equal(np.subtract(dtd, dtc, casting='unsafe').dtype,

1202:             assert_raises(TypeError, np.subtract, tda, dta)

1204:             assert_raises(TypeError, np.subtract, False, dta)

1206:             assert_raises(TypeError, np.subtract, 3, dta)

1222:             assert_equal(tda * 2, tdc)

1223:             assert_equal((tda * 2).dtype, np.dtype('m8[h]'))

1225:             assert_equal(2 * tda, tdc)

1226:             assert_equal((2 * tda).dtype, np.dtype('m8[h]'))

1228:             assert_equal(tda * 1.5, tdb)

1229:             assert_equal((tda * 1.5).dtype, np.dtype('m8[h]'))

1231:             assert_equal(1.5 * tda, tdb)

1232:             assert_equal((1.5 * tda).dtype, np.dtype('m8[h]'))

1235:             assert_raises(TypeError, np.multiply, tda, tdb)

1237:             assert_raises(TypeError, np.multiply, dta, tda)

1239:             assert_raises(TypeError, np.multiply, tda, dta)

1241:             assert_raises(TypeError, np.multiply, dta, 2)

1243:             assert_raises(TypeError, np.multiply, 2, dta)

1245:             assert_raises(TypeError, np.multiply, dta, 1.5)

1247:             assert_raises(TypeError, np.multiply, 1.5, dta)

1254:                 assert_equal(a * b, res)

1255:                 assert_equal(b * a, res)

1295:         assert_equal(op1 // op2, exp)

1310:         with assert_warns(RuntimeWarning)
1312:             assert_equal(actual, 0)

1313:             assert_equal(actual.dtype, np.int64)

1330:         assert_equal(actual, expected)

1341:         with assert_raises_regex(TypeError, "common metadata divisor")
1369:         assert_equal(divmod(op1, op2), expected)

1385:         with assert_warns(RuntimeWarning)
1387:         with assert_warns(RuntimeWarning)
1389:         assert_equal(actual, expected)

1407:             assert_equal(tdc / 2, tda)

1408:             assert_equal((tdc / 2).dtype, np.dtype('m8[h]'))

1410:             assert_equal(tda / 0.5, tdc)

1411:             assert_equal((tda / 0.5).dtype, np.dtype('m8[h]'))

1413:             assert_equal(tda / tdb, 6 / 9)

1414:             assert_equal(np.divide(tda, tdb), 6 / 9)

1415:             assert_equal(np.true_divide(tda, tdb), 6 / 9)

1416:             assert_equal(tdb / tda, 9 / 6)

1417:             assert_equal((tda / tdb).dtype, np.dtype('f8'))

1418:             assert_equal(tda / tdd, 60)

1419:             assert_equal(tdd / tda, 1 / 60)

1422:             assert_raises(TypeError, np.divide, 2, tdb)

1424:             assert_raises(TypeError, np.divide, 0.5, tdb)

1426:             assert_raises(TypeError, np.divide, dta, tda)

1428:             assert_raises(TypeError, np.divide, tda, dta)

1430:             assert_raises(TypeError, np.divide, dta, 2)

1432:             assert_raises(TypeError, np.divide, 2, dta)

1434:             assert_raises(TypeError, np.divide, dta, 1.5)

1436:             assert_raises(TypeError, np.divide, 1.5, dta)

1443:                 assert_equal(np.timedelta64(1) / tp(0), nat)

1444:                 assert_equal(np.timedelta64(0) / tp(0), nat)

1445:                 assert_equal(nat / tp(0), nat)

1446:                 assert_equal(nat / tp(2), nat)

1448:             assert_equal(np.timedelta64(1) / float('inf'), np.timedelta64(0))

1449:             assert_equal(np.timedelta64(0) / float('inf'), np.timedelta64(0))

1450:             assert_equal(nat / float('inf'), nat)

1452:             assert_equal(np.timedelta64(1) / float('nan'), nat)

1453:             assert_equal(np.timedelta64(0) / float('nan'), nat)

1454:             assert_equal(nat / float('nan'), nat)

1465:         assert_equal(np.equal(a, b), [1, 0, 0, 0, 0])

1466:         assert_equal(np.not_equal(a, b), [0, 1, 1, 1, 1])

1467:         assert_equal(np.less(a, b), [0, 0, 1, 0, 1])

1468:         assert_equal(np.less_equal(a, b), [1, 0, 1, 0, 1])

1469:         assert_equal(np.greater(a, b), [0, 1, 0, 1, 0])

1470:         assert_equal(np.greater_equal(a, b), [1, 1, 0, 1, 0])

1480:             assert_(not op(dt_nat, dt_nat))

1481:             assert_(not op(dt_nat, dt_other))

1482:             assert_(not op(dt_other, dt_nat))

1484:             assert_(not op(td_nat, td_nat))

1485:             assert_(not op(td_nat, td_other))

1486:             assert_(not op(td_other, td_nat))

1488:         assert_(np.not_equal(dt_nat, dt_nat))

1489:         assert_(np.not_equal(dt_nat, dt_other))

1490:         assert_(np.not_equal(dt_other, dt_nat))

1492:         assert_(np.not_equal(td_nat, td_nat))

1493:         assert_(np.not_equal(td_nat, td_other))

1494:         assert_(np.not_equal(td_other, td_nat))

1501:         assert_equal(np.minimum(a, b), b)

1502:         assert_equal(np.minimum(a, b).dtype, np.dtype('M8[s]'))

1503:         assert_equal(np.fmin(a, b), b)

1504:         assert_equal(np.fmin(a, b).dtype, np.dtype('M8[s]'))

1505:         assert_equal(np.maximum(a, b), a)

1506:         assert_equal(np.maximum(a, b).dtype, np.dtype('M8[s]'))

1507:         assert_equal(np.fmax(a, b), a)

1508:         assert_equal(np.fmax(a, b).dtype, np.dtype('M8[s]'))

1511:         assert_equal(np.minimum(a.view('i8'), b.view('i8')), a.view('i8'))

1516:         assert_equal(np.minimum(a, dtnat), dtnat)

1517:         assert_equal(np.minimum(dtnat, a), dtnat)

1518:         assert_equal(np.maximum(a, dtnat), dtnat)

1519:         assert_equal(np.maximum(dtnat, a), dtnat)

1520:         assert_equal(np.fmin(dtnat, a), a)

1521:         assert_equal(np.fmin(a, dtnat), a)

1522:         assert_equal(np.fmax(dtnat, a), a)

1523:         assert_equal(np.fmax(a, dtnat), a)

1528:         assert_equal(np.minimum(a, b), b)

1529:         assert_equal(np.minimum(a, b).dtype, np.dtype('m8[s]'))

1530:         assert_equal(np.fmin(a, b), b)

1531:         assert_equal(np.fmin(a, b).dtype, np.dtype('m8[s]'))

1532:         assert_equal(np.maximum(a, b), a)

1533:         assert_equal(np.maximum(a, b).dtype, np.dtype('m8[s]'))

1534:         assert_equal(np.fmax(a, b), a)

1535:         assert_equal(np.fmax(a, b).dtype, np.dtype('m8[s]'))

1538:         assert_equal(np.minimum(a.view('i8'), b.view('i8')), a.view('i8'))

1546:         #assert_raises(TypeError, np.minimum, a, b)

1547:         #assert_raises(TypeError, np.maximum, a, b)

1548:         #assert_raises(TypeError, np.fmin, a, b)

1549:         #assert_raises(TypeError, np.fmax, a, b)

1550:         assert_raises(TypeError, np.minimum, a, b, casting='same_kind')

1551:         assert_raises(TypeError, np.maximum, a, b, casting='same_kind')

1552:         assert_raises(TypeError, np.fmin, a, b, casting='same_kind')

1553:         assert_raises(TypeError, np.fmax, a, b, casting='same_kind')

1558:         assert_(t[0].item().hour == 10)

1561:         assert_(np.dtype('M8[Y/4]') == np.dtype('M8[3M]'))

1562:         assert_(np.dtype('M8[Y/13]') == np.dtype('M8[4W]'))

1563:         assert_(np.dtype('M8[3Y/73]') == np.dtype('M8[15D]'))

1566:         assert_(np.dtype('M8[M/2]') == np.dtype('M8[2W]'))

1567:         assert_(np.dtype('M8[M/15]') == np.dtype('M8[2D]'))

1568:         assert_(np.dtype('M8[3M/40]') == np.dtype('M8[54h]'))

1571:         assert_(np.dtype('m8[W/7]') == np.dtype('m8[D]'))

1572:         assert_(np.dtype('m8[3W/14]') == np.dtype('m8[36h]'))

1573:         assert_(np.dtype('m8[5W/140]') == np.dtype('m8[360m]'))

1576:         assert_(np.dtype('M8[D/12]') == np.dtype('M8[2h]'))

1577:         assert_(np.dtype('M8[D/120]') == np.dtype('M8[12m]'))

1578:         assert_(np.dtype('M8[3D/960]') == np.dtype('M8[270s]'))

1581:         assert_(np.dtype('m8[h/30]') == np.dtype('m8[2m]'))

1582:         assert_(np.dtype('m8[3h/300]') == np.dtype('m8[36s]'))

1585:         assert_(np.dtype('m8[m/30]') == np.dtype('m8[2s]'))

1586:         assert_(np.dtype('m8[3m/300]') == np.dtype('m8[600ms]'))

1589:         assert_(np.dtype('m8[s/100]') == np.dtype('m8[10ms]'))

1590:         assert_(np.dtype('m8[3s/10000]') == np.dtype('m8[300us]'))

1593:         assert_(np.dtype('M8[fs/100]') == np.dtype('M8[10as]'))

1594:         assert_raises(ValueError, lambda
1597:         assert_raises(ValueError, lambda
1601:         assert_equal(np.array(['1980-02-29T01
1604:         assert_equal(np.array(['+1980-02-29T01
1607:         assert_equal(np.array(['-1980-02-29T01
1610:         with assert_warns(DeprecationWarning)
1611:             assert_equal(

1614:         with assert_warns(DeprecationWarning)
1615:             assert_equal(

1619:         with assert_warns(DeprecationWarning)
1620:             assert_equal(

1623:         with assert_warns(DeprecationWarning)
1624:             assert_equal(

1627:         with assert_warns(DeprecationWarning)
1628:             assert_equal(

1631:         with assert_warns(DeprecationWarning)
1632:             assert_equal(np.datetime64('1977-03-02T12
1637:         assert_raises(ValueError, np.array, ['badvalue'], np.dtype('M8[us]'))

1639:         assert_raises(ValueError, np.array, ['1980X'], np.dtype('M8[us]'))

1641:         assert_raises(ValueError, np.array, ['1980-'], np.dtype('M8[us]'))

1643:         assert_raises(ValueError, np.array, ['1980-00'], np.dtype('M8[us]'))

1644:         assert_raises(ValueError, np.array, ['1980-13'], np.dtype('M8[us]'))

1646:         assert_raises(ValueError, np.array, ['1980-1'], np.dtype('M8[us]'))

1647:         assert_raises(ValueError, np.array, ['1980-1-02'], np.dtype('M8[us]'))

1649:         assert_raises(ValueError, np.array, ['1980-Mor'], np.dtype('M8[us]'))

1651:         assert_raises(ValueError, np.array, ['1980-01-'], np.dtype('M8[us]'))

1653:         assert_raises(ValueError, np.array, ['1980-01-0'], np.dtype('M8[us]'))

1654:         assert_raises(ValueError, np.array, ['1980-01-00'], np.dtype('M8[us]'))

1655:         assert_raises(ValueError, np.array, ['1980-01-32'], np.dtype('M8[us]'))

1656:         assert_raises(ValueError, np.array, ['1979-02-29'], np.dtype('M8[us]'))

1657:         assert_raises(ValueError, np.array, ['1980-02-30'], np.dtype('M8[us]'))

1658:         assert_raises(ValueError, np.array, ['1980-03-32'], np.dtype('M8[us]'))

1659:         assert_raises(ValueError, np.array, ['1980-04-31'], np.dtype('M8[us]'))

1660:         assert_raises(ValueError, np.array, ['1980-05-32'], np.dtype('M8[us]'))

1661:         assert_raises(ValueError, np.array, ['1980-06-31'], np.dtype('M8[us]'))

1662:         assert_raises(ValueError, np.array, ['1980-07-32'], np.dtype('M8[us]'))

1663:         assert_raises(ValueError, np.array, ['1980-08-32'], np.dtype('M8[us]'))

1664:         assert_raises(ValueError, np.array, ['1980-09-31'], np.dtype('M8[us]'))

1665:         assert_raises(ValueError, np.array, ['1980-10-32'], np.dtype('M8[us]'))

1666:         assert_raises(ValueError, np.array, ['1980-11-31'], np.dtype('M8[us]'))

1667:         assert_raises(ValueError, np.array, ['1980-12-32'], np.dtype('M8[us]'))

1669:         assert_raises(ValueError, np.array, ['1980-02-03%'],

1671:         assert_raises(ValueError, np.array, ['1980-02-03 q'],

1675:         assert_raises(ValueError, np.array, ['1980-02-03 25'],

1677:         assert_raises(ValueError, np.array, ['1980-02-03T25'],

1679:         assert_raises(ValueError, np.array, ['1980-02-03 24
1681:         assert_raises(ValueError, np.array, ['1980-02-03T24
1683:         assert_raises(ValueError, np.array, ['1980-02-03 -1'],

1686:         assert_raises(ValueError, np.array, ['1980-02-03 01
1689:         assert_raises(ValueError, np.array, ['1980-02-03 01
1691:         assert_raises(ValueError, np.array, ['1980-02-03 01
1694:         assert_raises(ValueError, np.array, ['1980-02-03 01
1697:         assert_raises(ValueError, np.array, ['1980-02-03 01
1699:         assert_raises(ValueError, np.array, ['1980-02-03 01
1702:         with assert_warns(DeprecationWarning)
1703:             assert_raises(ValueError, np.array, ['1980-02-03 01
1705:         with assert_warns(DeprecationWarning)
1706:             assert_raises(ValueError, np.array, ['1980-02-03 01
1708:         with assert_warns(DeprecationWarning)
1709:             assert_raises(ValueError, np.array, ['1980-02-03 01
1711:         with assert_warns(DeprecationWarning)
1712:             assert_raises(ValueError, np.array, ['1980-02-03 01
1714:         with assert_warns(DeprecationWarning)
1715:             assert_raises(ValueError, np.array, ['1980-02-03 01
1725:             assert_equal(timesteps, x[0].astype(np.int64),

1728:         assert_equal(x[0].astype(np.int64), 322689600000000000)

1741:         assert_equal(np.datetime_as_string(np.datetime64(date, 'Y')),

1743:         assert_equal(np.datetime_as_string(np.datetime64(date, 'M')),

1745:         assert_equal(np.datetime_as_string(np.datetime64(date, 'D')),

1747:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'h')),

1749:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'm')),

1751:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 's')),

1753:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ms')),

1756:             assert_equal(np.datetime_as_string(np.datetime64(datetime, us)),

1761:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ns')),

1763:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ps')),

1765:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'fs')),

1770:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'as')),

1774:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ns')),

1776:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'ps')),

1778:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'fs')),

1783:         assert_equal(np.datetime_as_string(np.datetime64(datetime, 'as')),

1788:         assert_equal(np.datetime_as_string(a, unit='Y', casting='unsafe'),

1790:         assert_equal(np.datetime_as_string(a, unit='M', casting='unsafe'),

1792:         assert_equal(np.datetime_as_string(a, unit='W', casting='unsafe'),

1794:         assert_equal(np.datetime_as_string(a, unit='D', casting='unsafe'),

1796:         assert_equal(np.datetime_as_string(a, unit='h'), '2032-07-18T12')

1797:         assert_equal(np.datetime_as_string(a, unit='m'),

1799:         assert_equal(np.datetime_as_string(a, unit='s'),

1801:         assert_equal(np.datetime_as_string(a, unit='ms'),

1803:         assert_equal(np.datetime_as_string(a, unit='us'),

1805:         assert_equal(np.datetime_as_string(a, unit='ns'),

1807:         assert_equal(np.datetime_as_string(a, unit='ps'),

1809:         assert_equal(np.datetime_as_string(a, unit='fs'),

1811:         assert_equal(np.datetime_as_string(a, unit='as'),

1815:         assert_equal(np.datetime_as_string(

1818:         assert_equal(np.datetime_as_string(

1821:         assert_equal(np.datetime_as_string(

1824:         assert_equal(np.datetime_as_string(

1828:         assert_equal(np.datetime_as_string(

1831:         assert_equal(np.datetime_as_string(

1835:         assert_equal(np.datetime_as_string(

1838:         assert_equal(np.datetime_as_string(

1846:         assert_equal(np.datetime_as_string(a),

1848:         assert_equal(np.datetime_as_string(a, timezone='naive'),

1850:         assert_equal(np.datetime_as_string(a, timezone='UTC'),

1852:         assert_(np.datetime_as_string(a, timezone='local') !=

1857:         assert_equal(np.datetime_as_string(a, timezone=tz('US/Central')),

1859:         assert_equal(np.datetime_as_string(a, timezone=tz('US/Eastern')),

1861:         assert_equal(np.datetime_as_string(a, timezone=tz('US/Pacific')),

1864:         assert_equal(np.datetime_as_string(b, timezone=tz('US/Central')),

1866:         assert_equal(np.datetime_as_string(b, timezone=tz('US/Eastern')),

1868:         assert_equal(np.datetime_as_string(b, timezone=tz('US/Pacific')),

1872:         assert_raises(TypeError, np.datetime_as_string, a, unit='D',

1875:         assert_equal(np.datetime_as_string(a, unit='D',

1878:         assert_equal(np.datetime_as_string(b, unit='D',

1885:         assert_equal(a.dtype, np.dtype('M8[D]'))

1886:         assert_equal(a,

1891:         assert_equal(a.dtype, np.dtype('M8[D]'))

1892:         assert_equal(a,

1898:         assert_equal(a.dtype, np.dtype('M8[M]'))

1899:         assert_equal(a,

1905:         assert_equal(a.dtype, np.dtype('M8[Y]'))

1906:         assert_equal(a,

1909:         assert_equal(a.dtype, np.dtype('M8[D]'))

1910:         assert_equal(a,

1914:         assert_raises(ValueError, np.arange, np.datetime64('today'),

1917:         assert_raises(TypeError, np.arange, np.datetime64('2011-03-01', 'D'),

1919:         assert_raises(TypeError, np.arange,

1925:         assert_equal(np.arange(d, d + 1), d)

1926:         assert_raises(ValueError, np.arange, d)

1930:         assert_equal(a.dtype, np.dtype('m8'))

1931:         assert_equal(a, np.timedelta64(0) + np.arange(3, 10))

1934:         assert_equal(a.dtype, np.dtype('m8[s]'))

1935:         assert_equal(a, np.timedelta64(0, 's') + np.arange(3, 10, 2))

1938:         assert_raises(ValueError, np.arange, np.timedelta64(0),

1941:         assert_raises(TypeError, np.arange, np.timedelta64(0, 'D'),

1943:         assert_raises(TypeError, np.arange, np.timedelta64(0, 'Y'),

1982:         assert_equal(val1 % val2, expected)

1993:         with assert_raises_regex(TypeError, "common metadata divisor")
1997:         with assert_warns(RuntimeWarning)
1999:             assert_equal(actual, np.timedelta64('NaT'))

2012:         with assert_raises_regex(TypeError,

2018:         assert_equal(np.arange(d, d + 1), d)

2019:         assert_equal(np.arange(d), np.arange(0, d))

2023:         assert_equal(np.maximum.reduce(a).dtype, np.dtype('M8[D]'))

2024:         assert_equal(np.maximum.reduce(a),

2028:         assert_equal(np.maximum.reduce(a).dtype, np.dtype('m8[s]'))

2029:         assert_equal(np.maximum.reduce(a),

2036:         assert_array_equal(a.mean(), a.sum() / len(a))

2055:         assert_equal(

2059:         assert_equal(

2062:         assert_equal(

2067:         assert_equal(np.busday_offset('2010-08', 0, roll='backward'),

2069:         assert_equal(np.busday_offset('2010-08', 0, roll='preceding'),

2071:         assert_equal(np.busday_offset('2010-08', 0, roll='modifiedpreceding'),

2073:         assert_equal(np.busday_offset('2010-08', 0, roll='modifiedfollowing'),

2075:         assert_equal(np.busday_offset('2010-08', 0, roll='forward'),

2077:         assert_equal(np.busday_offset('2010-08', 0, roll='following'),

2079:         assert_equal(np.busday_offset('2010-10-30', 0, roll='following'),

2081:         assert_equal(

2084:         assert_equal(

2087:         assert_equal(

2090:         assert_equal(

2094:         assert_raises(ValueError, np.busday_offset, '2011-06-04', 0)

2097:         assert_equal(np.busday_offset('2006-02-01', 25),

2099:         assert_equal(np.busday_offset('2006-03-08', -25),

2101:         assert_equal(np.busday_offset('2007-02-25', 11, weekmask='SatSun'),

2103:         assert_equal(np.busday_offset('2007-04-07', -11, weekmask='SatSun'),

2107:         assert_equal(np.busday_offset(np.datetime64('NaT'), 1, roll='nat'),

2109:         assert_equal(np.busday_offset(np.datetime64('NaT'), 1, roll='following'),

2111:         assert_equal(np.busday_offset(np.datetime64('NaT'), 1, roll='preceding'),

2120:         assert_equal(bdd.holidays,

2123:         assert_equal(bdd.weekmask, np.array([1, 1, 1, 1, 1, 0, 0], dtype='?'))

2127:         assert_equal(bdd.weekmask, np.array([0, 1, 1, 1, 1, 0, 1], dtype='?'))

2131:         assert_equal(bdd.weekmask, np.array([0, 0, 1, 1, 0, 0, 1], dtype='?'))

2135:         assert_equal(bdd.weekmask, np.array([1, 1, 0, 0, 0, 0, 0], dtype='?'))

2138:         assert_raises(ValueError, np.busdaycalendar, weekmask=[0, 0, 0, 0, 0, 0, 0])

2140:         assert_raises(ValueError, np.busdaycalendar, weekmask="satsun")

2142:         assert_raises(ValueError, np.busdaycalendar, weekmask="")

2144:         assert_raises(ValueError, np.busdaycalendar, weekmask="Mon Tue We")

2145:         assert_raises(ValueError, np.busdaycalendar, weekmask="Max")

2146:         assert_raises(ValueError, np.busdaycalendar, weekmask="Monday Tue")

2150:         assert_equal(

2153:         assert_equal(

2156:         assert_equal(

2159:         assert_equal(

2162:         assert_equal(

2165:         assert_equal(

2169:         assert_equal(

2173:         assert_equal(

2178:         assert_equal(

2182:         assert_equal(

2187:         assert_equal(

2191:         assert_equal(

2196:         assert_equal(

2200:         assert_equal(

2205:         assert_equal(

2209:         assert_equal(

2219:         assert_equal(

2222:         assert_equal(

2225:         assert_equal(

2228:         assert_equal(

2231:         assert_equal(

2234:         assert_equal(

2237:         assert_equal(

2240:         assert_equal(

2243:         assert_equal(

2246:         assert_equal(

2249:         assert_equal(

2253:         assert_equal(

2256:         assert_equal(

2259:         assert_equal(

2262:         assert_equal(

2265:         assert_equal(

2268:         assert_equal(

2271:         assert_equal(

2274:         assert_equal(

2277:         assert_equal(

2280:         assert_equal(

2285:         assert_raises(ValueError, np.busday_offset, '2012-01-03', -15,

2287:         assert_raises(ValueError, np.busday_offset, '2012-01-03', -15,

2291:         assert_equal(

2295:         assert_equal(

2299:         assert_equal(

2303:         assert_equal(

2309:         assert_equal(

2327:         assert_equal(np.busday_count('2011-01-01', dates, busdaycal=bdd),

2330:         assert_equal(np.busday_count(dates, '2011-01-01', busdaycal=bdd),

2335:         assert_equal(np.busday_count(dates, '2011-12-31', busdaycal=bdd),

2338:         assert_equal(np.busday_count('2011-12-31', dates, busdaycal=bdd),

2342:         assert_raises(ValueError, np.busday_offset, '2012-01-03', '2012-02-03',

2344:         assert_raises(ValueError, np.busday_offset, '2012-01-03', '2012-02-03',

2348:         assert_equal(np.busday_count('2011-03', '2011-04', weekmask='Mon'), 4)

2350:         assert_equal(np.busday_count('2011-04', '2011-03', weekmask='Mon'), -4)

2361:         assert_equal(np.is_busday('2011-01-01'), False)

2362:         assert_equal(np.is_busday('2011-01-02'), False)

2363:         assert_equal(np.is_busday('2011-01-03'), True)

2366:         assert_equal(np.is_busday(holidays, busdaycal=bdd),

2372:         assert_equal(a.view(np.int64), 2**31 - 1)

2374:         assert_equal(a.view(np.int64), 2**31)

2378:         with assert_warns(DeprecationWarning)
2380:             assert_equal(a.view(np.int64), 2**31 - 1)

2381:         with assert_warns(DeprecationWarning)
2383:             assert_equal(a.view(np.int64), 2**31)

2387:         assert_equal(str(a), '2038-01-20T13
2390:         assert_(np.isnat(np.datetime64('NaT', 'ms')))

2391:         assert_(np.isnat(np.datetime64('NaT', 'ns')))

2392:         assert_(not np.isnat(np.datetime64('2038-01-19T03
2394:         assert_(np.isnat(np.timedelta64('NaT', "ms")))

2395:         assert_(not np.isnat(np.timedelta64(34, "ms")))

2402:             assert_equal(np.isnat(arr), res)

2404:             assert_equal(np.isnat(arr), res)

2406:             assert_equal(np.isnat(arr), res)

2408:             assert_equal(np.isnat(arr), res)

2415:             assert_raises(TypeError, np.isnat, np.zeros(10, t))

2418:         assert_(not np.isfinite(np.datetime64('NaT', 'ms')))

2419:         assert_(not np.isfinite(np.datetime64('NaT', 'ns')))

2420:         assert_(np.isfinite(np.datetime64('2038-01-19T03
2422:         assert_(not np.isfinite(np.timedelta64('NaT', "ms")))

2423:         assert_(np.isfinite(np.timedelta64(34, "ms")))

2437:         assert_equal(np.isfinite(arr), pos)

2438:         assert_equal(np.isinf(arr), false)

2439:         assert_equal(np.isnan(arr), neg)

2441:     def test_assert_equal(self)
2442:         assert_raises(AssertionError, assert_equal,

2455:         assert_raises(ValueError, obj_arr.astype, 'M8')

2456:         assert_raises(ValueError, obj_arr.astype, 'm8')

2462:         assert res.dtype == np.dtype("M8[D]")

2463:         assert_equal(arr.astype("M8"), res)

2465:         assert_equal(arr.astype("M8"), res)

2467:         assert_equal(arr.astype("S").astype("M8"), res)

2483:         assert earliest < epoch < latest

2505:         assert limit_via_str == limit

2512:         assert_equal(np.datetime_data(a.dtype), ('D', 1))

2517:         assert np.datetime_data(dt.dtype) == ('ms', 5)

2520:         assert np.datetime_data(dt.dtype) == ('ms', 5)

2525:         assert np.datetime_data(dt.dtype) == ('us', 5)

2528:         assert np.datetime_data(dt.dtype) == ('us', 5)

Total asserts: 839

Filename: numpy/core/tests/test__exceptions.py
18:         assert res._total_size == error._total_size

29:         assert f(0) == '0 bytes'

30:         assert f(1) == '1 bytes'

31:         assert f(1023) == '1023 bytes'

32:         assert f(Ki) == '1.00 KiB'

33:         assert f(Ki+1) == '1.00 KiB'

34:         assert f(10*Ki) == '10.0 KiB'

35:         assert f(int(999.4*Ki)) == '999. KiB'

36:         assert f(int(1023.4*Ki)) == '1023. KiB'

37:         assert f(int(1023.5*Ki)) == '1.00 MiB'

38:         assert f(Ki*Ki) == '1.00 MiB'

41:         assert f(int(Ki*Ki*Ki*0.9999)) == '1.00 GiB'

42:         assert f(Ki*Ki*Ki*Ki*Ki*Ki) == '1.00 EiB'

45:         assert f(Ki*Ki*Ki*Ki*Ki*Ki*123456) == '123456. EiB'

50:         assert e._total_size == 1

53:         assert e._total_size == 1024

59:         assert isinstance(pickle.dumps(_UFuncNoLoopError), bytes)

72:             assert exc.axis is None

73:             assert exc.ndim is None

76:             assert exc.axis == axis

77:             assert exc.ndim == ndim

84:         assert type(exc) is type(exc2)

88:             assert attr1 == attr2, name

Total asserts: 23

Filename: numpy/core/tests/test_extint128.py
9: from numpy.testing import assert_raises, assert_equal

81:                 assert_raises(OverflowError, mt.extint_safe_binop, a, b, op)

85:                     # assert_equal is slow

86:                     assert_equal(d, c)

94:                 assert_equal(b, a)

101:                 assert_raises(OverflowError, mt.extint_to_64, a)

105:                     assert_equal(b, a)

114:                 assert_equal(d, c)

122:                 assert_raises(OverflowError, mt.extint_add_128, a, b)

126:                     assert_equal(d, c)

134:                 assert_raises(OverflowError, mt.extint_sub_128, a, b)

138:                     assert_equal(d, c)

147:                 assert_equal(c, b)

159:                 assert_equal(c, b)

171:                 assert_equal(c, b)

180:                 assert_equal(d, c)

197:                 assert_equal(d, c)

198:                 assert_equal(dr, cr)

199:                 assert_equal(b*d + dr, a)

209:                 assert_equal(d, c)

219:                 assert_equal(d, c)

Total asserts: 21

Filename: numpy/core/tests/test_cython.py
71:     assert checks.is_td64(np.timedelta64(1234))

72:     assert checks.is_td64(np.timedelta64(1234, "ns"))

73:     assert checks.is_td64(np.timedelta64("NaT", "ns"))

75:     assert not checks.is_td64(1)

76:     assert not checks.is_td64(None)

77:     assert not checks.is_td64("foo")

78:     assert not checks.is_td64(np.datetime64("now", "s"))

84:     assert checks.is_dt64(np.datetime64(1234, "ns"))

85:     assert checks.is_dt64(np.datetime64("NaT", "ns"))

87:     assert not checks.is_dt64(1)

88:     assert not checks.is_dt64(None)

89:     assert not checks.is_dt64("foo")

90:     assert not checks.is_dt64(np.timedelta64(1234))

101:     assert result == expected

112:     assert result == expected

121:     assert result == expected

126:     assert result == expected

132:     assert checks.is_integer(1)

133:     assert checks.is_integer(np.int8(1))

134:     assert checks.is_integer(np.uint64(1))

Total asserts: 20

Filename: numpy/core/tests/test_umath_complex.py
9:     assert_raises, assert_equal, assert_array_equal, assert_almost_equal, assert_array_max_ulp

137:         assert_almost_equal(y, y_r)

154:             assert_raises(FloatingPointError, np.log, x)

156:             assert_almost_equal(np.log(x), y)

166:             assert_raises(FloatingPointError, np.log, x)

168:             assert_almost_equal(np.log(x), y)

176:         assert_almost_equal(np.log(x), y)

181:         assert_almost_equal(np.log(x), y)

190:             #assert_raises(FloatingPointError, np.log, x)

192:             assert_almost_equal(np.log(x), y)

199:             #assert_raises(FloatingPointError, np.log, x)

201:             assert_almost_equal(np.log(x), y)

209:         assert_almost_equal(np.log(x), y)

216:         assert_almost_equal(np.log(x), y)

223:         assert_almost_equal(np.log(x), y)

230:         assert_almost_equal(np.log(x), y)

237:         assert_almost_equal(np.log(x), y)

242:         assert_almost_equal(np.log(x), y)

250:         assert_almost_equal(np.log(x), y)

257:         assert_almost_equal(np.log(x), y)

264:         assert_almost_equal(np.log(x), y)

273:                 assert_almost_equal(np.log(xa[i].conj()), ya[i].conj())

367:         assert_almost_equal(y, y_r)

387:             assert_almost_equal(n_r[i], p_r[i], err_msg='Loop %d\n' % i)

407:             assert_almost_equal(n_r[i], p_r[i], err_msg='Loop %d\n' % i)

420:         assert_almost_equal(y, y_r)

425:         assert_array_equal(np.abs(x), np.real(x))

428:         assert_array_equal(np.abs(x), np.real(x))

431:         assert_array_equal(np.abs(x), np.real(x))

434:         assert_array_equal(np.abs(x), np.real(x))

466:         assert len(xa) == len(x) == len(y)

542:         assert_equal(f(z1), x)

544:         assert_almost_equal(f(z1), x)

552:             assert_equal(f(z1), z2)

554:             assert_almost_equal(f(z1), z2)

579:         assert_equal(np.abs(arr[
581:             assert_equal(np.square(arr[
591:         assert_equal(np.abs(arr[
621:         assert_array_max_ulp(h.real, g.real, 1)

622:         assert_array_max_ulp(h.imag, g.imag, 1)

Total asserts: 40

Filename: numpy/core/tests/test_custom_dtypes.py
4: from numpy.testing import assert_array_equal

27:         assert sf2.get_scaling() == 2.

29:         assert sf6.get_scaling() == 6.

35:         assert dt == SF(1.)

41:         assert a.dtype.get_scaling() == scaling

42:         assert_array_equal(scaling * a.view(np.float64), [1., 2., 3.])

46:         assert repr(SF(scaling=1.)) == "_ScaledFloatTestDType(scaling=1.0)"

52:         assert a.dtype.get_scaling() == scaling

53:         assert_array_equal(scaling * a.view(np.float64), [1., 2., 3.])

59:         assert a.tolist() == [1., 2., 3.]

65:         assert np.can_cast(a, SF(-1.), casting="equiv")

66:         assert not np.can_cast(a, SF(-1.), casting="no")

68:         assert_array_equal(-1 * na.view(np.float64), a.view(np.float64))

70:         assert np.can_cast(a, SF(2.), casting="same_kind")

71:         assert not np.can_cast(a, SF(2.), casting="safe")

73:         assert_array_equal(2 * a2.view(np.float64), a.view(np.float64))

84:         assert np.result_type(SF(2.), SF(3.)) == SF(3.)

85:         assert np.result_type(SF(3.), SF(2.)) == SF(3.)

87:         assert np.result_type(SF(3.), np.float64) == SF(3.)

88:         assert np.result_type(np.float64, SF(0.5)) == SF(1.)

100:         assert res.dtype.get_scaling() == 8.

102:         assert_array_equal(res.view(np.float64), expected_view)

111:         assert res == a.astype(np.float64).sum()

128:         assert_array_equal(b.view(np.float64), float_b)

138:         assert res1.dtype == res2.dtype == b.dtype

140:         assert_array_equal(res1.view(np.float64), expected_view)

141:         assert_array_equal(res2.view(np.float64), expected_view)

156:         assert res.dtype == np.result_type(a.dtype, b.dtype)

159:         assert_array_equal(res.view(np.float64), expected_view)

192:         assert_array_equal(res, expected)

197:         assert_array_equal(res, expected)

Total asserts: 31

Filename: numpy/core/tests/test_defchararray.py
5:     assert_, assert_equal, assert_array_equal, assert_raises,

6:     assert_raises_regex

17:         assert_equal(B.dtype.itemsize, 10)

18:         assert_array_equal(B, [[b'abc', b'2'],

24:         assert_raises(ValueError, np.char.array, (A,))

26:         assert_equal(B.dtype.itemsize, 10 * np.array('a', 'U').dtype.itemsize)

27:         assert_array_equal(B, [['abc', u'Sigma \u03a3'],

33:         assert_equal(A.dtype.type, np.string_)

35:         assert_array_equal(B, A)

36:         assert_equal(B.dtype, A.dtype)

37:         assert_equal(B.shape, A.shape)

39:         assert_(B[0, 0] != A[0, 0])

41:         assert_array_equal(C, A)

42:         assert_equal(C.dtype, A.dtype)

44:         assert_(C[0, 0] != B[0, 0])

45:         assert_(C[0, 0] == A[0, 0])

50:         assert_equal(A.dtype.type, np.unicode_)

52:         assert_array_equal(B, A)

53:         assert_equal(B.dtype, A.dtype)

54:         assert_equal(B.shape, A.shape)

56:         assert_array_equal(B, A)

57:         assert_equal(B.dtype, A.dtype)

58:         assert_equal(B.shape, A.shape)

63:         assert_raises(UnicodeEncodeError, fail)

68:         assert_(issubclass((A + B).dtype.type, np.unicode_))

72:         assert_equal(len(A), 1)

73:         assert_equal(len(A[0]), 3)

74:         assert_(issubclass(A.dtype.type, np.string_))

78:         assert_equal(len(A), 1)

79:         assert_equal(len(A[0]), 1)

80:         assert_equal(A.itemsize, 4)

81:         assert_(issubclass(A.dtype.type, np.unicode_))

89:         assert_raises(AttributeError, fail)

96:         assert_raises(TypeError, fail)

103:         assert_raises(TypeError, fail)

110:         assert_raises(TypeError, fail)

117:         assert_raises(TypeError, fail)

124:         assert_raises(TypeError, fail)

131:         assert_raises(ValueError, fail)

142:         assert_(np.all(self.A == self.B))

143:         assert_(np.all(self.A >= self.B))

144:         assert_(np.all(self.A <= self.B))

145:         assert_(not np.any(self.A > self.B))

146:         assert_(not np.any(self.A < self.B))

147:         assert_(not np.any(self.A != self.B))

154:         assert_equal(self.A.shape, (4,))

155:         assert_equal(self.A.upper()[
165:         assert_array_equal((self.A != self.B), [[True, False], [True, True]])

168:         assert_array_equal((self.A == self.B), [[False, True], [False, False]])

171:         assert_array_equal((self.A >= self.B), [[False, True], [True, True]])

174:         assert_array_equal((self.A <= self.B), [[True, True], [False, False]])

177:         assert_array_equal((self.A > self.B), [[False, False], [True, True]])

180:         assert_array_equal((self.A < self.B), [[True, False], [False, False]])

185:         assert_(isinstance(out1, np.ndarray))

186:         assert_(isinstance(out2, np.ndarray))

214:         assert_(issubclass(np.char.str_len(self.A).dtype.type, np.integer))

215:         assert_array_equal(np.char.str_len(self.A), [[5, 0], [5, 9], [12, 5]])

216:         assert_array_equal(np.char.str_len(self.B), [[3, 0], [5, 9], [12, 5]])

219:         assert_(issubclass(self.A.count('').dtype.type, np.integer))

220:         assert_array_equal(self.A.count('a'), [[1, 0], [0, 1], [0, 0]])

221:         assert_array_equal(self.A.count('123'), [[0, 0], [1, 0], [1, 0]])

223:         # assert_array_equal(self.A.count('\0'), [[0, 0], [0, 0], [1, 0]])

224:         assert_array_equal(self.A.count('a', 0, 2), [[1, 0], [0, 0], [0, 0]])

225:         assert_array_equal(self.B.count('a'), [[0, 0], [0, 1], [0, 0]])

226:         assert_array_equal(self.B.count('123'), [[0, 0], [1, 0], [1, 0]])

227:         # assert_array_equal(self.B.count('\0'), [[0, 0], [0, 0], [1, 0]])

230:         assert_(issubclass(self.A.endswith('').dtype.type, np.bool_))

231:         assert_array_equal(self.A.endswith(' '), [[1, 0], [0, 0], [1, 0]])

232:         assert_array_equal(self.A.endswith('3', 0, 3), [[0, 0], [1, 0], [1, 0]])

237:         assert_raises(TypeError, fail)

240:         assert_(issubclass(self.A.find('a').dtype.type, np.integer))

241:         assert_array_equal(self.A.find('a'), [[1, -1], [-1, 6], [-1, -1]])

242:         assert_array_equal(self.A.find('3'), [[-1, -1], [2, -1], [2, -1]])

243:         assert_array_equal(self.A.find('a', 0, 2), [[1, -1], [-1, -1], [-1, -1]])

244:         assert_array_equal(self.A.find(['1', 'P']), [[-1, -1], [0, -1], [0, 1]])

251:         assert_raises(ValueError, fail)

252:         assert_(np.char.index('abcba', 'b') == 1)

253:         assert_(issubclass(np.char.index('abcba', 'b').dtype.type, np.integer))

256:         assert_(issubclass(self.A.isalnum().dtype.type, np.bool_))

257:         assert_array_equal(self.A.isalnum(), [[False, False], [True, True], [False, True]])

260:         assert_(issubclass(self.A.isalpha().dtype.type, np.bool_))

261:         assert_array_equal(self.A.isalpha(), [[False, False], [False, True], [False, True]])

264:         assert_(issubclass(self.A.isdigit().dtype.type, np.bool_))

265:         assert_array_equal(self.A.isdigit(), [[False, False], [True, False], [False, False]])

268:         assert_(issubclass(self.A.islower().dtype.type, np.bool_))

269:         assert_array_equal(self.A.islower(), [[True, False], [False, False], [False, False]])

272:         assert_(issubclass(self.A.isspace().dtype.type, np.bool_))

273:         assert_array_equal(self.A.isspace(), [[False, False], [False, False], [False, False]])

276:         assert_(issubclass(self.A.istitle().dtype.type, np.bool_))

277:         assert_array_equal(self.A.istitle(), [[False, False], [False, False], [False, False]])

280:         assert_(issubclass(self.A.isupper().dtype.type, np.bool_))

281:         assert_array_equal(self.A.isupper(), [[False, False], [False, False], [False, True]])

284:         assert_(issubclass(self.A.rfind('a').dtype.type, np.integer))

285:         assert_array_equal(self.A.rfind('a'), [[1, -1], [-1, 6], [-1, -1]])

286:         assert_array_equal(self.A.rfind('3'), [[-1, -1], [2, -1], [6, -1]])

287:         assert_array_equal(self.A.rfind('a', 0, 2), [[1, -1], [-1, -1], [-1, -1]])

288:         assert_array_equal(self.A.rfind(['1', 'P']), [[-1, -1], [0, -1], [0, 2]])

295:         assert_raises(ValueError, fail)

296:         assert_(np.char.rindex('abcba', 'b') == 3)

297:         assert_(issubclass(np.char.rindex('abcba', 'b').dtype.type, np.integer))

300:         assert_(issubclass(self.A.startswith('').dtype.type, np.bool_))

301:         assert_array_equal(self.A.startswith(' '), [[1, 0], [0, 0], [0, 0]])

302:         assert_array_equal(self.A.startswith('1', 0, 3), [[0, 0], [1, 0], [1, 0]])

307:         assert_raises(TypeError, fail)

324:         assert_(issubclass(self.A.capitalize().dtype.type, np.string_))

325:         assert_array_equal(self.A.capitalize(), tgt)

330:         assert_(issubclass(self.B.capitalize().dtype.type, np.unicode_))

331:         assert_array_equal(self.B.capitalize(), tgt)

334:         assert_(issubclass(self.A.center(10).dtype.type, np.string_))

336:         assert_array_equal(np.char.str_len(C), [[10, 20], [10, 20], [12, 20]])

339:         assert_(np.all(C.startswith(b'#')))

340:         assert_(np.all(C.endswith(b'#')))

345:         assert_(issubclass(C.dtype.type, np.string_))

346:         assert_array_equal(C, tgt)

350:         assert_(A.decode('unicode-escape')[0] == '\u03a3')

354:         assert_(B[0][0] == str(' \\u03a3 ').encode('latin1'))

358:         assert_(T[2, 0] == b'123      345 \0')

366:         assert_(issubclass(A.dtype.type, np.unicode_))

370:         assert_array_equal(np.char.join([',', '#'], A0), tgt)

373:         assert_(issubclass(self.A.ljust(10).dtype.type, np.string_))

376:         assert_array_equal(np.char.str_len(C), [[10, 20], [10, 20], [12, 20]])

379:         assert_array_equal(C.startswith(b'#'), [

381:         assert_(np.all(C.endswith(b'#')))

386:         assert_(issubclass(C.dtype.type, np.string_))

387:         assert_array_equal(C, tgt)

393:         assert_(issubclass(self.A.lower().dtype.type, np.string_))

394:         assert_array_equal(self.A.lower(), tgt)

399:         assert_(issubclass(self.B.lower().dtype.type, np.unicode_))

400:         assert_array_equal(self.B.lower(), tgt)

406:         assert_(issubclass(self.A.lstrip().dtype.type, np.string_))

407:         assert_array_equal(self.A.lstrip(), tgt)

412:         assert_array_equal(self.A.lstrip([b'1', b'M']), tgt)

417:         assert_(issubclass(self.B.lstrip().dtype.type, np.unicode_))

418:         assert_array_equal(self.B.lstrip(), tgt)

425:         assert_(issubclass(P.dtype.type, np.string_))

426:         assert_array_equal(P, tgt)

434:         assert_(issubclass(R.dtype.type, np.string_))

435:         assert_array_equal(R, tgt)

438:         assert_(issubclass(self.A.rjust(10).dtype.type, np.string_))

441:         assert_array_equal(np.char.str_len(C), [[10, 20], [10, 20], [12, 20]])

444:         assert_(np.all(C.startswith(b'#')))

445:         assert_array_equal(C.endswith(b'#'),

451:         assert_(issubclass(C.dtype.type, np.string_))

452:         assert_array_equal(C, tgt)

459:         assert_(issubclass(P.dtype.type, np.string_))

460:         assert_array_equal(P, tgt)

467:         assert_(issubclass(A.dtype.type, np.object_))

468:         assert_equal(A.tolist(), tgt)

471:         assert_(issubclass(self.A.rstrip().dtype.type, np.string_))

476:         assert_array_equal(self.A.rstrip(), tgt)

482:         assert_array_equal(self.A.rstrip([b'5', b'ER']), tgt)

487:         assert_(issubclass(self.B.rstrip().dtype.type, np.unicode_))

488:         assert_array_equal(self.B.rstrip(), tgt)

494:         assert_(issubclass(self.A.strip().dtype.type, np.string_))

495:         assert_array_equal(self.A.strip(), tgt)

500:         assert_array_equal(self.A.strip([b'15', b'EReM']), tgt)

505:         assert_(issubclass(self.B.strip().dtype.type, np.unicode_))

506:         assert_array_equal(self.B.strip(), tgt)

514:         assert_(issubclass(A.dtype.type, np.object_))

515:         assert_equal(A.tolist(), tgt)

519:         assert_(issubclass(A.dtype.type, np.object_))

520:         assert_(A.shape == (1,))

521:         assert_(len(A[0]) == 3)

527:         assert_(issubclass(self.A.swapcase().dtype.type, np.string_))

528:         assert_array_equal(self.A.swapcase(), tgt)

533:         assert_(issubclass(self.B.swapcase().dtype.type, np.unicode_))

534:         assert_array_equal(self.B.swapcase(), tgt)

540:         assert_(issubclass(self.A.title().dtype.type, np.string_))

541:         assert_array_equal(self.A.title(), tgt)

546:         assert_(issubclass(self.B.title().dtype.type, np.unicode_))

547:         assert_array_equal(self.B.title(), tgt)

553:         assert_(issubclass(self.A.upper().dtype.type, np.string_))

554:         assert_array_equal(self.A.upper(), tgt)

559:         assert_(issubclass(self.B.upper().dtype.type, np.unicode_))

560:         assert_array_equal(self.B.upper(), tgt)

567:         assert_raises(TypeError, fail)

568:         assert_(issubclass(self.B.isnumeric().dtype.type, np.bool_))

569:         assert_array_equal(self.B.isnumeric(), [

577:         assert_raises(TypeError, fail)

578:         assert_(issubclass(self.B.isdecimal().dtype.type, np.bool_))

579:         assert_array_equal(self.B.isdecimal(), [

593:         assert_array_equal(AB, (self.A + self.B))

594:         assert_(len((self.A + self.B)[0][0]) == 6)

599:         assert_array_equal(QA, ('q' + self.A))

607:             assert_array_equal(Ar, (self.A * r))

610:             with assert_raises_regex(ValueError,

619:             assert_array_equal(Ar, (r * self.A))

622:             with assert_raises_regex(ValueError,

632:         assert_array_equal(FC, F % C)

636:         assert_array_equal(A1, (A % 1))

639:         assert_array_equal(A2, (A % [[1, 2], [3, 4]]))

642:         assert_(("%s" % self.A) == str(self.A))

643:         assert_(("%r" % self.A) == repr(self.A))

646:             with assert_raises_regex(

656:         assert_array_equal(sl1, arr)

657:         assert_(sl1.base is arr)

658:         assert_(sl1.base.base is arr.base)

661:         assert_array_equal(sl2, arr)

662:         assert_(sl2.base is arr)

663:         assert_(sl2.base.base is arr.base)

665:         assert_(arr[0, 0] == b'abc')

673:     assert_(s[[]].size == 0)

Total asserts: 202

Filename: numpy/core/tests/test_conversion_utils.py
10: from numpy.testing import assert_warns

24:     def _check_conv_assert_warn(self, val, expected)
26:             with assert_warns(DeprecationWarning) as exc
27:                 assert self.conv(val) == expected

29:             assert self.conv(val) == expected

35:         assert self.conv(val) == expected

38:             assert self.conv(val.encode('ascii')) == expected

48:                 self._check_conv_assert_warn(val[
52:                 self._check_conv_assert_warn(val.lower(), expected)

54:                 self._check_conv_assert_warn(val.upper(), expected)

158:         assert self.conv(np.CLIP) == 'NPY_CLIP'

159:         assert self.conv(np.WRAP) == 'NPY_WRAP'

160:         assert self.conv(np.RAISE) == 'NPY_RAISE'

182:         assert self.conv(1) == (1,)

183:         assert self.conv((1, 2)) == (1, 2)

184:         assert self.conv([1, 2]) == (1, 2)

185:         assert self.conv(()) == ()

190:             assert self.conv(None) == ()

203:         assert self.conv([1]*32) == (1,)*32

Total asserts: 19

Filename: numpy/core/tests/test_scalarprint.py
11: from numpy.testing import assert_, assert_equal, assert_raises

29:                 assert_equal(str(styp(val)), want, err_msg=msg)

35:             assert_equal(str(np.float64(v)), str(v))

36:             assert_equal(str(np.float64(v)), repr(v))

37:             assert_equal(repr(np.float64(v)), repr(v))

38:             assert_equal(repr(np.float64(v)), str(v))

61:         assert_equal(output, str(x) + '\n')

92:         assert_equal(capture, repr(np.sqrt(2)))

105:         assert_equal(fpos32('1.0'), "1.")

106:         assert_equal(fsci32('1.0'), "1.e+00")

107:         assert_equal(fpos32('10.234'), "10.234")

108:         assert_equal(fpos32('-10.234'), "-10.234")

109:         assert_equal(fsci32('10.234'), "1.0234e+01")

110:         assert_equal(fsci32('-10.234'), "-1.0234e+01")

111:         assert_equal(fpos32('1000.0'), "1000.")

112:         assert_equal(fpos32('1.0', precision=0), "1.")

113:         assert_equal(fsci32('1.0', precision=0), "1.e+00")

114:         assert_equal(fpos32('10.234', precision=0), "10.")

115:         assert_equal(fpos32('-10.234', precision=0), "-10.")

116:         assert_equal(fsci32('10.234', precision=0), "1.e+01")

117:         assert_equal(fsci32('-10.234', precision=0), "-1.e+01")

118:         assert_equal(fpos32('10.234', precision=2), "10.23")

119:         assert_equal(fsci32('-10.234', precision=2), "-1.02e+01")

120:         assert_equal(fsci64('9.9999999999999995e-08', **preckwd(16)),

122:         assert_equal(fsci64('9.8813129168249309e-324', **preckwd(16)),

124:         assert_equal(fsci64('9.9999999999999694e-311', **preckwd(16)),

130:         assert_equal(fpos32('3.14159265358979323846', **preckwd(10)),

132:         assert_equal(fsci32('3.14159265358979323846', **preckwd(10)),

134:         assert_equal(fpos64('3.14159265358979323846', **preckwd(10)),

136:         assert_equal(fsci64('3.14159265358979323846', **preckwd(10)),

139:         assert_equal(fpos32('299792458.0', **preckwd(5)), "299792448.00000")

140:         assert_equal(fsci32('299792458.0', **preckwd(5)), "2.99792e+08")

141:         assert_equal(fpos64('299792458.0', **preckwd(5)), "299792458.00000")

142:         assert_equal(fsci64('299792458.0', **preckwd(5)), "2.99792e+08")

144:         assert_equal(fpos32('3.14159265358979323846', **preckwd(25)),

146:         assert_equal(fpos64('3.14159265358979323846', **preckwd(50)),

148:         assert_equal(fpos64('3.14159265358979323846'), "3.141592653589793")

152:         assert_equal(fpos32(0.5**(126 + 23), unique=False, precision=149),

157:         assert_equal(fpos64(5e-324, unique=False, precision=1074),

180:         assert_equal(fpos32(f32x, **preckwd(0)),

182:         assert_equal(fpos64(np.finfo(np.float64).max, **preckwd(0)),

191:         assert_equal(fpos32(f32x),

198:         assert_equal(fpos32(f32x, unique=True, fractional=True, precision=0),

200:         assert_equal(fpos32(f32x, unique=True, fractional=True, precision=4),

202:         assert_equal(fpos32(f32x, unique=True, fractional=True, min_digits=0),

204:         assert_equal(fpos32(f32x, unique=True, fractional=True, min_digits=4),

206:         assert_equal(fpos32(f32x, unique=True, fractional=True,

209:         assert_raises(ValueError, fpos32, f32x, unique=True, fractional=False,

211:         assert_equal(fpos32(f32x, unique=True, fractional=False, precision=4),

213:         assert_equal(fpos32(f32x, unique=True, fractional=False, precision=20),

215:         assert_equal(fpos32(f32x, unique=True, fractional=False, min_digits=4),

217:         assert_equal(fpos32(f32x, unique=True, fractional=False,

220:         assert_equal(fpos32(f32x, unique=True, fractional=False,

223:         assert_equal(fpos32(f32x, unique=False, fractional=False, precision=4),

228:         assert_equal(fsci64(a, unique=True), '-6.310887241768095e-30')

229:         assert_equal(fsci64(a, unique=False, precision=15),

231:         assert_equal(fsci64(a, unique=True, precision=15),

233:         assert_equal(fsci64(a, unique=True, min_digits=15),

235:         assert_equal(fsci64(a, unique=True, precision=15, min_digits=15),

238:         assert_equal(fsci64(a, unique=True, precision=14),

240:         assert_equal(fsci64(a, unique=True, min_digits=16),

242:         assert_equal(fsci64(a, unique=True, precision=16),

244:         assert_equal(fsci64(a, unique=True, min_digits=14),

247:         assert_equal(fsci64('1e120', min_digits=3), '1.000e+120')

248:         assert_equal(fsci64('1e100', min_digits=3), '1.000e+100')

251:         assert_equal(fpos32('1.0', unique=False, precision=3), "1.000")

252:         assert_equal(fpos64('1.0', unique=False, precision=3), "1.000")

253:         assert_equal(fsci32('1.0', unique=False, precision=3), "1.000e+00")

254:         assert_equal(fsci64('1.0', unique=False, precision=3), "1.000e+00")

255:         assert_equal(fpos32('1.5', unique=False, precision=3), "1.500")

256:         assert_equal(fpos64('1.5', unique=False, precision=3), "1.500")

257:         assert_equal(fsci32('1.5', unique=False, precision=3), "1.500e+00")

258:         assert_equal(fsci64('1.5', unique=False, precision=3), "1.500e+00")

260:         assert_equal(fpos64('324', unique=False, precision=5,

274:             assert_equal(fpos(tp('1.0'), pad_left=4, pad_right=4), "   1.    ")

275:             assert_equal(fpos(tp('-1.0'), pad_left=4, pad_right=4), "  -1.    ")

276:             assert_equal(fpos(tp('-10.2'),

280:             assert_equal(fsci(tp('1.23e1'), exp_digits=5), "1.23e+00001")

283:             assert_equal(fpos(tp('1.0'), unique=False, precision=4), "1.0000")

284:             assert_equal(fsci(tp('1.0'), unique=False, precision=4),

290:             assert_equal(fpos(tp('1.'), unique=False, precision=4, trim='k'),

293:             assert_equal(fpos(tp('1.'), unique=False, precision=4, trim='.'),

295:             assert_equal(fpos(tp('1.2'), unique=False, precision=4, trim='.'),

298:             assert_equal(fpos(tp('1.'), unique=False, precision=4, trim='0'),

300:             assert_equal(fpos(tp('1.2'), unique=False, precision=4, trim='0'),

302:             assert_equal(fpos(tp('1.'), trim='0'), "1.0")

304:             assert_equal(fpos(tp('1.'), unique=False, precision=4, trim='-'),

306:             assert_equal(fpos(tp('1.2'), unique=False, precision=4, trim='-'),

308:             assert_equal(fpos(tp('1.'), trim='-'), "1")

309:             assert_equal(fpos(tp('1.001'), precision=1, trim='-'), "1")

361:         assert_equal(got, expected)

368:         assert_equal(str(a), str(b))

369:         assert_(a != b)

375:         assert_(repr(x) != repr(y))

376:         assert_equal(np.float32(repr(x)), x)

377:         assert_equal(np.float32(repr(y)), y)

381:         assert_equal(repr(np.float64(0.1)), repr(0.1))

382:         assert_(repr(np.float64(0.20000000000000004)) != repr(0.2))

Total asserts: 98

Filename: numpy/core/tests/test_casting_unittests.py
17: from numpy.testing import assert_array_equal

133:         assert np.can_cast(floating, string)

135:         assert np.can_cast(floating, f"{string}100")

139:         assert np.can_cast("d", "V")

140:         assert np.can_cast("S20", "V")

143:         assert not np.can_cast("d", "V1")

144:         assert not np.can_cast("S20", "V1")

145:         assert not np.can_cast("U1", "V1")

147:         assert np.can_cast("d,i", "V", casting="same_kind")

149:         assert np.can_cast("V3", "V", casting="no")

150:         assert np.can_cast("V0", "V", casting="no")

164:         assert arr1.flags.c_contiguous

165:         assert arr1.flags.aligned

182:         assert arr2.flags.c_contiguous

183:         assert arr2.flags.aligned

212:         assert stride1 * len(arr1) <= from_bytes.nbytes

213:         assert stride2 * len(arr2) <= to_bytes.nbytes

232:             assert buf.count(b"\0") == len(buf)

235:             assert new1.flags.c_contiguous

236:             assert new2.flags.c_contiguous

238:             assert not new1.flags.c_contiguous

239:             assert not new2.flags.c_contiguous

242:             assert new1.flags.aligned

243:             assert new2.flags.aligned

245:             assert not new1.flags.aligned or new1.dtype.alignment == 1

246:             assert not new2.flags.aligned or new2.dtype.alignment == 1

257:                 assert default == to_Dt()

263:                     assert(type(from_res) == from_Dt)

264:                     assert(type(to_res) == to_Dt)

268:                         assert casting == Casting.no

270:                         assert Casting.equiv == CAST_TABLE[from_Dt][to_Dt]

272:                         assert from_res.isnative == to_res.isnative

276:                             assert from_res.isnative != to_res.isnative

277:                         assert casting == CAST_TABLE[from_Dt][to_Dt]

280:                         assert(from_dt is from_res)

281:                         assert(to_dt is to_res)

317:             assert arr2.tolist() == values

323:             assert_array_equal(arr2_o, arr2)

324:             assert arr2_o.tobytes() == arr2.tobytes()

335:             assert_array_equal(arr2_o, arr2)

336:             assert arr2_o.tobytes() == arr2.tobytes()

341:             assert_array_equal(arr2_o, arr2)

342:             assert arr2_o.tobytes() == arr2.tobytes()

360:             assert from_res is from_dt

361:             assert to_res is time_dt

364:             assert casting & CAST_TABLE[from_Dt][type(time_dt)]

365:             assert view_off is None

384:             assert [int(v) for v in arr2.tolist()] == values

390:             assert_array_equal(arr2_o, arr2)

391:             assert arr2_o.tobytes() == arr2.tobytes()

432:         assert values.dtype.byteorder == from_dt.byteorder

433:         assert np.isnat(values.view(from_dt)[0])

439:         assert from_res is from_dt

440:         assert to_res is to_dt or to_dt is None

441:         assert casting == expected_casting

442:         assert view_off == expected_view_off

468:                 assert_array_equal(out.view("int64"), expected_out.view("int64"))

489:         assert res_dt.itemsize == expected_length * fact

490:         assert safety == Casting.safe  # we consider to string casts "safe"

491:         assert view_off is None

492:         assert isinstance(res_dt, string_DT)

505:             assert res_dt is to_dt

506:             assert safety == expected_safety

507:             assert view_off is None

513:         assert safety == Casting.unsafe

514:         assert view_off is None

519:         assert safety == Casting.unsafe

520:         assert view_off is None

521:         assert other_dt is res_dt  # returns the singleton for simple dtypes

544:             assert other_dt.byteorder != res_other_dt.byteorder

554:         assert not cast._supports_unaligned  # if support is added, should test

555:         assert not cast_back._supports_unaligned

568:             assert_array_equal(str_arr.astype(string_dt_short), str_arr_short)

571:             assert_array_equal(str_arr, str_arr_long)

579:             assert_array_equal(orig_arr, other_arr)

583:             assert_array_equal(orig_arr, other_arr)

601:         assert res_dt.itemsize == expected_length * fact

602:         assert isinstance(res_dt, string_DT)

616:         assert view_off == expected_view_off

617:         assert expected_safety == safety

624:             assert res_dt is to_dt

626:                 assert view_off == expected_view_off

628:                 assert view_off is None

630:                 assert safety == expected_safety

632:                 assert safety == Casting.same_kind

634:                 assert safety == expected_safety

636:                 assert safety == Casting.safe

649:             assert not data1.flags.aligned

650:             assert not data2.flags.aligned

657:             assert data2[()] == element

658:             assert data2.copy()[()] == element

664:         assert np.array([], dtype="V5").astype("S").dtype.itemsize == 5

665:         assert np.array([], dtype="V5").astype("U").dtype.itemsize == 4 * 5

685:         assert safety == Casting.unsafe

686:         assert view_off is None

687:         assert res_dt is dtype

691:         assert safety == Casting.unsafe

692:         assert view_off is None

693:         assert res_dt == dtype.newbyteorder("=")

703:         assert safety == Casting.safe

704:         assert view_off is None

705:         assert res_dt is np.dtype("O")

712:         assert np.can_cast("V4", dtype, casting=casting) == expected

713:         assert np.can_cast(dtype, "V4", casting=casting) == expected

734:         assert safety == Casting.equiv

737:         assert view_off == expected_off

778:         assert view_off == expected_off

787:         assert arr_NULLs.tobytes() == b"\x00" * arr_NULLs.nbytes

795:             assert_array_equal(expected, arr_NULLs.astype(dtype))

806:         assert_array_equal(res, expected)

Total asserts: 110

Filename: numpy/core/tests/test_abc.py
1: from numpy.testing import assert_

10:         assert_(issubclass(np.number, numbers.Number))

12:         assert_(issubclass(np.inexact, numbers.Complex))

13:         assert_(issubclass(np.complexfloating, numbers.Complex))

14:         assert_(issubclass(np.floating, numbers.Real))

16:         assert_(issubclass(np.integer, numbers.Integral))

17:         assert_(issubclass(np.signedinteger, numbers.Integral))

18:         assert_(issubclass(np.unsignedinteger, numbers.Integral))

22:             assert_(isinstance(t(), numbers.Real),

24:             assert_(issubclass(t, numbers.Real),

26:             assert_(not isinstance(t(), numbers.Rational),

28:             assert_(not issubclass(t, numbers.Rational),

33:             assert_(isinstance(t(), numbers.Complex),

35:             assert_(issubclass(t, numbers.Complex),

37:             assert_(not isinstance(t(), numbers.Real),

39:             assert_(not issubclass(t, numbers.Real),

44:             assert_(isinstance(t(), numbers.Integral),

46:             assert_(issubclass(t, numbers.Integral),

51:             assert_(isinstance(t(), numbers.Integral),

53:             assert_(issubclass(t, numbers.Integral),

Total asserts: 20

Filename: numpy/core/tests/test_ufunc.py
13:     assert_, assert_equal, assert_raises, assert_array_equal,

14:     assert_almost_equal, assert_array_almost_equal, assert_no_warnings,

15:     assert_allclose, HAS_REFCOUNT, suppress_warnings

28:         assert_raises(TypeError, np.add, 1, 2, castingx='safe')

29:         assert_raises(TypeError, np.add, 1, 2, dtypex=int)

30:         assert_raises(TypeError, np.add, 1, 2, extobjx=[4096])

31:         assert_raises(TypeError, np.add, 1, 2, outx=None)

32:         assert_raises(TypeError, np.add, 1, 2, sigx='ii->i')

33:         assert_raises(TypeError, np.add, 1, 2, signaturex='ii->i')

34:         assert_raises(TypeError, np.add, 1, 2, subokx=False)

35:         assert_raises(TypeError, np.add, 1, 2, wherex=[True])

38:         assert_raises(TypeError, np.add, 1, 2, sig='ii->i',

42:         assert_raises(TypeError, np.add, 1, 2, sig='ii->i',

44:         assert_raises(TypeError, np.add, 1, 2, signature='ii->i',

49:         assert_raises(TypeError, np.add, 1, 2, extobj=[4096], parrot=True)

107:         assert_allclose(ys, y)

108:         assert_equal(ys.dtype, output_dtype)

117:         assert_allclose(ys, y)

118:         assert_equal(ys.dtype, output_dtype)

130:         assert_(np.all(np.abs(x) == 1))

134:         assert_(np.all(np.conjugate(x) == True))

138:         assert_(np.all(np.add(x, x) == 2))

142:         assert_(np.all(np.logical_xor(x, x)))

146:         assert_(np.all(np.logical_xor(x, x)))

151:         assert isinstance(arr[0], complex)

153:         assert res.dtype == np.dtype("O")

154:         assert_array_equal(res, np.array([1-2j, 3+4j], dtype="O"))

176:                 with assert_raises(type(exc))
180:                 assert_array_almost_equal(res_num.astype("O"), res_obj)

190:             assert_(pickle.loads(pickle.dumps(np.sin,

197:             assert_(res is _rational_tests.test_add)

202:         assert_(pickle.loads(astring) is np.cos)

211:         assert obj is umt._pickleable_module_global_ufunc

217:         assert_array_equal(np.add.reduceat(x, idx)[
309:         assert_equal(enabled, 1)

310:         assert_equal(num_dims, (1,  1,  0))

311:         assert_equal(ixs, (0, 0))

312:         assert_equal(flags, (self.size_inferred,))

313:         assert_equal(sizes, (-1,))

319:         assert_equal(enabled, 0)

320:         assert_equal(num_dims, (0,  0,  0))

321:         assert_equal(ixs, ())

322:         assert_equal(flags, ())

323:         assert_equal(sizes, ())

329:         assert_equal(enabled, 1)

330:         assert_equal(num_dims, (2, 1, 1))

331:         assert_equal(ixs, (0, 1, 2, 3))

332:         assert_equal(flags, (self.size_inferred,)*4)

333:         assert_equal(sizes, (-1, -1, -1, -1))

338:         assert_equal(enabled, 1)

339:         assert_equal(num_dims, (2, 1, 2))

340:         assert_equal(ixs, (0, 1, 2, 1, 3))

341:         assert_equal(flags, (self.size_inferred,)*4)

342:         assert_equal(sizes, (-1, -1, -1, -1))

348:         assert_equal(enabled, 1)

349:         assert_equal(num_dims, (2, 2, 2))

350:         assert_equal(ixs, (0, 1, 1, 2, 0, 2))

351:         assert_equal(flags, (self.size_inferred,)*3)

352:         assert_equal(sizes, (-1, -1, -1))

358:         assert_equal(enabled, 1)

359:         assert_equal(num_dims, (2, 2, 2))

360:         assert_equal(ixs, (0, 1, 1, 2, 0, 2))

361:         assert_equal(flags, (self.size_inferred | self.can_ignore,

364:         assert_equal(sizes, (-1, -1, -1))

369:         assert_equal(enabled, 1)

370:         assert_equal(num_dims, (1, 0))

371:         assert_equal(ixs, (0,))

372:         assert_equal(flags, (0,))

373:         assert_equal(sizes, (3,))

378:         assert_equal(enabled, 1)

379:         assert_equal(num_dims, (1, 2, 1, 1))

380:         assert_equal(ixs, (0, 0, 0, 1, 2))

381:         assert_equal(flags, (0, self.size_inferred, 0))

382:         assert_equal(sizes, (3, -1, 9))

387:         assert_equal(enabled, 1)

388:         assert_equal(num_dims, (1, 2, 1, 1))

389:         assert_equal(ixs, (0, 0, 0, 1, 2))

390:         assert_equal(flags, (self.can_ignore, self.size_inferred, 0))

391:         assert_equal(sizes, (3, -1, 9))

396:         assert_equal(enabled, 1)

397:         assert_equal(num_dims, (1, 0))

398:         assert_equal(ixs, (0,))

399:         assert_equal(flags, (0,))

400:         assert_equal(sizes, (3,))

405:         assert_equal(enabled, 1)

406:         assert_equal(num_dims, (1, 2, 1, 1))

407:         assert_equal(ixs, (0, 0, 0, 1, 2))

408:         assert_equal(flags, (self.can_ignore, self.size_inferred, 0))

409:         assert_equal(sizes, (3, -1, 9))

412:         with assert_raises(ValueError)
416:         with assert_raises(ValueError)
420:         with assert_raises(ValueError)
424:         with assert_raises(ValueError)
428:         assert_equal(umt.inner1d.signature, "(i),(i)->()")

432:         assert_equal(np.add(a, 0.5), [0.5, 1, 1.5])

434:             assert_equal(np.add(a, 0.5, sig='i', casting='unsafe'), [0, 0, 1])

435:         assert_equal(np.add(a, 0.5, sig='ii->i', casting='unsafe'), [0, 0, 1])

437:             assert_equal(np.add(a, 0.5, sig=('i4',), casting='unsafe'),

439:         assert_equal(np.add(a, 0.5, sig=('i4', 'i4', 'i4'),

444:         assert_equal(b, [0.5, 1, 1.5])

448:         assert_equal(b, [0, 0, 1])

451:         assert_equal(b, [0, 0, 1])

455:         assert_equal(b, [0, 0, 1])

458:         assert_equal(b, [0, 0, 1])

465:         assert_array_equal(res1, res2)

468:         assert_array_equal(res1, res2)

484:         assert res.dtype == "d"

486:         assert res.dtype == "d"

500:         assert res == 1  # the cast happens first.

503:         assert res == 1

553:         assert_array_equal(expected, res)

560:         assert_array_equal(expected, res)

569:         assert_array_equal(expected, res)

592:                 assert_allclose(res, tgt, rtol=rtol)

595:                     assert_(res.dtype.name == 'float64')

597:                     assert_(res.dtype.name == dt.name )

606:                     assert_raises(TypeError, np.true_divide, x, y, dtype=dtout)

612:                         assert_raises(TypeError, np.true_divide, x, y, dtype=dtout)

628:                         assert_allclose(res, tgt, rtol=rtol, atol=atol)

629:                         assert_(res.dtype.name == dtout.name)

645:                     assert_allclose(res, tgt, rtol=rtol, atol=atol)

646:                     assert_(res.dtype.name == dtout.name)

651:         assert_(res == 1.0)

652:         assert_(res.dtype.name == 'float64')

654:         assert_(res == 0.0)

655:         assert_(res.dtype.name == 'float64')

659:         assert_almost_equal((a / 10.).sum() - a.size / 10., 0, 4)

662:         assert_almost_equal((a / 10.).sum() - a.size / 10., 0, 13)

676:                     assert_almost_equal(np.sum(d), tgt)

677:                     assert_equal(len(w), 1 * overflow)

679:                     assert_almost_equal(np.sum(d[
680:                     assert_equal(len(w), 2 * overflow)

683:             assert_almost_equal(np.sum(d[
684:             assert_almost_equal(np.sum(d[1
685:             assert_almost_equal(np.sum(d[
686:             assert_almost_equal(np.sum(d[1
687:             assert_almost_equal(np.sum(d[
688:             assert_almost_equal(np.sum(d[-1
689:             assert_almost_equal(np.sum(d[
690:             assert_almost_equal(np.sum(d[-1
694:             assert_almost_equal(d, 2.)

704:                 assert_almost_equal(np.sum(d), tgt)

705:                 assert_almost_equal(np.sum(d[
708:             assert_almost_equal(np.sum(d[
709:             assert_almost_equal(np.sum(d[1
710:             assert_almost_equal(np.sum(d[
711:             assert_almost_equal(np.sum(d[1
712:             assert_almost_equal(np.sum(d[
713:             assert_almost_equal(np.sum(d[-1
714:             assert_almost_equal(np.sum(d[
715:             assert_almost_equal(np.sum(d[-1
719:             assert_almost_equal(d, 2. + 2j)

723:         assert_equal(np.sum([3], initial=2), 5)

726:         assert_almost_equal(np.sum([0.2], initial=0.1), 0.3)

729:         assert_equal(np.sum(np.ones((2, 3, 5), dtype=np.int64), axis=(0, 2), initial=2),

734:         assert_equal(np.sum([[1., 2.], [3., 4.]], where=[True, False]), 4.)

735:         assert_equal(np.sum([[1., 2.], [3., 4.]], axis=0, initial=5.,

740:         assert_array_equal(umt.inner1d(a, a), np.sum(a*a, axis=-1))

742:         assert_array_equal(umt.inner1d(a, a), np.sum(a*a))

748:         assert_array_equal(umt.inner1d(a, b), np.sum(a*b, axis=-1), err_msg=msg)

751:         assert_array_equal(umt.inner1d(a, b), np.sum(a*b, axis=-1), err_msg=msg)

755:         assert_raises(ValueError, umt.inner1d, a, b)

759:         assert_raises(ValueError, umt.inner1d, a, b)

763:         assert_raises(ValueError, umt.inner1d, a, b)

769:         assert_equal(u.strides[0], 0)

774:             assert_equal(len(w), 1)

775:             assert_(x[0, 0] != u[0, 0])

782:         assert_raises(ValueError, umt.inner1d, a, b, out)

785:         assert_(c is out2)

795:         assert (out == np.arange(3) * 2).all()

800:         assert (out == 5).all()

805:         assert_array_equal(umt.inner1d(a, a), np.sum(a*a, axis=-1),

810:         assert_array_almost_equal(umt.inner1d(a, b), np.sum(a*b, axis=-1),

816:         assert_array_equal(umt.inner1d(a, a), np.sum(a*a, axis=-1),

820:         assert_array_equal(umt.inner1d(a, a), np.sum(a*a, axis=-1),

826:         assert_equal((Ba+Ba).dtype, np.dtype('f8'))

827:         assert_equal((Ba+La).dtype, np.dtype('f8'))

828:         assert_equal((La+Ba).dtype, np.dtype('f8'))

829:         assert_equal((La+La).dtype, np.dtype('f8'))

831:         assert_equal(np.absolute(La).dtype, np.dtype('f8'))

832:         assert_equal(np.absolute(Ba).dtype, np.dtype('f8'))

833:         assert_equal(np.negative(La).dtype, np.dtype('f8'))

834:         assert_equal(np.negative(Ba).dtype, np.dtype('f8'))

843:         assert_equal(x[0, 0, 0, 0, 0, 0], -1, err_msg=msg2)

844:         assert_array_equal(umt.inner1d(a, b), np.sum(a*b, axis=-1), err_msg=msg)

849:         assert_equal(x[0, 0, 0], -1, err_msg=msg2)

850:         assert_array_equal(umt.inner1d(a, b), np.sum(a*b, axis=-1), err_msg=msg)

858:         assert_array_equal(c, np.sum(a*b, axis=-1), err_msg=msg)

861:         assert_array_equal(c, np.sum(a*b, axis=-1), err_msg=msg)

866:         assert_array_equal(c, np.sum(a*b, axis=-1), err_msg=msg)

869:         assert_array_equal(c, np.sum(a*b, axis=-1), err_msg=msg)

874:         assert_array_equal(c[..., 0], np.sum(a*b, axis=-1), err_msg=msg)

877:         assert_array_equal(c[..., 0], np.sum(a*b, axis=-1), err_msg=msg)

886:         assert_array_equal(c, (a * b).sum(-1))

889:         assert_array_equal(c, (a * b).sum(-1))

892:         assert_array_equal(c, (a * b).sum(-1))

895:         assert_array_equal(c, (a * b).sum(-1))

898:         assert_array_equal(c, (a * b).sum(-1))

901:         assert_array_equal(c, (a * b).sum(-1))

904:         assert_array_equal(c, (a * b).sum(0))

906:         assert_array_equal(c, (a.transpose(1, 2, 0) * b).sum(-1))

909:         assert_raises(TypeError, inner1d, a, b, axes=-1)

911:         assert_raises(ValueError, inner1d, a, b, axes=[-1])

913:         assert_raises(TypeError, inner1d, a, b, axes=[-1.0, -1.0])

914:         assert_raises(TypeError, inner1d, a, b, axes=[(-1.0,), -1])

915:         assert_raises(TypeError, inner1d, a, b, axes=[None, 1])

918:         assert_raises(TypeError, inner1d, a, b, axes=[-1, -1, -1])

920:         assert_raises(ValueError, inner1d, a, b, axes=[-1, -1, (-1,)])

921:         assert_raises(ValueError, inner1d, a, b, axes=[-1, (-2, -1), ()])

923:         assert_raises(ValueError, inner1d, a, b, axes=[0, 1])

931:         assert_array_equal(c, np.matmul(a, b))

934:         assert_array_equal(c, np.matmul(a, b))

937:         assert_array_equal(c, np.matmul(a, b))

940:         assert_array_equal(c, np.matmul(a.transpose(1, 0, 2),

945:         assert_(c is d)

946:         assert_array_equal(c, np.matmul(a, b))

950:         assert_(c is d)

951:         assert_array_equal(c, np.matmul(a, b).transpose(3, 0, 1, 2))

954:         assert_raises(TypeError, mm, a, b, axis=1)

956:         assert_raises(TypeError, mm, a, b, axes=1)

957:         assert_raises(TypeError, mm, a, b, axes=((-2, -1), (-2, -1), (-2, -1)))

959:         assert_raises(ValueError, mm, a, b, axes=[])

960:         assert_raises(ValueError, mm, a, b, axes=[(-2, -1)])

962:         assert_raises(TypeError, mm, a, b, axes=[-1, -1, -1])

963:         assert_raises(TypeError, mm, a, b, axes=[(-2, -1), (-2, -1), -1])

964:         assert_raises(TypeError,

966:         assert_raises(TypeError,

968:         assert_raises(TypeError, mm, a, b, axes=[(-2, -1), (-2, -1), None])

970:         assert_raises(ValueError, mm, a, b, axes=[(-2, -1), (-2, -1), (-2, -2)])

973:         assert_raises(ValueError, mm, z, z[0])

974:         assert_raises(ValueError, mm, z, z, out=z[
975:         assert_raises(ValueError, mm, z[1], z, axes=[0, 1])

976:         assert_raises(ValueError, mm, z, z, out=z[0], axes=[0, 1])

978:         assert_raises(TypeError, np.add, 1., 1., axes=[0])

980:         assert_raises(TypeError, mm, z, z, axes=[0, 1], parrot=True)

988:         assert_array_equal(c, (a * b).sum(-1))

990:         assert_array_equal(c, (a * b).sum(-1))

993:         assert_(d is out)

994:         assert_array_equal(d, c)

996:         assert_array_equal(c, (a * b).sum(0))

1001:         assert_array_equal(umt.innerwt(a, b, w, axis=0),

1003:         assert_array_equal(umt.cumsum(a, axis=0), np.cumsum(a, axis=0))

1004:         assert_array_equal(umt.cumsum(a, axis=-1), np.cumsum(a, axis=-1))

1007:         assert_(out is b)

1008:         assert_array_equal(b, np.cumsum(a, axis=0))

1010:         assert_(out is b)

1011:         assert_array_equal(b, np.cumsum(a, axis=-1))

1014:         assert_raises(TypeError, inner1d, a, b, axis=0, axes=[0, 0])

1016:         assert_raises(TypeError, inner1d, a, b, axis=[0])

1019:         assert_raises(TypeError, mm, a, b, axis=1)

1022:         assert_raises(ValueError, umt.cumsum, a, out=out, axis=0)

1024:         assert_raises(TypeError, np.add, 1., 1., axis=0)

1032:         assert_array_equal(c, (a * b).sum(-1))

1034:         assert_array_equal(c, (a * b).sum(-1))

1036:         assert_array_equal(c, (a * b).sum(-1, keepdims=True))

1039:         assert_(d is out)

1040:         assert_array_equal(d, c)

1043:         assert_array_equal(c, (a * b).sum(-1, keepdims=False))

1045:         assert_array_equal(c, (a * b).sum(-1, keepdims=True))

1047:         assert_array_equal(c, (a * b).sum(0, keepdims=False))

1049:         assert_array_equal(c, (a * b).sum(0, keepdims=True))

1051:         assert_array_equal(c, (a * b).sum(-1))

1053:         assert_array_equal(c, (a * b).sum(-1, keepdims=True))

1055:         assert_array_equal(c, (a * b).sum(0))

1057:         assert_array_equal(c, (a * b).sum(0, keepdims=True))

1059:         assert_array_equal(c, (a.transpose(1, 2, 0) * b).sum(-1))

1061:         assert_array_equal(c, (a.transpose(1, 2, 0) * b).sum(-1,

1064:         assert_array_equal(c, (a.transpose(1, 2, 0) * b).sum(-1,

1067:         assert_array_equal(c, (a * b.transpose(2, 0, 1)).sum(0, keepdims=True))

1070:         assert_array_equal(c, (a.transpose(1, 0, 2) * b.transpose(0, 2, 1))

1076:         assert_array_equal(c, expected)

1078:         assert_array_equal(c, expected[
1082:         assert_array_equal(cs, expected_s)

1083:         assert_array_equal(cl, expected_l)

1085:         assert_array_equal(cs, expected_s[
1086:         assert_array_equal(cl, expected_l[
1091:         assert_array_equal(umt.innerwt(a, b, w, keepdims=True),

1093:         assert_array_equal(umt.innerwt(a, b, w, axis=0, keepdims=True),

1097:         assert_raises(TypeError, inner1d, a, b, keepdims='true')

1100:         assert_raises(TypeError, mm, a, b, keepdims=True)

1101:         assert_raises(TypeError, mm, a, b, keepdims=False)

1103:         assert_raises(TypeError, np.add, 1., 1., keepdims=False)

1109:         assert_array_equal(umt.innerwt(a, b, w), np.sum(a*b*w, axis=-1))

1113:         assert_array_equal(umt.innerwt(a, b, w), np.sum(a*b*w, axis=-1))

1120:         assert_array_equal(umt.innerwt(a, b, w), np.sum(a*b*w, axis=-1))

1125:         assert_array_equal(umt.cross1d(a, a), np.zeros((3, 3)))

1128:         assert_(result is out)

1129:         assert_array_equal(result, np.vstack((np.zeros(3), a[2], -a[1])))

1130:         assert_raises(ValueError, umt.cross1d, np.eye(4), np.eye(4))

1131:         assert_raises(ValueError, umt.cross1d, a, np.arange(4.))

1133:         assert_raises(ValueError, umt.cross1d, a, np.arange(3.), np.zeros((3, 4)))

1135:         assert_raises(ValueError, umt.cross1d, a, np.arange(3.), np.zeros(3))

1149:         assert_array_equal(matmul_col_vec, mm_col_vec)

1152:         assert_raises(ValueError, umt.matrix_multiply, mat, single_vec)

1155:         assert_array_equal(matmul_col, mm_col_vec.squeeze())

1160:         assert_array_equal(matmul_col_vec, mm_col_vec)

1168:         assert_array_equal(matmul_row_vec, mm_row_vec)

1170:         assert_raises(ValueError, umt.matrix_multiply, single_vec, mat)

1172:         assert_array_equal(matmul_row, mm_row_vec.squeeze())

1176:         assert_array_equal(matmul_row_vec, mm_row_vec)

1183:         assert_array_equal(matmul_row_col_vec, mm_row_col_vec)

1185:         assert_raises(ValueError, umt.matrix_multiply, single_vec, single_vec)

1187:         assert_array_equal(matmul_row_col, mm_row_col_vec.squeeze())

1191:         assert_array_equal(matmul_row_col_array, mm_row_col_array)

1196:         assert_array_equal(out, mm_row_col_array)

1199:         assert_array_equal(out, mm_row_col_array)

1202:         assert_raises(ValueError, umt.matrix_multiply, single_vec, single_vec,

1206:         assert_array_equal(out, mm_row_col_vec.squeeze())

1214:         assert_array_equal(res, np.zeros((0, 0)))

1216:         assert_array_equal(res, np.zeros((10, 10)))

1263:                             assert_array_almost_equal(

1270:         assert_equal(ref, True, err_msg="reference check")

1278:         assert_almost_equal(out, b)

1280:         assert_raises(ValueError, umt.euclidean_pdist, a)

1285:         assert_array_equal(result, a.cumsum())

1289:         assert_equal(np.logical_or(a, None),

1291:         assert_equal(np.logical_or(a, True),

1293:         assert_equal(np.logical_or(a, 12),

1295:         assert_equal(np.logical_or(a, "blah"),

1298:         assert_equal(np.logical_and(a, None),

1300:         assert_equal(np.logical_and(a, True),

1302:         assert_equal(np.logical_and(a, 12),

1304:         assert_equal(np.logical_and(a, "blah"),

1307:         assert_equal(np.logical_not(a),

1310:         assert_equal(np.logical_or.reduce(a), 3)

1311:         assert_equal(np.logical_and.reduce(a), None)

1319:         assert_equal(arr0d == arr0d, True)

1320:         assert_equal(np.equal(arr0d, arr0d), True)  # normal behavior is a cast

1323:         assert_equal(arr1d == arr1d, np.array([True]))

1324:         assert_equal(np.equal(arr1d, arr1d), np.array([True]))  # normal behavior is a cast

1325:         assert_equal(np.equal(arr1d, arr1d, dtype=object), np.array(['==']))

1330:         assert_equal(np.sum(a), 'abc')

1331:         assert_equal(np.max(a), 'c')

1332:         assert_equal(np.min(a), 'a')

1334:         assert_equal(np.sum(a), 2)

1335:         assert_equal(np.prod(a), 0)

1336:         assert_equal(np.any(a), True)

1337:         assert_equal(np.all(a), False)

1338:         assert_equal(np.max(a), True)

1339:         assert_equal(np.min(a), False)

1340:         assert_equal(np.array([[1]], dtype=object).sum(), 1)

1341:         assert_equal(np.array([[[1, 2]]], dtype=object).sum((0, 1)), [1, 2])

1342:         assert_equal(np.array([1], dtype=object).sum(initial=1), 2)

1343:         assert_equal(np.array([[1], [2, 3]], dtype=object)

1353:         assert_array_equal(arr,

1362:         assert_array_equal(arr[0, 
1369:         assert_array_equal(res, np.array([1, 1, 3], dtype=object))

1382:         assert_array_equal(arr, out)

1391:         assert_array_equal(arr, out)

1397:         assert_array_equal(res, np.array([None, 2], dtype=object))

1405:             assert_equal(np.sum(a), 0)

1406:             assert_equal(np.prod(a), 1)

1407:             assert_equal(np.any(a), False)

1408:             assert_equal(np.all(a), True)

1409:             assert_raises(ValueError, np.max, a)

1410:             assert_raises(ValueError, np.min, a)

1414:         assert_raises(np.AxisError, a.all, axis=1)

1416:         assert_raises(np.AxisError, a.all, axis=-2)

1419:         assert_raises(np.AxisError, a.any, axis=1)

1421:         assert_raises(np.AxisError, a.any, axis=-2)

1426:         assert_equal(np.sum(3, axis=0), 3)

1427:         assert_equal(np.prod(3.5, axis=0), 3.5)

1428:         assert_equal(np.any(True, axis=0), True)

1429:         assert_equal(np.all(False, axis=0), False)

1430:         assert_equal(np.max(3, axis=0), 3)

1431:         assert_equal(np.min(2.5, axis=0), 2.5)

1434:         assert_equal(np.power.reduce(3), 3)

1437:         assert_(type(np.prod(np.float32(2.5), axis=0)) is np.float32)

1438:         assert_(type(np.sum(np.float32(2.5), axis=0)) is np.float32)

1439:         assert_(type(np.max(np.float32(2.5), axis=0)) is np.float32)

1440:         assert_(type(np.min(np.float32(2.5), axis=0)) is np.float32)

1443:         assert_(type(np.any(0, axis=0)) is np.bool_)

1445:         # assert that 0-d arrays get wrapped

1449:         assert_(type(np.any(a)) is MyArray)

1457:         assert_equal(c, 2)

1462:         assert_equal(b, 0)

1470:         assert_equal(c, [0, 2, 0, 4, 0, 6, 0])

1474:         assert_equal(a, [[2, 27], [16, 5]])

1477:         assert_equal(a, [[0, 27], [14, 5]])

1488:         assert_equal(c, [2, 1.5, 1.5, 2, 1.5, 1.5, 2, 2, 2, 1.5])

1494:         assert_equal(np.sqrt(a, where=m), [1])

1499:         assert_equal(np.sqrt(a, where=m), [1])

1510:         assert_array_equal((a[where] < b_where), out[where].astype(bool))

1511:         assert not out[~where].any()  # outside mask, out remains all 0

1519:         assert_equal(np.minimum.reduce(a, axis=None), 0)

1520:         assert_equal(np.minimum.reduce(a, axis=(0, 1)), [0, 1, 1, 1])

1521:         assert_equal(np.minimum.reduce(a, axis=(0, 2)), [0, 1, 1])

1522:         assert_equal(np.minimum.reduce(a, axis=(1, 2)), [1, 0])

1523:         assert_equal(np.minimum.reduce(a, axis=0),

1525:         assert_equal(np.minimum.reduce(a, axis=1),

1527:         assert_equal(np.minimum.reduce(a, axis=2),

1529:         assert_equal(np.minimum.reduce(a, axis=()), a)

1533:         assert_equal(np.minimum.reduce(a, axis=None), 0)

1534:         assert_equal(np.minimum.reduce(a, axis=(0, 1)), [0, 1, 1, 1])

1535:         assert_equal(np.minimum.reduce(a, axis=(0, 2)), [1, 0, 1])

1536:         assert_equal(np.minimum.reduce(a, axis=(1, 2)), [0, 1])

1537:         assert_equal(np.minimum.reduce(a, axis=0),

1539:         assert_equal(np.minimum.reduce(a, axis=1),

1541:         assert_equal(np.minimum.reduce(a, axis=2),

1543:         assert_equal(np.minimum.reduce(a, axis=()), a)

1547:         assert_equal(np.minimum.reduce(a, axis=None), 0)

1548:         assert_equal(np.minimum.reduce(a, axis=(0, 1)), [1, 0, 1, 1])

1549:         assert_equal(np.minimum.reduce(a, axis=(0, 2)), [0, 1, 1])

1550:         assert_equal(np.minimum.reduce(a, axis=(1, 2)), [0, 1])

1551:         assert_equal(np.minimum.reduce(a, axis=0),

1553:         assert_equal(np.minimum.reduce(a, axis=1),

1555:         assert_equal(np.minimum.reduce(a, axis=2),

1557:         assert_equal(np.minimum.reduce(a, axis=()), a)

1567:         assert res[0] == 3

1568:         assert res[-1] == 4

1599:         assert_equal(np.maximum.reduce([], initial=0), 0)

1602:         assert_equal(np.minimum.reduce([], initial=np.inf), np.inf)

1603:         assert_equal(np.maximum.reduce([], initial=-np.inf), -np.inf)

1606:         assert_equal(np.minimum.reduce([5], initial=4), 4)

1607:         assert_equal(np.maximum.reduce([4], initial=5), 5)

1608:         assert_equal(np.maximum.reduce([5], initial=4), 5)

1609:         assert_equal(np.minimum.reduce([4], initial=5), 4)

1612:         assert_raises(ValueError, np.minimum.reduce, [], initial=None)

1613:         assert_raises(ValueError, np.add.reduce, [], initial=None)

1616:         assert_equal(np.add.reduce([], initial=np._NoValue), 0)

1621:         assert_equal(res, 15)

1637:         assert_equal(res, check)

1639:         assert_array_equal(a, a_copy)

1654:         assert_equal(res, check)

1659:         assert_raises(ValueError, np.maximum.reduce, a, where=m)

1665:         assert_equal(res, [8.0, 4.0, 8.0])

1668:         assert_equal(res, [2.0, 8.0])

1671:         assert_equal(res, a)

1673:         assert_raises(ValueError, np.divide.reduce, a, axis=(0, 1))

1693:             assert_raises(ValueError, f, *args, **kwargs)

1714:         assert_equal(np.maximum.identity, None)

1747:         assert_array_equal(assert_no_warnings(np.add, a, 1.1),

1749:         assert_raises(TypeError, np.add, a, 1.1, out=a)

1754:         assert_raises(TypeError, add_inplace, a, 1.1)

1756:         assert_no_warnings(np.add, a, 1.1, out=a, casting="unsafe")

1757:         assert_array_equal(a, [2, 3, 4])

1770:         assert_equal(result, target)

1775:         assert_equal(result, target)

1780:         assert_equal(result, target)

1784:         with assert_raises(TypeError)
1791:         assert_equal(a, np.array([[0, 2, 4, 3], [7, 9, 11, 7],

1796:         assert_equal(a, 3)

1798:         assert_equal(a, 10)

1807:         assert_equal(result, np.array([(2, 4, 6)], dtype='u8,u8,u8'))

1808:         assert_raises(RuntimeError, struct_ufunc.register_fail)

1828:         assert_equal(result, expected)

1832:         with assert_raises(TypeError)
1864:         assert_(MyThing.rmul_count == 1, MyThing.rmul_count)

1865:         assert_(MyThing.getitem_count <= 2, MyThing.getitem_count)

1871:         assert_equal(a, [0, 1, 4, 3, 4, 6, 6, 7, 8, 9])

1876:         assert_equal(a, [0, 1, 202, 3, 4, 105, 6, 7, 8, 9])

1881:         assert_equal(a, [[0, 201, 102], [3, 404, 205], [6, 607, 308]])

1886:         assert_equal(a,

1902:         assert_equal(a, [[0, 1, 2], [403, 404, 405], [206, 207, 208]])

1907:         assert_equal(a,

1923:         assert_equal(a, [[0, 401, 202], [3, 4, 5], [6, 7, 8]])

1928:         assert_equal(a,

1944:         assert_equal(a,

1959:         assert_equal(a, [0, 1, 2, 3, 4, -5, 6, 7, 8, 9])

1964:         assert_equal(a, 1)

1966:         assert_raises(IndexError, np.add.at, a, 0, 1)

1967:         assert_raises(IndexError, np.add.at, a, [], 1)

1972:         assert_equal(a, np.array([0, 1, 4414, 46, 4, 5, 6, 7, 8, 9]))

1978:         assert_equal(a, [1, 1, 1, 3, 1, 5, 1, 7, 1, 9])

1983:         assert_equal(a, [0, 1, 2, 3, 4, 5 ^ 0xffffffff, 6, 7, 8, 9])

1989:         assert_array_equal(orig, np.arange(4))

1995:         assert_array_equal(values, [1, 8, 6, 4])

1999:         assert_raises(TypeError, np.add.at, values, [0, 1], 1)

2000:         assert_array_equal(values, np.array(['a', 1], dtype=object))

2003:         assert_raises(ValueError, np.modf.at, np.arange(10), [1])

2010:         assert_equal(f(d), r)

2012:         assert_equal(f(d, axis=0), r)

2013:         assert_equal(f(d, 0), r)

2014:         assert_equal(f(d, 0, dtype=None), r)

2015:         assert_equal(f(d, 0, dtype='i'), r)

2016:         assert_equal(f(d, 0, 'i'), r)

2017:         assert_equal(f(d, 0, None), r)

2018:         assert_equal(f(d, 0, None, out=None), r)

2019:         assert_equal(f(d, 0, None, out=o), r)

2020:         assert_equal(f(d, 0, None, o), r)

2021:         assert_equal(f(d, 0, None, None), r)

2022:         assert_equal(f(d, 0, None, None, keepdims=False), r)

2023:         assert_equal(f(d, 0, None, None, True), r.reshape((1,) + r.shape))

2024:         assert_equal(f(d, 0, None, None, False, 0), r)

2025:         assert_equal(f(d, 0, None, None, False, initial=0), r)

2026:         assert_equal(f(d, 0, None, None, False, 0, True), r)

2027:         assert_equal(f(d, 0, None, None, False, 0, where=True), r)

2029:         assert_equal(f(d, axis=0, dtype=None, out=None, keepdims=False), r)

2030:         assert_equal(f(d, 0, dtype=None, out=None, keepdims=False), r)

2031:         assert_equal(f(d, 0, None, out=None, keepdims=False), r)

2032:         assert_equal(f(d, 0, None, out=None, keepdims=False, initial=0,

2036:         assert_raises(TypeError, f)

2038:         assert_raises(TypeError, f, d, 0, None, None, False, 0, True, 1)

2040:         assert_raises(TypeError, f, d, "invalid")

2041:         assert_raises(TypeError, f, d, axis="invalid")

2042:         assert_raises(TypeError, f, d, axis="invalid", dtype=None,

2045:         assert_raises(TypeError, f, d, 0, "invalid")

2046:         assert_raises(TypeError, f, d, dtype="invalid")

2047:         assert_raises(TypeError, f, d, dtype="invalid", out=None)

2049:         assert_raises(TypeError, f, d, 0, None, "invalid")

2050:         assert_raises(TypeError, f, d, out="invalid")

2051:         assert_raises(TypeError, f, d, out="invalid", dtype=None)

2053:         # assert_raises(TypeError, f, d, 0, None, None, "invalid")

2054:         # assert_raises(TypeError, f, d, keepdims="invalid", axis=0, dtype=None)

2056:         assert_raises(TypeError, f, d, 0, keepdims="invalid", dtype="invalid",

2060:         assert_raises(TypeError, f, d, axis=0, dtype=None, invalid=0)

2061:         assert_raises(TypeError, f, d, invalid=0)

2062:         assert_raises(TypeError, f, d, 0, keepdims=True, invalid="invalid",

2064:         assert_raises(TypeError, f, d, axis=0, dtype=None, keepdims=True,

2066:         assert_raises(TypeError, f, d, axis=0, dtype=None,

2081:         assert_equal(np.all(target == (mra == ra[0])), True)

2088:         assert_(a != b)

2089:         assert_(b != a)

2090:         assert_(not (a == b))

2091:         assert_(not (b == a))

2109:             assert_raises(TypeError, f, a, b)

2110:             assert_raises(TypeError, f, c, a)

2120:         assert res.dtype == object

2139:         assert_array_equal(ufunc(a, c), ufunc([True, True], True))

2140:         assert ufunc.reduce(a) == True

2144:         assert_array_equal(ufunc(a, c, out=out), expected)

2146:         assert ufunc.reduce(a, out=out) == True

2151:         assert ufunc.reduce(a, out=out) == 1

2186:         assert np.add.reduce(arr_be) == np.add.reduce(arr_le)

2187:         assert_array_equal(np.add.accumulate(arr_be), np.add.accumulate(arr_le))

2188:         assert_array_equal(

2198:         assert np.add.reduce(arr, out=out) == 1000

2200:         assert np.multiply.reduce(arr, out=out) == 2**10

2212:         assert single_res != res

2222:         assert_array_equal(expected, out)

2227:         assert_array_equal(expected, out)

2232:         assert_array_equal(expected, out)

2251:         assert_equal(r0, r1)

2252:         assert_equal(y_base[1,
2253:         assert_equal(y_base[3,
2283:             with assert_raises(ValueError)
2287:             assert_(check is out)

2288:             assert_array_equal(check, correct_out)

2298:         with assert_raises(ValueError)
2300:         with assert_raises(ValueError)
2310:         assert np.add.reduce(np.ones(5), out=out) is out

2311:         assert type(np.add.reduce(out)) is MyArr

2315:         assert_('\n' not in umt.inner1d_no_doc.__doc__)

2321:         assert exc.match('loop of ufunc does not support')

2326:             assert not np.isfinite(nat)

2333:             assert np.isnan(nat)

2340:             assert not np.isinf(nat)

2366:             assert len(res) == len(outs)

2368:                 assert r.dtype == np.dtype(t)

2370:             assert res.dtype == np.dtype(out)

2406:                 assert_allclose(res_c, res_n, atol=tol, rtol=tol)

2408:                 assert_equal(c_ar, n_ar)

2419:     assert np.isnan(b)

2445:     assert count == sys.getrefcount(value)

2448:     assert out[-1] == 1

2454:     assert count == sys.getrefcount(value)

2457:     assert out[-1] == 1

2487:     assert count == sys.getrefcount(value)

2492:     assert out[()] < value * offset

2532:     assert _check_neg_zero(arr + arr2)

2535:     assert _check_neg_zero(arr)

2559:             assert _check_neg_zero(res)

2562:             assert not np.signbit(res.real)

2563:             assert not np.signbit(res.imag)

Total asserts: 564

Filename: numpy/core/tests/test_dtype.py
13:     assert_, assert_equal, assert_array_equal, assert_raises, HAS_REFCOUNT,

24: def assert_dtype_equal(a, b)
25:     assert_equal(a, b)

26:     assert_equal(hash(a), hash(b),

29: def assert_dtype_not_equal(a, b)
30:     assert_(a != b)

31:     assert_(hash(a) != hash(b),

50:             assert_(dt.byteorder != dt2.byteorder, "bogus test")

51:             assert_dtype_equal(dt, dt2)

53:             assert_(dt.byteorder != dt3.byteorder, "bogus test")

54:             assert_dtype_equal(dt, dt3)

65:         assert_(left == right)

66:         assert_(hash(left) == hash(right))

71:         assert_raises(TypeError, np.dtype, 'O3')

72:         assert_raises(TypeError, np.dtype, 'O5')

73:         assert_raises(TypeError, np.dtype, 'O7')

74:         assert_raises(TypeError, np.dtype, 'b3')

75:         assert_raises(TypeError, np.dtype, 'h4')

76:         assert_raises(TypeError, np.dtype, 'I5')

77:         assert_raises(TypeError, np.dtype, 'e3')

78:         assert_raises(TypeError, np.dtype, 'f5')

81:             assert_raises(TypeError, np.dtype, 'g12')

83:             assert_raises(TypeError, np.dtype, 'g16')

86:             assert_raises(TypeError, np.dtype, 'l4')

87:             assert_raises(TypeError, np.dtype, 'L4')

89:             assert_raises(TypeError, np.dtype, 'l8')

90:             assert_raises(TypeError, np.dtype, 'L8')

93:             assert_raises(TypeError, np.dtype, 'q4')

94:             assert_raises(TypeError, np.dtype, 'Q4')

96:             assert_raises(TypeError, np.dtype, 'q8')

97:             assert_raises(TypeError, np.dtype, 'Q8')

104:         assert not np.dtype(np.int32) == 7, "dtype richcompare failed for =="

105:         assert np.dtype(np.int32) != 7, "dtype richcompare failed for !="

126:         with assert_raises(TypeError)
139:         assert_dtype_equal(from_bytes, from_str)

143:         assert_raises(TypeError, np.dtype, b'')

145:         assert_raises(TypeError, np.dtype, b'|')

149:         assert_dtype_equal(np.dtype(bytes([0])), np.dtype('bool'))

150:         assert_dtype_equal(np.dtype(bytes([17])), np.dtype(object))

153:         assert_dtype_equal(np.dtype(b'f'), np.dtype('float32'))

156:         assert_raises(TypeError, np.dtype, b'\xff')

157:         assert_raises(TypeError, np.dtype, b's\xff')

161:         assert_raises(ValueError, np.dtype,

167:         assert_raises(ValueError, np.dtype,

173:         assert_raises(ValueError, np.dtype,

185:         assert_equal(x == y, False)

187:         assert np.can_cast(x, y, casting="equiv")

195:         assert_dtype_equal(a, b)

201:         assert_dtype_not_equal(a, b)

211:         assert_dtype_not_equal(a, b)

223:         assert refcounts == refcounts_new

230:         assert_dtype_equal(a, b)

231:         assert_dtype_not_equal(a, c)

233:         assert_dtype_equal(a, c)

234:         assert_dtype_not_equal(a, b)

237:         assert_dtype_equal(a, b)

238:         assert_dtype_not_equal(a, c)

244:         assert_raises(TypeError, np.dtype,

246:         assert_raises(TypeError, np.dtype,

252:         assert_equal(dt.itemsize, 8)

254:         assert_equal(dt.itemsize, 8)

258:         assert_equal(dt.itemsize, 8)

260:         assert_equal(dt.itemsize, 8)

265:         assert_equal(dt1.itemsize, 20)

271:         assert_equal(dt2.itemsize, 20)

275:         assert_equal(dt3.itemsize, 20)

276:         assert_equal(dt1, dt2)

277:         assert_equal(dt2, dt3)

282:         assert_equal(dt1.itemsize, 11)

288:         assert_equal(dt2.itemsize, 11)

292:         assert_equal(dt3.itemsize, 11)

293:         assert_equal(dt1, dt2)

294:         assert_equal(dt2, dt3)

299:         assert_equal(dt1.descr, [('a', '|i1'), ('', '|V3'),

307:         assert_equal(dt.itemsize, 4)

311:         assert_equal(a['f0'], 10 + 36*256*256)

315:         assert_equal(dt.itemsize, 8)

324:         assert_equal(a.astype(dt2), b)

325:         assert_equal(b.astype(dt), a)

326:         assert_equal(a.view(dt2), b)

327:         assert_equal(b.view(dt), a)

329:         assert_raises(TypeError, np.dtype,

333:         assert_raises(TypeError, np.dtype,

337:         assert_raises(TypeError, np.dtype,

341:         assert_raises(TypeError, np.dtype,

366:         assert_array_equal(res, expected)

370:         assert_equal(dt, np.dtype([('f0', 'M8[D]'),

377:         assert_dtype_equal(dt, np.dtype(dt.fields))

379:         assert_equal(dt2.fields, dt.fields)

387:         assert_dtype_equal(dt, dt2)

388:         assert_equal(dt.fields['val1'][0].itemsize, 0)

389:         assert_equal(dt.itemsize, dt.fields['val2'][0].itemsize)

393:         assert_equal(len(d.names), 3)

395:             assert_equal(d.fields[n][0], np.dtype('?'))

403:         assert_raises(TypeError, make_dtype, 'ASD')

404:         assert_raises(OverflowError, make_dtype, 2**70)

405:         assert_raises(TypeError, make_dtype, 2.3)

406:         assert_raises(ValueError, make_dtype, -10)

414:         assert_dtype_equal(dt[0], np.dtype(np.int8))

415:         assert_dtype_equal(dt[1], np.dtype((np.float32, 3)))

416:         assert_dtype_equal(dt[-1], dt[1])

417:         assert_dtype_equal(dt[-2], dt[0])

418:         assert_raises(IndexError, lambda
420:         assert_raises(TypeError, operator.getitem, dt, 3.0)

422:         assert_equal(dt[1], dt[np.int8(1)])

433:         assert_equal(

443:         assert_equal(dt_sub.isalignedstruct, align_flag)

446:         assert_equal(

455:         assert_equal(dt_sub.isalignedstruct, align_flag)

458:         assert_equal(

467:         assert_equal(dt_sub.isalignedstruct, align_flag)

469:         assert_raises(TypeError, operator.getitem, dt, ())

470:         assert_raises(TypeError, operator.getitem, dt, [1, 2, 3])

471:         assert_raises(TypeError, operator.getitem, dt, ['col1', 2])

472:         assert_raises(KeyError, operator.getitem, dt, ['fake'])

473:         assert_raises(KeyError, operator.getitem, dt, ['title'])

474:         assert_raises(ValueError, operator.getitem, dt, ['col1', 'col1'])

478:         assert_raises(ValueError, np.dtype,

484:         assert_raises(ValueError, a.view, np.dtype([]))

487:         assert_equal(d.shape, (10,))

488:         assert_equal(d.itemsize, 0)

489:         assert_equal(d.base, np.dtype([]))

492:         assert_equal(arr.dtype, np.dtype([]))

493:         assert_raises(ValueError, np.frombuffer, b'', dtype=[])

494:         assert_equal(np.frombuffer(b'', dtype=[], count=2),

497:         assert_raises(ValueError, np.dtype, ([], 'f8'))

498:         assert_raises(ValueError, np.zeros(1, dtype='i4').view, [])

500:         assert_equal(np.zeros(2, dtype=[]) == np.zeros(2, dtype=[]),

503:         assert_equal(np.zeros((1, 2), dtype=[]) == a,

511:         assert_dtype_equal(a, b)

513:         assert_equal(type(a.subdtype[1]), tuple)

514:         assert_equal(type(b.subdtype[1]), tuple)

520:         assert_dtype_equal(a, b)

526:         assert_dtype_not_equal(a, b)

530:         assert_dtype_not_equal(a, b)

534:         assert_dtype_not_equal(a, b)

538:         assert_dtype_equal(np.dtype('f8'), np.dtype(('f8', tuple())))

542:             assert_dtype_equal(np.dtype('f8'), np.dtype(('f8', 1)))

543:         assert_dtype_equal(np.dtype((int, 2)), np.dtype((int, (2,))))

544:         assert_dtype_equal(np.dtype(('<f4', (3, 2))), np.dtype(('<f4', (3, 2))))

546:         assert_dtype_equal(np.dtype(d), np.dtype(d))

550:         assert_dtype_not_equal(np.dtype('f8'), np.dtype(('f8', (1,))))

551:         assert_dtype_not_equal(np.dtype(('f8', (1,))), np.dtype(('f8', (1, 1))))

552:         assert_dtype_not_equal(np.dtype(('f4', (3, 2))), np.dtype(('f4', (2, 3))))

556:         assert_dtype_not_equal(

559:         assert_dtype_not_equal(

562:         assert_dtype_not_equal(

565:         assert_dtype_not_equal(

576:         assert_(isinstance(dt['a'].shape, tuple))

577:         assert_(isinstance(dt['a'].shape[0], int))

580:         assert_(isinstance(dt['a'].shape, tuple))

592:         assert_(isinstance(dt['a'].shape, tuple))

593:         assert_(isinstance(dt['a'].shape[0], int))

595:         assert_(isinstance(dt['a'].shape, tuple))

596:         assert_(isinstance(dt['a'].shape[0], int))

600:         assert_equal(dt['a'].shape, ())

601:         assert_equal(dt['a'].ndim, 0)

604:         assert_equal(dt['a'].shape, ())

605:         assert_equal(dt['a'].ndim, 0)

608:         assert_equal(dt['a'].shape, (4,))

609:         assert_equal(dt['a'].ndim, 1)

612:         assert_equal(dt['a'].shape, (1, 2, 3))

613:         assert_equal(dt['a'].ndim, 3)

620:         assert_raises(ValueError, np.dtype, [('a', 'f4', max_int // 4 + 1)])

621:         assert_raises(ValueError, np.dtype, [('a', 'f4', max_int + 1)])

622:         assert_raises(ValueError, np.dtype, [('a', 'f4', (max_int, 2))])

624:         assert_raises(ValueError, np.dtype, [('a', 'f4', max_intp + 1)])

626:         assert_raises(ValueError, np.dtype, [('a', 'f4', -1)])

627:         assert_raises(ValueError, np.dtype, [('a', 'f4', (-1, -1))])

633:         assert_equal(t1.alignment, t2.alignment)

638:         assert dt == np.dtype([])

640:         assert dt == np.dtype([])

701:         assert now - before == count * 3

704:         assert now == before

715:         assert sys.getrefcount(singleton) - before == count * 3

720:         assert after2 - before2 == count * 3

723:         assert sys.getrefcount(one) == before2

724:         assert sys.getrefcount(singleton) == before

752:         assert after_val0 - before_val0 == count * items_changed

759:         assert before_val0 - after_val0 == count * items_changed

760:         assert after_val1 - before_val1 == count * items_changed

776:         assert after - before == count * 2

780:         assert after_repeat - after == count * 2 * 10

799:         assert_array_equal(arr["a"]["aa"], np.zeros((3, 2, 3)))

808:         assert_array_equal(arr["a"]["aa"], np.zeros((3, 2, 3)))

821:         assert_dtype_equal(a, b)

827:         assert_dtype_equal(c, d)

855:         assert_(d.metadata is None)

859:         assert_(d.metadata == {'datum'
862:         assert_raises(TypeError, np.dtype, int, metadata='datum')

863:         assert_raises(TypeError, np.dtype, int, metadata=1)

864:         assert_raises(TypeError, np.dtype, int, metadata=None)

868:         assert_(d['a'].metadata == {'datum'
872:         assert_(d.metadata == {'datum'
880:         assert_equal(str(dt),

894:         assert_equal(str(dt),

904:             assert_equal(str(dt),

913:         assert_equal(np.dtype(eval(str(dt))), dt)

918:         assert_equal(str(dt),

928:         assert_equal(str(dt),

939:         assert_equal(str(dt),

947:         assert_equal(str(dt),

955:         assert_equal(repr(dt),

965:         assert_equal(repr(dt),

976:         assert_equal(repr(dt),

988:         assert_equal(repr(dt),

997:         assert_equal(repr(dt),

1002:         assert_equal(repr(dt), "dtype(('<i2', (1,)))")

1003:         assert_equal(str(dt), "('<i2', (1,))")

1015:         assert_equal(repr(dt), "dtype('V')")

1016:         assert_equal(str(dt), '|V0')

1017:         assert_equal(dt.name, 'record')

1021:         assert_equal(repr(dt), "dtype('V2')")

1022:         assert_equal(str(dt), '|V2')

1023:         assert_equal(dt.name, 'record16')

1027:         assert_equal(repr(dt), "dtype((numpy.record, [('a', '<u2')]))")

1028:         assert_equal(str(dt), "(numpy.record, [('a', '<u2')])")

1029:         assert_equal(dt.name, 'record16')

1041:             assert_raises(AttributeError, delattr, dt, s)

1047:             assert_raises(AttributeError, delattr, dt, s)

1059:         assert_equal(new_dtype.itemsize, 16)

1065:         assert_equal(np.dtype(user_def_subcls).name, 'user_def_subcls')

1077:         assert type(dtype) is type(canonical)

1080:         assert np.can_cast(dtype, canonical, casting="equiv")

1081:         assert np.can_cast(canonical, dtype, casting="equiv")

1083:         assert canonical.isnative

1086:         assert np.result_type(canonical) == canonical

1090:             assert dtype.flags == canonical.flags

1094:         assert dtype.flags & 0b10000

1097:         assert dtype.fields.keys() == canonical.fields.keys()

1112:             assert (canonical.flags & expected) == expected

1118:             assert canonical.fields[name][1] == totalsize

1120:             assert dtype.fields[name][2
1126:         assert canonical.itemsize == totalsize

1127:         assert canonical.alignment == max_alignment

1131:         assert np.result_type(dt).isnative

1132:         assert np.result_type(dt).num == dt.num

1137:         assert canonical.itemsize == 4+8

1138:         assert canonical.isnative

1143:         assert canonical.isalignedstruct

1144:         assert canonical.itemsize == np.dtype("i8").alignment + 8

1145:         assert canonical.isnative

1151:         assert arr.dtype.hasobject

1153:         assert not canonical_dt.hasobject

1171:         assert dtype_with_empty_space.itemsize == dtype.itemsize

1179:         assert dtype_with_empty_space.itemsize == dtype_aligned.itemsize

1191:             assert b"_DType_reconstruct" not in buf

1192:             assert b"dtype" in buf

1194:             assert_equal(pickled, dtype)

1195:             assert_equal(pickled.descr, dtype.descr)

1197:                 assert_equal(pickled.metadata, dtype.metadata)

1201:             assert_equal(x, y)

1202:             assert_equal(x[0], y[0])

1256:             assert roundtrip_DType is DType

1286:         assert res == expected

1289:         assert res == expected

1307:         assert res == expected

1310:         assert res == expected

1331:         assert np.result_type(other, rational(1, 2)) == expected

1353:             assert np.result_type(*perm) == expected

1359:     assert_raises(OverflowError, a, 'int8')

1363:     assert_equal(np.array([x,x]).dtype, np.dtype(rational))

1368:     assert bool(np.dtype('f8'))

1369:     assert bool(np.dtype('i8'))

1370:     assert bool(np.dtype([('a', 'i8'), ('b', 'f4')]))

1375:     assert_raises(TypeError, np.dtype, 'f8,i8,[f8,i8]')

1376:     assert_raises(TypeError, np.dtype, u'Fl\xfcgel')

1381:     assert np.dtype(dtype=np.float64) == np.dtype(np.float64)

1386:     assert np.dtype("ulong") == np.dtype(np.uint)

1394:         assert np.dtype(dt) == np.float64

1395:         assert np.dtype(dt()) == np.float64

1441:         assert isinstance(dtype, np.dtype)

1442:         assert type(dtype) is not np.dtype

1443:         assert type(dtype).__name__ == f"dtype[{dtype.type.__name__}]"

1444:         assert type(dtype).__module__ == "numpy"

1445:         assert not type(dtype)._abstract

1452:             assert not type(dtype)._parametric

1453:             assert type(dtype)() is dtype

1455:             assert type(dtype)._parametric

1456:             with assert_raises(TypeError)
1460:         assert type(np.dtype) is not type

1461:         assert isinstance(np.dtype, type)

1463:         assert type(np.dtype).__name__ == "_DTypeMeta"

1464:         assert type(np.dtype).__module__ == "numpy"

1465:         assert np.dtype._abstract

1473:         assert_equal(np.dtype(ctype), dtype)

1474:         assert_equal(np.dtype(ctype()), dtype)

1502:         assert_raises(TypeError, np.dtype, BitfieldStruct)

1503:         assert_raises(TypeError, np.dtype, BitfieldStruct())

1507:         assert_raises(TypeError, np.dtype, p_uint8)

1666:         assert_equal(pair_type, expected)

1677:         assert dt.type == mytype

1681:         assert np.dtype(mytype) == np.dtype("O")

1705:         assert isinstance(alias, types.GenericAlias)

1706:         assert alias.__origin__ is np.dtype

1712:         assert isinstance(alias, types.GenericAlias)

1713:         assert alias.__origin__ is cls

1719:             assert np.dtype[arg_tup]

1725:         assert np.dtype[Any]

1733:     assert_dtype_equal(result, td.dtype)

Total asserts: 300

Filename: numpy/core/tests/test_umath_accuracy.py
7: from numpy.testing import assert_array_max_ulp

61:                         assert_array_max_ulp(npfunc(inval), outval, maxulperr)

Total asserts: 2

Filename: numpy/core/tests/test_simd_module.py
29:         assert len(vector) == nlanes

34:         assert vector.__name__ == "npyv_" + sfx

64:         assert lane == maxu

66:         assert lanes == [maxu] * nlanes

68:         assert lane == maxu

70:         assert lanes == [maxu] * nlanes

77:         assert lane == -1

79:         assert lanes == [-1] * nlanes

82:         assert lane == 0

84:         assert lanes == [0] * nlanes

88:         assert f32 != 0.1

89:         assert round(f32, 1) == 0.1

94:         assert vdata == list(data_range)

95:         assert vdata == tuple(data_range)

97:             assert vdata[i] == data_range[i]

Total asserts: 15

Filename: numpy/core/tests/test_getlimits.py
8: from numpy.testing import assert_equal, assert_, assert_raises

17:         assert_equal(id(ftype), id(ftype2))

23:         assert_equal(id(ftype), id(ftype2))

29:         assert_equal(id(ftype), id(ftype2))

35:         assert_equal(id(ftype), id(ftype2))

41:         assert_equal(id(ftype), id(ftype2))

53:                 assert_equal(getattr(finfo(dt1), attr),

55:         assert_raises(ValueError, finfo, 'i4')

65:                 assert_equal(getattr(iinfo(dt1), attr),

67:         assert_raises(ValueError, iinfo, 'f4')

72:             assert_equal(iinfo(T).max, T(-1))

77:         assert_equal(repr(np.iinfo(np.int16)), expected)

82:         assert_equal(repr(np.finfo(np.float32)), expected)

90: def assert_ma_equal(discovered, ma_like)
93:         assert_equal(value, getattr(ma_like, key))

95:             assert_equal(value.shape, getattr(ma_like, key).shape)

96:             assert_equal(value.dtype, getattr(ma_like, key).dtype)

104:         assert_ma_equal(_discovered_machar(ftype), ma_like)

111:         assert_ma_equal(ld_ma, _float_ma[80])

114:         assert_ma_equal(ld_ma, _float_ma[128])

127:             assert len(w) == 0

131:             assert len(w) == 0

136:             assert len(w) == 0

143:         assert_(info.nmant > 1)

144:         assert_(info.minexp < -1)

145:         assert_(info.maxexp > 1)

Total asserts: 26

Filename: numpy/core/tests/test_dlpack.py
5: from numpy.testing import assert_array_equal, IS_PYPY

13:         assert sys.getrefcount(x) == 3

15:         assert sys.getrefcount(x) == 2

36:         assert sys.getrefcount(x) == 3

38:         assert sys.getrefcount(x) == 2

50:         assert y.dtype == x.dtype

51:         assert_array_equal(x, y)

70:         assert_array_equal(y1, np.from_dlpack(y1))

73:         assert_array_equal(y2, np.from_dlpack(y2))

76:         assert_array_equal(y3, np.from_dlpack(y3))

79:         assert_array_equal(y4, np.from_dlpack(y4))

82:         assert_array_equal(y5, np.from_dlpack(y5))

89:         assert shape == np.from_dlpack(x).shape

93:         assert x.__dlpack_device__() == (1, 0)

95:         assert y.__dlpack_device__() == (1, 0)

97:         assert z.__dlpack_device__() == (1, 0)

117:         assert_array_equal(x, y)

123:         assert_array_equal(x, y)

Total asserts: 18

Filename: numpy/core/tests/test_einsum.py
7:     assert_, assert_equal, assert_array_equal, assert_almost_equal,

8:     assert_raises, suppress_warnings, assert_raises_regex, assert_allclose

21:             assert_raises(ValueError, np.einsum, optimize=do_opt)

22:             assert_raises(ValueError, np.einsum, "", optimize=do_opt)

25:             assert_raises(TypeError, np.einsum, 0, 0, optimize=do_opt)

28:             assert_raises(TypeError, np.einsum, "", 0, out='test',

32:             assert_raises(ValueError, np.einsum, "", 0, order='W',

36:             assert_raises(ValueError, np.einsum, "", 0, casting='blah',

40:             assert_raises(TypeError, np.einsum, "", 0, dtype='bad_data_type',

44:             assert_raises(TypeError, np.einsum, "", 0, bad_arg=0,

48:             assert_raises(TypeError, np.einsum, *(None,)*63, optimize=do_opt)

51:             assert_raises(ValueError, np.einsum, "", 0, 0, optimize=do_opt)

52:             assert_raises(ValueError, np.einsum, ",", 0, [0], [0],

54:             assert_raises(ValueError, np.einsum, ",", [0], optimize=do_opt)

57:             assert_raises(ValueError, np.einsum, "i", 0, optimize=do_opt)

58:             assert_raises(ValueError, np.einsum, "ij", [0, 0], optimize=do_opt)

59:             assert_raises(ValueError, np.einsum, "...i", 0, optimize=do_opt)

60:             assert_raises(ValueError, np.einsum, "i...j", [0, 0], optimize=do_opt)

61:             assert_raises(ValueError, np.einsum, "i...", 0, optimize=do_opt)

62:             assert_raises(ValueError, np.einsum, "ij...", [0, 0], optimize=do_opt)

65:             assert_raises(ValueError, np.einsum, "i..", [0, 0], optimize=do_opt)

66:             assert_raises(ValueError, np.einsum, ".i...", [0, 0], optimize=do_opt)

67:             assert_raises(ValueError, np.einsum, "j->..j", [0, 0], optimize=do_opt)

68:             assert_raises(ValueError, np.einsum, "j->.j...", [0, 0], optimize=do_opt)

71:             assert_raises(ValueError, np.einsum, "i%...", [0, 0], optimize=do_opt)

72:             assert_raises(ValueError, np.einsum, "...j$", [0, 0], optimize=do_opt)

73:             assert_raises(ValueError, np.einsum, "i->&", [0, 0], optimize=do_opt)

76:             assert_raises(ValueError, np.einsum, "i->ij", [0, 0], optimize=do_opt)

79:             assert_raises(ValueError, np.einsum, "ij->jij", [[0, 0], [0, 0]],

83:             assert_raises(ValueError, np.einsum, "ii",

85:             assert_raises(ValueError, np.einsum, "ii->i",

89:             assert_raises(ValueError, np.einsum, "i", np.arange(6).reshape(2, 3),

91:             assert_raises(ValueError, np.einsum, "i->i", [[0, 1], [0, 1]],

93:             with assert_raises_regex(ValueError, "'b'")
100:             assert_raises(ValueError, np.einsum, "i->i", np.arange(6).reshape(-1, 1),

110:             assert_(b.base is a)

113:             assert_(b.base is a)

116:             assert_(b.base is a)

117:             assert_equal(b, a)

120:             assert_(b.base is a)

121:             assert_equal(b, a)

125:             assert_(b.flags['WRITEABLE'])

128:             assert_(not b.flags['WRITEABLE'])

135:             assert_(b.base is a)

136:             assert_equal(b, a.T)

139:             assert_(b.base is a)

140:             assert_equal(b, a.T)

147:             assert_(b.base is a)

148:             assert_equal(b, [a[i, i] for i in range(3)])

151:             assert_(b.base is a)

152:             assert_equal(b, [a[i, i] for i in range(3)])

159:             assert_(b.base is a)

160:             assert_equal(b, [[x[i, i] for i in range(3)] for x in a])

163:             assert_(b.base is a)

164:             assert_equal(b, [[x[i, i] for i in range(3)] for x in a])

167:             assert_(b.base is a)

168:             assert_equal(b, [[x[i, i] for i in range(3)]

172:             assert_(b.base is a)

173:             assert_equal(b, [[x[i, i] for i in range(3)]

177:             assert_(b.base is a)

178:             assert_equal(b, [a[
181:             assert_(b.base is a)

182:             assert_equal(b, [a[
185:             assert_(b.base is a)

186:             assert_equal(b, [a[
189:             assert_(b.base is a)

190:             assert_equal(b, [a[
193:             assert_(b.base is a)

194:             assert_equal(b, [a.transpose(2, 0, 1)[
197:             assert_(b.base is a)

198:             assert_equal(b, [a.transpose(2, 0, 1)[
201:             assert_(b.base is a)

202:             assert_equal(b, [a.transpose(1, 0, 2)[
205:             assert_(b.base is a)

206:             assert_equal(b, [a.transpose(1, 0, 2)[
209:             assert_(b.base is a)

210:             assert_equal(b, [[x[i, i] for i in range(3)]

214:             assert_(b.base is a)

215:             assert_equal(b, [[x[i, i] for i in range(3)]

223:             assert_(b.base is a)

224:             assert_equal(b, [a[i, i, i] for i in range(3)])

227:             assert_(b.base is a)

228:             assert_equal(b, [a[i, i, i] for i in range(3)])

235:             assert_(b.base is a)

236:             assert_equal(b, a.swapaxes(0, 1))

239:             assert_(b.base is a)

240:             assert_equal(b, a.swapaxes(0, 1))

248:             assert_equal(np.einsum("i->", a, optimize=do_opt),

250:             assert_equal(np.einsum(a, [0], [], optimize=do_opt),

255:             assert_equal(np.einsum("...i->...", a, optimize=do_opt),

257:             assert_equal(np.einsum(a, [Ellipsis, 0], [Ellipsis], optimize=do_opt),

263:             assert_equal(np.einsum("i...->...", a, optimize=do_opt),

265:             assert_equal(np.einsum(a, [0, Ellipsis], [Ellipsis], optimize=do_opt),

270:             assert_equal(np.einsum("i...->...", a, optimize=do_opt),

272:             assert_equal(np.einsum(a, [0, Ellipsis], [Ellipsis], optimize=do_opt),

278:             assert_equal(np.einsum("ii", a, optimize=do_opt),

280:             assert_equal(np.einsum(a, [0, 0], optimize=do_opt),

285:             assert_equal(np.einsum(a, np_array, optimize=do_opt),

287:             assert_equal(np.einsum(a, list(np_array), optimize=do_opt),

291:         assert_equal(np.einsum("..., ...", 3, 4), 12)  # scalar case

295:             assert_equal(np.einsum("..., ...", a, b, optimize=do_opt),

297:             assert_equal(np.einsum(a, [Ellipsis], b, [Ellipsis], optimize=do_opt),

304:             assert_equal(np.einsum("...i, ...i", a, b, optimize=do_opt), np.inner(a, b))

305:             assert_equal(np.einsum(a, [Ellipsis, 0], b, [Ellipsis, 0], optimize=do_opt),

311:             assert_equal(np.einsum("i..., i...", a, b, optimize=do_opt),

313:             assert_equal(np.einsum(a, [0, Ellipsis], b, [0, Ellipsis], optimize=do_opt),

320:             assert_equal(np.einsum("i,j", a, b, optimize=do_opt),

322:             assert_equal(np.einsum(a, [0], b, [1], optimize=do_opt),

333:                 assert_equal(np.einsum("ij, j", a, b, optimize=do_opt),

335:                 assert_equal(np.einsum(a, [0, 1], b, [1], optimize=do_opt),

341:                 assert_equal(c,

347:                 assert_equal(c,

354:                 assert_equal(np.einsum("ji,j", a.T, b.T, optimize=do_opt),

356:                 assert_equal(np.einsum(a.T, [1, 0], b.T, [1], optimize=do_opt),

362:                 assert_equal(c,

368:                 assert_equal(c,

377:                     assert_equal(np.einsum("ij,jk", a, b, optimize=do_opt),

379:                     assert_equal(np.einsum(a, [0, 1], b, [1, 2], optimize=do_opt),

388:                 assert_equal(c,

394:                 assert_equal(c,

404:                 assert_equal(np.einsum("ij,jk,kl", a, b, c, optimize=do_opt),

406:                 assert_equal(np.einsum(a, [0, 1], b, [1, 2], c, [2, 3],

414:             assert_equal(d, tgt)

421:             assert_equal(d, tgt)

427:                 assert_equal(np.einsum("ijk, jil -> kl", a, b),

429:                 assert_equal(np.einsum(a, [0, 1, 2], b, [1, 0, 3], [2, 3]),

435:                 assert_equal(c, np.tensordot(a.astype('f8'), b.astype('f8'),

440:                 assert_equal(c, np.tensordot(a.astype('f8'), b.astype('f8'),

447:         assert_equal(np.einsum("i,i,i->i", a, b, c,

450:         assert_equal(np.einsum(a, [0], b, [0], c, [0], [0],

455:         assert_equal(np.einsum(",i->", 3, a), 3*np.sum(a))

456:         assert_equal(np.einsum(3, [], a, [0], []), 3*np.sum(a))

457:         assert_equal(np.einsum("i,->", a, 3), 3*np.sum(a))

458:         assert_equal(np.einsum(a, [0], 3, [], []), 3*np.sum(a))

464:                 assert_equal(np.einsum("...,...", a, a, optimize=do_opt),

466:                 assert_equal(np.einsum("i,i", a, a, optimize=do_opt), np.dot(a, a))

467:                 assert_equal(np.einsum("i,->i", a, 2, optimize=do_opt), 2*a)

468:                 assert_equal(np.einsum(",i->i", 2, a, optimize=do_opt), 2*a)

469:                 assert_equal(np.einsum("i,->", a, 2, optimize=do_opt), 2*np.sum(a))

470:                 assert_equal(np.einsum(",i->", 2, a, optimize=do_opt), 2*np.sum(a))

472:                 assert_equal(np.einsum("...,...", a[1
474:                 assert_equal(np.einsum("i,i", a[1
476:                 assert_equal(np.einsum("i,->i", a[1
477:                 assert_equal(np.einsum(",i->i", 2, a[1
478:                 assert_equal(np.einsum("i,->", a[1
480:                 assert_equal(np.einsum(",i->", 2, a[1
487:         assert_equal(b, np.sum(a))

488:         assert_equal(b.dtype, np.dtype(dtype))

491:         assert_equal(b, np.sum(a))

492:         assert_equal(b.dtype, np.dtype(dtype))

498:         assert_equal(np.einsum('z,mz,zm->', p, q, r), 253)

503:         assert_array_equal(np.einsum('ij,ij->j', p, q, optimize=True),

505:         assert_array_equal(np.einsum('ij,ij->j', p, q, optimize=True),

512:         assert_array_equal(np.einsum("i, i", x, y, optimize=False), 20.)

513:         assert_array_equal(np.einsum("i, i", x, y, optimize=True), 20.)

519:             assert_array_equal(np.einsum("...ij,...jk->...ik", p, p,

523:             assert_array_equal(np.einsum("...ij,...jk->...ik", p, q,

530:         assert_array_equal(np.einsum("ji,i->", x, y, optimize=optimize),

532:         assert_array_equal(np.einsum("i,ij->", y, x, optimize=optimize),

534:         assert_array_equal(np.einsum("ij,i->", x, y, optimize=optimize),

591:         assert_equal(np.einsum('ij...,j...->i...', a, b), [[[2], [2]]])

592:         assert_equal(np.einsum('ij...,j...->i...', a, b, optimize=True), [[[2], [2]]])

595:         assert_equal(np.einsum(u'ij...,j...->i...', a, b), [[[2], [2]]])

596:         assert_equal(np.einsum('...i,...i', [1, 2, 3], [2, 3, 4]), 20)

597:         assert_equal(np.einsum(u'...i,...i', [1, 2, 3], [2, 3, 4]), 20)

598:         assert_equal(np.einsum('...i,...i', [1, 2, 3], [2, 3, 4],

604:         assert_equal(np.einsum('ijklm,ijn,ijn->', a, b, b),

606:         assert_equal(np.einsum('ijklm,ijn,ijn->', a, b, b, optimize=True),

614:         assert_equal(np.einsum('x,yx,zx->xzy', a, b, c),

617:         assert_equal(np.einsum('x,yx,zx->xzy', a, b, c, optimize=True),

623:         assert_equal(np.einsum('i,j', [1], [2], out=None), [[2]])

633:         assert_raises(ValueError, lambda
634:         assert_raises(ValueError, lambda
648:             assert_equal(np.einsum('ij...,j...->ij...', A, B, optimize=opt), ref)

649:             assert_equal(np.einsum('ij...,...j->ij...', A, B, optimize=opt), ref)

650:             assert_equal(np.einsum('ij...,j->ij...', A, B, optimize=opt), ref)  # used to raise error

656:             assert_equal(np.einsum('ik...,k...->i...', A, B, optimize=opt), ref)

657:             assert_equal(np.einsum('ik...,...kj->i...j', A, B, optimize=opt), ref)

658:             assert_equal(np.einsum('...k,kj', A, B, optimize=opt), ref)  # used to raise error

659:             assert_equal(np.einsum('ik,k...->i...', A, B, optimize=opt), ref)  # used to raise error

666:             assert_equal(np.einsum('ijkl,k', a, v, optimize=opt), ref)

667:             assert_equal(np.einsum('...kl,k', a, v, optimize=opt), ref)  # used to raise error

668:             assert_equal(np.einsum('...kl,k...', a, v, optimize=opt), ref)

675:             assert_equal(np.einsum('...lmn,lmno->...o', A, B,

699:         assert_equal(es,  tp)

706:         assert_equal(es, tp)

716:         assert_equal(y1, y2)

724:         assert_allclose(x, y)

735:         assert_array_equal(out.base, correct_base)

739:         assert_array_equal(out.base, correct_base)

747:         assert_array_equal(out.base, correct_base)

763:         assert res == arr.sum()

766:         assert_array_equal(res, arr * arr)

769:         assert_array_equal(res, arr * arr)

771:         assert np.einsum('i,i->', arr, arr) == (arr * arr).sum()

775:         assert_array_equal(res, arr * dtype.type(2))

778:         assert_array_equal(res, arr * dtype.type(2))

782:         assert res == np.einsum('i->', scalar * arr)

786:         assert res == np.einsum('i->', scalar * arr)

790:         assert_array_equal(res, (arr * arr * arr).sum())

793:         assert_array_equal(res, (arr * arr * arr * arr).sum())

803:         assert_equal(res, tgt)

808:         assert res is a

824:         assert_almost_equal(opt, noopt)

826:         assert_almost_equal(opt, noopt)

909:         assert_equal(b, [12])

941:             assert_(tmp.flags.f_contiguous)

944:             assert_(tmp.flags.f_contiguous)

947:             assert_(tmp.flags.c_contiguous)

950:             assert_(tmp.flags.c_contiguous is False)

951:             assert_(tmp.flags.f_contiguous is False)

954:             assert_(tmp.flags.c_contiguous is False)

955:             assert_(tmp.flags.f_contiguous is False)

960:             assert_(tmp.flags.c_contiguous)

965:             assert_(tmp.flags.c_contiguous)

979:     def assert_path_equal(self, comp, benchmark)
982:         assert_(ret)

986:         assert_(ret)

994:         self.assert_path_equal(path, ['einsum_path', (0, 1, 2)])

997:         self.assert_path_equal(path, ['einsum_path', (0, 1, 2)])

1001:         self.assert_path_equal(path, ['einsum_path', (0, 1, 2, 3)])

1004:         self.assert_path_equal(path, ['einsum_path', (0, 1, 2, 3)])

1012:         self.assert_path_equal(path, ['einsum_path',

1016:         self.assert_path_equal(path, ['einsum_path',

1023:         self.assert_path_equal(path, ['einsum_path',

1028:         self.assert_path_equal(path, ['einsum_path',

1037:         self.assert_path_equal(path, ['einsum_path', (0, 2), (0, 1)])

1040:         self.assert_path_equal(path, ['einsum_path', (0, 2), (0, 1)])

1045:         self.assert_path_equal(path, ['einsum_path', (0, 3), (0, 1), (0, 1)])

1048:         self.assert_path_equal(path, ['einsum_path', (0, 3), (0, 1), (0, 1)])

1053:         self.assert_path_equal(path, ['einsum_path', (1, 2), (0, 2), (0, 1)])

1056:         self.assert_path_equal(path, ['einsum_path', (1, 2), (0, 2), (0, 1)])

1061:         self.assert_path_equal(path, ['einsum_path', (1, 2), (0, 1), (0, 1)])

1064:         self.assert_path_equal(path, ['einsum_path', (1, 2), (0, 2), (0, 1)])

1070:         self.assert_path_equal(path, ['einsum_path', (0, 1), (0, 1, 2, 3, 4, 5)])

1073:         self.assert_path_equal(path, ['einsum_path', (0, 1), (0, 1, 2, 3, 4, 5)])

1080:         self.assert_path_equal(path, ['einsum_path', (0, 1, 2, 3)])

1083:         self.assert_path_equal(path, ['einsum_path', (1, 2), (0, 1), (0, 1)])

1087:         self.assert_path_equal(path, exp_path)

1092:         assert_almost_equal(noopt, opt)

1107:     assert_equal(c, d)

1110:     assert_equal(c, d)

Total asserts: 242

Filename: numpy/core/tests/test_api.py
7:      assert_, assert_equal, assert_array_equal, assert_raises, assert_warns,

17:     assert_equal(np.array(ones11, dtype=np.float64), ones11)

21:         assert_equal(old_refcount, sys.getrefcount(tndarray))

24:     assert_equal(np.array(None, dtype=np.float64),

29:         assert_equal(old_refcount, sys.getrefcount(tobj))

32:     assert_equal(np.array(1.0, dtype=np.float64),

37:         assert_equal(old_refcount, sys.getrefcount(np.float64))

43:     assert_equal(np.array(b"1.0", dtype=np.float64),

45:     assert_equal(np.array(b"1.0").dtype, S3)

46:     assert_equal(np.array(b"1.0", dtype=bytes).dtype, S3)

47:     assert_equal(np.array(b"1.0", dtype=S2), np.array(b"1."))

48:     assert_equal(np.array(b"1", dtype=S5), np.ones((), dtype=S5))

54:     assert_equal(np.array("1.0", dtype=np.float64),

56:     assert_equal(np.array("1.0").dtype, U3)

57:     assert_equal(np.array("1.0", dtype=str).dtype, U3)

58:     assert_equal(np.array("1.0", dtype=U2), np.array(str("1.")))

59:     assert_equal(np.array("1", dtype=U5), np.ones((), dtype=U5))

62:     assert_(hasattr(builtins, 'get'))

66:     assert_equal(dat, [49.0, 46.0, 48.0])

67:     assert_(dat.dtype.type is np.float64)

70:     assert_equal(dat, [49, 46, 48])

71:     assert_(dat.dtype.type is np.uint8)

77:     assert_equal(np.array(o, dtype=np.float64), a)

86:     assert_equal(bytes(np.array(o).data), bytes(a.data))

91:     assert_equal(np.array(o, dtype=np.float64), np.array(100.0, np.float64))

102:     assert_raises(ValueError, np.array, [nested], dtype=np.float64)

105:     assert_equal(np.array([None] * 10, dtype=np.float64),

107:     assert_equal(np.array([[None]] * 10, dtype=np.float64),

109:     assert_equal(np.array([[None] * 10], dtype=np.float64),

111:     assert_equal(np.array([[None] * 10] * 10, dtype=np.float64),

114:     assert_equal(np.array([1.0] * 10, dtype=np.float64),

116:     assert_equal(np.array([[1.0]] * 10, dtype=np.float64),

118:     assert_equal(np.array([[1.0] * 10], dtype=np.float64),

120:     assert_equal(np.array([[1.0] * 10] * 10, dtype=np.float64),

124:     assert_equal(np.array((None,) * 10, dtype=np.float64),

126:     assert_equal(np.array([(None,)] * 10, dtype=np.float64),

128:     assert_equal(np.array([(None,) * 10], dtype=np.float64),

130:     assert_equal(np.array([(None,) * 10] * 10, dtype=np.float64),

133:     assert_equal(np.array((1.0,) * 10, dtype=np.float64),

135:     assert_equal(np.array([(1.0,)] * 10, dtype=np.float64),

137:     assert_equal(np.array([(1.0,) * 10], dtype=np.float64),

139:     assert_equal(np.array([(1.0,) * 10] * 10, dtype=np.float64),

149:     with assert_raises(TypeError)
157:     assert_equal(b, a.T)

158:     assert_(b.flags.owndata)

163:     assert_equal(b, a.T)

164:     assert_(b.flags.owndata)

169:     assert_equal(b, a.T)

170:     assert_(b.flags.owndata)

177:     assert_equal(a, b)

178:     assert_equal(b.dtype, np.dtype('i4'))

179:     assert_equal(a.strides, b.strides)

181:     assert_equal(a.T, b)

182:     assert_equal(b.dtype, np.dtype('i4'))

183:     assert_equal(a.T.strides, b.strides)

185:     assert_equal(a, b)

186:     assert_(not (a is b))

190:     assert_(a is b)

195:     assert_equal(a, b)

196:     assert_(not (a is b))

197:     assert_(b.flags.f_contiguous)

200:     assert_equal(a, b)

201:     assert_(a is b)

202:     assert_(b.flags.c_contiguous)

206:     assert_equal(a, b)

207:     assert_equal(b.dtype, np.dtype('c8'))

209:     assert_raises(TypeError, a.astype, 'i4', casting='safe')

213:     assert_(a is b)

222:     assert_(a is b)

226:     assert_equal(a, b)

227:     assert_equal(type(b), MyNDArray)

231:     assert_equal(a, b)

232:     assert_(not (a is b))

233:     assert_(type(b) is not MyNDArray)

239:     assert_equal(a, b)

240:     assert_equal(b.dtype, np.dtype('S100'))

243:     assert_equal(a, b)

244:     assert_equal(b.dtype, np.dtype('U100'))

249:     assert_equal(a, b)

250:     assert_equal(b.dtype, np.dtype('S10'))

253:     assert_equal(a, b)

254:     assert_equal(b.dtype, np.dtype('U10'))

257:     assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'))

259:     assert_array_equal(a, np.array(u'1234567890' * 3, dtype='U30'))

262:     assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'))

264:     assert_array_equal(a, np.array(u'1234567890' * 3, dtype='U30'))

267:     assert_array_equal(a, np.array(b'1234567890' * 3, dtype='S30'))

269:     assert_array_equal(a, np.array(u'1234567890' * 3, dtype='U30'))

273:     assert_(b.size == 2)

276:     assert_raises(TypeError, a.astype, 'S1', casting='safe')

279:     assert_raises(TypeError, a.astype, 'U1', casting='safe')

287:     assert arr.astype(dt).dtype.itemsize == np.dtype(f"{dt}1").itemsize

290:     assert np.can_cast(arr, dt, casting="unsafe")

291:     assert not np.can_cast(arr, dt, casting="same_kind")

293:     assert np.can_cast("O", dt, casting="unsafe")

299:     assert arr.astype("V").dtype.itemsize == dt.itemsize

305:     assert arr.dtype == "V8"

313:     assert_warns(np.ComplexWarning, a.astype, t)

327:     assert_array_equal(arr.astype(out_dtype), expected)

340:         with assert_raises(ValueError)
348:     assert scalar_type(value) == 1+3j

349:     assert np.array([value], dtype=object).astype(scalar_type)[()] == 1+3j

350:     assert np.array(value).astype(scalar_type)[()] == 1+3j

353:     assert arr[0] == 1+3j

361:     assert np.isnan(arr)[0]

362:     assert np.isnan(np.array(None, dtype=dtype))[()]

363:     assert np.isnan(np.array([None], dtype=dtype))[0]

364:     assert np.isnan(np.array(None).astype(dtype))[()]

371:     assert_equal(a, 1.5)

373:     assert_equal(a, 2.5)

378:     assert_equal(a, [[2.5, 3.5, 2.5], [2.5, 2.5, 3.5]])

381:     assert_equal(a, [[2.5, 4.5, 4.5], [4.5, 4.5, 3.5]])

388:     assert_equal(a, [[3, 1, 5], [6, 2, 1]])

392:     assert_equal(a, [[2, 6, 5], [1, 3, 1]])

395:     assert_raises(TypeError, np.copyto, a, 1.5)

399:     assert_equal(a, 1)

403:     assert_equal(a, [[3, 1, 3], [3, 1, 3]])

406:     assert_raises(TypeError, np.copyto, a, 3.5, where=[True, False, True])

410:     assert_equal(a, [[3, 4, 4], [4, 1, 3]])

414:     assert_equal(a, [[3, 4, 4], [4, 3, 3]])

417:     assert_raises(TypeError, np.copyto, [1, 2, 3], [2, 3, 4])

437:         assert_array_equal(r == 1, l)

438:         assert_equal(r.sum(), sum(l))

442:         assert_array_equal(r == 1, l[
443:         assert_equal(r.sum(), sum(l))

447:         assert_array_equal(r[
448:         assert_equal(r[
452:         assert_array_equal(r[
453:         assert_equal(r[
461:             assert_array_equal(r == 1, l)

462:             assert_equal(r.sum(), sum(l))

466:     assert_equal(r.sum(), r.size)

470:     assert_equal(r.sum(), r.size)

478:         assert_(not (x is y))

479:         assert_equal(x, y)

480:         assert_equal(res.flags.c_contiguous, ccontig)

481:         assert_equal(res.flags.f_contiguous, fcontig)

484:     assert_(a.flags.c_contiguous)

485:     assert_(not a.flags.f_contiguous)

486:     assert_(not b.flags.c_contiguous)

487:     assert_(b.flags.f_contiguous)

488:     assert_(not c.flags.c_contiguous)

489:     assert_(not c.flags.f_contiguous)

539:         assert_(a.flags.c_contiguous == ccontig)

540:         assert_(a.flags.f_contiguous == fcontig)

570:     assert_equal(result[0], np.array([(1, 2, 3), (1, 2, 3), (1, 2, 3)], dtype='u4,u4,u4'))

571:     assert_equal(result[1], np.array([(1, 2, 3), (4, 5, 6), (7, 8, 9)], dtype='u4,u4,u4'))

578:     assert_equal(output, expected_output)

585:     assert not np.may_share_memory(arr, res_true)

587:     assert not np.may_share_memory(arr, res_always)

591:     assert np.may_share_memory(arr, res_false)

594:     assert np.may_share_memory(arr, res_if_needed)

597:     assert np.may_share_memory(arr, res_never)

601:     assert_array_equal(res_false, arr)

604:     assert_array_equal(res_if_needed, arr)

605:     assert_raises(ValueError, arr.astype, np.float64,

Total asserts: 156

Filename: numpy/core/tests/test_longdouble.py
6:     assert_, assert_equal, assert_raises, assert_warns, assert_array_equal,

25:     assert_equal(a[1], o)

38:     assert_equal(np.longdouble(repr(o)), o, "repr was %s" % repr(o))

44:     assert_equal(np.longdouble(repr(o).encode("ascii")), o)

62:     assert o == np.longdouble(o_str)

66:     assert (o == o_strarr.astype(np.longdouble)).all()

69:     assert (o_strarr == o_str).all()

70:     assert (np.asarray([o] * 3).astype(strtype) == o_str).all()

74:     assert_raises(ValueError, np.longdouble, "spam")

75:     assert_raises(ValueError, np.longdouble, "1.0 flub")

83:     assert_equal(np.fromstring(s, sep=" ", dtype=np.longdouble), a,

90:         assert_equal(np.fromstring("1, 2 ,  3  ,4", sep=",", dtype=ctype),

93:         assert_equal(np.fromstring("1j, -2j,  3j, 4e1j", sep=",", dtype=ctype),

96:         assert_equal(np.fromstring("1+1j,2-2j, -3+3j,  -4e1+4j", sep=",", dtype=ctype),

99:         with assert_warns(DeprecationWarning)
100:             assert_equal(np.fromstring("1+2 j,3", dtype=ctype, sep=","),

102:         with assert_warns(DeprecationWarning)
103:             assert_equal(np.fromstring("1+ 2j,3", dtype=ctype, sep=","),

105:         with assert_warns(DeprecationWarning)
106:             assert_equal(np.fromstring("1 +2j,3", dtype=ctype, sep=","),

108:         with assert_warns(DeprecationWarning)
109:             assert_equal(np.fromstring("1+j", dtype=ctype, sep=","),

111:         with assert_warns(DeprecationWarning)
112:             assert_equal(np.fromstring("1+", dtype=ctype, sep=","),

114:         with assert_warns(DeprecationWarning)
115:             assert_equal(np.fromstring("1j+1", dtype=ctype, sep=","),

120:     with assert_warns(DeprecationWarning)
121:         assert_equal(np.fromstring("1. 2. 3. flop 4.", dtype=float, sep=" "),

126:     with assert_warns(DeprecationWarning)
127:         assert_equal(np.fromstring("xxxxx", sep="x"),

132:     with assert_warns(DeprecationWarning)
133:         assert_equal(np.fromstring("1xx3x4x5x6", sep="x"),

148:             with assert_warns(DeprecationWarning)
150:         assert_equal(res, np.array([1., 2., 3.]))

160:             assert_equal(res, np.array([1., 2., 3., 4.]))

168:             assert_equal(res, np.array([1.j, -2.j, 3.j, 40.j]))

176:             assert_equal(res, np.array([1. + 1.j, 2. - 2.j, - 3. + 3.j, - 40. + 4j]))

183:                 with assert_warns(DeprecationWarning)
185:             assert_equal(res, np.array([1.]))

192:                 with assert_warns(DeprecationWarning)
194:             assert_equal(res, np.array([1.]))

201:                 with assert_warns(DeprecationWarning)
203:             assert_equal(res, np.array([1.]))

210:                 with assert_warns(DeprecationWarning)
212:             assert_equal(res, np.array([1.]))

219:                 with assert_warns(DeprecationWarning)
221:             assert_equal(res, np.array([1.]))

228:                 with assert_warns(DeprecationWarning)
230:             assert_equal(res, np.array([1.j]))

241:         assert_equal(res, self.tgt)

250:         assert_equal(res, self.tgt)

259:         assert_equal(res, self.tgt)

267:         assert_equal(res, self.tgt)

275:     assert_(repr(o) != '1')

283:     assert_("{0
291:     assert_("%.40g" % o != '1')

304:     assert_(repr(a) != repr(b))

314:         assert_equal(o, np.longdouble(repr(o)))

319:         assert_equal(a[0], f)

322:         with assert_warns(DeprecationWarning)
323:             assert_equal(np.fromstring("1,234", dtype=float, sep=" "),

327:         with assert_warns(DeprecationWarning)
328:             assert_equal(np.fromstring("1,234", dtype=np.longdouble, sep=" "),

334:         assert_equal(a[0], np.longdouble(s))

339:         assert_array_equal(a, b)

342:         with assert_warns(DeprecationWarning)
344:             assert_array_equal(b[0], 1)

360:         assert np.longdouble(int_val) == np.longdouble(str_val)

365:             assert w[0].category is RuntimeWarning

370:     assert np.longdouble(bool_val) == np.longdouble(int(bool_val))

Total asserts: 70

Filename: numpy/core/tests/test_overrides.py
10:     assert_, assert_equal, assert_raises, assert_raises_regex)

46:         assert_equal(list(args), [array])

49:         assert_equal(list(args), [array])

52:         assert_equal(list(args), [array])

55:         assert_equal(list(args), [array])

70:         assert_equal(list(args), [override_sub, array])

73:         assert_equal(list(args), [no_override_sub, array])

77:         assert_equal(list(args), [override_sub, no_override_sub])

88:         assert_equal(list(args), [other, array])

91:         assert_equal(list(args), [array, other])

105:         assert_equal(_get_implementing_args([array, subarray, other]),

107:         assert_equal(_get_implementing_args([array, other, subarray]),

129:         assert_equal(_get_implementing_args([1]), [])

130:         assert_equal(_get_implementing_args([a]), [a])

131:         assert_equal(_get_implementing_args([a, 1]), [a])

132:         assert_equal(_get_implementing_args([a, a, a]), [a])

133:         assert_equal(_get_implementing_args([a, d, a]), [a, d])

134:         assert_equal(_get_implementing_args([a, b]), [b, a])

135:         assert_equal(_get_implementing_args([b, a]), [b, a])

136:         assert_equal(_get_implementing_args([a, b, c]), [b, c, a])

137:         assert_equal(_get_implementing_args([a, c, b]), [c, b, a])

145:         assert_equal(actual, relevant_args[
147:         with assert_raises_regex(TypeError, 'distinct argument types')
173:         assert_equal(result, 'original')

178:         assert_(result is NotImplemented)

184:         assert_equal(result, 'original')

190:         assert_equal(result, 'original')

192:         with assert_raises_regex(TypeError, 'no implementation found')
197:         assert_equal(result, expected.view(NoOverrideSub))

199:         assert_equal(result, expected.view(OverrideSub))

207:         with assert_raises_regex(AttributeError, '_implementation')
219:             assert_(roundtripped is dispatched_one_arg)

222:         assert_equal(dispatched_one_arg.__name__, 'dispatched_one_arg')

224:             assert_equal(dispatched_one_arg.__doc__, 'Docstring.')

234:         assert_(obj is original)

235:         assert_(func is dispatched_one_arg)

236:         assert_equal(set(types), {MyArray})

237:         # assert_equal uses the overloaded np.iscomplexobj() internally

238:         assert_(args == (original,))

239:         assert_equal(kwargs, {})

248:         with assert_raises_regex(TypeError, 'no implementation found')
261:         with assert_raises(RuntimeError)
263:         with assert_raises(RuntimeError)
265:         with assert_raises(RuntimeError)
267:         with assert_raises(RuntimeError)
272:         with assert_raises(RuntimeError)
315:         assert_equal(dispatched_one_arg(1), 'original')

316:         assert_equal(dispatched_one_arg(MyArray()), 'myarray')

331:         assert_equal(func_with_option(1), 'default')

332:         assert_equal(func_with_option(1, option='extra'), 'extra')

333:         assert_equal(func_with_option(MyArray()), 'myarray')

334:         with assert_raises(TypeError)
339:         assert_equal(result, 'yes')

340:         with assert_raises(TypeError)
351:         assert_(func(array) is array)

352:         assert_equal(func.__module__, 'my')

354:         with assert_raises_regex(

370:         assert_equal(repr(array), 'MyArray(1)')

371:         assert_equal(str(array), '1')

377:         assert_equal(np.sum.__module__, 'numpy')

378:         assert_equal(np.char.equal.__module__, 'numpy.char')

379:         assert_equal(np.fft.fft.__module__, 'numpy.fft')

380:         assert_equal(np.linalg.solve.__module__, 'numpy.linalg')

384:         assert_('axis' in signature.parameters)

394:         assert_equal(np.sum(MyArray()), 'yes')

412:         assert_equal(result, 1)

413:         proxy.value.__array_function__.assert_called_once_with(

415:         proxy.value.__array__.assert_not_called()

430:         assert_equal(np.sum(array), 'summed')

440:                 assert func is getattr(np, func.__name__)

458:             assert 'like' not in kwargs

475:         with assert_raises_regex(TypeError, 'no implementation found')
518:             assert type(array_like) is np.ndarray

528:             assert_equal(array_like, np_arr)

530:             assert type(array_like) is self.MyArray

531:             assert array_like.function is my_func

547:         with assert_raises_regex(TypeError,

569:                 assert type(array_like) is np.ndarray

571:                 assert_equal(np_res, data)

572:                 assert_equal(array_like, np_res)

574:                 assert type(array_like) is self.MyArray

575:                 assert array_like.function is self.MyArray.fromfile

583:         with assert_raises(TypeError)
Total asserts: 83

Filename: numpy/core/tests/test_scalar_ctors.py
8:     assert_equal, assert_almost_equal, assert_warns,

17:         assert_almost_equal(fsingle, 1.234)

18:         assert_almost_equal(fdouble, 1.234)

19:         assert_almost_equal(flongdouble, 1.234)

24:         assert_equal(fhalf, np.inf)

26:         assert_equal(fsingle, np.inf)

28:         assert_equal(fdouble, np.inf)

29:         flongdouble = assert_warns(RuntimeWarning, np.longdouble, '1e10000')

30:         assert_equal(flongdouble, np.inf)

33:         assert_equal(fhalf, -np.inf)

35:         assert_equal(fsingle, -np.inf)

37:         assert_equal(fdouble, -np.inf)

38:         flongdouble = assert_warns(RuntimeWarning, np.longdouble, '-1e10000')

39:         assert_equal(flongdouble, -np.inf)

46:         assert s == 'a'

48:         assert s == 'a'

57:         assert np.bytes_(-2) == b'-2'

61:         assert np.datetime_data(dt) == ('M', 2)

78:         assert_equal(1024, np.intp(1024))

81:         assert_equal(np.uint64(-2), np.uint64(18446744073709551614))

98:             assert arr.dtype.type is t1

100:             assert arr.dtype.type is t2

Total asserts: 22

Filename: numpy/core/tests/test_multiarray.py
27:     assert_, assert_raises, assert_warns, assert_equal, assert_almost_equal,

28:     assert_array_equal, assert_raises_regex, assert_array_almost_equal,

29:     assert_allclose, IS_PYPY, IS_PYSTON, HAS_REFCOUNT, assert_array_less,

82:         assert_raises(ValueError, runstring, 'self.a[0] = 3', mydict)

83:         assert_raises(ValueError, runstring, 'self.a[0
117:         with assert_raises(ValueError)
126:         assert_raises(ValueError, vals.setflags, write=True)

130:         assert_raises(ValueError, vals.setflags, write=True)

135:         assert_(vals.flags.writeable)

137:         assert_(vals.flags.writeable is False)

139:         assert_(vals.flags.writeable)

143:         assert_(vals.flags.writeable)

145:         assert_(vals.flags.writeable is False)

147:         assert_(vals.flags.writeable)

158:             assert_(vals.flags.writeable)

159:             assert_(isinstance(vals.base, bytes))

168:         assert not arr_writeable.flags.owndata

169:         assert arr_writeable.flags.writeable

174:         assert not view.flags.writeable

176:         assert view.flags.writeable

181:         assert not arr_readonly.flags.owndata

182:         assert not arr_readonly.flags.writeable

188:             assert not arr.flags.writeable

190:             with assert_raises(ValueError)
195:                 with assert_raises(DeprecationWarning)
198:             with assert_warns(DeprecationWarning)
209:             assert_(len(w) == 1)

224:         assert memoryview(a).readonly is not writeable

225:         assert a.__array_interface__['data'][1] is not writeable

226:         assert np.asarray(MyArr()).flags.writeable is writeable

229:         assert_equal(self.a.flags.carray, True)

230:         assert_equal(self.a.flags['C'], True)

231:         assert_equal(self.a.flags.farray, False)

232:         assert_equal(self.a.flags.behaved, True)

233:         assert_equal(self.a.flags.fnc, False)

234:         assert_equal(self.a.flags.forc, True)

235:         assert_equal(self.a.flags.owndata, True)

236:         assert_equal(self.a.flags.writeable, True)

237:         assert_equal(self.a.flags.aligned, True)

238:         assert_equal(self.a.flags.writebackifcopy, False)

239:         assert_equal(self.a.flags['X'], False)

240:         assert_equal(self.a.flags['WRITEBACKIFCOPY'], False)

244:         assert_(a.flags.aligned)

247:         assert_(a.flags.aligned)

251:         assert_(a.flags.aligned)

262:                 assert_equal(hash(st(-2**i)), hash(-2**i),

264:                 assert_equal(hash(st(2**(i - 1))), hash(2**(i - 1)),

266:                 assert_equal(hash(st(2**i - 1)), hash(2**i - 1),

270:                 assert_equal(hash(ut(2**(i - 1))), hash(2**(i - 1)),

272:                 assert_equal(hash(ut(2**i - 1)), hash(2**i - 1),

283:         assert_equal(self.one.shape, (10,))

284:         assert_equal(self.two.shape, (4, 5))

285:         assert_equal(self.three.shape, (2, 5, 6))

287:         assert_equal(self.three.shape, (10, 3, 2))

289:         assert_equal(self.one.strides, (self.one.itemsize,))

291:         assert_equal(self.two.strides, (5*num, num))

293:         assert_equal(self.three.strides, (30*num, 6*num, num))

294:         assert_equal(self.one.ndim, 1)

295:         assert_equal(self.two.ndim, 2)

296:         assert_equal(self.three.ndim, 3)

298:         assert_equal(self.two.size, 20)

299:         assert_equal(self.two.nbytes, 20*num)

300:         assert_equal(self.two.itemsize, self.two.dtype.itemsize)

301:         assert_equal(self.two.base, np.arange(20))

304:         assert_equal(self.one.dtype, np.dtype(np.int_))

305:         assert_equal(self.three.dtype, np.dtype(np.float_))

306:         assert_equal(self.one.dtype.char, 'l')

307:         assert_equal(self.three.dtype.char, 'd')

308:         assert_(self.three.dtype.str[0] in '<>')

309:         assert_equal(self.one.dtype.str[1], 'i')

310:         assert_equal(self.three.dtype.str[1], 'f')

318:         assert_(not isinstance(numpy_int, int))

328:         assert_equal(make_array(4, 4, -1), np.array([4, 3, 2, 1]))

329:         assert_raises(ValueError, make_array, 4, 4, -2)

330:         assert_raises(ValueError, make_array, 4, 2, -1)

331:         assert_raises(ValueError, make_array, 8, 3, 1)

332:         assert_equal(make_array(8, 3, 0), np.array([3]*8))

334:         assert_raises(ValueError, make_array, (2, 3), 5, np.array([-2, -3]))

349:         assert_equal(make_array(4, 4, -1), np.array([4, 3, 2, 1]))

350:         assert_equal(make_array(7, 3, 1), np.array([3, 4, 5, 6, 7, 8, 9]))

351:         assert_raises(ValueError, make_array, 4, 4, -2)

352:         assert_raises(ValueError, make_array, 4, 2, -1)

353:         assert_raises(RuntimeError, make_array, 8, 3, 1)

361:         assert_raises(ValueError, set_strides, x, (10*x.itemsize, x.itemsize))

366:         assert_raises(ValueError, set_strides, x[
374:         assert_raises(TypeError, set_strides, arr_0d, None)

382:             assert_equal(x, y)

390:         assert_array_equal(x, y)

396:         assert_equal(x['f1'][1], x['f1'][0])

401:         assert_array_equal(x['a'], [3.5, 3.5])

402:         assert_array_equal(x['b'], [-2, -2])

409:         assert_equal(r, np.ones((2, 6)))

414:         assert_equal(r, tgt)

417:         assert_equal(r, tgt)

421:         assert_equal(r, np.ones((1, 2, 6)))

425:         assert_equal(r, np.ones((2, 2, 6)))

429:         assert_equal(r, np.ones((2, 6, 6)))

433:         assert_equal(len(r), 2)

434:         assert_equal(r[0], [d, d + 1])

435:         assert_equal(r[1], d + 2)

441:         assert_equal(r, tgt)

443:         assert_equal(r, tgt.T)

446:         assert_raises(TypeError, np.array)

452:         assert_array_equal(e, [1, 3, 3])

455:         assert_array_equal(e, [1, 4, 3])

457:         assert_array_equal(d, [1, 4, 7])

464:         assert_array_equal(e, [[1, 2, -7], [1, 2, 3]])

465:         assert_array_equal(d, [[1, 3, 3], [1, 2, 3]])

469:         assert_array_equal(e, [[1, 3, 7], [1, 2, 3]])

470:         assert_array_equal(d, [[1, 5, 3], [1,2,3]])

474:         assert_(np.ascontiguousarray(d).flags.c_contiguous)

475:         assert_(np.ascontiguousarray(d).flags.f_contiguous)

476:         assert_(np.asfortranarray(d).flags.c_contiguous)

477:         assert_(np.asfortranarray(d).flags.f_contiguous)

479:         assert_(np.ascontiguousarray(d).flags.c_contiguous)

480:         assert_(np.asfortranarray(d).flags.f_contiguous)

516:         assert_equal(a, [[0, 1, 2], [0, 1, 2]])

518:         assert_equal(a, [[0, 0, 0], [1, 1, 1]])

529:         assert_equal(a, [[5, 4, 3], [2, 1, 0]])

535:         assert_raises(ValueError, assign, a, np.arange(12).reshape(2, 2, 3))

546:         assert_raises((AttributeError, TypeError), assign, C())

547:         assert_raises(ValueError, assign, [1])

566:         assert_equal(a1d[0], u'done')

580:         assert_raises(ValueError, operator.setitem, u, 0, [])

581:         assert_raises(ValueError, operator.setitem, b, 0, [])

583:         assert_raises(ValueError, operator.setitem, u, 0, bad_sequence())

584:         assert_raises(ValueError, operator.setitem, b, 0, bad_sequence())

597:             assert_equal(tiny1d[0], tinya)

601:             assert_equal(tiny1d[0], tinyb)

605:             assert_equal(tiny1d[0], tinya)

609:             assert_equal(tiny1d[0], tinyb)

613:             assert_equal(tiny1d[0], tinyb)

616:             assert_equal(arr[0], tinya)

624:         assert_equal(a[0], b"1.1234567890123457")

630:         assert_equal(d1, np.dtype(np.int32))

632:         assert_equal(d2, np.dtype(np.float64))

635:         assert_(np.dtype('<i4') != np.dtype('>i4'))

636:         assert_(np.dtype([('a', '<i4')]) != np.dtype([('a', '>i4')]))

641:         assert_equal(str(dt_int), "(numpy.int32, [('a', '<i2'), ('b', '<i2')])")

645:         assert_equal(repr(arr_int),

655:         assert_equal(a[...], 0)

656:         assert_equal(b[...], 'x')

657:         assert_(a[...].base is a)  # `a[...] is a` in numpy <1.9.

658:         assert_(b[...].base is b)  # `b[...] is b` in numpy <1.9.

662:         assert_equal(a[()], 0)

663:         assert_equal(b[()], 'x')

664:         assert_(type(a[()]) is a.dtype.type)

665:         assert_(type(b[()]) is str)

669:         assert_raises(IndexError, lambda x
670:         assert_raises(IndexError, lambda x
671:         assert_raises(IndexError, lambda x
672:         assert_raises(IndexError, lambda x
677:         assert_equal(a, 42)

679:         assert_equal(b.item(), '')

684:         assert_equal(a, 42)

686:         assert_equal(b.item(), '')

694:         assert_raises(IndexError, assign, a, 0, 42)

695:         assert_raises(IndexError, assign, b, 0, '')

696:         assert_raises(ValueError, assign, a, (), '')

700:         assert_equal(a[np.newaxis].shape, (1,))

701:         assert_equal(a[..., np.newaxis].shape, (1,))

702:         assert_equal(a[np.newaxis, ...].shape, (1,))

703:         assert_equal(a[..., np.newaxis].shape, (1,))

704:         assert_equal(a[np.newaxis, ..., np.newaxis].shape, (1, 1))

705:         assert_equal(a[..., np.newaxis, np.newaxis].shape, (1, 1))

706:         assert_equal(a[np.newaxis, np.newaxis, ...].shape, (1, 1))

707:         assert_equal(a[(np.newaxis,)*10].shape, (1,)*10)

715:         assert_raises(IndexError, subscript, a, (np.newaxis, 0))

716:         assert_raises(IndexError, subscript, a, (np.newaxis,)*50)

721:         assert_equal(x[()], 5)

724:         assert_equal(x[()], 6)

734:         assert_raises(ValueError, np.add, x, [1], x)

742:         assert_equal(xr, np.array(0))

743:         assert_(type(xr) is np.ndarray)

744:         assert_equal(xr.flags.contiguous, True)

745:         assert_equal(xr.flags.f_contiguous, True)

747:         assert_equal(xi, np.array(1))

748:         assert_(type(xi) is np.ndarray)

749:         assert_equal(xi.flags.contiguous, True)

750:         assert_equal(xi.flags.f_contiguous, True)

759:         assert_equal(a[...], 0)

760:         assert_equal(a[...].shape, ())

764:         assert_equal(a[()], 0)

765:         assert_equal(a[()].shape, ())

769:         assert_raises(IndexError, lambda x
770:         assert_raises(IndexError, lambda x
778:         assert_raises(TypeError, assign, a, 0, 42)

782:         assert_equal(a[np.newaxis].shape, (1,))

783:         assert_equal(a[..., np.newaxis].shape, (1,))

784:         assert_equal(a[np.newaxis, ...].shape, (1,))

785:         assert_equal(a[..., np.newaxis].shape, (1,))

786:         assert_equal(a[np.newaxis, ..., np.newaxis].shape, (1, 1))

787:         assert_equal(a[..., np.newaxis, np.newaxis].shape, (1, 1))

788:         assert_equal(a[np.newaxis, np.newaxis, ...].shape, (1, 1))

789:         assert_equal(a[(np.newaxis,)*10].shape, (1,)*10)

797:         assert_raises(IndexError, subscript, a, (np.newaxis, 0))

798:         assert_raises(IndexError, subscript, a, (np.newaxis,)*50)

804:         assert_equal(a, [1, 2, 3, 3])

808:         assert_equal(a, [0, 0, 1, 2])

813:         assert_equal(a, [3, 2, 1, 0])

817:         assert_equal(a, [[5, 4, 3], [2, 1, 0]])

821:         assert_equal(a, [[3, 4, 5], [0, 1, 2]])

826:         assert_equal(a, [2, 3, 4, 3, 4])

830:         assert_equal(a, [0, 1, 0, 1, 2])

834:         assert_equal(a, [4, 3, 2, 3, 4])

838:         assert_equal(a, [0, 1, 2, 1, 0])

842:         assert_equal(a, [2, 3, 4, 3, 4])

846:         assert_equal(a, [0, 1, 0, 1, 2])

858:         assert_raises(ValueError, np.array, x())

866:             assert_equal(np.array(nstr, dtype=type), result, err_msg=msg)

870:         assert arr.dtype == 'V8'  # current default

873:         assert arr.dtype == "V4"

884:         assert arr.dtype == "V4"

894:         assert_array_equal(arr, np.array([(1, 1), (2, 2)], dtype="i,i"))

913:         assert_raises(ValueError, np.empty, shape, dtype=np.int8)

914:         assert_raises(ValueError, np.zeros, shape, dtype=np.int8)

915:         assert_raises(ValueError, np.ones, shape, dtype=np.int8)

921:         with assert_raises(np.core._exceptions._ArrayMemoryError)
928:             assert_equal(np.count_nonzero(d), 0)

930:             assert_equal(d.sum(), 0)

931:             assert_(not d.any())

934:             assert_equal(np.count_nonzero(d), 0)

935:             assert_equal(d.sum(), 0)

936:             assert_(not d.any())

939:             assert_equal(np.count_nonzero(d), 0)

940:             assert_equal(d.sum(), 0)

941:             assert_(not d.any())

944:             assert_equal(np.count_nonzero(d), 0)

952:             assert_(not d.any())

961:         assert_array_equal(d, [0] * 13)

962:         assert_equal(np.count_nonzero(d), 0)

966:         assert_array_equal(d['k'], 0)

974:             assert_array_equal(np.zeros_like(d), d)

975:             assert_equal(np.zeros_like(d).dtype, d.dtype)

978:         assert_array_equal(np.zeros_like(d), d)

979:         assert_equal(np.zeros_like(d).dtype, d.dtype)

981:         assert_array_equal(np.zeros_like(d), d)

982:         assert_equal(np.zeros_like(d).dtype, d.dtype)

985:         assert_array_equal(np.zeros_like(d), d)

986:         assert_equal(np.zeros_like(d).dtype, d.dtype)

988:         assert_array_equal(np.zeros_like(d), d)

989:         assert_equal(np.zeros_like(d).dtype, d.dtype)

992:         assert_array_equal(np.zeros_like(d), d)

993:         assert_equal(np.zeros_like(d).dtype, d.dtype)

995:         assert_array_equal(np.zeros_like(d), d)

996:         assert_equal(np.zeros_like(d).dtype, d.dtype)

999:         assert_array_equal(np.zeros_like(d), d)

1000:         assert_equal(np.zeros_like(d).dtype, d.dtype)

1009:         assert_equal(np.array([4, 2**80]).dtype, object)

1010:         assert_equal(np.array([4, 2**80, 4]).dtype, object)

1011:         assert_equal(np.array([2**80, 4]).dtype, object)

1012:         assert_equal(np.array([2**80] * 3).dtype, object)

1013:         assert_equal(np.array([[1, 1],[1j, 1j]]).dtype, complex)

1014:         assert_equal(np.array([[1j, 1j],[1, 1]]).dtype, complex)

1015:         assert_equal(np.array([[1, 1, 1],[1, 1j, 1.], [1, 1, 1]]).dtype, complex)

1041:         assert_(a.shape == (1,))

1042:         assert_(a.dtype == np.dtype(object))

1043:         assert_raises(ValueError, np.array, [Fail()])

1057:         assert_equal(d.dtype, np.dtype(object))

1068:         assert_equal(len(a), 0)

1081:         with assert_raises(ValueError)
1098:         assert_equal(len(np.array(d)), 3)

1112:             assert_raises(ValueError, np.ndarray, buffer=buf, strides=(0,),

1117:         with assert_warns(np.VisibleDeprecationWarning)
1120:         assert_equal(a, b)

1126:         assert_equal(a.shape, (3,))

1127:         assert_equal(a.dtype, object)

1130:         assert_equal(a.shape, (3,))

1131:         assert_equal(a.dtype, object)

1134:         assert_equal(a.shape, (3,))

1135:         assert_equal(a.dtype, object)

1140:         assert_equal(a.shape, (3,))

1141:         assert_equal(a.dtype, object)

1144:         assert_equal(a.shape, (3,))

1145:         assert_equal(a.dtype, object)

1148:         assert a.shape == (3,)

1149:         assert a.dtype == object

1154:         assert np.array(outer).shape == (2,)

1155:         assert np.array([outer]).shape == (1, 2)

1161:         assert np.array(outer_ragged).shape == (2,)

1162:         assert np.array([outer_ragged]).shape == (1, 2,)

1177:         assert_array_equal(a.T['a'], a['a'].transpose(1, 0, 2, 3))

1182:         assert_equal(a['a'].shape, b['a'].shape)

1183:         assert_equal(a.T['a'].shape, a.T.copy()['a'].shape)

1192:         assert_equal(a == b, [True, True])

1193:         assert_equal(a != b, [False, False])

1195:         assert_equal(a == b, [True, False])

1196:         assert_equal(a != b, [False, True])

1200:             assert_equal(a == b, [False, False])

1201:             assert_equal(a != b, [True, True])

1206:                 assert_equal(a == b, [False, True])

1207:                 assert_equal(a != b, [True, False])

1212:         assert_equal(a == b, [[True, True, False], [False, False, True]])

1213:         assert_equal(b == a, [[True, True, False], [False, False, True]])

1216:         assert_equal(a == b, [[True, True, False], [False, False, True]])

1217:         assert_equal(b == a, [[True, True, False], [False, False, True]])

1220:         assert_equal(a == b, [[True, False, False], [False, False, True]])

1221:         assert_equal(b == a, [[True, False, False], [False, False, True]])

1226:         assert_equal(a == b, [[True, False, False], [False, False, True]])

1227:         assert_equal(b == a, [[True, False, False], [False, False, True]])

1237:             assert_equal(x == y, False)

1246:             assert_equal(x == y, False)

1252:         assert_equal(a == b, [False, True])

1258:         assert_(np.can_cast(a.dtype, [('a', '>i4')], casting='unsafe'))

1260:         assert_equal(b, a.byteswap().newbyteorder())

1261:         assert_equal(a['a'][0], b['a'][0])

1267:         assert_(np.can_cast(a.dtype, b.dtype, casting='equiv'))

1268:         assert_equal(a == b, [True, True])

1271:         assert_(np.can_cast(a.dtype, b.dtype, casting='equiv'))

1273:         assert_equal(a == c, [True, True])

1278:         assert_(np.can_cast(a.dtype, t, casting='safe'))

1280:         assert_equal((c == np.array([(5, 42), (10, 1)], dtype=t)),

1286:         assert_(np.can_cast(a.dtype, t, casting='same_kind'))

1288:         assert_equal((c == np.array([(5, 42), (10, 1)], dtype=t)),

1294:         assert_(not np.can_cast(a.dtype, t, casting='safe'))

1295:         assert_raises(TypeError, a.astype, t, casting='safe')

1297:         assert_(not np.can_cast(a.dtype, t, casting='equiv'))

1298:         assert_raises(TypeError, a.astype, t, casting='equiv')

1300:         assert_(not np.can_cast(a.dtype, t, casting='same_kind'))

1301:         assert_raises(TypeError, a.astype, t, casting='same_kind')

1302:         assert_(not np.can_cast(a.dtype, b.dtype, casting='no'))

1303:         assert_raises(TypeError, a.astype, b.dtype, casting='no')

1308:             assert_(not np.can_cast(a.dtype, t, casting=casting))

1310:             assert_(not np.can_cast(a.dtype, t, casting=casting))

1328:         assert_equal(x[0]['field'], np.ones(10, dtype='i4'))

1336:         assert_equal(b[0]['x'], np.arange(3))

1344:         assert_raises(ValueError, testassign)

1353:         assert_equal(x['S'], [b'', b'', b'', b''])

1354:         assert_equal(x['S'].itemsize, 0)

1357:         assert_equal(x['S'], [b'', b'', b'', b''])

1358:         assert_equal(x['I'], [0, 0, 0, 0])

1362:         assert_equal(x['S'], [b'', b'', b'', b''])

1363:         assert_equal(x['I'], [0, 0, 0, 0])

1367:         assert_equal(x['S'], [b'', b'', b'', b''])

1368:         assert_equal(x['I'], [0, 0, 0, 0])

1372:         assert_equal(y.itemsize, 0)

1373:         assert_equal(x['S'], y)

1376:         assert_equal(np.zeros(4, dtype=[('a', 'S0,S0'),

1378:         assert_equal(np.empty(3, dtype='S0,S0').itemsize, 0)

1379:         assert_equal(np.zeros(4, dtype='S0,u1')['f0'].itemsize, 0)

1382:         assert_equal(xx.itemsize, 0)

1383:         assert_equal(xx, [[b'', b''], [b'', b'']])

1385:         assert_equal(xx[
1386:         assert_array_equal(eval(repr(xx), dict(array=np.array)), xx)

1393:         assert_equal(yy.itemsize, 0)

1394:         assert_equal(xx, yy)

1399:             assert_equal(yy.itemsize, 0)

1400:             assert_equal(xx, yy)

1405:         assert_(b.base is a)

1424:         assert_equal(testassign(arr, v1), ans)

1425:         assert_equal(testassign(arr, v2), ans)

1426:         assert_equal(testassign(arr, v3), ans)

1427:         assert_raises(ValueError, lambda
1428:         assert_equal(testassign(arr, v5), ans)

1430:         assert_equal(arr, np.array([(1,4),(1,4)], dtype=dt))

1436:         assert_equal(a[0].item(), (2,1,3))

1442:         assert_equal(a[0].item(), (2,1))

1445:         with assert_raises(ValueError)
1452:         assert_equal(x[["f0","f1"]][0], x[0][["f0","f1"]])

1453:         assert_equal(x[0], x[0][()])

1457:         assert_raises(KeyError, lambda 
1458:         assert_raises(KeyError, lambda 
1459:         assert_raises(ValueError, lambda 
1468:         assert not scalar.flags.owndata  # view into the array

1469:         assert np.asarray(scalar).base is scalar

1471:         assert np.asarray(scalar, dtype=scalar.dtype).base is None

1475:         assert scalar.flags.owndata

1476:         assert np.asarray(scalar).base is None

1482:         assert_(a0 is b0)

1485:         assert_(a1 is b1)

1486:         assert_(np.array([True])[0] is a1)

1487:         assert_(np.array(True)[()] is a1)

1491:         assert_equal(d.sum(), d.size)

1492:         assert_equal(d[
1493:         assert_equal(d[
1496:         assert_equal(d.sum(), d.size)

1497:         assert_equal(d[
1498:         assert_equal(d[
1506:             assert_equal(np.count_nonzero(a), c)

1509:             assert_equal(np.count_nonzero(a), c)

1511:             assert_equal(np.count_nonzero(a), c)

1513:             assert_equal(np.count_nonzero(a), c)

1531:             assert_equal(np.count_nonzero(a), builtins.sum(a.tolist()))

1534:             assert_equal(np.count_nonzero(a), builtins.sum(a.tolist()))

1540:             assert_equal(bool(v), False)

1541:             assert_equal(bool(v[()]), False)

1542:             assert_equal(v.astype(bool), False)

1543:             assert_(isinstance(v.astype(bool), np.ndarray))

1544:             assert_(v[()].astype(bool) is np.False_)

1550:                 assert_equal(bool(v), True)

1551:                 assert_equal(bool(v[()]), True)

1552:                 assert_equal(v.astype(bool), True)

1553:                 assert_(isinstance(v.astype(bool), np.ndarray))

1554:                 assert_(v[()].astype(bool) is np.True_)

1581:         assert_equal(zs.itemsize, 0)

1583:         assert_equal(zs.itemsize, 0)

1585:         assert_equal(zs.itemsize, 0)

1621:             assert_equal(zs.view(dt).dtype, np.dtype(dt))

1624:             assert_equal(zs.view((dt, 1)).shape, (0,))

1628:         assert_equal(zs, pickle.loads(zs.dumps()))

1637:                 assert_equal(zs.dtype, zs2.dtype)

1646:         assert pk_load.size == 0

1661:         assert array_from_buffer[0] == -1, array_from_buffer[0]

1679:             assert_equal(a.all(axis=_ax, where=wh_lower),

1681:             assert_equal(np.all(a, axis=_ax, where=wh_lower),

1684:         assert_equal(a.all(where=wh_full), True)

1685:         assert_equal(np.all(a, where=wh_full), True)

1686:         assert_equal(a.all(where=False), True)

1687:         assert_equal(np.all(a, where=False), True)

1700:             assert_equal(a.any(axis=_ax, where=wh_middle),

1702:             assert_equal(np.any(a, axis=_ax, where=wh_middle),

1704:         assert_equal(a.any(where=wh_full), False)

1705:         assert_equal(np.any(a, where=wh_full), False)

1706:         assert_equal(a.any(where=False), False)

1707:         assert_equal(np.any(a, where=False), False)

1713:         assert_equal(out, tgt)

1717:         assert_equal(out, tgt)

1722:         assert_equal(out, tgt)

1726:         assert_equal(out, 1)

1736:         assert_equal(A, [2, 2, 3])

1739:         assert_equal(A, [[2, 2, 3], [2, 2, 3]])

1742:         assert_equal(A, [[2, 2, 3], [2, 2, 3]])

1746:         assert_raises(TypeError, oned.choose,np.void(0), [oned])

1750:         assert out is ret

1751:         assert_equal(out[()], 20)

1756:         assert_equal(y, np.array([0, 1, 2]))

1767:                 assert_raises(ArithmeticError, a.prod)

1768:                 assert_raises(ArithmeticError, a2.prod, axis=1)

1770:                 assert_equal(a.prod(axis=0), 26400)

1771:                 assert_array_equal(a2.prod(axis=0),

1773:                 assert_array_equal(a2.prod(axis=-1),

1781:         assert_equal(A, [1, 2, 2, 2, 3,

1785:         assert_equal(A, [1, 1, 2, 2, 3, 3,

1789:         assert_equal(A, [[1, 2, 3],

1794:         assert_equal(A, [[1, 2, 2, 2, 3, 3],

1798:         assert_equal(A, [[1, 2, 3],

1804:         assert_equal(A, [[1, 1, 2, 2, 3, 3],

1811:         assert_equal(arr.reshape(2, 6), tgt)

1814:         assert_equal(arr.reshape(3, 4), tgt)

1817:         assert_equal(arr.reshape((3, 4), order='F'), tgt)

1820:         assert_equal(arr.T.reshape((3, 4), order='C'), tgt)

1824:             assert_equal(arr.round(*round_args), expected)

1828:             assert_equal(out, expected)

1829:             assert out is res

1841:         assert_equal(a.squeeze(), [1, 2, 3])

1842:         assert_equal(a.squeeze(axis=(0,)), [[1], [2], [3]])

1843:         assert_raises(ValueError, a.squeeze, axis=(1,))

1844:         assert_equal(a.squeeze(axis=(2,)), [[1, 2, 3]])

1848:         assert_equal(a.transpose(), [[1, 3], [2, 4]])

1849:         assert_raises(ValueError, lambda
1850:         assert_raises(ValueError, lambda
1851:         assert_raises(ValueError, lambda
1863:         assert_equal(b, a[
1870:         assert_equal(b, a[
1888:             assert_equal(c, a, msg)

1891:             assert_equal(c, a, msg)

1903:             assert_equal(c, a, msg)

1906:             assert_equal(c, a, msg)

1928:             assert_equal(c, ai, msg)

1931:             assert_equal(c, ai, msg)

1941:                 assert_equal(c, arr, msg)

1952:             assert_equal(c, a, msg)

1955:             assert_equal(c, a, msg)

1966:             assert_equal(c, a, msg)

1969:             assert_equal(c, a, msg)

1980:             assert_equal(c, a, msg)

1983:             assert_equal(c, a, msg)

1994:             assert_equal(c, a, msg)

1997:             assert_equal(c, a, msg)

2007:         assert_equal(d, b, "test sort with axis=0")

2010:         assert_equal(d, c, "test sort with axis=1")

2013:         assert_equal(d, c, "test sort with default axis")

2021:             assert_equal(np.sort(a, axis=axis), a, msg)

2023:         assert_equal(np.sort(a, axis=None), a.ravel(), msg)

2037:             assert_equal(c, a, msg)

2056:             assert_raises(TypeError, arr.sort, kind=kind)

2065:             assert_raises(TypeError, arr.sort, kind=kind)

2079:         assert_equal(np.sort(d), do)

2080:         assert_equal(d[np.argsort(d)], do)

2083:         def assert_fortran(arr)
2084:             assert_(arr.flags.fortran)

2085:             assert_(arr.flags.f_contiguous)

2086:             assert_(not arr.flags.c_contiguous)

2088:         def assert_c(arr)
2089:             assert_(not arr.flags.fortran)

2090:             assert_(not arr.flags.f_contiguous)

2091:             assert_(arr.flags.c_contiguous)

2095:         assert_c(a.copy())

2096:         assert_c(a.copy('C'))

2097:         assert_fortran(a.copy('F'))

2098:         assert_fortran(a.copy('A'))

2102:         assert_c(a.copy())

2103:         assert_c(a.copy('C'))

2104:         assert_fortran(a.copy('F'))

2105:         assert_c(a.copy('A'))

2115:         assert_equal(r.id, np.array([14, 21, 32]))

2116:         assert_equal(r.word, np.array(['name', 'my', 'first']))

2117:         assert_equal(r.number, np.array([6.2, 3.1, 4.5]))

2120:         assert_equal(r.id, np.array([32, 21, 14]))

2121:         assert_equal(r.word, np.array(['first', 'my', 'name']))

2122:         assert_equal(r.number, np.array([4.5, 3.1, 6.2]))

2125:         assert_equal(r.id, np.array([21, 32, 14]))

2126:         assert_equal(r.word, np.array(['my', 'first', 'name']))

2127:         assert_equal(r.number, np.array([3.1, 4.5, 6.2]))

2129:         assert_raises_regex(ValueError, 'duplicate',

2140:         assert_equal(r['col2'], [1, 3, 255, 258])

2141:         assert_equal(r, np.array([('a', 1), ('c', 3), ('b', 255), ('d', 258)],

2156:                 assert_equal(a.copy().argsort(kind=kind), a, msg)

2157:                 assert_equal(b.copy().argsort(kind=kind), b, msg)

2165:             assert_equal(ai.copy().argsort(kind=kind), a, msg)

2166:             assert_equal(bi.copy().argsort(kind=kind), b, msg)

2171:             assert_equal(ai.copy().argsort(kind=kind), a, msg)

2172:             assert_equal(bi.copy().argsort(kind=kind), b, msg)

2179:                 assert_equal(arr.argsort(),

2190:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2191:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2201:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2202:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2212:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2213:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2223:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2224:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2233:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2234:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2243:             assert_equal(a.copy().argsort(kind=kind), r, msg)

2244:             assert_equal(b.copy().argsort(kind=kind), rr, msg)

2251:         assert_equal(a.copy().argsort(axis=0), b)

2252:         assert_equal(a.copy().argsort(axis=1), c)

2253:         assert_equal(a.copy().argsort(), c)

2260:             assert_equal(np.argsort(a, axis=axis),

2263:         assert_equal(np.argsort(a, axis=None),

2270:         assert_equal(a.argsort(kind='m'), r)

2273:         assert_equal(a.argsort(kind='m'), r)

2276:         assert_equal(a.argsort(kind='m'), r)

2279:         assert_equal(a.argsort(kind='m'), r)

2284:         assert_raises(ValueError, d.sort, kind=k)

2285:         assert_raises(ValueError, d.argsort, kind=k)

2298:         assert_equal(b, np.arange(3), msg)

2301:         assert_equal(b, np.arange(1, 4), msg)

2310:         assert_equal(b, np.arange(9), msg)

2313:         assert_equal(b, np.arange(1, 10), msg)

2317:         assert_equal(b, 1, msg)

2321:         assert_equal(b, 1, msg)

2326:         assert_equal(b, [0, 0, 0])

2328:         assert_equal(b, [0, 0, 0])

2332:         assert_equal(b, [0, 0, 1])

2334:         assert_equal(b, [0, 1, 1])

2338:         assert_equal(b, [0, 0, 2])

2340:         assert_equal(b, [0, 2, 2])

2349:         assert_equal(b, a)

2351:         assert_equal(b, a + 1)

2354:         assert_equal(b, a)

2356:         assert_equal(b, a + 1)

2361:         assert_equal(b, [5, 5, 4])

2363:         assert_equal(b, [5, 5, 5])

2378:             assert_equal(b, out)

2380:             assert_equal(b, out + 1)

2385:             assert_array_equal(b, np.zeros(len(a), dtype=np.intp))

2387:             assert_array_equal(b, np.zeros(0, dtype=np.intp))

2411:         assert_equal([a.searchsorted(v, 'left') for v in a], ind)

2412:         assert_equal([a.searchsorted(v, 'right') for v in a], ind + 1)

2413:         assert_equal([a.searchsorted(a[i], 'left') for i in ind], ind)

2414:         assert_equal([a.searchsorted(a[i], 'right') for i in ind], ind + 1)

2419:         assert_raises(TypeError, np.searchsorted, a, 0,

2421:         assert_raises(TypeError, np.searchsorted, a, 0, sorter=[1.1])

2422:         assert_raises(ValueError, np.searchsorted, a, 0, sorter=[1, 2, 3, 4])

2423:         assert_raises(ValueError, np.searchsorted, a, 0, sorter=[1, 2, 3, 4, 5, 6])

2426:         assert_raises(ValueError, np.searchsorted, a, 4, sorter=[0, 1, 2, 3, 5])

2427:         assert_raises(ValueError, np.searchsorted, a, 0, sorter=[-1, 0, 1, 2, 3])

2428:         assert_raises(ValueError, np.searchsorted, a, 0, sorter=[4, 0, -1, 2, 3])

2435:         assert_equal(b.searchsorted(k), a.searchsorted(k, sorter=s))

2441:         assert_equal(a.searchsorted(k, side='left', sorter=s), expected)

2443:         assert_equal(a.searchsorted(k, side='right', sorter=s), expected)

2455:         assert_equal(b, keys)

2457:         assert_equal(b, keys + 1)

2461:         assert_equal(b, keys)

2463:         assert_equal(b, keys + 1)

2484:             assert_equal(b, out)

2486:             assert_equal(b, out + 1)

2491:             assert_array_equal(b, np.zeros(len(a), dtype=np.intp))

2493:             assert_array_equal(b, np.zeros(0, dtype=np.intp))

2503:         assert_equal(b, out)

2505:         assert_equal(b, out + 1)

2514:         assert_(not isinstance(a.searchsorted(b, 'left'), A))

2515:         assert_(not isinstance(a.searchsorted(b, 'right'), A))

2516:         assert_(not isinstance(a.searchsorted(b, 'left', s), A))

2517:         assert_(not isinstance(a.searchsorted(b, 'right', s), A))

2523:         assert_raises(ValueError, d.argpartition, 10)

2524:         assert_raises(ValueError, d.argpartition, -11)

2530:         assert_raises(ValueError, d.partition, 10)

2531:         assert_raises(ValueError, d.partition, -11)

2536:         assert_raises(TypeError, d.argpartition, 9.)

2540:         assert_raises(TypeError, d_obj.argpartition, 9.)

2545:         assert_raises(TypeError, d.partition, 9.)

2549:         assert_raises(TypeError, d_obj.partition, 9.)

2559:             assert_equal(np.partition(a, kth, axis=axis), a, msg)

2561:         assert_equal(np.partition(a, kth, axis=None), a.ravel(), msg)

2571:             assert_equal(np.partition(a, kth, axis=axis),

2574:         assert_equal(np.partition(a, kth, axis=None),

2579:         assert_raises(TypeError, np.partition, d, 2, kind=1)

2580:         assert_raises(ValueError, np.partition, d, 2, kind="nonsense")

2581:         assert_raises(ValueError, np.argpartition, d, 2, kind="nonsense")

2582:         assert_raises(ValueError, d.partition, 2, axis=0, kind="nonsense")

2583:         assert_raises(ValueError, d.argpartition, 2, axis=0, kind="nonsense")

2586:             assert_array_equal(np.partition(d, 0, kind=k), d)

2587:             assert_array_equal(np.argpartition(d, 0, kind=k), d)

2589:             assert_array_equal(np.partition(d, 0, kind=k)[0], d)

2590:             assert_array_equal(d[np.argpartition(d, 0, kind=k)],

2597:             assert_array_equal(kth, okth)

2602:                 assert_array_equal(np.partition(d, 0, kind=k)[0], tgt[0])

2603:                 assert_array_equal(np.partition(d, 1, kind=k)[1], tgt[1])

2604:                 assert_array_equal(d[np.argpartition(d, 0, kind=k)],

2606:                 assert_array_equal(d[np.argpartition(d, 1, kind=k)],

2610:                 assert_array_equal(d, tgt)

2616:                 assert_array_equal(np.partition(d, 0, kind=k)[0], tgt[0])

2617:                 assert_array_equal(np.partition(d, 1, kind=k)[1], tgt[1])

2618:                 assert_array_equal(np.partition(d, 2, kind=k)[2], tgt[2])

2619:                 assert_array_equal(d[np.argpartition(d, 0, kind=k)],

2621:                 assert_array_equal(d[np.argpartition(d, 1, kind=k)],

2623:                 assert_array_equal(d[np.argpartition(d, 2, kind=k)],

2627:                 assert_array_equal(d, tgt)

2630:             assert_array_equal(np.partition(d, 0, kind=k), d)

2631:             assert_array_equal(d[np.argpartition(d, 0, kind=k)],

2636:             assert_equal(np.partition(d, 5, kind=k)[5], 5)

2637:             assert_equal(np.partition(d, 15, kind=k)[15], 15)

2638:             assert_array_equal(d[np.argpartition(d, 5, kind=k)],

2640:             assert_array_equal(d[np.argpartition(d, 15, kind=k)],

2645:             assert_equal(np.partition(d, 6, kind=k)[6], 6)

2646:             assert_equal(np.partition(d, 16, kind=k)[16], 16)

2647:             assert_array_equal(d[np.argpartition(d, 6, kind=k)],

2649:             assert_array_equal(d[np.argpartition(d, 16, kind=k)],

2652:             assert_array_equal(np.partition(d, -6, kind=k),

2654:             assert_array_equal(np.partition(d, -16, kind=k),

2656:             assert_array_equal(d[np.argpartition(d, -6, kind=k)],

2664:             assert_equal(np.partition(x, mid)[mid], mid)

2668:             assert_equal(np.partition(x, mid)[mid], mid)

2673:             assert_equal(np.partition(d, (2, -1))[-1], 4)

2674:             assert_equal(np.partition(d, (2, -1))[2], 1)

2675:             assert_equal(d[np.argpartition(d, (2, -1))][-1], 4)

2676:             assert_equal(d[np.argpartition(d, (2, -1))][2], 1)

2678:             assert_(np.isnan(d[np.argpartition(d, (2, -1))][-1]))

2679:             assert_(np.isnan(np.partition(d, (2, -1))[-1]))

2686:                 assert_equal(np.partition(d, i, kind=k)[i], tgt[i])

2687:             assert_array_equal(d[np.argpartition(d, 6, kind=k)],

2689:             assert_array_equal(d[np.argpartition(d, 16, kind=k)],

2693:             assert_array_equal(d, tgt)

2698:             assert_equal(np.partition(d, kth, kind=k)[kth], (0, 3, 7, 7))

2699:             assert_equal(d[np.argpartition(d, kth, kind=k)][kth], (0, 3, 7, 7))

2703:             assert_raises(ValueError, d.partition, 2)

2704:             assert_raises(np.AxisError, d.partition, 3, axis=1)

2705:             assert_raises(ValueError, np.partition, d, 2)

2706:             assert_raises(np.AxisError, np.partition, d, 2, axis=1)

2707:             assert_raises(ValueError, d.argpartition, 2)

2708:             assert_raises(np.AxisError, d.argpartition, 3, axis=1)

2709:             assert_raises(ValueError, np.argpartition, d, 2)

2710:             assert_raises(np.AxisError, np.argpartition, d, 2, axis=1)

2724:             assert_raises(ValueError, d.partition, 2, axis=0)

2725:             assert_raises(ValueError, d.partition, 11, axis=1)

2726:             assert_raises(TypeError, d.partition, 2, axis=None)

2727:             assert_raises(ValueError, np.partition, d, 9, axis=1)

2728:             assert_raises(ValueError, np.partition, d, 11, axis=None)

2729:             assert_raises(ValueError, d.argpartition, 2, axis=0)

2730:             assert_raises(ValueError, d.argpartition, 11, axis=1)

2731:             assert_raises(ValueError, np.argpartition, d, 9, axis=1)

2732:             assert_raises(ValueError, np.argpartition, d, 11, axis=None)

2737:                 aae = assert_array_equal

2738:                 at = assert_

2747:                     assert_equal(p[i], i)

2749:                     assert_array_less(p[
2751:                     assert_array_less(p[i], p[i + 1
2777:                     assert_equal(dc, np.partition(d, i, kind=k))

2780:                     assert_equal(dc, np.partition(d0, i, axis=0, kind=k))

2783:                     assert_equal(dc, np.partition(d1, i, axis=1, kind=k))

2785:     def assert_partitioned(self, d, kth)
2788:             assert_array_less(d[prev
2789:             assert_((d[k
2796:             assert_raises(ValueError, d.partition, kth)

2797:             assert_raises(ValueError, d.argpartition, kth)

2799:             assert_raises(ValueError, d.partition, kth, axis=0)

2800:             assert_raises(ValueError, d.partition, kth, axis=1)

2801:             assert_raises(ValueError, np.partition, d, kth, axis=1)

2802:             assert_raises(ValueError, np.partition, d, kth, axis=None)

2806:             self.assert_partitioned(p, (0, 3))

2807:             self.assert_partitioned(d[np.argpartition(d, (0, 3))], (0, 3))

2809:             assert_array_equal(p, np.partition(d, (-3, -1)))

2810:             assert_array_equal(p, d[np.argpartition(d, (-3, -1))])

2815:             assert_array_equal(np.arange(17), d)

2817:             assert_array_equal(np.arange(17), d[d.argpartition(range(d.size))])

2825:             self.assert_partitioned(p, keys)

2827:             self.assert_partitioned(p, keys)

2829:             assert_array_equal(np.partition(d, keys), p)

2830:             assert_array_equal(d[np.argpartition(d, keys)], p)

2834:             self.assert_partitioned(np.partition(d, [5]*4), [5])

2835:             self.assert_partitioned(np.partition(d, [5]*4 + [6, 13]),

2837:             self.assert_partitioned(d[np.argpartition(d, [5]*4)], [5])

2838:             self.assert_partitioned(d[np.argpartition(d, [5]*4 + [6, 13])],

2851:             assert_array_equal(p, pa)

2853:                 self.assert_partitioned(p[i,
2857:             assert_array_equal(p, pa)

2859:                 self.assert_partitioned(p[
2867:         assert_array_equal(np.partition(d, range(d.size),

2870:         assert_array_equal(d[np.argpartition(d, range(d.size),

2874:             assert_equal(np.partition(d, k, order=['age', 'height'])[k],

2876:             assert_equal(d[np.argpartition(d, k, order=['age', 'height'])][k],

2881:         assert_array_equal(np.partition(d, range(d.size)), tgt)

2883:             assert_equal(np.partition(d, k)[k], tgt[k])

2884:             assert_equal(d[np.argpartition(d, k)][k], tgt[k])

2889:         assert_raises(ValueError, d.partition, 2, kind=k)

2890:         assert_raises(ValueError, d.argpartition, 2, kind=k)

2902:                 assert_array_equal(np.partition(d, kth)[kth], tgt,

2911:         self.assert_partitioned(np.array(d)[p],[1])

2920:         assert_equal(x0.flatten(), y0)

2921:         assert_equal(x0.flatten('F'), y0f)

2922:         assert_equal(x0.flatten('F'), x0.T.flatten())

2923:         assert_equal(x1.flatten(), y1)

2924:         assert_equal(x1.flatten('F'), y1f)

2925:         assert_equal(x1.flatten('F'), x1.T.flatten())

2953:             assert_equal(func(eaf, eaf), eaf)

2954:             assert_equal(func(eaf.T, eaf), eaf)

2955:             assert_equal(func(eaf, eaf.T), eaf)

2956:             assert_equal(func(eaf.T, eaf.T), eaf)

2957:             assert_equal(func(eaf.T.copy(), eaf), eaf)

2958:             assert_equal(func(eaf, eaf.T.copy()), eaf)

2959:             assert_equal(func(eaf.T.copy(), eaf.T.copy()), eaf)

2965:             assert_equal(func(ebf, ebf), eaf)

2966:             assert_equal(func(ebf.T, ebf), eaf)

2967:             assert_equal(func(ebf, ebf.T), eaf)

2968:             assert_equal(func(ebf.T, ebf.T), eaf)

2973:             assert_equal(

2977:             assert_equal(

2981:             assert_equal(

2985:             assert_equal(

2989:             assert_equal(

2993:             assert_equal(

3003:             assert_equal(func(edf, edf.T), eddtf)

3004:             assert_equal(func(edf.T, edf), edtdf)

3015:         assert_equal(ret1, ret2)

3019:         assert_equal(ret1, ret2)

3027:         assert_(a.__array_interface__['data'][0] % dt.itemsize != 0)

3030:         assert_equal(ret1, ret2)

3034:         assert_equal(ret1, ret2)

3041:         assert_equal(np.dot(a, b), a.dot(b))

3042:         assert_equal(np.dot(np.dot(a, b), c), a.dot(b).dot(c))

3047:         assert_equal(c, np.dot(a, b))

3052:         assert_equal(c, np.dot(a, b))

3058:         assert_raises(TypeError, np.dot, c, A)

3059:         assert_raises(TypeError, np.dot, A, c)

3077:             assert_equal(x, y, err_msg=repr(dtype))

3080:             assert_raises(ValueError, np.dot, a, b, out=b[
3081:             assert_raises(ValueError, np.dot, a, b, out=b.T)

3102:         assert_raises(NotImplementedError, np.dot, A(), A())

3103:         assert_raises(NotImplementedError, np.matmul, A(), A())

3104:         assert_raises(NotImplementedError, np.inner, A(), A())

3111:         assert_(c is a)

3112:         assert_equal(c, b)

3115:         assert_(c.base is a.base)

3116:         assert_equal(c, b)

3120:         assert_equal(a.diagonal(), [0, 5, 10])

3121:         assert_equal(a.diagonal(0), [0, 5, 10])

3122:         assert_equal(a.diagonal(1), [1, 6, 11])

3123:         assert_equal(a.diagonal(-1), [4, 9])

3124:         assert_raises(np.AxisError, a.diagonal, axis1=0, axis2=5)

3125:         assert_raises(np.AxisError, a.diagonal, axis1=5, axis2=0)

3126:         assert_raises(np.AxisError, a.diagonal, axis1=5, axis2=5)

3127:         assert_raises(ValueError, a.diagonal, axis1=1, axis2=1)

3130:         assert_equal(b.diagonal(), [[0, 6], [1, 7]])

3131:         assert_equal(b.diagonal(0), [[0, 6], [1, 7]])

3132:         assert_equal(b.diagonal(1), [[2], [3]])

3133:         assert_equal(b.diagonal(-1), [[4], [5]])

3134:         assert_raises(ValueError, b.diagonal, axis1=0, axis2=0)

3135:         assert_equal(b.diagonal(0, 1, 2), [[0, 3], [4, 7]])

3136:         assert_equal(b.diagonal(0, 0, 1), [[0, 6], [1, 7]])

3137:         assert_equal(b.diagonal(offset=1, axis1=0, axis2=2), [[1], [3]])

3139:         assert_equal(b.diagonal(0, 2, 1), [[0, 3], [4, 7]])

3143:         assert_(not a.flags.writeable)

3144:         assert_(not a.flags.owndata)

3147:         assert_(not a.flags.writeable)

3148:         assert_(not a.flags.owndata)

3151:         assert_(not a.flags.writeable)

3152:         assert_(not a.flags.owndata)

3158:             assert_(sys.getrefcount(a) < 50)

3162:             assert_(sys.getrefcount(a) < 50)

3173:             assert_(sys.getrefcount(x) < 50)

3177:         assert_equal(a.trace(), 15)

3178:         assert_equal(a.trace(0), 15)

3179:         assert_equal(a.trace(1), 18)

3180:         assert_equal(a.trace(-1), 13)

3183:         assert_equal(b.trace(), [6, 8])

3184:         assert_equal(b.trace(0), [6, 8])

3185:         assert_equal(b.trace(1), [2, 3])

3186:         assert_equal(b.trace(-1), [4, 5])

3187:         assert_equal(b.trace(0, 0, 1), [6, 8])

3188:         assert_equal(b.trace(0, 0, 2), [5, 9])

3189:         assert_equal(b.trace(0, 1, 2), [3, 11])

3190:         assert_equal(b.trace(offset=1, axis1=0, axis2=2), [1, 3])

3194:         assert ret is out

3204:         assert_(isinstance(t, MyArray))

3215:             assert_equal(a, tgt)

3220:             assert_equal(a, tgt.reshape(2, 3))

3228:             assert_equal(a, tgt)

3233:             assert_equal(a, tgt.reshape(2, 3))

3238:         assert_raises(ValueError, a.put, [1, 3, 5], [1, 3, 5])

3244:         assert_raises(TypeError, np.put, bad_array, [0, 2], 5)

3248:         assert_equal(a.ravel(), [0, 1, 2, 3])

3249:         assert_(not a.ravel().flags.owndata)

3250:         assert_equal(a.ravel('F'), [0, 2, 1, 3])

3251:         assert_equal(a.ravel(order='C'), [0, 1, 2, 3])

3252:         assert_equal(a.ravel(order='F'), [0, 2, 1, 3])

3253:         assert_equal(a.ravel(order='A'), [0, 1, 2, 3])

3254:         assert_(not a.ravel(order='A').flags.owndata)

3255:         assert_equal(a.ravel(order='K'), [0, 1, 2, 3])

3256:         assert_(not a.ravel(order='K').flags.owndata)

3257:         assert_equal(a.ravel(), a.reshape(-1))

3260:         assert_equal(a.ravel(), [0, 1, 2, 3])

3261:         assert_equal(a.ravel(order='A'), [0, 2, 1, 3])

3262:         assert_equal(a.ravel(order='K'), [0, 2, 1, 3])

3263:         assert_(not a.ravel(order='A').flags.owndata)

3264:         assert_(not a.ravel(order='K').flags.owndata)

3265:         assert_equal(a.ravel(), a.reshape(-1))

3266:         assert_equal(a.ravel(order='A'), a.reshape(-1, order='A'))

3269:         assert_equal(a.ravel(), [2, 3, 0, 1])

3270:         assert_equal(a.ravel(order='C'), [2, 3, 0, 1])

3271:         assert_equal(a.ravel(order='F'), [2, 0, 3, 1])

3272:         assert_equal(a.ravel(order='A'), [2, 3, 0, 1])

3274:         assert_equal(a.ravel(order='K'), [2, 3, 0, 1])

3275:         assert_(a.ravel(order='K').flags.owndata)

3279:         assert_(a.ravel('K').flags.owndata)

3280:         assert_(a.ravel('C').flags.owndata)

3281:         assert_(a.ravel('F').flags.owndata)

3289:         assert_(a.ravel(order='K').flags.owndata)

3290:         assert_equal(a.ravel('K'), np.arange(0, 15, 2))

3298:         assert_(np.may_share_memory(a.ravel(order='K'), a))

3299:         assert_equal(a.ravel(order='K'), np.arange(2**3))

3303:         assert_(a.ravel(order='C').flags.owndata)

3304:         assert_(a.ravel(order='K').flags.owndata)

3305:         assert_equal(a.ravel('C'), [3, 2, 1, 0])

3306:         assert_equal(a.ravel('K'), [3, 2, 1, 0])

3314:             assert_(np.may_share_memory(a.ravel('K'), a))

3315:             assert_equal(a.ravel('K').strides, (a.dtype.itemsize,))

3320:             assert_equal(a.ravel(order), [0])

3321:             assert_(np.may_share_memory(a.ravel(order), a))

3326:         assert_equal(a.ravel('K'), [0, 4, 8, 12, 16, 20, 24, 28])

3327:         assert_equal(a.ravel('C'), [0, 4, 8, 12, 16, 20, 24, 28])

3328:         assert_equal(a.ravel('A'), [0, 4, 8, 12, 16, 20, 24, 28])

3329:         assert_equal(a.ravel('F'), [0, 16, 8, 24, 4, 20, 12, 28])

3332:         assert_equal(a.ravel('K'), [0, 2, 4, 6, 8, 10, 12, 14])

3333:         assert_equal(a.ravel('C'), [0, 2, 4, 6, 8, 10, 12, 14])

3334:         assert_equal(a.ravel('A'), [0, 2, 4, 6, 8, 10, 12, 14])

3335:         assert_equal(a.ravel('F'), [0, 8, 4, 12, 2, 10, 6, 14])

3342:         assert_(isinstance(a.ravel('C'), ArraySubclass))

3343:         assert_(isinstance(a.ravel('F'), ArraySubclass))

3344:         assert_(isinstance(a.ravel('A'), ArraySubclass))

3345:         assert_(isinstance(a.ravel('K'), ArraySubclass))

3348:         assert_(isinstance(a.ravel('C'), ArraySubclass))

3349:         assert_(isinstance(a.ravel('F'), ArraySubclass))

3350:         assert_(isinstance(a.ravel('A'), ArraySubclass))

3351:         assert_(isinstance(a.ravel('K'), ArraySubclass))

3356:         assert_(a.flags['OWNDATA'])

3359:         assert_raises(np.AxisError, a.swapaxes, -5, 0)

3360:         assert_raises(np.AxisError, a.swapaxes, 4, 0)

3361:         assert_raises(np.AxisError, a.swapaxes, 0, -5)

3362:         assert_raises(np.AxisError, a.swapaxes, 0, 4)

3372:                     assert_equal(c.shape, shape, str((i, j, k)))

3376:                     assert_equal(src[idx[j0], idx[j1], idx[j2], idx[j3]],

3380:                     assert_(not c.flags['OWNDATA'], str((i, j, k)))

3388:         assert_equal(a.real, ac.real)

3389:         assert_equal(a.imag, -ac.imag)

3390:         assert_equal(ac, a.conjugate())

3391:         assert_equal(ac, np.conjugate(a))

3395:         assert_equal(a.real, ac.real)

3396:         assert_equal(a.imag, -ac.imag)

3397:         assert_equal(ac, a.conjugate())

3398:         assert_equal(ac, np.conjugate(a))

3402:         assert_equal(a, ac)

3403:         assert_equal(ac, a.conjugate())

3404:         assert_equal(ac, np.conjugate(a))

3408:         assert_equal(a, ac)

3409:         assert_equal(ac, a.conjugate())

3410:         assert_equal(ac, np.conjugate(a))

3414:         assert_equal(ac, [k.conjugate() for k in a])

3415:         assert_equal(ac, a.conjugate())

3416:         assert_equal(ac, np.conjugate(a))

3419:         assert_raises(TypeError, lambda
3420:         assert_raises(TypeError, lambda
3428:         assert res is out

3429:         assert_array_equal(out, a.conjugate())

3443:             assert_equal(ap, a, msg)

3445:             assert_equal(bp, b, msg)

3447:             assert_equal(cp, c, msg)

3456:             assert_raises(TypeError, complex, a)

3460:         assert_raises(TypeError, complex, b)

3463:         assert_raises(TypeError, complex, c)

3466:         assert_raises(TypeError, complex, d)

3469:         assert_raises(TypeError, complex, e)

3473:         assert_(4.0 in np.arange(16.).reshape(4,4))

3474:         assert_(20.0 not in np.arange(16.).reshape(4,4))

3479:         assert_array_almost_equal(np.array([0.5]) * np.array([1.0, 2.0]),

3483:         assert_array_almost_equal(d * (d * np.array([1.0, 2.0])),

3492:         assert_equal(a, b)

3493:         assert_almost_equal(c, 1.)

3496:         assert_equal(a, b)

3497:         assert_equal(c, 0.5)

3504:         assert_almost_equal(c, 25 / 3)

3505:         assert_equal(a, 5)

3506:         assert_equal(b, 3)

3598:                             assert_(isinstance(result, tuple))

3605:                         assert_equal(arr_method(obj), NotImplemented, err_msg)

3607:                         assert_equal(arr_method(obj)[0], "__array_ufunc__",

3615:                             assert_(res.__class__ is obj.__class__, err_msg)

3617:                             assert_raises((TypeError, Coerced),

3623:                         assert_equal(res[0], "__array_ufunc__",

3625:                         assert_equal(res[1], ufunc, err_msg=err_msg)

3632:                             assert_(res.__class__ is obj.__class__, err_msg)

3635:                             assert_raises((TypeError, Coerced),

3643:                             assert_equal(arr_method(obj), NotImplemented,

3647:                             assert_equal(res[0], "__array_ufunc__", err_msg)

3648:                             assert_equal(res[1], ufunc, err_msg)

3649:                             assert_(type(res[-1]["out"]) is tuple, err_msg)

3650:                             assert_(res[-1]["out"][0] is arr, err_msg)

3656:                                 assert_(arr_imethod(obj) is arr, err_msg)

3658:                                 assert_raises((TypeError, Coerced),

3667:                     assert_equal(op_fn(obj, arr), "forward", err_msg)

3670:                             assert_equal(op_fn(arr, obj), "reverse", err_msg)

3672:                             assert_equal(op_fn(arr, obj)[0], "__array_ufunc__",

3675:                         assert_equal(ufunc(obj, arr)[0], "__array_ufunc__",

3720:         assert res.shape == (3,)

3721:         assert res[0] == 'result'

3732:         assert_('sig' not in kw and 'signature' not in kw)

3734:         assert_('sig' not in kw and 'signature' in kw)

3735:         assert_equal(kw['signature'], 'ii->i')

3737:         assert_('sig' not in kw and 'signature' in kw)

3738:         assert_equal(kw['signature'], 'ii->i')

3757:         assert_equal(np.sin(a), 0)

3758:         assert_equal(np.sin(dummy, a), (0,))

3759:         assert_equal(np.sin(dummy, out=a), (0,))

3760:         assert_equal(np.sin(dummy, out=(a,)), (0,))

3761:         assert_equal(np.sin(a, a), 0)

3762:         assert_equal(np.sin(a, out=a), 0)

3763:         assert_equal(np.sin(a, out=(a,)), 0)

3765:         assert_equal(np.modf(dummy, a), (0,))

3766:         assert_equal(np.modf(dummy, None, a), (1,))

3767:         assert_equal(np.modf(dummy, dummy, a), (1,))

3768:         assert_equal(np.modf(dummy, out=(a, None)), (0,))

3769:         assert_equal(np.modf(dummy, out=(a, dummy)), (0,))

3770:         assert_equal(np.modf(dummy, out=(None, a)), (1,))

3771:         assert_equal(np.modf(dummy, out=(dummy, a)), (1,))

3772:         assert_equal(np.modf(a, out=(dummy, a)), 0)

3773:         with assert_raises(TypeError)
3777:         assert_raises(ValueError, np.modf, dummy, out=(a,))

3780:         assert_equal(np.add(a, dummy), 0)

3781:         assert_equal(np.add(dummy, a), 1)

3782:         assert_equal(np.add(dummy, dummy, a), (0,))

3783:         assert_equal(np.add(dummy, a, a), 1)

3784:         assert_equal(np.add(dummy, dummy, out=a), (0,))

3785:         assert_equal(np.add(dummy, dummy, out=(a,)), (0,))

3786:         assert_equal(np.add(a, dummy, out=a), 0)

3802:         assert_equal(A[0], 30)

3803:         assert_(isinstance(A, OutClass))

3806:         assert_equal(A[0], 30)

3807:         assert_(isinstance(A, OutClass))

3818:         assert_equal(a ** 2.5, "POWER!")

3819:         with assert_raises(NotImplementedError)
3821:         with assert_raises(NotImplementedError)
3823:         with assert_raises(NotImplementedError)
3825:         with assert_raises(NotImplementedError)
3827:         with assert_raises(NotImplementedError)
3857:         assert_equal(obj_arr ** 0.5, pow_for(0.5, obj_arr))

3858:         assert_equal(obj_arr ** 0, pow_for(0, obj_arr))

3859:         assert_equal(obj_arr ** 1, pow_for(1, obj_arr))

3860:         assert_equal(obj_arr ** -1, pow_for(-1, obj_arr))

3861:         assert_equal(obj_arr ** 2, pow_for(2, obj_arr))

3869:         with assert_raises(TypeError)
3888:         assert_array_equal(orig, d)

3889:         assert_array_equal(res, d + d)

3903:         assert_array_equal(l[4], np.ones(100000))

3904:         assert_array_equal(res, l[4] + l[4])

3909:         assert_equal(((d + d) + 2**222).dtype, np.dtype('O'))

3912:         assert_equal(r.dtype, np.dtype('f8'))

3915:         assert_equal(r.dtype, np.dtype('f8'))

3918:         assert_equal(r.dtype, np.dtype('f8'))

3921:         assert_equal(r.dtype, np.dtype(np.int64))

3925:         assert_equal(((f + f) + f.astype(np.float64)).dtype, np.dtype('f8'))

3929:         assert_equal(((f + f) + d).dtype, d.dtype)

3931:         assert_equal(((d + d) + l).dtype, l.dtype)

3937:             assert_equal(r.dtype, np.dtype('f%d' % (c.itemsize // 2)))

3946:         assert_equal(r, 1)

3947:         assert_equal(r.shape, (2000, 2000))

3952:         assert_(type(~(a & a)) is np.bool_)

3966:         assert_equal(r, 0)

3972:         assert_equal(a, 1)

3978:         assert_(IsPythonScalar(b'foobar'))

3979:         assert_(IsPythonScalar(1))

3980:         assert_(IsPythonScalar(2**80))

3981:         assert_(IsPythonScalar(2.))

3982:         assert_(IsPythonScalar("a"))

3988:         assert_(isinstance(x[0], np.int_))

3989:         assert_(type(x[0, ...]) is np.ndarray)

4022:             assert_equal(arr_with_object.dtype,

4024:             assert_equal(arr_without_object.dtype,

4038:         assert len(buffers) > 0

4043:         assert_equal(f_contiguous_array, depickled_f_contiguous_array)

4047:         assert not non_contiguous_array.flags.c_contiguous

4048:         assert not non_contiguous_array.flags.f_contiguous

4056:             assert_equal(non_contiguous_array, depickled_non_contiguous_array)

4070:                 assert_equal(

4077:                 assert ref() is None

4088:         assert_equal(a, p)

4094:         assert_equal(a, p)

4100:         assert_equal(a, p)

4107:         assert_equal(a, p)

4113:         assert_equal(a, p)

4119:         assert_equal(a, p)

4125:         assert_equal(a, p)

4136:         assert_equal(original.dtype, new.dtype)

4143:         assert_array_equal(x, np.array([[2.0]]))

4147:         assert_array_equal(x, np.array([[[2.0]]]))

4152:         assert_array_equal(x, np.array([[2.0]]))

4155:         assert_array_equal(x, np.array([[[2.0]]]))

4160:         assert_array_equal(x[m], np.array([2]))

4167:         assert_array_equal(x[m], np.array([[5, 6, 7, 8]]))

4168:         assert_array_equal(x[m2], np.array([2, 5]))

4169:         assert_array_equal(x[m3], np.array([2]))

4175:         assert_array_equal(x, np.array([1, 5, 3, 4]))

4184:         assert_array_equal(x, np.array([[1, 2, 3, 4], [10, 10, 10, 10]]))

4187:         assert_array_equal(x, np.array([[1, 10, 3, 4], [10, 6, 7, 8]]))

4190:         assert_array_equal(x, np.array([[1, 10, 3, 4], [5, 6, 7, 8]]))

4197:         assert_array_equal(g1 == g2, [g1[i] == g2[i] for i in [0, 1, 2]])

4198:         assert_array_equal(g1 != g2, [g1[i] != g2[i] for i in [0, 1, 2]])

4199:         assert_array_equal(g1 <= g2, [g1[i] <= g2[i] for i in [0, 1, 2]])

4200:         assert_array_equal(g1 >= g2, [g1[i] >= g2[i] for i in [0, 1, 2]])

4201:         assert_array_equal(g1 < g2, [g1[i] < g2[i] for i in [0, 1, 2]])

4202:         assert_array_equal(g1 > g2, [g1[i] > g2[i] for i in [0, 1, 2]])

4207:         assert_array_equal(g1 == g2, [x == g2 for x in g1])

4208:         assert_array_equal(g1 != g2, [x != g2 for x in g1])

4209:         assert_array_equal(g1 < g2, [x < g2 for x in g1])

4210:         assert_array_equal(g1 > g2, [x > g2 for x in g1])

4211:         assert_array_equal(g1 <= g2, [x <= g2 for x in g1])

4212:         assert_array_equal(g1 >= g2, [x >= g2 for x in g1])

4217:         assert_array_equal(g1 == g2, [g1[i] == g2[i] for i in [0, 1, 2]])

4218:         assert_array_equal(g1 != g2, [g1[i] != g2[i] for i in [0, 1, 2]])

4219:         assert_array_equal(g1 <= g2, [g1[i] <= g2[i] for i in [0, 1, 2]])

4220:         assert_array_equal(g1 >= g2, [g1[i] >= g2[i] for i in [0, 1, 2]])

4221:         assert_array_equal(g1 < g2,  [g1[i] < g2[i] for i in [0, 1, 2]])

4222:         assert_array_equal(g1 > g2,  [g1[i] > g2[i] for i in [0, 1, 2]])

4251:         assert_equal(res, res_orig)

4252:         assert_(res.shape == new_shape)

4256:         assert_(res1 is outarray)

4257:         assert_equal(res, outarray)

4281:         assert_equal(res, res_orig)

4282:         assert_(res.shape == new_shape)

4287:         assert_(res1 is outarray)

4288:         assert_equal(res, outarray)

4318:             assert_(np.all(a_maxmin == aarg_maxmin.choose(

4328:         assert_raises(ValueError, arg_method, -1, out)

4331:         assert_raises(ValueError, arg_method, -1, out)

4335:         assert_raises(ValueError, arg_method, -1, out)

4339:         assert_equal(out, arg_method(-1))

4348:         assert ret is out

4357:         assert_equal(arg_method(), idx)

4371:         assert_equal(arg_method(1, out1), np_method(a, 1, out2))

4372:         assert_equal(out1, out2)

4377:         assert_equal(arg_method(out=out1, axis=0),

4379:         assert_equal(out1, out2)

4390:         assert_equal(arg_method(), 0)

4392:         assert_equal(arg_method(), 3)

4394:         assert_equal(arg_method(), 1)

4501:         assert_equal(np.argmax(arr), pos, err_msg="%r" % arr)

4502:         assert_equal(arr[np.argmax(arr)], val, err_msg="%r" % arr)

4507:         assert_equal(np.argmax(rarr), rpos, err_msg="%r" % rarr)

4508:         assert_equal(rarr[np.argmax(rarr)], val, err_msg="%r" % rarr)

4513:         assert_equal(np.argmax(rarr), rpos, err_msg="%r" % rarr)

4514:         assert_equal(rarr[np.argmax(rarr)], val, err_msg="%r" % rarr)

4520:         assert_equal(np.argmax(a), 1)

4522:         assert_equal(np.argmax(a), 1)

4525:         assert_equal(np.argmax(a), 1)

4527:         assert_equal(np.argmax(a), 1)

4530:         assert_equal(np.argmax(a), 1)

4532:         assert_equal(np.argmax(a), 1)

4535:         assert_equal(np.argmax(a), 1)

4537:         assert_equal(np.argmax(a), 1)

4644:         assert_equal(np.argmin(arr), pos, err_msg="%r" % arr)

4645:         assert_equal(arr[np.argmin(arr)], min_val, err_msg="%r" % arr)

4650:         assert_equal(np.argmin(rarr), rpos, err_msg="%r" % rarr)

4651:         assert_equal(rarr[np.argmin(rarr)], min_val, err_msg="%r" % rarr)

4656:         assert_equal(np.argmin(rarr), rpos, err_msg="%r" % rarr)

4657:         assert_equal(rarr[np.argmin(rarr)], min_val, err_msg="%r" % rarr)

4662:         assert_equal(np.argmin(a), 1)

4664:         assert_equal(np.argmin(a), 1)

4667:         assert_equal(np.argmin(a), 1)

4669:         assert_equal(np.argmin(a), 1)

4672:         assert_equal(np.argmin(a), 1)

4674:         assert_equal(np.argmin(a), 1)

4677:         assert_equal(np.argmin(a), 1)

4679:         assert_equal(np.argmin(a), 1)

4684:         assert_raises(np.AxisError, np.amax, 1, 1)

4685:         assert_raises(np.AxisError, np.amin, 1, 1)

4687:         assert_equal(np.amax(1, axis=0), 1)

4688:         assert_equal(np.amin(1, axis=0), 1)

4689:         assert_equal(np.amax(1, axis=None), 1)

4690:         assert_equal(np.amin(1, axis=None), 1)

4693:         assert_raises(np.AxisError, np.amax, [1, 2, 3], 1000)

4694:         assert_equal(np.amax([[1, 2, 3]], axis=1), 3)

4700:             assert_equal(np.amin(a), a[0])

4701:             assert_equal(np.amax(a), a[9])

4703:             assert_equal(np.amin(a), a[3])

4704:             assert_equal(np.amax(a), a[3])

4711:         assert_almost_equal(res.ravel(), 250*sk)

4716:         assert_(np.all(x >= cmin))

4717:         assert_(np.all(x <= cmax))

4749:                 assert_equal(x.dtype.byteorder, byteorder)

4779:         assert_(np.all(x >= 3))

4781:         assert_(np.all(x >= 3))

4783:         assert_(np.all(x <= 4))

4789:         assert_array_equal(result, expected)

4797:         assert_equal(out, tgt)

4801:         assert_equal(out, tgt)

4807:         assert_equal(out, tgt)

4812:         assert_equal(out, 1)

4818:         assert_equal(x[mask], np.array(val, T))

4837:         assert_raises(ValueError, np.putmask, np.array([1, 2, 3]), [True], 5)

4843:         assert_array_equal(x, [-1, 2, -1])

4850:         assert_array_equal(rec['x'], [10, 5])

4851:         assert_array_equal(rec['y'], [2, 4])

4852:         assert_array_equal(rec['z'], [3, 3])

4854:         assert_array_equal(rec['x'], [10, 5])

4855:         assert_array_equal(rec['y'], [11, 4])

4856:         assert_array_equal(rec['z'], [3, 3])

4862:         assert_equal(x, np.array([True, True, False, True]))

4866:         assert_equal(x, np.array([True, True, True, True]))

4879:         assert_array_equal(x.take(ind, axis=0), x)

4897:         assert_raises(IndexError, x.take, [0, 1, 2], axis=0)

4898:         assert_raises(IndexError, x.take, [-3], axis=0)

4899:         assert_array_equal(x.take([-1], axis=0)[0], x[1])

4904:         assert_array_equal(x.take([-1], axis=0, mode='clip')[0], x[0])

4905:         assert_array_equal(x.take([2], axis=0, mode='clip')[0], x[1])

4910:         assert_array_equal(x.take([-1], axis=0, mode='wrap')[0], x[1])

4911:         assert_array_equal(x.take([2], axis=0, mode='wrap')[0], x[0])

4912:         assert_array_equal(x.take([3], axis=0, mode='wrap')[0], x[1])

4917:         assert_array_equal(x.take([0, 2, 1]), [1, 3, 2])

4924:         assert_(rec1['x'] == 5.0 and rec1['y'] == 4.0)

4930:         assert_equal(y, np.array([1, 2, 3]))

4939:         assert ret is out

4953:         assert_array_equal(idx, expected_idx)

4954:         assert_array_equal(a[idx], np.sort(a))

4962:         assert_array_equal(idx, expected_idx)

4969:         assert_array_equal(idx, expected_idx)

4975:         assert_array_equal(idx, expected_idx)

4984:             assert_array_equal(left, right)

4988:             assert_array_equal(idx, np.lexsort((u.astype('O'), v)))

4989:             assert_array_equal(idx, np.lexsort((u, v.astype('O'))))

4991:             assert_array_equal(idx, np.lexsort((u, v)))

4995:         assert_raises(np.AxisError, np.lexsort, x, axis=2)

5022:         assert_raises(OSError, np.fromfile, b, np.uint8, 80)

5024:         assert_raises(OSError, lambda x
5029:         assert_array_equal(v, y)

5035:         assert_array_equal(d, e)

5041:         assert_array_equal(d, e)

5045:         assert d.shape == (0,)

5051:         assert_(y.size == 0, "Array not empty")

5057:         assert_(y.size == 0, "Array not empty")

5065:         assert_array_equal(y, x.flat)

5070:         assert_array_equal(y, x.flat)

5076:         assert_array_equal(y, x)

5081:         assert_array_equal(y, x.flat)

5085:         assert_array_equal(y, x.flatten('F'))

5093:         assert_array_equal(x[nan_mask], y[nan_mask])

5094:         assert_array_almost_equal(x[~nan_mask], y[~nan_mask], decimal=5)

5100:         assert_array_equal(x, y)

5112:             assert_raises(OSError, np.fromfile, f, dtype=x.dtype)

5119:             assert_array_equal(y, x.flat)

5125:         assert_equal(os.path.getsize(tmp_filename), d.nbytes)

5126:         assert_array_equal(d, np.fromfile(tmp_filename))

5131:             assert_equal(os.path.getsize(tmp_filename), d.nbytes * 2)

5136:         assert_array_equal(d, np.fromfile(tmp_filename))

5139:         assert_equal(os.path.getsize(tmp_filename), d.nbytes * 2)

5146:         assert_array_equal(y, x.flat)

5166:                 assert_equal(pos, 10, err_msg=err_msg)

5184:             assert_equal(pos, 10 + 2 + 8, err_msg=err_msg)

5191:             assert_equal(pos, 10, err_msg=err_msg)

5200:             assert_raises_regex(ValueError, "Cannot read into object array",

5203:         assert_raises_regex(ValueError, "Cannot read into object array",

5212:             assert_array_equal(y, x.flat)

5221:             assert_array_equal(

5228:             assert_array_equal(z, x.flat[offset_items+count_items+1
5234:             assert_raises_regex(

5254:                     assert_raises(exc, np.fromfile, f)

5263:         assert_array_equal(y, value)

5268:         assert_array_equal(y, value)

5296:             assert False, request.param

5344:             assert_(len(a) == fourgbplus)

5346:             assert_((a[
5347:             assert_((a[-n
5378:         with assert_warns(DeprecationWarning)
5397:         assert_(y.dtype == '?')

5398:         assert_array_equal(y, v)

5406:         #assert_equal(s, '1.51,2.0,3.51,4.0')

5408:         assert_array_equal(x,y)

5416:         assert_equal(s, '1.51,2.00,3.51,4.00')

5421:             assert_raises(OSError, lambda
5426:         assert_raises(OSError, lambda
5434:         assert_array_equal(x, res)

5437:         with assert_warns(DeprecationWarning)
5440:             assert_array_equal(x, res)

5467:         assert_array_equal(res, expected)

5477:         assert_array_equal(np.frombuffer(buf, dtype=dt), x.flat)

5484:         assert new.base is arr

5487:         assert_array_equal(np.frombuffer(b''), np.array([]))

5523:         assert_(testpassed)

5524:         assert_(self.a.flat[12] == 12.0)

5532:         assert_(testpassed)

5533:         assert_(self.b.flat[4] == 12.0)

5541:         assert_(c.flags.writeable is False)

5542:         assert_(d.flags.writeable is False)

5543:         assert_(e.flags.writeable is True)

5544:         assert_(f.flags.writeable is False)

5545:         assert_(c.flags.writebackifcopy is False)

5546:         assert_(d.flags.writebackifcopy is False)

5547:         assert_(e.flags.writebackifcopy is False)

5548:         assert_(f.flags.writebackifcopy is False)

5563:             assert_(abs(sys.getrefcount(ind) - rc_ind) < 50)

5564:             assert_(abs(sys.getrefcount(indtype) - rc_indtype) < 50)

5575:         assert it.index == it.base.size

5587:         assert_array_equal(x.flat[
5589:         assert_array_equal(x[9
5594:         assert_raises(ValueError, x.resize, (5, 1))

5604:         assert_array_equal(x, np.eye(3)[0,
5609:         assert_array_equal(x, np.eye(3))

5611:         assert_array_equal(x, np.eye(3))

5618:             assert_equal(x.shape, ())

5619:             assert_equal(x.size, 1)

5622:             assert_equal(x.shape, (1,))

5623:             assert_equal(x.size, 1)

5626:         assert_raises(TypeError, np.eye(3).resize, 'hi')

5627:         assert_raises(ValueError, np.eye(3).resize, -1)

5628:         assert_raises(TypeError, np.eye(3).resize, order=1)

5629:         assert_raises(TypeError, np.eye(3).resize, refcheck='hi')

5638:         assert_(x.shape == (3, 2, 1))

5647:         assert_array_equal(x[0], np.eye(3))

5648:         assert_array_equal(x[1], np.zeros((3, 3)))

5658:         assert_equal(a.shape, (15,))

5659:         assert_array_equal(a['k'][-5
5660:         assert_array_equal(a['k'][
5673:         assert_raises(ValueError, x.resize, (5, 1))

5681:         assert_equal(dt.names, ['p', 'q'])

5688:         assert_raises(ValueError, test_dtype_init)

5693:         assert_raises(TypeError, np.dtype, [(b'a', int)])

5694:         assert_raises(TypeError, np.dtype, [(('b', b'a'), int)])

5697:         assert_raises(TypeError, dt.__getitem__, b'a')

5700:         assert_raises(IndexError, x.__getitem__, b'a')

5703:         assert_raises(IndexError, y.__getitem__, b'a')

5710:         assert_raises(ValueError, test_dtype_unicode)

5716:         assert_equal(x['a'][0], 0)

5717:         assert_equal(x['b'][0], 1)

5725:         assert_equal(x[u'b'], np.array([1, 2, 3]))

5733:         assert_raises(IndexError, a.__setitem__, b'f1', 1)

5734:         assert_raises(IndexError, a.__getitem__, b'f1')

5735:         assert_raises(IndexError, a['f1'].__setitem__, b'sf1', 1)

5736:         assert_raises(IndexError, a['f1'].__getitem__, b'sf1')

5740:         assert_equal(b[fn1], 1)

5742:         assert_raises(ValueError, b.__setitem__, fnn, 1)

5743:         assert_raises(ValueError, b.__getitem__, fnn)

5745:         assert_equal(b[fn1], 2)

5747:         assert_raises(ValueError, b[0].__setitem__, fnn, 1)

5748:         assert_raises(ValueError, b[0].__getitem__, fnn)

5753:         assert_equal(b[fn3][sfn1], 1)

5754:         assert_raises(ValueError, b[fn3].__setitem__, fnn, 1)

5755:         assert_raises(ValueError, b[fn3].__getitem__, fnn)

5760:         assert_equal(b[['f1', 'f2']][0].tolist(), (2, 3))

5761:         assert_equal(b[['f2', 'f1']][0].tolist(), (3, 2))

5762:         assert_equal(b[['f1', 'f3']][0].tolist(), (2, (1,)))

5765:         assert_raises(ValueError, a.__setitem__, u'\u03e0', 1)

5766:         assert_raises(ValueError, a.__getitem__, u'\u03e0')

5775:         assert_(hash(a[0]) == hash(a[1]))

5776:         assert_(hash(a[0]) == hash(b[0]))

5777:         assert_(hash(a[0]) != hash(b[1]))

5778:         assert_(hash(c[0]) == hash(a[0]) and c[0] == a[0])

5782:         assert_raises(TypeError, hash, a[0])

5794:         assert_(v.base is a)

5795:         assert_(v.dtype == np.dtype({'names'
5799:         assert_equal(a[0].item(), (4, 1, 5))

5810:         assert_array_equal(y, z)

5811:         assert_array_equal(y, [67305985, 134678021])

5839:             assert_equal(np.mean([x]), 1.)

5840:             assert_equal(np.std([x]), 0.)

5841:             assert_equal(np.var([x]), 0.)

5848:                 assert_(res.ndim == mat.ndim)

5849:                 assert_(res.shape[axis] == 1)

5852:                 assert_(res.shape == (1, 1))

5860:             assert_almost_equal(res, out)

5861:             assert_almost_equal(res, tgt)

5863:         assert_raises(ValueError, f, mat, axis=1, out=out)

5865:         assert_raises(ValueError, f, mat, axis=1, out=out)

5877:             assert_(res is tgt)

5880:             assert_(res is Decimal)

5888:                 assert_(res is tgt)

5891:                 assert_(res is tgt)

5899:                 assert_(res is tgt)

5902:                 assert_(res is tgt)

5911:                 assert_(res is tgt)

5914:                 assert_(res is tgt)

5928:         #        assert_(res is tgt)

5931:         #        assert_(res is tgt)

5938:                 assert_(res is tgt)

5941:                 assert_(res is tgt)

5954:                 assert_almost_equal(res, tgt)

5955:                 assert_almost_equal(res, tgt)

5964:                     assert_(not (res < 0).any())

5965:                     assert_(len(w) > 0)

5966:                     assert_(issubclass(w[0].category, RuntimeWarning))

5974:                     assert_(np.isnan(f(A, axis=axis)).all())

5975:                     assert_(len(w) > 0)

5976:                     assert_(issubclass(w[0].category, RuntimeWarning))

5980:                     assert_equal(f(A, axis=axis), np.zeros([]))

5987:                 assert_almost_equal(res, tgt)

5991:                 assert_almost_equal(res, tgt)

5996:         assert_(_mean(np.ones(100000, dtype='float16')) == 1)

6001:         with assert_raises(np.core._exceptions.AxisError)
6019:             assert_allclose(a.mean(axis=_ax, where=_wh),

6021:             assert_allclose(np.mean(a, axis=_ax, where=_wh),

6027:         assert_allclose(a3d.mean(axis=2, where=_wh_partial),

6029:         assert_allclose(np.mean(a3d, axis=2, where=_wh_partial),

6033:             assert_allclose(a.mean(axis=1, where=wh_partial),

6036:             assert_equal(a.mean(where=False), np.nan)

6038:             assert_equal(np.mean(a, where=False), np.nan)

6047:                 assert_almost_equal(res, tgt)

6062:             assert_almost_equal(res, tgt, decimal=ndec)

6073:             assert_almost_equal(res, tgt)

6080:         assert_almost_equal(cmat.var(), cmat_swapped.var())

6085:         with assert_raises(np.core._exceptions.AxisError)
6103:             assert_allclose(a.var(axis=_ax, where=_wh),

6105:             assert_allclose(np.var(a, axis=_ax, where=_wh),

6111:         assert_allclose(a3d.var(axis=2, where=_wh_partial),

6113:         assert_allclose(np.var(a3d, axis=2, where=_wh_partial),

6116:         assert_allclose(np.var(a, axis=1, where=wh_full),

6118:         assert_allclose(np.var(a, axis=0, where=wh_partial),

6121:             assert_equal(a.var(where=False), np.nan)

6123:             assert_equal(np.var(a, where=False), np.nan)

6130:                 assert_almost_equal(res, tgt)

6152:             assert_allclose(a.std(axis=_ax, where=_wh), _res)

6153:             assert_allclose(np.std(a, axis=_ax, where=_wh), _res)

6158:         assert_allclose(a3d.std(axis=2, where=_wh_partial),

6160:         assert_allclose(np.std(a3d, axis=2, where=_wh_partial),

6163:         assert_allclose(a.std(axis=1, where=whf),

6165:         assert_allclose(np.std(a, axis=1, where=whf),

6167:         assert_allclose(a.std(axis=0, where=whp),

6169:         assert_allclose(np.std(a, axis=0, where=whp),

6172:             assert_equal(a.std(where=False), np.nan)

6174:             assert_equal(np.std(a, where=False), np.nan)

6189:         assert_(res.info == dat.info)

6191:         assert_(res.info == dat.info)

6193:         assert_(res.info == dat.info)

6206:             assert_(np.isscalar(res))

6207:             assert_equal(np.vdot(b, b), 3)

6214:             assert_(np.isscalar(res))

6215:             assert_equal(np.vdot(b, b), 3)

6220:         assert_(np.isscalar(res))

6221:         assert_equal(np.vdot(b, b), True)

6229:         assert_equal(np.vdot(a, b), res)

6230:         assert_equal(np.vdot(b, a), res)

6231:         assert_equal(np.vdot(b, b), res)

6244:             assert_equal(np.vdot(a, b),

6246:             assert_equal(np.vdot(a, b.copy()),

6248:             assert_equal(np.vdot(a.copy(), b),

6250:             assert_equal(np.vdot(a.copy('F'), b),

6252:             assert_equal(np.vdot(a, b.copy('F')),

6271:         assert_almost_equal(res, tgt, decimal=self.N)

6278:         assert_almost_equal(res, tgt, decimal=self.N)

6284:         assert_almost_equal(res, tgt, decimal=self.N)

6290:         assert_almost_equal(res, tgt, decimal=self.N)

6296:         assert_almost_equal(res, tgt, decimal=self.N)

6302:         assert_almost_equal(res, tgt, decimal=self.N)

6308:         assert_almost_equal(res, tgt, decimal=self.N)

6314:         assert_almost_equal(res, tgt, decimal=self.N)

6321:         assert_almost_equal(res, tgt, decimal=self.N)

6328:         assert_almost_equal(res, tgt, decimal=self.N)

6336:         assert_almost_equal(res, tgt, decimal=self.N)

6344:         assert_almost_equal(res, tgt, decimal=self.N)

6354:             assert_(res.shape == tgt.shape)

6355:             assert_almost_equal(res, tgt, decimal=self.N)

6387:         assert_equal(zeros[0].array, zeros_test[0].array)

6388:         assert_equal(zeros[1].array, zeros_test[1].array)

6398:         assert_allclose(c, d)

6411:             assert_equal(sys.getrefcount(r), 2)

6413:         assert_array_equal(r2, r)

6414:         assert_(r is dot(f, v, out=r))

6419:         assert_(r is dot(f, v, r))

6420:         assert_array_equal(r2, r)

6430:         assert_raises(ValueError, dot, f, v, r)

6433:         assert_raises(ValueError, dot, f, v, r)

6436:         assert_raises(ValueError, dot, f, v, r)

6439:         assert_raises(ValueError, dot, f, v, r)

6440:         assert_raises(ValueError, dot, f, v, r.T)

6443:         assert_raises(ValueError, dot, f, v, r[
6444:         assert_raises(ValueError, dot, f, v, r[
6447:         assert_raises(ValueError, dot, f, v, r)

6450:         assert_raises(ValueError, dot, f, v, r)

6458:         assert_equal(np.dot(a, b), res)

6459:         assert_equal(np.dot(b, a), res)

6460:         assert_equal(np.dot(b, b), res)

6480:         def assert_dot_close(A, X, desired)
6481:             assert_allclose(np.dot(A, X), desired, rtol=1e-5, atol=1e-7)

6496:             assert_dot_close(A_f, X_f, desired)

6501:             assert_dot_close(A_f_2, X_f, desired)

6508:             assert_dot_close(A_f_22, X_f_2, desired)

6511:                 assert_equal(A_f_22.strides, (8, 8 * m))

6513:                 assert_equal(A_f_22.strides, (8 * n, 8))

6514:             assert_equal(X_f_2.strides, (8,))

6517:             assert_dot_close(A_f_22, X_f_2c, desired)

6522:             assert_dot_close(A_f_12, X_f_2c, desired)

6524:             assert_dot_close(A_f_12, X_f_2, desired)

6552:             assert_raises(ValueError, self.matmul, a, b)

6565:             assert_(res.shape == (2, 1, 1))

6572:             assert_(np.array(c).shape == ())

6582:                 assert_(res.dtype == dt)

6587:                 assert_(type(res) is np.dtype(dt).type)

6597:             assert_equal(res, tgt)

6599:             assert_equal(res, tgt)

6604:         assert_equal(res, True)

6615:             assert_equal(res, tgt1)

6618:             assert_equal(res, tgt2)

6623:         assert_equal(res, True)

6636:             assert_equal(res, tgt1)

6638:             assert_equal(res, tgt2)

6648:         assert_equal(res, tgt1)

6650:         assert_equal(res, tgt2)

6663:             assert_equal(res, tgt1)

6665:             assert_equal(res, tgt2)

6675:         assert_equal(res, tgt1)

6677:         assert_equal(res, tgt2)

6698:             assert_equal(res, tgt12)

6700:             assert_equal(res, tgt21)

6704:             assert_equal(res, tgt11_21)

6708:             assert_equal(res, tgt11_12)

6712:             assert_equal(res, tgt12_21)

6728:         assert_equal(res, tgt12)

6730:         assert_equal(res, tgt21)

6734:         assert_equal(res, tgt11_21)

6738:         assert_equal(res, tgt11_12)

6742:         assert_equal(res, tgt12_21)

6757:         assert_array_equal(out, tgt, err_msg=msg)

6763:         assert_array_equal(out, tgt, err_msg=msg)

6768:         assert_raises_regex(TypeError, msg, self.matmul, a, b, out=out)

6773:         assert_(c is out)

6777:         assert_array_equal(c, tgt)

6784:         assert self.matmul(arr, arr).shape == (0, 1, 1)

6799:         assert c.base is out

6800:         assert_array_equal(c, tgt)

6802:         assert_array_equal(c, tgt_mv)

6804:         assert_array_equal(c, tgt_mv)

6809:         assert_array_equal(c, tgt)

6814:         assert_array_equal(out, tgt)

6844:         assert_equal(r1, r2)

6847:         assert_equal(r1, r3)

6862:         assert_allclose(N3, self.matmul(N1, N2))

6868:         assert_(type(res) is F)

6874:         assert_array_equal(np.matmul(a, b), c)

6882:         with assert_raises(TypeError)
6891:         with assert_raises(TypeError)
6897:         assert np.max(a.view(np.uint8)) == 1

6900:         assert np.max(b.view(np.uint8)) == 1

6907:         assert_equal(out1, out2)

6910:         assert not np.any(c)

6930:         assert_equal(self.matmul(a, b), "A")

6931:         assert_equal(self.matmul(b, a), "A")

6934:         assert_raises(TypeError, self.matmul, np.int8(5), np.int8(5))

6935:         assert_raises(TypeError, self.matmul, np.void(b'abc'), np.void(b'abc'))

6936:         assert_raises(TypeError, self.matmul, np.arange(10), np.void(b'abc'))

6944:     assert_raises(TypeError, a.__imatmul__, b)

6946:     assert_raises(TypeError, operator.imatmul, a, b)

6947:     assert_raises(TypeError, exec, "a @= b", globals(), locals())

6952:     assert c.shape == (3, 4, 4)

6954:     assert d.shape == (4, 4, 3)

6956:     assert_array_equal(e, c)

6958:     assert f.shape == (4, 5)

6967:         assert_raises(TypeError, np.inner, c, A)

6968:         assert_raises(TypeError, np.inner, A, c)

6975:             assert_equal(np.inner(vec, sca), desired)

6976:             assert_equal(np.inner(sca, vec), desired)

6984:         assert_almost_equal(p, 0, decimal=14)

6994:             assert_equal(np.inner(A.T, C), desired)

6995:             assert_equal(np.inner(C, A.T), desired)

6996:             assert_equal(np.inner(B, C), desired)

6997:             assert_equal(np.inner(C, B), desired)

7000:             assert_equal(np.inner(A, B), desired)

7003:             assert_equal(np.inner(A, A), desired)

7004:             assert_equal(np.inner(A, A.copy()), desired)

7009:             assert_equal(np.inner(b, a), desired)

7035:             assert_equal(np.inner(a, b), desired)

7036:             assert_equal(np.inner(b, a).transpose(2,3,0,1), desired)

7049:         assert_equal(A, [2, 2, 3])

7053:         assert_equal(A, [[2, 2, 3], [2, 2, 3]])

7057:         assert_equal(A, [[2, 2, 3], [2, 2, 3]])

7066:         assert(np.choose([0], ops).dtype == expected_dt)

7076:         assert_equal(A, [1, 2, 2, 2, 3,

7081:         assert_equal(A, [1, 1, 2, 2, 3, 3,

7086:         assert_equal(A, [[1, 2, 3],

7091:         assert_equal(A, [[1, 2, 2, 2, 3, 3],

7096:         assert_equal(A, [[1, 2, 3],

7102:         assert_equal(A, [[1, 1, 2, 2, 3, 3],

7122:         assert_array_equal(l, r)

7130:         assert_array_equal(l, r)

7138:         assert_array_equal(l, r)

7145:         assert_array_equal(l, r)

7155:         assert_array_equal(l, r)

7164:         assert_array_equal(l, r)

7169:         assert_array_equal(l, r)

7174:         assert_array_equal(l, r)

7183:         assert_([i.dtype == dt for i in l])

7184:         assert_array_equal(l, r)

7193:         assert_array_equal(l, r)

7212:         assert_array_equal(l, r)

7221:         assert_array_equal(l, r)

7236:         assert_array_equal(l, r)

7247:         assert_array_equal(l, r)

7258:         assert_array_equal(l, r)

7269:         assert_array_equal(l, r)

7284:         assert_array_equal(l, r)

7295:         assert_array_equal(l, r)

7306:         assert_array_equal(l, r)

7317:         assert_array_equal(l, r)

7329:         assert_array_equal(l, r)

7337:         assert_array_equal(l, r)

7345:         assert_array_equal(l, r)

7355:             assert_raises(np.ComplexWarning, x.__setitem__, slice(None), y)

7356:             assert_equal(x, [1, 2])

7364:         assert_equal(wanted, dt)

7369:         assert_equal(wanted, dt)

7374:         assert_equal(wanted, dt)

7379:         assert_equal(wanted, dt)

7384:         assert_equal(wanted, dt)

7394:         assert_equal(actual, dt,

7505:         assert_(not y.flags.owndata)

7506:         assert_(y2.flags.owndata)

7508:         assert_equal(y.dtype, obj.dtype)

7509:         assert_equal(y.shape, obj.shape)

7510:         assert_array_equal(obj, y)

7512:         assert_equal(y2.dtype, obj.dtype)

7513:         assert_equal(y2.shape, obj.shape)

7514:         assert_array_equal(obj, y2)

7577:             assert_raises(ValueError, self._check_roundtrip, x)

7584:             assert_raises(ValueError, self._check_roundtrip, x)

7637:         assert_raises((ValueError, BufferError), memoryview, a)

7638:         assert_raises((ValueError, BufferError), memoryview, np.array((3), 'M8[D]'))

7643:         assert_equal(y.format, 'i')

7644:         assert_equal(y.shape, (5,))

7645:         assert_equal(y.ndim, 1)

7646:         assert_equal(y.strides, (4,))

7647:         assert_equal(y.suboffsets, ())

7648:         assert_equal(y.itemsize, 4)

7653:         assert_equal(y.format, 'd')

7654:         assert_equal(y.shape, (2, 2))

7655:         assert_equal(y.ndim, 2)

7656:         assert_equal(y.strides, (16, 8))

7657:         assert_equal(y.suboffsets, ())

7658:         assert_equal(y.itemsize, 8)

7663:         assert_equal(y.format, 'f')

7664:         assert_equal(y.shape, (3, 3))

7665:         assert_equal(y.ndim, 2)

7666:         assert_equal(y.strides, (36, 4))

7667:         assert_equal(y.suboffsets, ())

7668:         assert_equal(y.itemsize, 4)

7698:         assert_equal(y.shape, (1,))

7699:         assert_equal(y.ndim, 1)

7700:         assert_equal(y.suboffsets, ())

7704:             assert_equal(y.format, 'T{b
7706:             assert_equal(y.format, 'T{b
7709:             assert_equal(y.strides, (sz,))

7710:         assert_equal(y.itemsize, sz)

7715:         assert_equal(y.format, 'T{(2,2)i
7716:         assert_equal(y.shape, ())

7717:         assert_equal(y.ndim, 0)

7718:         assert_equal(y.strides, ())

7719:         assert_equal(y.suboffsets, ())

7720:         assert_equal(y.itemsize, 16)

7726:             assert_equal(y.format, '>i')

7728:             assert_equal(y.format, 'i')

7733:             assert_equal(y.format, 'i')

7735:             assert_equal(y.format, '<i')

7739:         assert_raises(ValueError,

7756:         assert_array_equal(res, obj)

7771:             assert_equal(count_1, count_2)

7799:         assert_(memoryview(c).strides == (800, 80, 8))

7806:         assert_(memoryview(fortran).strides == (8, 80, 800))

7812:             assert_(strides[0] == 8)

7816:             assert_(strides[-1] == 8)

7831:             assert s == (8, 8)

7833:             assert s == (80, 8)

7845:         with assert_raises(ValueError)
7863:         assert_equal(m.ndim, 33)

7865:         assert_raises_regex(

7879:         assert_('&' in m.format)

7881:         assert_raises_regex(

7889:         with assert_raises(ValueError) as cm
7893:         with assert_raises_regex(

7917:         assert_equal(arr['a'], 1)

7918:         assert_equal(arr['b'], 2)

7920:         assert_equal(arr['a'], 3)

7980:             assert_raises(ValueError, np.array, scalar,

7982:             assert_raises(ValueError, np.array, pyscalar,

7984:             assert_raises(ValueError, np.array, pyscalar,

7986:             assert_raises(ValueError, _multiarray_tests.npy_ensurenocopy,

8010:                     assert res is not arr and res.flags.owndata

8011:                     assert_array_equal(res, arr)

8017:                         assert res is arr or res.base is arr

8022:                     assert res is arr or res.base is arr

8025:                     # Casting is necessary, assert copy works
8028:                         assert res is not arr and res.flags.owndata

8029:                         assert_array_equal(res, arr)

8031:                     assert_raises(ValueError, np.array,

8034:                     assert_raises(ValueError, np.array,

8048:             assert not np.may_share_memory(arr, res)

8051:             assert np.may_share_memory(arr, res)

8053:         assert np.may_share_memory(arr, res)

8068:             assert res.base is val

8083:             assert_array_equal(res, base_arr)

8087:             assert res is not base_arr

8091:             assert_array_equal(res, base_arr)

8092:             assert res is base_arr  # numpy trusts the ArrayLike

8107:             assert arr.flags.c_contiguous

8109:             assert arr.flags.f_contiguous

8113:             assert not arr.flags.forc

8131:                 assert res is not arr and res.flags.owndata

8132:                 assert_array_equal(arr, res)

8139:                         assert res is arr or res.base.obj is arr

8144:                     assert res is arr or res.base.obj is arr

8148:                     assert_array_equal(arr, res)

8149:                 assert_raises(ValueError, np.array,

8152:                 assert_raises(ValueError, np.array,

8158:         assert_raises(ValueError, np.array,

8161:         assert_raises(ValueError, np.array,

8164:         assert_raises(ValueError, np.array,

8167:         assert_raises(ValueError, np.array,

8181:                 assert_raises(AttributeError, delattr, a, s)

8189:             assert_raises(AttributeError, delattr, a, s)

8195:             assert_raises(AttributeError, delattr, a, s)

8203:             assert_raises(AttributeError, delattr, a, s)

8241:             assert_raises(expected, np.array, val)

8244:             assert_equal(np.array(val), expected)

8245:             assert result.dtype == 'f8'

8249:             assert_equal(pre_cnt, post_cnt)

8255:     assert_equal(np.array(ArrayLike()), 1)

8265:     assert_equal(descr_t.itemsize, typestr_t.itemsize)

8290:     assert_equal(arr1, arr2)

8291:     assert_equal(arr1, arr3)

8305:     assert_equal(arr1, arr[1
8332:     assert_raises(ValueError, a[0].__delitem__, 'x')

8346:         assert_equal(a, [[0.00, 1., 2.0, 19.],

8354:         assert_equal(b, [100.1,  51.,   6.,   3.,   4.,   5.])

8361:         assert_equal(array[3], from_c)

8366:         assert_equal(array[2, 4], from_c)

8371:         assert_equal(array[1, 2, 3], from_c)

8378:             assert_(1 > np.array(0, dtype=dt1), "type %s failed" % (dt1,))

8379:             assert_(not 1 < np.array(0, dtype=dt1), "type %s failed" % (dt1,))

8382:                 assert_(np.array(1, dtype=dt1) > np.array(0, dtype=dt2),

8384:                 assert_(not np.array(1, dtype=dt1) < np.array(0, dtype=dt2),

8389:             assert_(-1 < np.array(1, dtype=dt1), "type %s failed" % (dt1,))

8390:             assert_(not -1 > np.array(1, dtype=dt1), "type %s failed" % (dt1,))

8391:             assert_(-1 != np.array(1, dtype=dt1), "type %s failed" % (dt1,))

8395:                 assert_(np.array(1, dtype=dt1) > np.array(-1, dtype=dt2),

8397:                 assert_(not np.array(1, dtype=dt1) < np.array(-1, dtype=dt2),

8399:                 assert_(np.array(1, dtype=dt1) != np.array(-1, dtype=dt2),

8404:             assert_(1 > np.array(-1, dtype=dt1), "type %s failed" % (dt1,))

8405:             assert_(not 1 < np.array(-1, dtype=dt1), "type %s failed" % (dt1,))

8406:             assert_(-1 == np.array(-1, dtype=dt1), "type %s failed" % (dt1,))

8409:                 assert_(np.array(1, dtype=dt1) > np.array(-1, dtype=dt2),

8411:                 assert_(not np.array(1, dtype=dt1) < np.array(-1, dtype=dt2),

8413:                 assert_(np.array(-1, dtype=dt1) == np.array(-1, dtype=dt2),

8417:         assert_equal(bool(np.array([False])), False)

8418:         assert_equal(bool(np.array([True])), True)

8419:         assert_equal(bool(np.array([[42]])), True)

8420:         assert_raises(ValueError, bool, np.array([1, 2]))

8426:         assert_raises(NotImplementedError, bool, np.array(NotConvertible()))

8427:         assert_raises(NotImplementedError, bool, np.array([NotConvertible()]))

8437:         assert_raises(Error, bool, self_containing)  # previously stack overflow

8444:             assert_equal(int_func(np.array(0)), 0)

8445:             assert_equal(int_func(np.array([1])), 1)

8446:             assert_equal(int_func(np.array([[42]])), 42)

8447:             assert_raises(TypeError, int_func, np.array([1, 2]))

8450:             assert_equal(4, int_func(np.array('4')))

8451:             assert_equal(5, int_func(np.bytes_(b'5')))

8452:             assert_equal(6, int_func(np.unicode_(u'6')))

8457:             assert_equal(3, int_func(np.array(HasTrunc())))

8458:             assert_equal(3, int_func(np.array([HasTrunc()])))

8463:             assert_raises(NotImplementedError,

8465:             assert_raises(NotImplementedError,

8475:             assert_equal(np.where( c, dt(0), dt(1)), dt(0))

8476:             assert_equal(np.where(~c, dt(0), dt(1)), dt(1))

8477:             assert_equal(np.where(True, dt(0), dt(1)), dt(0))

8478:             assert_equal(np.where(False, dt(0), dt(1)), dt(1))

8484:             assert_equal(np.where(c, e, e), e)

8485:             assert_equal(np.where(c, d, e), r)

8486:             assert_equal(np.where(c, d, e[0]), r)

8487:             assert_equal(np.where(c, d[0], e), r)

8488:             assert_equal(np.where(c[
8489:             assert_equal(np.where(c[1
8490:             assert_equal(np.where(c[
8491:             assert_equal(np.where(c[1
8492:             assert_equal(np.where(c[
8493:             assert_equal(np.where(c[
8494:             assert_equal(np.where(c[1
8498:         assert_array_equal(np.where(True, None, None), np.array(None))

8502:         assert_array_equal(np.where(m, 0, b), np.array([]).reshape(0, 3))

8517:         assert_array_equal(np.where(m, d, e), r)

8521:         assert_array_equal(np.where(m, e, d), r)

8523:         assert_array_equal(np.where(m, e, e), e)

8528:         assert_equal(np.where(True, d, e).dtype, np.float32)

8530:         assert_equal(np.where(True, d, e).dtype, np.float32)

8532:         assert_equal(np.where(True, d, e).dtype, np.float32)

8535:         assert_equal(np.where(True, d, e).dtype, np.float64)

8542:         assert_array_equal(r[0], a[0])

8543:         assert_array_equal(r[1], b[0])

8548:         assert_array_equal(r[
8549:         assert_array_equal(r[
8559:         assert_equal(np.where(c, a, b), r)

8563:         assert_equal(np.where(c, a, b), r)

8568:         assert_equal(np.where(c, a, b), r)

8573:         assert_equal(np.where(c, b, a), r)

8583:         assert_equal(np.where(c, a, b), r)

8586:         assert_equal(np.where(c, a, b), r)

8589:         assert_equal(np.where(c, a, b), r)

8592:         assert_equal(np.where(c, a, b), r)

8598:         assert_raises(ValueError, np.where, c, a, a)

8599:         assert_raises(ValueError, np.where, c[0], a, b)

8605:         assert_equal(np.where(True, a, b), "abc")

8606:         assert_equal(np.where(False, b, a), "abc")

8611:         assert_equal(np.where(True, a, b), "abcd")

8612:         assert_equal(np.where(False, b, a), "abcd")

8619:         assert_array_equal(ibad,

8631:             assert_array_equal(benchmark, result)

8640:             assert_(sys.getsizeof(x) > 0)

8647:                 assert_(sys.getsizeof(x) > length * elem_size)

8663:             assert_(sys.getsizeof(d[...]) < sys.getsizeof(d))

8667:             assert_(sys.getsizeof(d) < sys.getsizeof(d.reshape(100, 1, 1).copy()))

8674:             assert_(old > sys.getsizeof(d))

8676:             assert_(old < sys.getsizeof(d))

8680:             assert_raises(TypeError, d.__sizeof__, "a")

8687:         assert_raises(TypeError, hash, x)

8691:         assert_(not isinstance(x, collections.abc.Hashable))

8747:             assert_(isinstance(f(a, b), self.Bar), msg)

8748:             assert_(isinstance(f(b, a), self.Bar), msg)

8755:             assert_(isinstance(f(a, b), self.Other), msg)

8756:             assert_(isinstance(f(b, a), self.Other), msg)

8763:             assert_(isinstance(f(a, b), self.Bar), msg)

8764:             assert_(isinstance(f(b, a), self.Bar), msg)

8771:             assert_(isinstance(f(a, b), self.Other), msg)

8772:             assert_(isinstance(f(b, a), self.Other), msg)

8778:         assert_(not np.array([''], dtype=str))

8783:         assert_(not a)

8788:         assert_(not a)

8793:         assert_(a)

8808:             assert arr[()] == expected

8809:             assert arr.item() == expected

8815:         assert_equal(l, ['cc', 'cc'])

8821:         assert_equal(l, ['cc', 'cc'])

8827:         assert_(not np.array([''], dtype=np.unicode_))

8832:         assert_(not a)

8837:         assert_(not a)

8842:         assert_(a)

8849:         assert_equal('{
8850:         assert_equal('{
8854:         assert_equal('{}'.format(a), str(a))

8859:         assert_raises(TypeError, '{
8868:         assert_equal(ctypes, test_arr.ctypes._ctypes)

8869:         assert_equal(tuple(test_arr.ctypes.shape), (2, 3))

8877:             assert_(isinstance(test_arr.ctypes._ctypes,

8879:             assert_equal(tuple(test_arr.ctypes.shape), (2, 3))

8925:         assert_(arr_ref() is not None, "ctypes pointer did not hold onto a reference")

8934:         assert_(arr_ref() is None, "unknowable whether ctypes pointer holds a reference")

8946:         assert_(arr_ref() is not None, "ctypes pointer did not hold onto a reference")

8952:         assert_(arr_ref() is None, "unknowable whether ctypes pointer holds a reference")

8961:         assert_equal(res, range(5))

8967:         assert_equal(res, range(5))

8973:         assert_equal(a, np.array([[0, 44], [1, 55], [2, 44]]))

8975:         assert_raises(ValueError, np.place, a, a>20, [])

8980:         assert_equal(a, np.array([[44, 3], [55, 4], [2, 5]]))

8986:         assert_equal(a, np.array([[0, 9], [1, 16], [2, 25]]))

8992:         assert_equal(out, np.array([0, 2]))

8999:         assert_equal(out, np.array([[ 10, -10,  10],

9014:         assert_equal(b, np.array([[15, 18, 21], [42, 54, 66], [69, 90, 111]]))

9021:         assert_(arr_wb.flags.writebackifcopy)

9022:         assert_(arr_wb.base is arr)

9026:         assert_equal(arr, -100)

9028:         assert_(arr_wb.ctypes.data != 0)

9029:         assert_equal(arr_wb.base, None)

9032:         assert_equal(arr, -100)

9042:             assert len(sup.log) == 1

9052:         assert_(arr_wb.flags.writebackifcopy)

9053:         assert_(arr_wb.base is arr)

9057:         assert_equal(arr, orig)

9059:         assert_(arr_wb.ctypes.data != 0)

9060:         assert_equal(arr_wb.base, None)

9062:             assert_equal(arr_cnt, sys.getrefcount(arr))

9065:         assert_equal(arr, orig)

9070:         assert_raises_regex(

9076:         assert_raises_regex(

9082:         assert_raises(ZeroDivisionError, np.arange, 0, 10, 0)

9083:         assert_raises(ZeroDivisionError, np.arange, 0.0, 10.0, 0.0)

9086:         assert_raises(ZeroDivisionError, np.arange, 0, 0, 0)

9087:         assert_raises(ZeroDivisionError, np.arange, 0.0, 0.0, 0.0)

9090:         assert_raises(TypeError, np.arange)

9091:         assert_raises(TypeError, np.arange, step=3)

9092:         assert_raises(TypeError, np.arange, dtype='int64')

9093:         assert_raises(TypeError, np.arange, start=4)

9100:         assert len(keyword_stop) == 3

9101:         assert len(keyword_zerotostop) == 3

9102:         assert len(keyword_start_stop) == 6

9103:         assert_array_equal(keyword_stop, keyword_zerotostop)

9116:         assert_(a.saved_base is a.base)

9158:         with assert_raises(Exception) as e
9163:         assert_(isinstance(obj_subarray, RaisesInFinalize))

9167:         assert_(obj_ref() is not None, "object should not already be dead")

9171:         assert_(obj_ref() is not None, "obj_arr should not hold the last reference")

9175:         assert_(obj_ref() is None, "no references should remain")

9183:         assert_(a.saved_result is None)

9189:     assert_raises(ValueError, a.flatten, order=u'\xe2')

9212:         assert_equal(my_always_equal == array, 'eq')

9213:         assert_equal(array == my_always_equal, 'eq')

9214:         assert_equal(my_always_equal != array, 'ne')

9215:         assert_equal(array != my_always_equal, 'ne')

9233:     assert_allclose(got, expected)

9255:                 assert_allclose(got, expected)

9274:     assert_equal(np.zeros(1, dtype=d1)['f1'].flags['ALIGNED'], True)

9275:     assert_equal(np.zeros(1, dtype=d2)['f1'].flags['ALIGNED'], True)

9276:     assert_equal(np.zeros(1, dtype='u1,c8')['f1'].flags['ALIGNED'], False)

9281:         assert_equal(d.alignment, alignment)

9282:         assert_equal(d.itemsize, size)

9287:     np.exp(src)  # assert fails?

9291:     dst[
9296:     # In particular, check RELAXED_STRIDES don't trip alignment assertions in

9304:         assert_equal(x.__array_interface__['data'][0] % align, 0)

9306:             assert_equal(x.shape, shape, err_msg)

9308:             assert_equal(x.shape, (shape,), err_msg)

9309:         assert_equal(x.dtype, dtype)

9311:             assert_(x.flags.c_contiguous, err_msg)

9314:                 assert_(x.flags.f_contiguous, err_msg)

9316:             assert_(x.flags.c_contiguous, err_msg)

9334:         # turn on USE_DEBUG for this test, so lowlevel-loop asserts are run.

9373:     assert_equal(b, a)

9375:     assert_equal(b, 0)

9392:         assert_array_equal(x[
9407:         assert_array_equal(x[
9414:         assert_array_equal(x.view('<i4'), expected)

9425:         assert_array_equal(x.view('S4'), expected)

9441:         assert_array_equal(x.view('<i2'), expected)

9452:     assert_equal(np.sort(arr, kind='quick'), np.sort(arr, kind='heap'))

9457:     assert_equal(np.sort(infarr, kind='quick'), np.sort(infarr, kind='heap'))

9462:     assert_equal(np.sort(neginfarr, kind='quick'),

9468:     assert_equal(np.sort(infarr, kind='quick'), np.sort(infarr, kind='heap'))

9480:     assert_equal(np.sort(arr, kind='quick'), np.sort(arr, kind='heap'))

9490:     assert_equal(np.sort(arr, kind='quick'), np.sort(arr, kind='heap'))

Total asserts: 1850

Filename: numpy/core/tests/test_memmap.py
13:     assert_, assert_equal, assert_array_equal, suppress_warnings, IS_PYPY,

42:         assert_(allclose(self.data, newfp))

43:         assert_array_equal(self.data, newfp)

44:         assert_equal(newfp.flags.writeable, False)

63:         assert_equal(offset, fp.offset)

64:         assert_equal(mode, fp.mode)

73:         assert_equal(abspath, fp.filename)

75:         assert_equal(abspath, b.filename)

88:         assert_equal(abspath, str(fp.filename.resolve()))

90:         assert_equal(abspath, str(b.filename.resolve()))

97:         assert_equal(fp.filename, self.tmpfp.name)

105:         assert_equal(fp[0], self.data[0])

114:         assert_equal(fp_view[0], 5)

118:         assert_equal(fp_base[0], 5)

120:         assert_equal(fp_base[0], 6)

127:             assert_(tmp._mmap is not fp._mmap)

134:             assert_(tmp._mmap is not fp._mmap)

139:         assert_(fp[
145:         assert_(new1.base is fp)

146:         assert_(new2.base is fp)

148:         assert_(new_array.base is fp)

158:                 assert_(isscalar(result))

159:                 assert_(result.__class__ is self.data[0, 0].__class__)

161:                 assert_(unary_op(fp, axis=0).__class__ is ndarray)

162:                 assert_(unary_op(fp, axis=1).__class__ is ndarray)

165:             assert_(binary_op(fp, self.data).__class__ is ndarray)

166:             assert_(binary_op(self.data, fp).__class__ is ndarray)

167:             assert_(binary_op(fp, fp).__class__ is ndarray)

170:         assert(fp.__class__ is memmap)

172:         assert(fp.__class__ is memmap)

178:         assert_(fp[1
180:         assert_(fp[[0, 1]].__class__ is ndarray)

191:         assert_(sum(fp, axis=0).__class__ is MemmapSubClass)

192:         assert_(sum(fp).__class__ is MemmapSubClass)

193:         assert_(fp[1
194:         assert(fp[[0, 1]].__class__ is MemmapSubClass)

200:         assert_(fp.offset == offset)

205:         assert_equal(mm.shape, (2,))

Total asserts: 38

Filename: numpy/core/tests/test_nditer.py
11:     assert_, assert_equal, assert_array_equal, assert_raises,

50:         assert_(not it.iterationneedsapi)

51:         assert_(sys.getrefcount(a) > rc_a)

52:         assert_(sys.getrefcount(dt) > rc_dt)

55:     assert_equal(sys.getrefcount(a), rc_a)

56:     assert_equal(sys.getrefcount(dt), rc_dt)

69:     assert_(sys.getrefcount(a) > rc2_a)

70:     assert_(sys.getrefcount(dt) > rc2_dt)

72:     assert_equal(sys.getrefcount(a), rc2_a)

73:     assert_equal(sys.getrefcount(dt), rc2_dt)

75:     assert_equal(sys.getrefcount(a), rc_a)

76:     assert_equal(sys.getrefcount(dt), rc_dt)

98:             assert_equal([x for x in i], a)

101:             assert_equal([x for x in i], a)

105:                 assert_equal([x for x in i], a)

124:             assert_equal([x for x in i], aview.ravel(order='C'))

127:             assert_equal([x for x in i], aview.T.ravel(order='C'))

131:                 assert_equal([x for x in i],

151:             assert_equal([x for x in i], aview.ravel(order='F'))

154:             assert_equal([x for x in i], aview.T.ravel(order='F'))

158:                 assert_equal([x for x in i],

178:             assert_equal([x for x in i], aview.ravel(order='A'))

181:             assert_equal([x for x in i], aview.T.ravel(order='A'))

185:                 assert_equal([x for x in i],

196:     assert_equal([i for i in it], [2, 3, 4, 5])

209:     assert_equal(start_count, end_count)

217:     assert_equal(iter_multi_index(i), [(0,), (1,), (2,), (3,)])

220:     assert_equal(iter_multi_index(i), [(3,), (2,), (1,), (0,)])

228:     assert_equal(iter_multi_index(i), [(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)])

231:     assert_equal(iter_multi_index(i), [(0, 0), (1, 0), (0, 1), (1, 1), (0, 2), (1, 2)])

234:     assert_equal(iter_multi_index(i), [(1, 0), (1, 1), (1, 2), (0, 0), (0, 1), (0, 2)])

236:     assert_equal(iter_multi_index(i), [(0, 2), (0, 1), (0, 0), (1, 2), (1, 1), (1, 0)])

238:     assert_equal(iter_multi_index(i), [(1, 2), (1, 1), (1, 0), (0, 2), (0, 1), (0, 0)])

241:     assert_equal(iter_multi_index(i), [(1, 0), (0, 0), (1, 1), (0, 1), (1, 2), (0, 2)])

244:     assert_equal(iter_multi_index(i), [(0, 2), (1, 2), (0, 1), (1, 1), (0, 0), (1, 0)])

247:     assert_equal(iter_multi_index(i), [(1, 2), (0, 2), (1, 1), (0, 1), (1, 0), (0, 0)])

255:     assert_equal(iter_multi_index(i),

260:     assert_equal(iter_multi_index(i),

265:     assert_equal(iter_multi_index(i),

269:     assert_equal(iter_multi_index(i),

273:     assert_equal(iter_multi_index(i),

279:     assert_equal(iter_multi_index(i),

284:     assert_equal(iter_multi_index(i),

289:     assert_equal(iter_multi_index(i),

299:     assert_equal(iter_indices(i), [0, 1, 2, 3])

302:     assert_equal(iter_indices(i), [3, 2, 1, 0])

310:     assert_equal(iter_indices(i), [0, 1, 2, 3, 4, 5])

314:     assert_equal(iter_indices(i), [0, 3, 1, 4, 2, 5])

317:     assert_equal(iter_indices(i), [3, 4, 5, 0, 1, 2])

319:     assert_equal(iter_indices(i), [2, 1, 0, 5, 4, 3])

321:     assert_equal(iter_indices(i), [5, 4, 3, 2, 1, 0])

325:     assert_equal(iter_indices(i), [3, 0, 4, 1, 5, 2])

328:     assert_equal(iter_indices(i), [2, 5, 1, 4, 0, 3])

331:     assert_equal(iter_indices(i), [5, 2, 4, 1, 3, 0])

339:     assert_equal(iter_indices(i),

344:     assert_equal(iter_indices(i),

348:     assert_equal(iter_indices(i),

351:     assert_equal(iter_indices(i),

354:     assert_equal(iter_indices(i),

359:     assert_equal(iter_indices(i),

363:     assert_equal(iter_indices(i),

367:     assert_equal(iter_indices(i),

376:     assert_equal(iter_indices(i), [0, 1, 2, 3])

379:     assert_equal(iter_indices(i), [3, 2, 1, 0])

387:     assert_equal(iter_indices(i), [0, 2, 4, 1, 3, 5])

391:     assert_equal(iter_indices(i), [0, 1, 2, 3, 4, 5])

394:     assert_equal(iter_indices(i), [1, 3, 5, 0, 2, 4])

396:     assert_equal(iter_indices(i), [4, 2, 0, 5, 3, 1])

398:     assert_equal(iter_indices(i), [5, 3, 1, 4, 2, 0])

402:     assert_equal(iter_indices(i), [1, 0, 3, 2, 5, 4])

405:     assert_equal(iter_indices(i), [4, 5, 2, 3, 0, 1])

408:     assert_equal(iter_indices(i), [5, 4, 3, 2, 1, 0])

416:     assert_equal(iter_indices(i),

421:     assert_equal(iter_indices(i),

425:     assert_equal(iter_indices(i),

428:     assert_equal(iter_indices(i),

431:     assert_equal(iter_indices(i),

436:     assert_equal(iter_indices(i),

440:     assert_equal(iter_indices(i),

444:     assert_equal(iter_indices(i),

464:             assert_equal(i.ndim, 1)

465:             assert_equal(i[0].shape, (size,))

468:             assert_equal(i.ndim, 1)

469:             assert_equal(i[0].shape, (size,))

474:                 assert_equal(i.ndim, 1)

475:                 assert_equal(i[0].shape, (size,))

484:     assert_equal(i.ndim, 2)

485:     assert_equal(i[0].shape, (3,))

488:     assert_equal(i.ndim, 2)

489:     assert_equal(i[0].shape, (8,))

492:     assert_equal(i.ndim, 1)

493:     assert_equal(i[0].shape, (12,))

498:     assert_equal(i.ndim, 1)

499:     assert_equal(i[0].shape, (24,))

507:     assert_equal(i.ndim, 3)

512:     assert_equal(i.ndim, 1)

514:     assert_equal(i.ndim, 3)

516:     assert_equal(i.ndim, 3)

518:     assert_equal(i.ndim, 1)

520:     assert_equal(i.ndim, 3)

525:     assert_equal(i.ndim, 1)

527:     assert_equal(i.ndim, 3)

529:     assert_equal(i.ndim, 3)

531:     assert_equal(i.ndim, 1)

533:     assert_equal(i.ndim, 1)

535:     assert_equal(i.ndim, 1)

542:     assert_equal(i.itersize, 6)

543:     assert_equal(i.shape, (6,))

548:     assert_equal(i.itersize, 6)

549:     assert_equal(i.shape, (2, 3))

553:     assert_equal(i.itersize, 6)

554:     assert_equal(i.shape, (2, 3))

557:     assert_equal(i.itersize, 6)

558:     assert_equal(i.shape, (2, 3))

562:     assert_equal(i.itersize, 6)

563:     assert_equal(i.shape, (2, 3))

568:     assert_equal(i.itersize, 24)

569:     assert_equal(i.shape, (4, 2, 3))

573:     assert_equal(i.itersize, 24)

574:     assert_equal(i.shape, (4, 2, 3))

577:     assert_equal(i.itersize, 24)

578:     assert_equal(i.shape, (4, 2, 3))

582:     assert_equal(i.itersize, 24)

583:     assert_equal(i.shape, (4, 2, 3))

586:     assert_equal(i.itersize, 24)

587:     assert_equal(i.shape, (4, 2, 3))

590:     assert_equal(i.itersize, 24)

591:     assert_equal(i.shape, (4, 2, 3))

596:     assert_equal(i.itersize, 24)

597:     assert_equal(i.shape, (4, 2, 3))

600:     assert_equal(i.itersize, 24)

601:     assert_equal(i.shape, (4, 2, 3))

604:     assert_equal(i.itersize, 24)

605:     assert_equal(i.shape, (4, 2, 3))

613:     assert_equal(i.operands[1].shape, (2, 3, 4))

614:     assert_equal(i.operands[1].strides, (24, 8, 2))

619:     assert_equal(i.operands[1].shape, (3, 2, 4))

620:     assert_equal(i.operands[1].strides, (8, 24, 2))

626:     assert_equal(i.operands[1].shape, (3, 2, 4))

627:     assert_equal(i.operands[1].strides, (2, 6, 12))

631:     assert_raises(ValueError, nditer, [a, None], [],

642:     assert_raises(ValueError, nditer, [arange(2), arange(3)],

645:     assert_raises(ValueError, nditer,

649:     assert_raises(ValueError, nditer,

652:     assert_raises(ValueError, nditer,

656:     assert_raises(ValueError, nditer,

659:     assert_raises(ValueError, nditer,

674:         assert_(msg.find('(2,3)') >= 0,

677:         assert_(msg.find('(1,2,3)') >= 0,

690:         assert_(msg.find('(2,3)->(2,3)') >= 0,

692:         assert_(msg.find('(2,)->(2,newaxis)') >= 0,

696:         assert_(msg.find('(4,3)') >= 0,

707:         assert_(msg.find('(2,1,1)') >= 0,

710:         assert_(msg.find('(2,1,2)') >= 0,

719:     assert_raises(ValueError, nditer, [], [], [])

721:     assert_raises(ValueError, nditer, [a]*100, [], [['readonly']]*100)

723:     assert_raises(ValueError, nditer, [a], ['bad flag'], [['readonly']])

725:     assert_raises(ValueError, nditer, [a], [], [['readonly', 'bad flag']])

727:     assert_raises(ValueError, nditer, [a], [], [['readonly']], order='G')

729:     assert_raises(ValueError, nditer, [a], [], [['readonly']], casting='noon')

731:     assert_raises(ValueError, nditer, [a]*3, [], [['readonly']]*2)

733:     assert_raises(ValueError, nditer, a,

736:     assert_raises(ValueError, nditer, a,

738:     assert_raises(ValueError, nditer, a,

740:     assert_raises(ValueError, nditer, a,

743:     assert_raises(ValueError, nditer, a, [], [[]])

744:     assert_raises(ValueError, nditer, a, [], [['readonly', 'writeonly']])

745:     assert_raises(ValueError, nditer, a, [], [['readonly', 'readwrite']])

746:     assert_raises(ValueError, nditer, a, [], [['writeonly', 'readwrite']])

747:     assert_raises(ValueError, nditer, a,

750:     assert_raises(TypeError, nditer, 1.5, [], [['writeonly']])

751:     assert_raises(TypeError, nditer, 1.5, [], [['readwrite']])

753:     assert_raises(TypeError, nditer, np.int32(1), [], [['writeonly']])

754:     assert_raises(TypeError, nditer, np.int32(1), [], [['readwrite']])

757:     assert_raises(ValueError, nditer, a, [], [['writeonly']])

758:     assert_raises(ValueError, nditer, a, [], [['readwrite']])

762:     assert_raises(ValueError, lambda i
764:     assert_raises(ValueError, lambda i
779:     assert_raises(ValueError, assign_multi_index, i)

780:     assert_raises(ValueError, assign_index, i)

781:     assert_raises(ValueError, assign_iterindex, i)

782:     assert_raises(ValueError, assign_iterrange, i)

784:     assert_raises(ValueError, assign_multi_index, i)

785:     assert_raises(ValueError, assign_index, i)

786:     assert_raises(ValueError, assign_iterrange, i)

788:     assert_raises(ValueError, nditer, np.array([]))

795:         assert_equal(a, [3, 1, 2])

796:         assert_equal(b, [3, 1, 2])

797:         assert_equal(c, [0, 1, 2])

799:         assert_equal(i[0
808:     assert_equal(a, 14)

815:     assert_equal(a, -1234)

826:     assert_(a.dtype.byteorder != au.dtype.byteorder)

832:         assert_equal(i.dtypes[0].byteorder, a.dtype.byteorder)

833:         assert_equal(i.operands[0].dtype.byteorder, a.dtype.byteorder)

834:         assert_equal(i.operands[0], a)

836:     assert_equal(au, [2]*6)

841:     assert_(a.dtype.byteorder != au.dtype.byteorder)

845:         assert_equal(i.dtypes[0].byteorder, a.dtype.byteorder)

846:         assert_equal(i.operands[0].dtype.byteorder, a.dtype.byteorder)

847:         assert_equal(i.operands[0], a)

850:     assert_equal(au, [2]*6)

856:     assert_(not a.flags.aligned)

859:     assert_(not i.operands[0].flags.aligned)

860:     assert_equal(i.operands[0], a)

863:         assert_(i.operands[0].flags.aligned)

865:         assert_equal(i.operands[0], a)

867:     assert_equal(a, [3]*6)

873:     assert_(i.operands[0].flags.contiguous)

874:     assert_equal(i.operands[0], a[
879:     assert_(i[0].flags.contiguous)

880:     assert_equal(i[0], a[
889:         assert_equal(i.operands[0], a)

890:         assert_equal(i.operands[0].dtype, np.dtype('f4'))

897:         assert_equal(i.operands[0], a)

898:         assert_equal(i.operands[0].dtype, np.dtype('>f4'))

905:     assert_equal(i.operands[0], a)

906:     assert_equal(i.operands[0].dtype, np.dtype('f8'))

909:     assert_equal(i.operands[0].strides, (96, 8, 32))

914:     assert_equal(i.operands[0], a)

915:     assert_equal(i.operands[0].dtype, np.dtype('f8'))

916:     assert_equal(i.operands[0].strides, (96, 8, 32))

924:         assert_equal(i.operands[0], a)

925:         assert_equal(i.operands[0].dtype, np.dtype('f4'))

926:         assert_equal(i.operands[0].strides, (4, 16, 48))

929:         assert_(a[2, 1, 1] != -12.5)

930:     assert_equal(a[2, 1, 1], -12.5)

937:         assert_equal(i.operands[0].dtype, np.dtype('f4'))

940:         assert_equal(i.operands[0].strides, (4,))

942:     assert_equal(a, [1, 2, 3])

948:     assert_raises(TypeError, nditer, arange(2, dtype='f4'), [],

951:     assert_raises(TypeError, nditer, arange(2, dtype='f4'), [],

954:     assert_raises(TypeError, nditer, arange(2, dtype='f4'), [],

957:     assert_raises(TypeError, nditer, arange(2, dtype='f8'), [],

961:     assert_raises(TypeError, nditer, arange(2, dtype='f8'), [],

966:     assert_raises(TypeError, nditer, arange(2, dtype='<f4'), [],

970:     assert_raises(TypeError, nditer, arange(2, dtype='f4'), [],

974:     assert_raises(TypeError, nditer, arange(2, dtype='f8'), [],

979:     assert_raises(TypeError, nditer, arange(2, dtype='f4'), [],

983:     assert_raises(TypeError, nditer, arange(2, dtype='i4'), [],

994:     assert_equal(i.dtypes[0], np.dtype('f4'))

995:     assert_equal(i.value.dtype, np.dtype('f4'))

996:     assert_equal(i.value, 2.5)

1002:     assert_equal(i.dtypes[0], np.dtype('f8'))

1003:     assert_equal(i.value.dtype, np.dtype('f8'))

1004:     assert_equal(i.value, 2.5)

1010:     assert_equal(i.dtypes[0], np.dtype('f4'))

1011:     assert_equal(i.value.dtype, np.dtype('f4'))

1012:     assert_equal(i.value, 2.5)

1018:     assert_equal(i.dtypes[0], np.dtype('i4'))

1019:     assert_equal(i.value.dtype, np.dtype('i4'))

1020:     assert_equal(i.value, 3)

1023:     assert_equal(i[0].dtype, np.dtype('f8'))

1024:     assert_equal(i[0], 3.)

1030:     assert_raises(TypeError, nditer, np.float32(2), [],

1032:     assert_raises(TypeError, nditer, 2.5, [],

1035:     assert_raises(TypeError, nditer, np.float64(1e60), [],

1040:     assert_raises(TypeError, nditer, np.float32(2), [],

1054:     assert_raises(TypeError, nditer, a)

1056:         assert_equal(sys.getrefcount(obj), rc)

1060:     assert_equal(np.array(vals, dtype='O'), a)

1063:         assert_equal(sys.getrefcount(obj), rc)

1067:     assert_(i.iterationneedsapi)

1069:     assert_equal(np.array(vals, dtype='O'), a.reshape(2, 2).ravel(order='F'))

1072:         assert_equal(sys.getrefcount(obj), rc)

1081:         assert_(sys.getrefcount(obj) == rc-1)

1082:     assert_equal(a, np.array([None]*4, dtype='O'))

1092:     assert_equal(a, np.arange(6)+1)

1100:     assert_equal(a, np.arange(6)+1)

1111:     assert_equal(a, np.arange(6)+1)

1126:         assert_(sys.getrefcount(ob) == rc-1)

1127:     assert_equal(a, np.arange(6)+98172489)

1136:     assert_equal(i.dtypes[0], np.dtype('f8'))

1137:     assert_equal(i.dtypes[1], np.dtype('f8'))

1142:     assert_equal(i.dtypes[0], np.dtype('f8'))

1143:     assert_equal(i.dtypes[1], np.dtype('f8'))

1148:     assert_equal(i.dtypes[0], np.dtype('f4'))

1149:     assert_equal(i.dtypes[1], np.dtype('f4'))

1154:     assert_equal(i.dtypes[0], np.dtype('u4'))

1155:     assert_equal(i.dtypes[1], np.dtype('u4'))

1160:     assert_equal(i.dtypes[0], np.dtype('i8'))

1161:     assert_equal(i.dtypes[1], np.dtype('i8'))

1167:     assert_equal(i.dtypes[0], np.dtype('c16'))

1168:     assert_equal(i.dtypes[1], np.dtype('c16'))

1169:     assert_equal(i.dtypes[2], np.dtype('c16'))

1170:     assert_equal(i.dtypes[3], np.dtype('c16'))

1171:     assert_equal(i.value, (3, -12, 2j, 9))

1179:     assert_equal(i.dtypes[0], np.dtype('i4'))

1180:     assert_equal(i.dtypes[1], np.dtype('i4'))

1181:     assert_equal(i.dtypes[2], np.dtype('c16'))

1189:     assert_equal(i.dtypes[0], np.dtype('c16'))

1190:     assert_equal(i.dtypes[1], np.dtype('c16'))

1191:     assert_equal(i.dtypes[2], np.dtype('c16'))

1201:             assert_(i.operands[0] is a)

1208:         assert_(not np.shares_memory(*i.operands))

1217:         assert_(i.operands[0] is a and i.operands[1] is b)

1219:         assert_(i.operands[0] is a and not np.shares_memory(i.operands[1], b))

1226:     assert_(i.operands[0] is a and i.operands[1] is b)

1233:         assert_(not np.shares_memory(*i.operands))

1244:             assert_(not np.shares_memory(a2, c2))

1245:             assert_(not np.shares_memory(b2, c2))

1255:     assert_(a is a2)

1256:     assert_(b is b2)

1257:     assert_(c is c2)

1267:     assert_(a is a2)

1268:     assert_(b is b2)

1269:     assert_(c is c2)

1279:     assert_(a is a2)

1280:     assert_(b is b2)

1281:     assert_(c is c2)

1289:     assert_(all([x == y for (x, y) in i]))

1292:     assert_(all([x == y for (x, y) in i]))

1298:     assert_equal([x*y for (x, y) in i], (a*b.reshape(2, 1, 1)).ravel())

1301:     assert_equal([x*y for (x, y) in i], (a*b.reshape(1, 3, 1)).ravel())

1305:     assert_equal([x*y for (x, y) in i], (a*b.reshape(1, 1, 5)).ravel())

1312:     assert_equal(i.shape, (2, 3, 5, 2))

1319:     assert_equal(i.shape, (3, 5))

1326:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1329:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1331:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1334:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1336:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1340:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1344:     assert_raises(ValueError, nditer, [a, a], [], [['readonly']]*2,

1354:     assert_equal([x[()] for x in i], [x[()] for x in j])

1358:     assert_equal([x[()] for x in i], [x[()] for x in j])

1363:     assert_equal([x[()] for x in i], [x[()] for x in j])

1367:     assert_equal([x[()] for x in i], [x[()] for x in j])

1371:     assert_equal([x[()] for x in i], [x[()] for x in j])

1377:     assert_equal([x[()] for x in i], [x[()] for x in j])

1383:     assert_equal([x[()] for x in j], a.ravel(order='F'))

1389:     assert_equal([x[()] for x in j], a.ravel(order='F'))

1416:         assert_array_equal(expected, np.ones(1000, dtype=loop_dtype))

1424:     assert_array_equal(res, expected)

1425:     assert_array_equal(res_copy, expected)

1450:     assert_array_equal(res1["a"], expected)

1451:     assert_array_equal(res2["a"], expected)

1456:         assert_array_equal(res1["b"][field], expected)

1457:         assert_array_equal(res2["b"][field], expected)

1467:     assert_equal(i.operands[1].shape, a.shape)

1468:     assert_equal(i.operands[1].dtype, np.dtype('f4'))

1481:         assert_equal(i.operands[1], a+1)

1490:     assert_equal(i.operands[1].shape, a.shape)

1491:     assert_equal(i.operands[1].strides, a.strides)

1492:     assert_equal(i.operands[1].dtype, np.dtype('f4'))

1497:     assert_equal(i.operands[1].shape, a.shape)

1498:     assert_equal(i.operands[1].strides, a.strides)

1499:     assert_equal(i.operands[1].dtype, np.dtype('f4'))

1506:     assert_equal(i.operands[1].shape, a.shape)

1507:     assert_equal(i.operands[1].strides, (32, 16, 4))

1508:     assert_equal(i.operands[1].dtype, np.dtype('f4'))

1517:     assert_equal(i.operands[0].shape, (4, 2, 3))

1518:     assert_equal(i.operands[0].strides, (4, 48, 16))

1519:     assert_equal(i.operands[0].dtype, np.dtype('u4'))

1526:     assert_equal(i.dtypes[2], np.dtype('f8'))

1529:     assert_equal(i.dtypes[2], np.dtype('f8'))

1532:     assert_equal(i.dtypes[2], np.dtype('f4'))

1535:     assert_equal(i.dtypes[2], np.dtype('u4'))

1538:     assert_equal(i.dtypes[2], np.dtype('i8'))

1547:     assert_equal(i.dtypes[0], i.dtypes[1])

1551:     assert_(i.dtypes[0] != i.dtypes[2])

1552:     assert_equal(i.dtypes[0].newbyteorder('='), i.dtypes[2])

1559:     assert_equal(i.operands[0].dtype, np.dtype('complex128'))

1560:     assert_equal(i.operands[0].ndim, 0)

1572:     assert_equal(type(a), type(i.operands[2]))

1573:     assert_(type(b) is not type(i.operands[2]))

1574:     assert_equal(i.operands[2].shape, (2, 2))

1580:     assert_equal(type(b), type(i.operands[2]))

1581:     assert_(type(a) is not type(i.operands[2]))

1582:     assert_equal(i.operands[2].shape, (2, 2))

1589:     assert_raises(TypeError, nditer, [a, None], [],

1592:     assert_raises(ValueError, nditer, [a, None], [],

1595:     assert_raises(ValueError, nditer, [a, None], ['buffered'],

1598:     assert_raises(ValueError, nditer, [None, None], [],

1604:     assert_raises(ValueError, nditer, [a, None], [],

1609:     assert_raises(ValueError, nditer, [a, None], [],

1614:     assert_raises(ValueError, nditer, [a, None], [],

1621:     assert_raises(ValueError, nditer, [a, None], ["reduce_ok"],

1631:     assert_equal([x for x in i], a[
1636:     assert_equal([x for x in i], a[0,
1644:     assert_equal(i.ndim, 3)

1645:     assert_equal(i.shape, (2, 3, 4))

1646:     assert_equal(i.itviews[0].shape, (2, 3, 4))

1653:     assert_equal(before, after)

1654:     assert_equal(i.ndim, 1)

1655:     assert_raises(ValueError, lambda i
1656:     assert_equal(i.itviews[0].shape, (24,))

1660:     assert_equal(i.itersize, 24)

1661:     assert_equal(i[0].shape, tuple())

1663:     assert_equal(i.itersize, 24)

1664:     assert_equal(i[0].shape, (24,))

1665:     assert_equal(i.value, arange(24))

1674:         assert_equal(iter_iterindices(i), list(range(24)))

1676:         assert_equal(iter_iterindices(i), list(range(2, 24)))

1679:         assert_equal(iter_iterindices(i), list(range(24)))

1681:         assert_equal(iter_iterindices(i), list(range(5, 24)))

1684:         assert_equal(iter_iterindices(i), list(range(24)))

1686:         assert_equal(iter_iterindices(i), list(range(9, 24)))

1689:         assert_equal(iter_iterindices(i), list(range(24)))

1691:         assert_equal(iter_iterindices(i), list(range(13, 24)))

1694:         assert_equal(iter_iterindices(i), list(range(24)))

1696:         assert_equal(iter_iterindices(i), list(range(23, 24)))

1699:         assert_equal(iter_iterindices(i), list(range(2, 24)))

1710:     assert_equal(i.iterrange, (0, 24))

1711:     assert_equal([x[()] for x in i], a_fort)

1714:         assert_equal(i.iterrange, r)

1715:         assert_equal([x[()] for x in i], a_fort[r[0]
1719:     assert_equal(i.iterrange, (0, 24))

1720:     assert_equal([x[()] for x in i], a_fort)

1723:         assert_equal(i.iterrange, r)

1724:         assert_equal([x[()] for x in i], a_fort[r[0]
1735:     assert_equal(i.iterrange, (0, 24))

1736:     assert_equal(get_array(i), a_fort)

1739:         assert_equal(i.iterrange, r)

1740:         assert_equal(get_array(i), a_fort[r[0]
1766:                 assert_(i[0].size <= buffersize)

1769:             assert_equal(np.concatenate(vals), a.ravel(order='C'))

1787:     assert_equal(a.ravel(order='C'), np.arange(24))

1798:     assert_(i.has_delayed_bufalloc)

1799:     assert_raises(ValueError, lambda i
1800:     assert_raises(ValueError, lambda i
1801:     assert_raises(ValueError, lambda i
1805:     assert_raises(ValueError, assign_iter, i)

1808:     assert_(not i.has_delayed_bufalloc)

1809:     assert_equal(i.multi_index, (0,))

1811:         assert_equal(i[0], 0)

1813:         assert_equal(i[0
1814:         assert_equal([[x[0][()], x[1][()]] for x in i], list(zip(range(6), [1]*6)))

1829:     assert_equal(a, 2*np.arange(10, dtype='f4'))

1844:     assert_equal(a, 2*np.arange(10, dtype='f4'))

1859:         assert_equal(a, 2*np.arange(10, dtype='f8'))

1874:     assert_equal(a, 2*np.arange(10, dtype='c8') + 4j)

1886:     assert_equal(a, 2*np.arange(10, dtype='c8') + 4j)

1898:     assert_equal(a, 2*np.arange(10, dtype=np.clongdouble) + 4j)

1909:     assert_equal(a, 2*np.arange(10, dtype=np.longdouble))

1921:     assert_equal(vals[0]['a'], 0.5)

1922:     assert_equal(vals[0]['b'], 0)

1923:     assert_equal(vals[0]['c'], [[(0.5)]*3]*2)

1924:     assert_equal(vals[0]['d'], 0.5)

1925:     assert_equal(vals[1]['a'], 1.5)

1926:     assert_equal(vals[1]['b'], 1)

1927:     assert_equal(vals[1]['c'], [[(1.5)]*3]*2)

1928:     assert_equal(vals[1]['d'], 1.5)

1929:     assert_equal(vals[0].dtype, np.dtype(sdt))

1943:     assert_equal(vals[0]['a'], 0.5)

1944:     assert_equal(vals[0]['b'], 0)

1945:     assert_equal(vals[0]['c'], [[(0.5)]*3]*2)

1946:     assert_equal(vals[0]['d'], 0.5)

1947:     assert_equal(vals[1]['a'], 1.5)

1948:     assert_equal(vals[1]['b'], 1)

1949:     assert_equal(vals[1]['c'], [[(1.5)]*3]*2)

1950:     assert_equal(vals[1]['d'], 1.5)

1951:     assert_equal(vals[0].dtype, np.dtype(sdt))

1954:         assert_equal(sys.getrefcount(a[0]), rc)

1962:     assert_equal([x_[()] for x_ in i], [5, 8])

1967:     assert_raises(TypeError, lambda
1979:     assert_equal(i[0].dtype, np.dtype(sdt2))

1980:     assert_equal([np.array(x_) for x_ in i],

1993:         # If the following assert fails, the place where the error is raised

1997:         assert np.can_cast(a.dtype, sdt2, casting="unsafe")

2035:     assert "ValueError" in res

2049:     assert_equal(i[0].dtype, np.dtype(sdt2))

2051:         assert_(np.all(x['a'] == count))

2062:         assert_equal(i[0].dtype, np.dtype(sdt2))

2065:             assert_(np.all(x['a'] == count))

2068:     assert_equal(a['a'], np.arange(6).reshape(6, 1, 1)+2)

2079:         assert_equal(i[0].dtype, np.dtype(sdt2))

2082:             assert_equal(x['a'], count)

2085:     assert_equal(a['a'], np.arange(6).reshape(6, 1, 1, 1)*np.ones((1, 3, 2, 2))+2)

2095:     assert_equal(i[0].dtype, np.dtype(sdt2))

2098:         assert_equal(x['a'], count)

2109:     assert_equal(i[0].dtype, np.dtype(sdt2))

2112:         assert_equal(x['a'], count)

2123:     assert_equal(i[0].dtype, np.dtype(sdt2))

2126:         assert_equal(x['a'], a[count]['a'])

2137:     assert_equal(i[0].dtype, np.dtype(sdt2))

2140:         assert_equal(x['a'], a[count]['a'][
2151:     assert_equal(i[0].dtype, np.dtype(sdt2))

2154:         assert_equal(x['a'][
2155:         assert_equal(x['a'][2
2166:     assert_equal(i[0].dtype, np.dtype(sdt2))

2169:         assert_equal(x['a'][0], a[count]['a'])

2170:         assert_equal(x['a'][1], a[count]['a'])

2181:     assert_equal(i[0].dtype, np.dtype(sdt2))

2184:         assert_equal(x['a'][
2185:         assert_equal(x['a'][
2186:         assert_equal(x['a'][2,
2197:     assert_equal(i[0].dtype, np.dtype(sdt2))

2200:         assert_equal(x['a'][
2201:         assert_equal(x['a'][
2202:         assert_equal(x['a'][2,
2211:     assert_raises(ValueError, nditer, [a, b],

2229:     assert_raises(ValueError, nditer, [a, b],

2234:     assert_raises(ValueError, nditer, [a, b],

2242:     assert_equal(a.dtype, np.dtype('S4'))

2243:     assert_raises(TypeError, nditer, a, ['buffered'], ['readonly'],

2246:     assert_equal(i[0], b'abc')

2247:     assert_equal(i[0].dtype, np.dtype('S6'))

2250:     assert_equal(a.dtype, np.dtype('U4'))

2251:     assert_raises(TypeError, nditer, a, ['buffered'], ['readonly'],

2254:     assert_equal(i[0], u'abc')

2255:     assert_equal(i[0].dtype, np.dtype('U6'))

2263:     assert_equal(i[0].size, a.size)

2315:             assert_array_equal(res, comp_res)

2327:     assert_raises(ValueError, nditer, [a, b, c], [],

2329:     assert_raises(ValueError, nditer, [a, b, c], [],

2341:         assert_equal(vals, [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]])

2345:         assert_equal(vals, [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]])

2349:         assert_equal(vals, [[0, 2, 4], [1, 3, 5], [6, 8, 10], [7, 9, 11]])

2358:         assert_equal(vals, [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]])

2362:         assert_equal(vals, [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]])

2366:         assert_equal(vals, [[0, 2, 4], [1, 3, 5], [6, 8, 10], [7, 9, 11]])

2371:         assert_equal(vals, [[0, 2, 4, 1, 3, 5], [6, 8, 10, 7, 9, 11]])

2375:         assert_equal(vals, [[0, 1], [6, 7], [2, 3], [8, 9], [4, 5], [10, 11]])

2379:         assert_equal(vals, [[0, 2, 4], [6, 8, 10], [1, 3, 5], [7, 9, 11]])

2388:         assert_equal(vals, [[0, 1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11]])

2392:         assert_equal(vals, [[0, 1], [2, 3], [4, 5], [6, 7], [8, 9], [10, 11]])

2396:         assert_equal(vals, [[0, 2, 4], [1, 3, 5], [6, 8, 10], [7, 9, 11]])

2401:         assert_equal(vals, [[11, 10, 9, 8, 7, 6], [5, 4, 3, 2, 1, 0]])

2405:         assert_equal(vals, [[11, 10], [9, 8], [7, 6], [5, 4], [3, 2], [1, 0]])

2409:         assert_equal(vals, [[11, 9, 7], [10, 8, 6], [5, 3, 1], [4, 2, 0]])

2418:         assert_equal(vals, [[[0, 0], [0, 1], [0, 2]], [[1, 0], [1, 1], [1, 2]]])

2422:         assert_equal(vals, [[[0, 0], [1, 0]], [[0, 1], [1, 1]], [[0, 2], [1, 2]]])

2432:         assert_equal(j[0].dtype, np.dtype('f8'))

2434:         assert_equal(vals, [[0, 1, 2], [3, 4, 5]])

2444:             assert_equal(j[0].dtype, np.dtype('f8'))

2448:             assert_equal(a, [[0, 1, 2], [3, 4, 5]])

2449:         assert_equal(a, [[1, 2, 3], [4, 5, 6]])

2457:         assert_equal(j[0].dtype, np.dtype('f8'))

2461:         assert_equal(a, [[0, 1, 2], [3, 4, 5]])

2464:         assert_equal(a, [[1, 2, 3], [4, 5, 6]])

2475:         assert_equal(j[0].dtype, np.dtype('f8'))

2479:         assert_equal(a, [[1, 2, 3], [4, 5, 6]])

2485:         assert_equal(vals, [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]])

2489:         assert_equal(vals, [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]])

2496:         assert_equal(vals, [[0, 2, 4], [1, 3, 5], [6, 8, 10], [7, 9, 11]])

2508:             assert_equal(j[0].dtype, np.dtype('f8'))

2512:         assert_equal(a, [[1, 2, 3], [4, 5, 6]])

2517:     assert_raises(ValueError, nditer, [a, None], [],

2522:     assert_raises(ValueError, nditer, [a, None], ['external_loop'],

2540:         assert_equal(i.operands[1].ndim, 0)

2541:         assert_equal(i.operands[1], np.sum(a))

2551:         assert_equal(i[1].shape, (6,))

2552:         assert_equal(i[1].strides, (0,))

2561:         assert_equal(i.operands[1].ndim, 0)

2562:         assert_equal(i.operands[1], np.sum(a))

2582:         assert_equal(it1.operands[1], it2.operands[1])

2583:         assert_equal(it2.operands[1].sum(), a.size)

2594:         assert_equal(i[1].dtype, np.dtype('f8'))

2595:         assert_(i[1].dtype != b.dtype)

2600:     assert_equal(b, np.sum(a))

2609:         assert_equal(i[1].shape, (3,))

2610:         assert_equal(i[1].strides, (0,))

2618:     assert_equal(b, np.sum(a, axis=1))

2630:         assert_equal(it[0], [1, 2, 1, 2])

2646:     assert_equal(y_base[1
2647:     assert_equal(y_base[
2662:     assert_equal(bufsizes, [5, 2, 5, 2])

2663:     assert_equal(sum(bufsizes), a.size)

2675:     assert_raises(ValueError, nditer, [a, m], [],

2679:     assert_raises(ValueError, nditer, [a, m], [],

2683:     assert_raises(ValueError, nditer, [a, m], [],

2687:     assert_raises(ValueError, nditer, [a, m, m2], [],

2693:     assert_raises(ValueError, nditer, [a, m], [],

2697:     assert_raises(ValueError, nditer, [a, b, m], ['reduce_ok'],

2707:     assert_raises(ValueError, nditer, [a, b, m2], ['reduce_ok'],

2719:     assert_raises(TypeError, np.nditer, [a, mbad1], ['buffered'],

2725:     assert_raises(TypeError, np.nditer, [a, mbad2], ['buffered'],

2765:     assert_equal(a, np.broadcast_to([1, 1, 1] * reps, shape))

2785:         assert_equal(a, np.broadcast_to([2.5, 2.5, 2.5] * reps, shape))

2788:         assert_equal(a, np.broadcast_to([2.5, 2.5, 1] * reps, shape))

2804:     assert_equal(a, np.broadcast_to([3, 3, 2.5] * reps, shape))

2827:         assert sys.getrefcount(singleton) - count == np.count_nonzero(mask)

2829:     assert_array_equal(arr[~mask], original[~mask])

2830:     assert (arr[mask] == np.array((3, singleton), arr.dtype)).all()

2834:         assert sys.getrefcount(singleton) == count

2844:         assert_raises(AttributeError, delattr, it, s)

2851:         assert_raises(AttributeError, delattr, it, s)

2871:     assert_equal(it.operands[1], [[0, 2], [2, 4], [19, 21]])

2879:     assert_equal(it.operands[1], [[0, 2], [2, 4], [19, 21]])

2888:     assert_equal(it.operands[2], [[8, 12], [20, 5]])

2894:     assert_equal(i.ndim, 0)

2895:     assert_equal(next(i), (2, 3))

2896:     assert_equal(i.multi_index, ())

2897:     assert_equal(i.iterindex, 0)

2898:     assert_raises(StopIteration, next, i)

2901:     assert_equal(next(i), (2, 3))

2902:     assert_raises(StopIteration, next, i)

2906:     assert_equal(i.ndim, 0)

2907:     assert_equal(len(i), 1)

2911:     assert_equal(i.ndim, 0)

2912:     assert_equal(len(i), 1)

2915:     with assert_raises(ValueError)
2924:     assert_equal(vals['a'], 0.5)

2925:     assert_equal(vals['b'], 0)

2926:     assert_equal(vals['c'], [[(0.5)]*3]*2)

2927:     assert_equal(vals['d'], 0.5)

2935:     assert_raises(TypeError, lambda
2941:     assert_raises(TypeError, lambda
2948:     assert_raises(TypeError, np.logical_or.reduce, 

2968:     assert_array_equal(res, np.full(8000, 4, dtype=object))

2976:     assert_raises(ValueError, nditer, (arr, arr[
2979:     assert_raises(ValueError, nditer,

3003:         with assert_raises(ValueError)
3014:             with assert_raises(ValueError)
3020:     assert_(a.dtype.byteorder != au.dtype.byteorder)

3025:     assert_equal(au, 100)

3031:             assert_equal(au.flags.writeable, False)

3036:     assert_equal(au, 0)

3037:     assert_equal(au.flags.writeable, True)

3039:     assert_raises(ValueError, getattr, it, 'operands')

3046:         assert_(x.flags.writebackifcopy)

3047:     assert_equal(au, 6)

3048:     assert_(not x.flags.writebackifcopy)

3050:     assert_equal(au, 6) # but not connected to au

3069:         assert_raises(ValueError, getattr, it, 'operands')

3080:     assert_raises(RuntimeError, enter)

3104:     assert_equal(z, range(0, 10, 2))

3106:     assert_equal(z, range(0, 10, 2))

3110:     assert_equal (next(it), 0)

3112:     assert_raises(StopIteration, next, it)

3113:     assert_raises(ValueError, getattr, it, 'operands')

3117:     assert_raises(TypeError, it.close, 1)

3128:         assert len(sup.log) == 1

3155:     assert count == sys.getrefcount(value)

3166:     assert count == sys.getrefcount(value)

3199:     assert count == sys.getrefcount(value)

3276:     assert len(res) == len(expected)

3280:         assert res_line.startswith(expected_line.strip())

Total asserts: 629

Filename: numpy/core/tests/test_cpu_features.py
4: def assert_features_equal(actual, desired, fname)
64:             assert_features_equal(__cpu_features__.get(gname), all(test_features), gname)

69:             assert_features_equal(npy_have, cpu_have, feature_name)

Total asserts: 3

Filename: numpy/core/tests/test_protocols.py
43:     assert arr.dtype == 'U100'

44:     assert arr[0] == Wrapper.val

Total asserts: 2

Filename: numpy/core/tests/test_regression.py
12:         assert_, assert_equal, IS_PYPY, assert_almost_equal,

13:         assert_array_equal, assert_array_almost_equal, assert_raises,

14:         assert_raises_regex, assert_warns, suppress_warnings,

15:         _assert_valid_refcount, HAS_REFCOUNT, IS_PYSTON

31:         assert_array_equal(np.array([v]), np.array(v))

45:             assert_array_equal(a, b)

54:         assert_almost_equal(np.add.reduce([1., .5], dtype=None), 1.5)

65:         assert_(a is np.asarray(a, order='F'))

70:         assert_(not a.ravel('F').flags.owndata)

77:         assert_array_almost_equal(c, a)

85:         assert_array_equal(idx, origidx)

104:         assert_raises(AttributeError, rs)

127:         assert_almost_equal(x**(-1), [1/(1+2j)])

133:         assert_array_equal(a == 'auto', np.array([False, True]))

134:         assert_(a[1] == 'auto')

135:         assert_(a[0] != 'auto')

140:             assert_(b != 'auto')

141:         assert_(b[0] != 'auto')

157:         assert_raises(TypeError, np.dtype,

168:         assert_array_almost_equal(xa, ya.nonzero())

169:         assert_array_almost_equal(xb, yb.nonzero())

170:         assert_(np.all(a[ya] > 0.5))

171:         assert_(np.all(b[yb] > 0.5))

181:         assert_array_almost_equal(test, correct)

197:         assert_(buf[0]['head'] == 1)

208:         assert_equal(_z, np.ones(10))

211:         assert_equal(_z, np.ones(10))

217:         assert_array_equal(ref, x)

219:         assert_array_equal(ref, x)

224:         assert_array_equal(ref, x)

228:         assert_array_equal(ref, x)

232:         assert_array_equal(ref, x)

236:         assert_array_equal(ref, x)

243:         assert_array_equal(ref, x)

247:         assert_array_equal(ref, x)

251:         assert_array_equal(ref, x)

255:         assert_array_equal(ref, x)

272:         assert_raises(ValueError, np.hstack, (x, y))

278:         assert_(type(a.squeeze()) is np.ndarray)

279:         assert_(type(b.squeeze()) is np.ndarray)

283:         assert_equal(0, np.add.identity)

288:         assert_equal(a, 23. + 2**135)

292:         assert_equal('0', np.binary_repr(0))

312:         assert_array_almost_equal(x.ravel(), np.frombuffer(x.tobytes()))

318:         assert_array_almost_equal(x, [[0], [1], [2]])

320:         assert_array_almost_equal(x, [[0], [1], [2]])

332:         assert_raises(ValueError, bfa)

333:         assert_raises(ValueError, bfb)

345:         assert_raises(ValueError, assign, a, b, np.nan)

347:         assert_raises(ValueError, assign, a, r, np.nan)

358:             assert_equal(dt, dt_)

364:         assert_raises(ValueError, np.array, [1, 'object'], dt)

373:         assert_array_equal(a, b)

374:         assert_equal(a, r[0][0])

383:         assert_raises(IndexError, index_tmp)

390:         assert_equal(x[0], b'a')

394:         assert_equal(np.array([[1, 2], 3, 4], dtype=object).shape, (3,))

395:         assert_equal(np.array([[1, 2], [3, 4]], dtype=object).shape, (2, 2))

396:         assert_equal(np.array([(1, 2), (3, 4)], dtype=object).shape, (2, 2))

397:         assert_equal(np.array([], dtype=object).shape, (0,))

398:         assert_equal(np.array([[], [], []], dtype=object).shape, (3, 0))

399:         assert_equal(np.array([[3, 4], [5, 6], None], dtype=object).shape, (3,))

412:             assert_equal(c, "x")

417:         assert_equal(np.lexsort(v), 0)

428:         assert_raises(KeyError, np.lexsort, BuggySequence())

433:         assert xs.strides == (8,)

434:         assert np.lexsort((xs,)).shape[0] == 0 # Works

437:         assert np.lexsort((xs,)).shape[0] == 0 # Was
444:         assert np.lexsort((xs,), axis=0).shape[0] == 0

448:         assert np.lexsort((xs,), axis=0).shape[0] == 2

451:         assert_raises(np.AxisError, np.lexsort, (np.arange(1),), axis=2)

452:         assert_raises(np.AxisError, np.lexsort, (np.array([]),), axis=1)

453:         assert_raises(np.AxisError, np.lexsort, (np.array(1),), axis=10)

459:         assert np.lexsort((xs,)).shape[0] == xs.shape[0]

489:             assert_equal(result, original)

493:                     assert_(isinstance(name, str))

502:         assert_equal(np.arange(4, dtype='>c8').imag.max(), 0.0)

503:         assert_equal(np.arange(4, dtype='<c8').imag.max(), 0.0)

504:         assert_equal(np.arange(4, dtype='>c8').real.max(), 3.0)

505:         assert_equal(np.arange(4, dtype='<c8').real.max(), 3.0)

509:         assert_(np.array([1, None, 'A']).shape == (3,))

517:         assert_equal(np.array([]).dtype, np.zeros(0).dtype)

523:         assert_(x['one'] > 1 and x['two'] > 2)

549:                 assert_((res1 == res2).all(), func)

551:                 assert_(abs(res1-res2).max() < 1e-8, func)

565:             assert_(abs(res1-res2).max() < 1e-8, func)

575:         assert_equal(x.shape, (1,))

583:         assert_(ra['x'] != rb['x'])

595:         assert_equal(x.flat[2], (1, 2, 3))

600:         assert_equal(np.array(x, dtype=np.float32, ndmin=2).ndim, 2)

601:         assert_equal(np.array(x, dtype=np.float64, ndmin=2).ndim, 2)

605:         assert_(np.array([1, 2], order='C', ndmin=3).flags.c_contiguous)

606:         assert_(np.array([1, 2], order='F', ndmin=3).flags.f_contiguous)

607:         assert_(np.array(np.ones((2, 2), order='F'), ndmin=3).flags.f_contiguous)

608:         assert_(np.array(np.ones((2, 2), order='C'), ndmin=3).flags.c_contiguous)

621:         assert_(np.dtype('i4') == np.dtype(('i4', ())))

629:         assert_equal(np.array(['X'], 'c'), b'X')

633:         assert_raises(ValueError,

640:         assert_equal(dt1.__repr__(), dt2.__repr__())

645:         assert_equal(a, [[0, 2, 4], [1, 3, 5]])

648:         assert_equal(b.reshape(2, 2, order='F'), [[2, 6], [4, 8]])

654:         assert_(a.reshape(5, 1).strides[0] == 0)

670:         assert_equal(a.reshape(3, 2, 1, 1).strides, strides_c)

671:         assert_equal(a.reshape(3, 2, 1, 1, order='F').strides, strides_f)

672:         assert_equal(np.array(0, dtype=np.int32).reshape(1, 1).strides, (4, 4))

677:         assert_equal(a.repeat(3), [2, 2, 2, 5, 5, 5, 8, 8, 8, 11, 11, 11])

683:         assert_equal(a[np.where(a == 3)], a2[np.where(a2 == 3)])

687:         assert_(a.argmax() == 2)

698:             assert_(a.dtype in [dt0, dt1])

705:         assert_equal(np.sort(b, axis=0), a)

709:         _assert_valid_refcount(np.vdot)

713:         assert_equal(ca.startswith('H'), [True, False])

719:         assert_equal(np.subtract.reduce(tosubtract), -10)

720:         assert_equal(np.divide.reduce(todivide), 16.0)

721:         assert_array_equal(np.subtract.accumulate(tosubtract),

723:         assert_array_equal(np.divide.accumulate(todivide),

728:         assert_raises(ValueError, np.convolve, [], [1])

729:         assert_raises(ValueError, np.convolve, [1], [])

734:         assert_array_equal(r.byteswap(),

739:         assert_equal(np.array("a\x00\x0b\x0c\x00").item(),

745:         assert_(asbytes(r['var1'][0][0]) == b'abc')

753:         assert_array_equal(a, b)

766:             assert_(ref_d == sys.getrefcount(d))

780:         assert_almost_equal(uradians(big_endian).astype(float),

797:         assert_array_equal(x.argsort(kind='m'), np.arange(32))

802:         assert_(a[a.argmax()] == a.max())

817:         assert_raises(ValueError, np.fromiter, [['12', ''], ['13', '']], str)

825:         assert_equal(np.dot(x, z), np.dot(x, y2))

836:         assert_raises(TypeError, rs)

844:             assert_equal(new, el)

850:             assert_equal(np.arange(0, dtype=dt).dtype, dt)

851:             assert_equal(np.arange(0.5, dtype=dt).dtype, dt)

852:             assert_equal(np.arange(5, dtype=dt).dtype, dt)

861:         assert_raises(IndexError, ia, x, s, np.zeros(9, dtype=float))

862:         assert_raises(IndexError, ia, x, s, np.zeros(11, dtype=float))

865:         assert_raises(ValueError, ia, x.flat, s, np.zeros(9, dtype=float))

866:         assert_raises(ValueError, ia, x.flat, s, np.zeros(11, dtype=float))

875:         assert_equal(np.binary_repr(0, width=3), '000')

878:         assert_equal(np.fromstring("12
884:         assert_equal(x.searchsorted(y), [3, 3])

889:         assert_array_equal(x.argsort(kind='m'), np.array([1, 0]))

890:         assert_array_equal(x.argsort(kind='q'), np.array([1, 0]))

896:         assert_array_equal(np.sort(x, kind="q"), y)

905:         assert_array_equal(x.astype('>i4'), x.astype('<i4').flat[
906:         assert_array_equal(x.astype('>i4').flat[
910:         assert_equal(str(np.abs(x)), '[0. 0. 0.]')

915:             assert_equal(x.flat[0].dtype, x[0].dtype)

930:         assert_equal(b.strides, (3 * b.itemsize, b.itemsize))

954:         assert_equal(cnt(a), cnt0_a + 5)

957:         assert_equal(cnt(a), cnt0_a)

958:         assert_equal(cnt(b), cnt0_b + 5)

961:         assert_equal(cnt(b), cnt0_b + 3)

962:         assert_equal(cnt(c), cnt0_c + 2)

972:         assert_(cnt(a) == cnt0_a + 1)

974:         assert_(cnt(b) == cnt0_b + 1)

977:         assert_(cnt(a) == cnt0_a + 6)

978:         assert_(cnt(b) == cnt0_b + 6)

981:         assert_(cnt(a) == cnt0_a + 1)

991:         assert_(cnt(a) == cnt0_a + 5)

992:         assert_(cnt(b) == cnt0_b + 5)

995:         assert_(cnt(a) == cnt0_a + 10)

996:         assert_(cnt(b) == cnt0_b + 10)

999:         assert_(cnt(a) == cnt0_a + 10)

1000:         assert_(cnt(b) == cnt0_b + 5)

1003:         assert_(cnt(a) == cnt0_a + 10)

1004:         assert_(cnt(b) == cnt0_b + 10)

1015:         assert_(cnt(a) == cnt0_a + 5)

1016:         assert_(cnt(b) == cnt0_b + 5)

1019:         assert_(cnt(a) == cnt0_a + 5 + 5)

1020:         assert_(cnt(b) == cnt0_b + 5 + 5)

1023:         assert_(cnt(a) == cnt0_a + 5 + 3*5)

1026:         assert_(cnt(a) == cnt0_a + 5 + 3)

1030:         assert_(cnt(a) == cnt0_a + 5 + 2)

1031:         assert_(cnt(b) == cnt0_b + 5 + 3)

1057:         assert_(not arr[0].deleted)

1059:         assert_(not arr[0].deleted)

1063:         assert_raises(ValueError,

1070:         assert_(not np.any(a))

1086:         assert_equal(x, np.array([1], dtype=dtype))

1107:         assert_((xp.__array_interface__['data'][0] !=

1137:         assert_(dat.info == 'jubba')

1139:         assert_(dat.info == 'jubba')

1141:         assert_(dat.info == 'jubba')

1143:         assert_(dat.info == 'jubba')

1145:         assert_(dat.info == 'jubba')

1147:         assert_(dat.info == 'jubba')

1149:         assert_(dat.info == 'jubba')

1150:         assert_(dat.all(1).info == 'jubba')

1151:         assert_(dat.any(1).info == 'jubba')

1152:         assert_(dat.argmax(1).info == 'jubba')

1153:         assert_(dat.argmin(1).info == 'jubba')

1154:         assert_(dat.argsort(1).info == 'jubba')

1155:         assert_(dat.astype(TestArray).info == 'jubba')

1156:         assert_(dat.byteswap().info == 'jubba')

1157:         assert_(dat.clip(2, 7).info == 'jubba')

1158:         assert_(dat.compress([0, 1, 1]).info == 'jubba')

1159:         assert_(dat.conj().info == 'jubba')

1160:         assert_(dat.conjugate().info == 'jubba')

1161:         assert_(dat.copy().info == 'jubba')

1165:         assert_(dat2.choose(choices).info == 'jubba')

1166:         assert_(dat.cumprod(1).info == 'jubba')

1167:         assert_(dat.cumsum(1).info == 'jubba')

1168:         assert_(dat.diagonal().info == 'jubba')

1169:         assert_(dat.flatten().info == 'jubba')

1170:         assert_(dat.getfield(np.int32, 0).info == 'jubba')

1171:         assert_(dat.imag.info == 'jubba')

1172:         assert_(dat.max(1).info == 'jubba')

1173:         assert_(dat.mean(1).info == 'jubba')

1174:         assert_(dat.min(1).info == 'jubba')

1175:         assert_(dat.newbyteorder().info == 'jubba')

1176:         assert_(dat.prod(1).info == 'jubba')

1177:         assert_(dat.ptp(1).info == 'jubba')

1178:         assert_(dat.ravel().info == 'jubba')

1179:         assert_(dat.real.info == 'jubba')

1180:         assert_(dat.repeat(2).info == 'jubba')

1181:         assert_(dat.reshape((2, 4)).info == 'jubba')

1182:         assert_(dat.round().info == 'jubba')

1183:         assert_(dat.squeeze().info == 'jubba')

1184:         assert_(dat.std(1).info == 'jubba')

1185:         assert_(dat.sum(1).info == 'jubba')

1186:         assert_(dat.swapaxes(0, 1).info == 'jubba')

1187:         assert_(dat.take([2, 3, 5]).info == 'jubba')

1188:         assert_(dat.transpose().info == 'jubba')

1189:         assert_(dat.T.info == 'jubba')

1190:         assert_(dat.var(1).info == 'jubba')

1191:         assert_(dat.view(TestArray).info == 'jubba')

1193:         assert_(type(dat.nonzero()[0]) is np.ndarray)

1194:         assert_(type(dat.nonzero()[1]) is np.ndarray)

1203:         assert_( a[0].tolist() == b[0])

1204:         assert_( a[1].tolist() == b[1])

1209:         assert_raises(ValueError, a.item)

1214:         assert_equal(a, b)

1222:             assert_equal(str(x), "[(b'a', 'b')]", err_msg=msg)

1230:             assert_equal(have, want)

1239:         assert_(a.dtype.names[0] == "notfoo")

1240:         assert_(a.dtype.names[1] == "bar")

1249:         assert_(a is None)

1250:         assert_(type(b) is int)

1251:         assert_(type(b2) is float)

1252:         assert_(type(c) is np.ndarray)

1253:         assert_(c.dtype == object)

1254:         assert_(d.dtype == object)

1259:         assert_raises(TypeError, x.resize, (2, 2), order='C')

1264:         assert_raises(ValueError, lambda x
1268:         assert_raises(ValueError, lambda
1275:         assert_(arr[0][0] == 'john')

1276:         assert_(arr[0][1] == 4)

1281:         #Create test string data, construct void scalar from data and assert

1287:         assert_(test_string_void_scalar.view(test_string.dtype) == test_string)

1289:         #Create record scalar, construct from data and assert that

1295:         assert_(test_record_void_scalar == test_record)

1299:             assert_(pickle.loads(

1301:             assert_(pickle.loads(

1324:                     assert_(np.all(z == 0))

1325:                     assert_(z.shape == (m, n))

1331:         with assert_raises_regex(ValueError,

1339:         with assert_raises_regex(ValueError,

1342:             assert_(np.size == sz)

1348:         assert_(np.alltrue(a == np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])))

1349:         assert_(np.alltrue(b == np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])))

1355:         assert_equal(a.shape, (2,))

1356:         assert_equal(a.dtype, np.dtype(object))

1357:         assert_equal(a[0], np.ones(2))

1358:         assert_equal(a[1], np.array(2))

1361:         assert_equal(a.shape, (2,))

1362:         assert_equal(a.dtype, np.dtype(object))

1363:         assert_equal(a[0], (1,))

1364:         assert_equal(a[1], np.array(1))

1369:         assert_equal(t.shape, (2,))

1370:         assert_equal(t.dtype, np.dtype(object))

1374:         assert_raises(ValueError, np.zeros, [975]*7, np.int8)

1375:         assert_raises(ValueError, np.zeros, [26244]*5, np.int8)

1380:         assert_raises(KeyError, dt.__getitem__, "f2")

1381:         assert_raises(IndexError, dt.__getitem__, 1)

1382:         assert_raises(TypeError, dt.__getitem__, 0.0)

1389:         assert_equal(i, np.arange(100, dtype=int))

1395:         assert_equal(a, b)

1397:         assert_equal(c, np.array(['abcde', 'ijklm']))

1399:         assert_equal(a, d)

1402:         assert_equal(a, e)

1409:         assert_raises(UnicodeEncodeError, np.array, a, 'S4')

1414:         assert_raises(UnicodeEncodeError, np.array, a, 'S')

1416:         assert_raises(UnicodeEncodeError, np.array, b, 'S')

1420:         assert_(a.itemsize == 16)

1422:         assert_(a.itemsize == 16)

1424:         assert_(a.itemsize == 20)

1426:         assert_(a.itemsize == 20)

1428:         assert_(a.itemsize == 16)

1467:                 assert_equal(x, np.frombuffer(y.tobytes(), dtype=dtype.newbyteorder()))

1470:                 assert_equal(x, np.frombuffer(y.tobytes(), dtype=dtype))

1472:             assert_equal(x.real, y.real.byteswap())

1473:             assert_equal(x.imag, y.imag.byteswap())

1481:         assert_(x[0, 1] == x[0, 0])

1492:         assert_(sys.getrefcount(strb) == numb)

1493:         assert_(sys.getrefcount(stra) == numa + 2)

1498:         assert_raises(ValueError, np.dtype, dtspec)

1514:         assert_equal(sha256(x).hexdigest(), '4636993d3e1da4e9d6b8f87b79e8f7c6d018580d52661950eabc3845c5897a4d')

1522:         assert_(np.isfinite(np.log1p(np.exp2(-53))))

1527:         assert_(np.alltrue(a == np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])))

1528:         assert_(np.alltrue(b == np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])))

1532:         with assert_warns(DeprecationWarning)
1556:             assert_equal(type(getattr(x, name)), np.float32,

1565:         assert_(ret is out)

1566:         assert_array_equal(ret, data.var(axis=1))

1569:         assert_(ret is out)

1570:         assert_array_equal(ret, data.std(axis=1))

1574:         assert_equal(np.maximum(1, cnan), cnan)

1584:         assert_equal(x[0], 2)

1592:         assert_equal(id(x), id(y))

1607:         assert_equal(c1, c2)

1618:         assert_equal(ret, np.array([20, 21, 22, 23], dtype='u1'))

1619:         assert_equal(f.tell(), 24)

1623:         assert_equal(f.tell(), 43)

1627:         assert_equal(data, b"\x01\x02\x03")

1632:         assert_equal(data, np.array([84, 85, 86, 87], dtype='u1'))

1639:             assert_warns(np.ComplexWarning, float, x)

1642:                 assert_equal(float(x), float(x.real))

1647:             assert_equal(complex(x), 1+2j)

1653:             assert_equal(x.astype(bool), np.array([0, 1, 1], dtype=bool))

1654:             assert_(np.any(x))

1655:             assert_(np.all(x[1
1659:         assert_equal(int(np.uint64(x)), x)

1665:         assert_raises(ValueError, setattr, ra.dtype, 'names', ('f1', 'f1'))

1671:         assert_array_equal(a1 == a2, [True, False])

1672:         assert_array_equal(a2 == a1, [True, False])

1677:         assert_equal(a.nonzero()[0], [1])

1679:         assert_equal(a.nonzero()[0], [1])  # [0] if nonzero() ignores swap

1683:         assert_(np.find_common_type([], ['?', '?']) == '?')

1688:         assert_equal(a, [1.])

1696:         assert_equal(np.dtype('S10').itemsize, 10)

1698:         assert_equal(np.dtype('S10').itemsize, 10)

1703:         assert_(np.any(a))

1704:         assert_(np.all(a))

1708:         assert_equal(a.sum(dtype='d'), a.astype('d').sum())

1715:         assert_equal(c, 2.0)

1719:         assert_(np.array(1.0).flags.c_contiguous)

1720:         assert_(np.array(1.0).flags.f_contiguous)

1721:         assert_(np.array(np.float32(1.0)).flags.c_contiguous)

1722:         assert_(np.array(np.float32(1.0)).flags.f_contiguous)

1728:         assert_(a.flags.c_contiguous)

1729:         assert_(a.flags.f_contiguous)

1730:         assert_(b.flags.f_contiguous)

1759:         assert_equal(np.squeeze(oldsqueeze),

1764:         assert_equal(np.squeeze(oldsqueeze, axis=None),

1771:         with assert_raises(TypeError)
1783:         with assert_raises(TypeError)
1790:         with assert_raises(ValueError)
1797:         assert_(a.flags.c_contiguous)

1798:         assert_(a.flags.f_contiguous)

1799:         assert_(b.flags.c_contiguous)

1806:         assert_raises(RecursionError, int, a)

1807:         assert_raises(RecursionError, float, a)

1817:         assert_raises(RecursionError, int, a)

1825:         assert_equal(a, 1)

1832:         assert_equal(int(a), int(0))

1833:         assert_equal(float(a), float(0))

1841:             assert_(sys.getrefcount(a[()]) == 2)

1847:         assert_equal(np.add.accumulate(x[
1852:         assert_raises(TypeError, x.setfield, 4, np.int32, 0)

1860:         assert_equal(a, np.array(s1))

1862:         assert_equal(a, np.array(s2))

1866:         assert_equal(a, np.array(3))

1868:         assert_equal(a, np.array(4))

1876:         assert_equal(a.dtype, np.dtype('S5'))

1878:         assert_equal(b.dtype, np.dtype('S5'))

1887:             assert_equal(a1, a2)

1892:         assert_equal(r[0
1893:         assert_equal(r[0
1894:         assert_equal(r[0
1895:         assert_equal(r[0
1900:         assert_(a.flags.aligned)

1902:         assert_(not a.flags.aligned)

1920:         assert_equal(x, [[1, 3], [2, 4]])

1931:         assert_equal(s[0], "\x01")

1934:         assert_equal(s[0], "\x01")

1942:             assert_equal(bytestring[0
1955:         assert_array_equal(result, np.array([129], dtype='b'))

1957:         assert_raises(Exception, pickle.loads, data, encoding='koi8-r')

1986:             assert_equal(result, original)

1995:                 assert_(result != original)

1999:                 assert_raises(ValueError, pickle.loads, data, encoding='koi8-r')

2009:         assert_equal(a_rec.astype(object), a_obj)

2013:         assert_equal(b, a_obj)

2017:         assert_equal(b, a_rec)

2029:         assert_equal(a, b)

2033:         assert_equal(a, [[1, 2], [1, 2]])

2048:         assert_equal(sys.getrefcount(a), acnt)

2053:         assert_raises(TypeError, x.searchsorted, 1)

2061:                 assert_equal(tostr(b[0]), tostr(val))

2063:                 assert_equal(tostr(b[1]), tostr(val))

2067:                 assert_equal(tostr(b[0]), tostr(val))

2069:                 assert_equal(tostr(b[1]), tostr(val))

2076:         assert_equal(a.dtype.itemsize, 16)

2084:         assert_equal(res, tgt)

2100:         assert_(y == "[0 0]")

2106:         assert_raises(TypeError, np.searchsorted, a, 1.2)

2111:         assert_raises(TypeError, np.searchsorted, a, 1)

2125:         assert_array_equal(arr2, data_back)

2130:         assert_equal(count, 0)

2136:         assert_(b.flags.fortran)

2137:         assert_(b.flags.f_contiguous)

2138:         assert_(c.flags.fortran)

2139:         assert_(c.flags.f_contiguous)

2147:         assert_array_equal(arr, arr2)

2152:         assert_raises(ValueError, arr.__setitem__, slice(None), [9, 9])

2154:         assert_equal(arr, [9, 9, 9])

2161:         assert_equal(formatted, str(arr[0]))

2168:         assert_equal(arr, arr_cp)

2169:         assert_equal(arr.shape, arr_cp.shape)

2170:         assert_equal(int(arr), int(arr_cp))

2171:         assert_(arr is not arr_cp)

2172:         assert_(isinstance(arr_cp, type(arr)))

2181:         assert_equal(arr, arr_cp)

2182:         assert_(arr is not arr_cp)

2184:         assert_(arr[0, 1] is not arr_cp[1, 1])

2186:         assert_(arr[0, 1] is arr[1, 1])

2188:         assert_(arr_cp[0, 1] is arr_cp[1, 1])

2195:         assert_(a.shape == b.shape)

2219:             assert_raises(TypeError, f, lhs, rhs)

2220:         assert_(not op.eq(lhs, rhs))

2221:         assert_(op.ne(lhs, rhs))

2230:         assert_equal(10 == x, "OK")

2231:         assert_equal(np.int32(10) == x, "OK")

2232:         assert_equal(np.array([10]) == x, "OK")

2238:             assert_equal(pickle.loads(

2247:         assert_raises(ValueError, np.frompyfunc, passer, 32, 1)

2253:             assert_equal(a.repeat(2, axis=axis), a.repeat([2], axis=axis))

2263:         assert_equal(uf(a), ())

2265:         assert_array_equal(a, expected)

2278:         assert_(sys.getrefcount(a) < 10)

2287:         assert_equal(before, after)

2291:         assert_array_equal(np.percentile(np.arange(10), []), np.array([]))

2311:         assert_raises(ValueError, a.reshape, new_shape)

2316:         assert_raises(ValueError, np.dtype, ('O', [('name', 'i8')]))

2317:         assert_raises(ValueError, np.dtype, ('i8', [('name', 'O')]))

2318:         assert_raises(ValueError, np.dtype,

2320:         assert_raises(ValueError, np.dtype, ([('a', 'i4'), ('b', 'i4')], 'O'))

2321:         assert_raises(ValueError, np.dtype, ('i8', 'O'))

2323:         assert_raises(ValueError, np.dtype,

2325:         assert_raises(ValueError, np.dtype,

2328:         assert_raises(ValueError, np.dtype,

2332:         assert_equal(a[0], 1)

2335:         assert a[0] is a.item()

2336:         assert type(a[0]) is int

2347:                 assert_equal(t.__hash__, None)

2349:                 assert_(t.__hash__ != None)

2362:             assert_equal(item, item2)

2369:         assert_equal(x, b'\x00\x00\x00\x00')

2373:         assert_(np.array([b'a'], 'V1').astype('O') == b'a')

2374:         assert_(np.array([b'ab'], 'V2').astype('O') == b'ab')

2375:         assert_(np.array([b'abc'], 'V3').astype('O') == b'abc')

2376:         assert_(np.array([b'abcd'], 'V4').astype('O') == b'abcd')

2401:                 assert_equal(squeezed, scvalue)

2402:                 assert_equal(type(squeezed), type(scvalue))

2414:                 assert_(base <= sys.getrefcount(s))

2427:         assert b'_multiarray_umath' not in s

2430:             assert b'numpy.core.numeric' in s

2432:             assert b'numpy.core.multiarray' in s

2438:         assert_raises(ValueError, arr.astype, 'c8')

2444:         assert_equal(res, [-99,   1,   2,   3,  -7,  88,  99])

2449:         assert_equal(res, [0,   1,   2,   3,  -7,  0])

2457:             assert_equal(pickle.loads(dumped), arr)

2463:         with assert_raises(ValueError)
2485:         assert arr.shape == (1, 0, 0)

2493:         assert arr.size * arr.itemsize > 2 ** 31

2495:         assert_equal(c_arr._length_, arr.size)

2508:         assert descr == [('', '|V8')]  # instead of [(b'', '|V8')]

2520:         assert b.strides[0] > int32_max * b.dtype.itemsize

2521:         assert np.dot(b, b) == 2.0

2531:         assert str(f) == "<ufunc 'cassé (vectorized)'>"

2561:         assert get_idx(order[0], types) < get_idx(order[1], types), (

Total asserts: 471

Filename: numpy/core/overrides.py
119:         assert example.__module__ == 'numpy'

Total asserts: 1

Filename: numpy/core/code_generators/generate_umath.py
86:         assert len(self.in_) == nin

89:         assert len(self.out) == nout

Total asserts: 2

Filename: numpy/core/code_generators/ufunc_docstrings.py
53:             assert '$OUT_SCALAR_1' in doc, "in {}".format(name)

55:             assert '$OUT_SCALAR_2' in doc, "in {}".format(name)

57:             assert False, "Could not detect number of inputs in {}".format(name)

Total asserts: 3

Filename: numpy/core/numeric.py
1645:             assert b.shape[-1] == 3

1655:         assert a.shape[-1] == 3

1670:             assert b.shape[-1] == 2

Total asserts: 3

Filename: numpy/core/_exceptions.py
27:     assert issubclass(cls, Exception)

44:         assert len(self.dtypes) == 2

Total asserts: 2

Filename: numpy/core/arrayprint.py
346:     >>> from numpy.testing import assert_equal

354:     ...      assert_equal(opts, np.get_printoptions())

1447:     >>> assert eval(dtype_short_repr(dt)) == dt

Total asserts: 3

Filename: numpy/linalg/tests/test_linalg.py
20:     assert_, assert_equal, assert_raises, assert_array_equal,

21:     assert_almost_equal, assert_allclose, suppress_warnings,

22:     assert_raises_regex, HAS_LAPACK64,

33: old_assert_almost_equal = assert_almost_equal

36: def assert_almost_equal(a, b, single_decimal=6, double_decimal=12, **kw)
41:     old_assert_almost_equal(a, b, decimal=decimal, **kw)

75:         assert_(isinstance(name, str))

96:     assert tag in all_tags, "Invalid tag"

295:         assert_(np.all(xi == x))

460:         assert_almost_equal(b, dot_generalized(a, x))

461:         assert_(consistent_subclass(x, b))

468:         assert_equal(linalg.solve(x, x).dtype, dtype)

479:         assert_array_equal(result, expected)

480:         assert_(isinstance(result, ArraySubclass))

483:         assert_raises(linalg.LinAlgError, linalg.solve, a[
484:         assert_raises(ValueError, linalg.solve, a, b[
488:         assert_raises(ValueError, linalg.solve, a, b)

489:         assert_raises(ValueError, linalg.solve, a[0
495:         assert_array_equal(result, expected)

496:         assert_(isinstance(result, ArraySubclass))

499:         assert_raises(ValueError, linalg.solve, a, b)

500:         assert_raises(ValueError, linalg.solve, a[0
501:         assert_raises(ValueError, linalg.solve, a[
512:         assert_array_equal(result, expected)

513:         assert_(isinstance(result, ArraySubclass))

518:         assert_array_equal(result, expected)

519:         assert_(isinstance(result, ArraySubclass))

526:         assert_almost_equal(dot_generalized(a, a_inv),

528:         assert_(consistent_subclass(a_inv, a))

535:         assert_equal(linalg.inv(x).dtype, dtype)

543:         assert_(res.dtype.type is np.float64)

544:         assert_equal(a.shape, res.shape)

545:         assert_(isinstance(res, ArraySubclass))

549:         assert_(res.dtype.type is np.complex64)

550:         assert_equal(a.shape, res.shape)

551:         assert_(isinstance(res, ArraySubclass))

559:         assert_almost_equal(ev, evalues)

566:         assert_equal(linalg.eigvals(x).dtype, dtype)

568:         assert_equal(linalg.eigvals(x).dtype, get_complex_dtype(dtype))

576:         assert_(res.dtype.type is np.float64)

577:         assert_equal((0, 1), res.shape)

579:         assert_(isinstance(res, np.ndarray))

583:         assert_(res.dtype.type is np.complex64)

584:         assert_equal((0,), res.shape)

586:         assert_(isinstance(res, np.ndarray))

593:         assert_allclose(dot_generalized(a, evectors),

596:         assert_(consistent_subclass(evectors, a))

604:         assert_equal(w.dtype, dtype)

605:         assert_equal(v.dtype, dtype)

609:         assert_equal(w.dtype, get_complex_dtype(dtype))

610:         assert_equal(v.dtype, get_complex_dtype(dtype))

618:         assert_(res_v.dtype.type is np.float64)

619:         assert_(res.dtype.type is np.float64)

620:         assert_equal(a.shape, res_v.shape)

621:         assert_equal((0, 1), res.shape)

623:         assert_(isinstance(a, np.ndarray))

627:         assert_(res_v.dtype.type is np.complex64)

628:         assert_(res.dtype.type is np.complex64)

629:         assert_equal(a.shape, res_v.shape)

630:         assert_equal((0,), res.shape)

632:         assert_(isinstance(a, np.ndarray))

642:         assert_equal(u.dtype, dtype)

643:         assert_equal(s.dtype, get_real_dtype(dtype))

644:         assert_equal(vh.dtype, dtype)

646:         assert_equal(s.dtype, get_real_dtype(dtype))

653:         assert_allclose(a, dot_generalized(np.asarray(u) * np.asarray(s)[..., None, 
656:         assert_(consistent_subclass(u, a))

657:         assert_(consistent_subclass(vt, a))

665:         assert_equal(u.shape, (4, 4))

666:         assert_equal(vh.shape, (0, 0))

667:         assert_equal(u, np.eye(4))

671:         assert_equal(u.shape, (0, 0))

672:         assert_equal(vh.shape, (4, 4))

673:         assert_equal(vh, np.eye(4))

680:         assert_allclose(a, dot_generalized(np.asarray(u) * np.asarray(s)[..., None, 
688:         assert_almost_equal(np.matmul(u, hermitian(u)), np.broadcast_to(np.eye(u.shape[-1]), u.shape))

689:         assert_almost_equal(np.matmul(vt, hermitian(vt)), np.broadcast_to(np.eye(vt.shape[-1]), vt.shape))

690:         assert_equal(np.sort(s)[..., 
691:         assert_(consistent_subclass(u, a))

692:         assert_(consistent_subclass(vt, a))

705:             assert_raises(LinAlgError, linalg.cond, c)

710:         assert_almost_equal(

713:         assert_almost_equal(

716:         assert_almost_equal(

722:         assert_almost_equal(

726:         assert_almost_equal(

730:         assert_almost_equal(

734:         assert_almost_equal(

738:         assert_almost_equal(

749:         assert_almost_equal(linalg.cond(A, inf), 4)

750:         assert_almost_equal(linalg.cond(A, -inf), 2/3)

751:         assert_almost_equal(linalg.cond(A, 1), 4)

752:         assert_almost_equal(linalg.cond(A, -1), 0.5)

753:         assert_almost_equal(linalg.cond(A, 'fro'), np.sqrt(265 / 12))

765:             assert_(linalg.cond(A, p) > 1e15)

781:             assert_(isinstance(c, np.float_))

782:             assert_(np.isnan(c))

788:             assert_(np.isnan(c[1]))

790:                 assert_(c[0] > 1e15)

791:                 assert_(c[2] > 1e15)

793:                 assert_(not np.isnan(c[0]))

794:                 assert_(not np.isnan(c[2]))

806:             assert_equal(c[0,0], np.inf)

807:             assert_equal(c[1,1], np.inf)

808:             assert_(np.isfinite(c[0,1]))

809:             assert_(np.isfinite(c[1,0]))

821:         assert_almost_equal(dot(dot(a, a_ginv), a), a, single_decimal=5, double_decimal=11)

822:         assert_(consistent_subclass(a_ginv, a))

835:         assert_almost_equal(dot(dot(a, a_ginv), a), a, single_decimal=5, double_decimal=11)

836:         assert_(consistent_subclass(a_ginv, a))

853:         assert_almost_equal(d, multiply.reduce(ev, axis=-1))

854:         assert_almost_equal(s * np.exp(ld), multiply.reduce(ev, axis=-1))

859:         assert_almost_equal(np.abs(s[m]), 1)

860:         assert_equal(ld[~m], -inf)

865:         assert_equal(linalg.det([[0.0]]), 0.0)

866:         assert_equal(type(linalg.det([[0.0]])), double)

867:         assert_equal(linalg.det([[0.0j]]), 0.0)

868:         assert_equal(type(linalg.det([[0.0j]])), cdouble)

870:         assert_equal(linalg.slogdet([[0.0]]), (0.0, -inf))

871:         assert_equal(type(linalg.slogdet([[0.0]])[0]), double)

872:         assert_equal(type(linalg.slogdet([[0.0]])[1]), double)

873:         assert_equal(linalg.slogdet([[0.0j]]), (0.0j, -inf))

874:         assert_equal(type(linalg.slogdet([[0.0j]])[0]), cdouble)

875:         assert_equal(type(linalg.slogdet([[0.0j]])[1]), double)

880:         assert_equal(np.linalg.det(x).dtype, dtype)

882:         assert_equal(s.dtype, get_real_dtype(dtype))

883:         assert_equal(ph.dtype, dtype)

888:         assert_equal(res, 1.)

889:         assert_(res.dtype.type is np.complex64)

891:         assert_equal(res, (1, 0))

892:         assert_(res[0].dtype.type is np.complex64)

893:         assert_(res[1].dtype.type is np.float32)

897:         assert_equal(res, 1.)

898:         assert_(res.dtype.type is np.float64)

900:         assert_equal(res, (1, 0))

901:         assert_(res[0].dtype.type is np.float64)

902:         assert_(res[1].dtype.type is np.float64)

913:             assert_((x == 0).all())

915:             assert_almost_equal(b, dot(a, x))

916:             assert_equal(rank, m)

918:             assert_equal(rank, n)

919:         assert_almost_equal(sv, sv.__array_wrap__(s))

926:                 assert_equal(residuals.shape, expect_resids.shape)

929:         assert_almost_equal(residuals, expect_resids)

930:         assert_(np.issubdtype(residuals.dtype, np.floating))

931:         assert_(consistent_subclass(x, b))

932:         assert_(consistent_subclass(residuals, b))

946:             assert_(rank == 4)

948:             assert_(rank == 4)

950:             assert_(rank == 3)

952:             assert_(len(w) == 1)

968:             assert_((x == 0).all())

969:         assert_equal(x.shape, (n, n_rhs))

970:         assert_equal(residuals.shape, ((n_rhs,) if m > n else (0,)))

974:             assert_almost_equal(residuals, (r * r).sum(axis=-2))

975:         assert_equal(rank, min(m, n))

976:         assert_equal(s.shape, (min(m, n),))

983:         with assert_raises_regex(LinAlgError, "Incompatible dimensions")
1002:         assert_equal(

1004:         assert_equal(

1006:         assert_equal(

1008:         assert_equal(

1014:             assert_equal(mz, identity_like_generalized(M))

1015:             assert_equal(mz.dtype, M.dtype)

1025:             assert_equal(mz, mat)

1026:             assert_equal(mz.dtype, mat.dtype)

1037:             assert_equal(mz, mmul(mat, mat))

1038:             assert_equal(mz.dtype, mat.dtype)

1049:             assert_almost_equal(

1058:         assert_raises(TypeError, matrix_power, mat, 1.5)

1059:         assert_raises(TypeError, matrix_power, mat, [1])

1062:         assert_raises(LinAlgError, matrix_power, np.array([1], dt), 1)

1063:         assert_raises(LinAlgError, matrix_power, np.array([[1], [2]], dt), 1)

1064:         assert_raises(LinAlgError, matrix_power, np.ones((4, 3, 2), dt), 1)

1070:         assert_raises(LinAlgError, matrix_power, mat, -1)

1081:         assert_allclose(ev, evalues, rtol=get_rtol(ev.dtype))

1084:         assert_allclose(ev2, evalues, rtol=get_rtol(ev.dtype))

1092:         assert_equal(w.dtype, get_real_dtype(dtype))

1096:         assert_raises(ValueError, np.linalg.eigvalsh, x, UPLO="lrong")

1097:         assert_raises(ValueError, np.linalg.eigvalsh, x, "lower")

1098:         assert_raises(ValueError, np.linalg.eigvalsh, x, "upper")

1108:         assert_allclose(w, tgt, rtol=rtol)

1111:         assert_allclose(w, tgt, rtol=rtol)

1114:         assert_allclose(w, tgt, rtol=rtol)

1117:         assert_allclose(w, tgt, rtol=rtol)

1120:         assert_allclose(w, tgt, rtol=rtol)

1128:         assert_(res.dtype.type is np.float64)

1129:         assert_equal((0, 1), res.shape)

1131:         assert_(isinstance(res, np.ndarray))

1135:         assert_(res.dtype.type is np.float32)

1136:         assert_equal((0,), res.shape)

1138:         assert_(isinstance(res, np.ndarray))

1149:         assert_almost_equal(ev, evalues)

1151:         assert_allclose(dot_generalized(a, evc),

1156:         assert_almost_equal(ev2, evalues)

1158:         assert_allclose(dot_generalized(a, evc2),

1168:         assert_equal(w.dtype, get_real_dtype(dtype))

1169:         assert_equal(v.dtype, dtype)

1173:         assert_raises(ValueError, np.linalg.eigh, x, UPLO="lrong")

1174:         assert_raises(ValueError, np.linalg.eigh, x, "lower")

1175:         assert_raises(ValueError, np.linalg.eigh, x, "upper")

1185:         assert_allclose(w, tgt, rtol=rtol)

1188:         assert_allclose(w, tgt, rtol=rtol)

1191:         assert_allclose(w, tgt, rtol=rtol)

1194:         assert_allclose(w, tgt, rtol=rtol)

1197:         assert_allclose(w, tgt, rtol=rtol)

1205:         assert_(res_v.dtype.type is np.float64)

1206:         assert_(res.dtype.type is np.float64)

1207:         assert_equal(a.shape, res_v.shape)

1208:         assert_equal((0, 1), res.shape)

1210:         assert_(isinstance(a, np.ndarray))

1214:         assert_(res_v.dtype.type is np.complex64)

1215:         assert_(res.dtype.type is np.float32)

1216:         assert_equal(a.shape, res_v.shape)

1217:         assert_equal((0,), res.shape)

1219:         assert_(isinstance(a, np.ndarray))

1229:             assert_equal(res.dtype, x.real.dtype)

1232:             assert_(issubclass(res.dtype.type, np.floating))

1238:         assert_equal(norm([]), 0.0)

1239:         assert_equal(norm(array([], dtype=self.dt)), 0.0)

1240:         assert_equal(norm(atleast_2d(array([], dtype=self.dt))), 0.0)

1255:             assert_almost_equal(an, 0.0)

1261:                 assert_almost_equal(an, 0.0)

1265:             assert_almost_equal(an, 2)

1269:             assert_almost_equal(an, 2.0)

1273:             assert_almost_equal(an, an.dtype.type(2.0)**an.dtype.type(1.0/2.0))

1277:             assert_almost_equal(an, an.dtype.type(2.0)**an.dtype.type(1.0/4.0))

1281:             assert_almost_equal(an, 1.0)

1289:             np.testing.assert_almost_equal(norm(v), 30 ** 0.5,

1291:             np.testing.assert_almost_equal(norm(v, inf), 4.0,

1293:             np.testing.assert_almost_equal(norm(v, -inf), 1.0,

1295:             np.testing.assert_almost_equal(norm(v, 1), 10.0,

1297:             np.testing.assert_almost_equal(norm(v, -1), 12.0 / 25,

1299:             np.testing.assert_almost_equal(norm(v, 2), 30 ** 0.5,

1301:             np.testing.assert_almost_equal(norm(v, -2), ((205. / 144) ** -0.5),

1303:             np.testing.assert_almost_equal(norm(v, 0), 4,

1320:             assert_almost_equal(norm(A, ord=order, axis=0), expected0)

1322:             assert_almost_equal(norm(A, ord=order, axis=1), expected1)

1335:                     assert_raises(ValueError, norm, B, ord=order, axis=axis)

1348:                     assert_almost_equal(n, expected)

1359:         assert_allclose(np.squeeze(found), expected,

1362:         assert_(found.shape == expected_shape,

1370:                 assert_allclose(np.squeeze(found), expected,

1375:                 assert_(found.shape == expected_shape,

1383:                 assert_allclose(np.squeeze(found), expected,

1389:                 assert_(found.shape == expected_shape,

1399:         assert_equal(norm(self.array([[]], dtype=self.dt)), 0.0)

1418:             assert_almost_equal(an, 2.0)

1424:                 assert_almost_equal(an, 1.0)

1428:             assert_almost_equal(an, 2.0)

1432:             assert_almost_equal(an, 3.0**(1.0/2.0))

1436:             assert_almost_equal(an, 1.0)

1440:             assert_almost_equal(an, 2.0)

1444:             assert_almost_equal(an, 2.0)

1450:             np.testing.assert_almost_equal(an, 2.7320508075688772, decimal=6)

1454:         assert_almost_equal(norm(A), 84 ** 0.5)

1455:         assert_almost_equal(norm(A, 'fro'), 84 ** 0.5)

1456:         assert_almost_equal(norm(A, 'nuc'), 10.0)

1457:         assert_almost_equal(norm(A, inf), 12.0)

1458:         assert_almost_equal(norm(A, -inf), 4.0)

1459:         assert_almost_equal(norm(A, 1), 10.0)

1460:         assert_almost_equal(norm(A, -1), 6.0)

1461:         assert_almost_equal(norm(A, 2), 9.1231056256176615)

1462:         assert_almost_equal(norm(A, -2), 0.87689437438234041)

1464:         assert_raises(ValueError, norm, A, 'nofro')

1465:         assert_raises(ValueError, norm, A, -3)

1466:         assert_raises(ValueError, norm, A, 0)

1472:         # used in assert_almost_equal.

1475:         assert_almost_equal(norm(A), (1 / 10) * 89 ** 0.5)

1476:         assert_almost_equal(norm(A, 'fro'), (1 / 10) * 89 ** 0.5)

1477:         assert_almost_equal(norm(A, 'nuc'), 1.3366836911774836)

1478:         assert_almost_equal(norm(A, inf), 1.1)

1479:         assert_almost_equal(norm(A, -inf), 0.6)

1480:         assert_almost_equal(norm(A, 1), 1.0)

1481:         assert_almost_equal(norm(A, -1), 0.4)

1482:         assert_almost_equal(norm(A, 2), 0.88722940323461277)

1483:         assert_almost_equal(norm(A, -2), 0.19456584790481812)

1494:         assert_raises(ValueError, norm, A, 'fro', 0)

1495:         assert_raises(ValueError, norm, A, 'nuc', 0)

1496:         assert_raises(ValueError, norm, [3, 4], 'fro', None)

1497:         assert_raises(ValueError, norm, [3, 4], 'nuc', None)

1498:         assert_raises(ValueError, norm, [3, 4], 'test', None)

1503:             assert_raises(ValueError, norm, A, order, None)

1504:             assert_raises(ValueError, norm, A, order, (0, 1))

1505:             assert_raises(ValueError, norm, B, order, (1, 2))

1508:         assert_raises(np.AxisError, norm, B, None, 3)

1509:         assert_raises(np.AxisError, norm, B, None, (2, 3))

1510:         assert_raises(ValueError, norm, B, None, (0, 1, 2))

1523:         old_assert_almost_equal(norm(x, ord=3), 12.65, decimal=2)

1529:         old_assert_almost_equal(norm(x, ord=3), 2 ** 31, decimal=5)

1537:         old_assert_almost_equal(np.linalg.norm(d, ord=3), res, decimal=10)

1539:         old_assert_almost_equal(np.linalg.norm(d, ord=3), res, decimal=9)

1541:         old_assert_almost_equal(np.linalg.norm(d, ord=3), res, decimal=5)

1576:         assert_equal(4, matrix_rank(np.eye(4)))

1580:         assert_equal(matrix_rank(I), 3)

1582:         assert_equal(matrix_rank(np.zeros((4, 4))), 0)

1584:         assert_equal(matrix_rank([1, 0, 0, 0]), 1)

1585:         assert_equal(matrix_rank(np.zeros((4,))), 0)

1587:         assert_equal(matrix_rank([1]), 1)

1590:         assert_equal(matrix_rank(ms), np.array([3, 4, 0]))

1592:         assert_equal(matrix_rank(1), 1)

1595:         assert_equal(4, matrix_rank(np.eye(4), hermitian=True))

1596:         assert_equal(1, matrix_rank(np.ones((4, 4)), hermitian=True))

1597:         assert_equal(0, matrix_rank(np.zeros((4, 4)), hermitian=True))

1601:         assert_equal(3, matrix_rank(I, hermitian=True))

1604:         assert_equal(4, matrix_rank(I, hermitian=True, tol=0.99e-8))

1605:         assert_equal(3, matrix_rank(I, hermitian=True, tol=1.01e-8))

1616:         assert_equal(matrix_rank(X), 9)

1618:         assert_equal(matrix_rank(X), 8)

1635:         assert_(q.dtype == a_dtype)

1636:         assert_(r.dtype == a_dtype)

1637:         assert_(isinstance(q, a_type))

1638:         assert_(isinstance(r, a_type))

1639:         assert_(q.shape == (m, m))

1640:         assert_(r.shape == (m, n))

1641:         assert_almost_equal(dot(q, r), a)

1642:         assert_almost_equal(dot(q.T.conj(), q), np.eye(m))

1643:         assert_almost_equal(np.triu(r), r)

1647:         assert_(q1.dtype == a_dtype)

1648:         assert_(r1.dtype == a_dtype)

1649:         assert_(isinstance(q1, a_type))

1650:         assert_(isinstance(r1, a_type))

1651:         assert_(q1.shape == (m, k))

1652:         assert_(r1.shape == (k, n))

1653:         assert_almost_equal(dot(q1, r1), a)

1654:         assert_almost_equal(dot(q1.T.conj(), q1), np.eye(k))

1655:         assert_almost_equal(np.triu(r1), r1)

1659:         assert_(r2.dtype == a_dtype)

1660:         assert_(isinstance(r2, a_type))

1661:         assert_almost_equal(r2, r1)

1676:         assert_equal(h.dtype, np.double)

1677:         assert_equal(tau.dtype, np.double)

1678:         assert_equal(h.shape, (n, m))

1679:         assert_equal(tau.shape, (k,))

1692:         assert_(h.dtype == np.double)

1693:         assert_(tau.dtype == np.double)

1694:         assert_(h.shape == (2, 3))

1695:         assert_(tau.shape == (2,))

1698:         assert_(h.dtype == np.double)

1699:         assert_(tau.dtype == np.double)

1700:         assert_(h.shape == (3, 2))

1701:         assert_(tau.shape == (2,))

1730:         assert_(q.dtype == a_dtype)

1731:         assert_(r.dtype == a_dtype)

1732:         assert_(isinstance(q, a_type))

1733:         assert_(isinstance(r, a_type))

1734:         assert_(q.shape[-2
1735:         assert_(r.shape[-2
1736:         assert_almost_equal(matmul(q, r), a)

1740:         assert_almost_equal(matmul(swapaxes(q, -1, -2).conj(), q), stack_I_mat)

1741:         assert_almost_equal(np.triu(r[..., 
1745:         assert_(q1.dtype == a_dtype)

1746:         assert_(r1.dtype == a_dtype)

1747:         assert_(isinstance(q1, a_type))

1748:         assert_(isinstance(r1, a_type))

1749:         assert_(q1.shape[-2
1750:         assert_(r1.shape[-2
1751:         assert_almost_equal(matmul(q1, r1), a)

1755:         assert_almost_equal(matmul(swapaxes(q1, -1, -2).conj(), q1), 

1757:         assert_almost_equal(np.triu(r1[..., 
1761:         assert_(r2.dtype == a_dtype)

1762:         assert_(isinstance(r2, a_type))

1763:         assert_almost_equal(r2, r1)

1806:         assert_allclose(b, a,

1815:         assert_equal(a.shape, res.shape)

1816:         assert_(res.dtype.type is np.float64)

1818:         assert_(isinstance(res, np.ndarray))

1822:         assert_equal(a.shape, res.shape)

1823:         assert_(res.dtype.type is np.complex64)

1824:         assert_(isinstance(res, np.ndarray))

1838:         assert_equal(arr.dtype.byteorder, '=')

1843:             assert_array_equal(res, routine(n_arr))

1845:             assert_array_equal(res, routine(sw_arr))

1859:     assert_raises(np.linalg.LinAlgError, np.linalg.inv, x)

1955:         assert_almost_equal(multi_dot([A, B, C]), A.dot(B).dot(C))

1956:         assert_almost_equal(multi_dot([A, B, C]), np.dot(A, np.dot(B, C)))

1963:         assert_almost_equal(multi_dot([A, B]), A.dot(B))

1964:         assert_almost_equal(multi_dot([A, B]), np.dot(A, B))

1973:         assert_almost_equal(multi_dot([A, B, C, D]), A.dot(B).dot(C).dot(D))

1983:         assert_equal(multi_dot([A1d, B, C, D]).shape, (2,))

1993:         assert_equal(multi_dot([A, B, C, D1d]).shape, (6,))

2003:         assert_equal(multi_dot([A1d, B, C, D1d]).shape, ())

2014:         assert out is ret

2015:         assert_almost_equal(out, A.dot(B).dot(C))

2016:         assert_almost_equal(out, np.dot(A, np.dot(B, C)))

2024:         assert out is ret

2025:         assert_almost_equal(out, A.dot(B))

2026:         assert_almost_equal(out, np.dot(A, B))

2037:         assert out is ret

2038:         assert_almost_equal(out, A.dot(B).dot(C).dot(D))

2066:         assert_almost_equal(np.triu(s[
2068:         assert_almost_equal(np.triu(m), np.triu(m_expected))

2071:         assert_raises(ValueError, multi_dot, [])

2072:         assert_raises(ValueError, multi_dot, [np.random.random((3, 3))])

2082:         with assert_raises(LinAlgError)
2096:         assert_equal(actual, expected)

2104:         with assert_raises(ValueError)
2113:         assert_allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))

2123:         with assert_raises(LinAlgError)
2134:         assert_allclose(np.tensordot(a, x, axes=len(x.shape)), b)

2140:     with assert_raises_regex(TypeError, "unsupported in linalg")
2155:     assert_equal(c[0,-1], 1)

2177:     assert_equal(results['info'], 0)

2178:     assert_equal(results['m'], m)

2179:     assert_equal(results['n'], m)

2183:     assert_(2**32 < lwork < 2**42)

Total asserts: 406

Filename: numpy/linalg/tests/test_deprecations.py
5: from numpy.testing import assert_warns

17:     assert_warns(DeprecationWarning, np.linalg.qr, a, mode='full')

18:     assert_warns(DeprecationWarning, np.linalg.qr, a, mode='f')

19:     assert_warns(DeprecationWarning, np.linalg.qr, a, mode='economic')

20:     assert_warns(DeprecationWarning, np.linalg.qr, a, mode='e')

Total asserts: 5

Filename: numpy/linalg/tests/test_regression.py
8:     assert_, assert_raises, assert_equal, assert_array_equal,

9:     assert_array_almost_equal, assert_array_less

36:         assert_array_almost_equal(va, rva)

47:         assert_array_almost_equal(vals, rvals)

57:         assert_array_almost_equal(b, np.zeros((2, 2)))

62:         assert_raises(ValueError, linalg.norm, array([1., 2., 3.]), 'fro')

72:         assert_array_equal(ap, bp)

86:                 assert_equal(c, 1)

87:                 assert_equal(np.linalg.matrix_rank(a), 1)

88:                 assert_array_less(1, np.linalg.norm(a, ord=2))

95:         assert_array_equal(norm, [0, 1])

96:         assert_(norm.dtype == np.dtype('float64'))

99:         assert_array_equal(norm, [0, 1])

100:         assert_(norm.dtype != np.dtype('float64'))

103:         assert_array_equal(norm, [0, 1])

104:         assert_(norm.dtype == np.dtype('float64'))

106:         assert_raises(ValueError, linalg.norm, testvector, ord='fro')

107:         assert_raises(ValueError, linalg.norm, testvector, ord='nuc')

108:         assert_raises(ValueError, linalg.norm, testvector, ord=np.inf)

109:         assert_raises(ValueError, linalg.norm, testvector, ord=-np.inf)

112:             assert_raises((AttributeError, DeprecationWarning),

114:         assert_raises(ValueError, linalg.norm, testvector, ord=-1)

115:         assert_raises(ValueError, linalg.norm, testvector, ord=-2)

121:         assert_array_equal(norm, [0, 1])

122:         assert_(norm.dtype == np.dtype('float64'))

125:         assert_array_equal(norm, [0, 1])

126:         assert_(norm.dtype == np.dtype('float64'))

128:         assert_raises(TypeError, linalg.norm, testmatrix, ord='nuc')

129:         assert_raises(ValueError, linalg.norm, testmatrix, ord=np.inf)

130:         assert_raises(ValueError, linalg.norm, testmatrix, ord=-np.inf)

131:         assert_raises(ValueError, linalg.norm, testmatrix, ord=0)

132:         assert_raises(ValueError, linalg.norm, testmatrix, ord=1)

133:         assert_raises(ValueError, linalg.norm, testmatrix, ord=-1)

134:         assert_raises(TypeError, linalg.norm, testmatrix, ord=2)

135:         assert_raises(TypeError, linalg.norm, testmatrix, ord=-2)

136:         assert_raises(ValueError, linalg.norm, testmatrix, ord=3)

148:         assert_array_almost_equal(u_lstsq, u)

Total asserts: 37

Filename: numpy/linalg/linalg.py
188: def _assert_2d(*arrays)
194: def _assert_stacked_2d(*arrays)
200: def _assert_stacked_square(*arrays)
206: def _assert_finite(*arrays)
386:     _assert_stacked_2d(a)

387:     _assert_stacked_square(a)

546:     _assert_stacked_2d(a)

547:     _assert_stacked_square(a)

626:     _assert_stacked_2d(a)

627:     _assert_stacked_square(a)

766:     _assert_stacked_2d(a)

767:     _assert_stacked_square(a)

927:     _assert_stacked_2d(a)

1055:     _assert_stacked_2d(a)

1056:     _assert_stacked_square(a)

1057:     _assert_finite(a)

1166:     _assert_stacked_2d(a)

1167:     _assert_stacked_square(a)

1310:     _assert_stacked_2d(a)

1311:     _assert_stacked_square(a)

1312:     _assert_finite(a)

1453:     _assert_stacked_2d(a)

1454:     _assert_stacked_square(a)

1638:     _assert_stacked_2d(a)

1771:         _assert_stacked_2d(x)

1772:         _assert_stacked_square(x)

2090:     _assert_stacked_2d(a)

2091:     _assert_stacked_square(a)

2151:     _assert_stacked_2d(a)

2152:     _assert_stacked_square(a)

2268:     _assert_2d(a, b)

2719:     _assert_2d(*arrays)

2803:         assert out is None

Total asserts: 33

Filename: numpy/ma/testutils.py
15:     assert_, assert_allclose, assert_array_almost_equal_nulp,

16:     assert_raises, build_err_msg

21:     'almost', 'approx', 'assert_almost_equal', 'assert_array_almost_equal',

22:     'assert_array_approx_equal', 'assert_array_compare',

23:     'assert_array_equal', 'assert_array_less', 'assert_close',

24:     'assert_equal', 'assert_equal_records', 'assert_mask_equal',

25:     'assert_not_equal', 'fail_if_array_equal',

34:     'TestCase', 'assert_', 'assert_allclose', 'assert_array_almost_equal_nulp',

35:     'assert_raises'

82: def _assert_equal_on_sequences(actual, desired, err_msg='')
87:     assert_equal(len(actual), len(desired), err_msg)

89:         assert_equal(actual[k], desired[k], f'item={k!r}\n{err_msg}')

93: def assert_equal_records(a, b)
100:     assert_equal(a.dtype, b.dtype)

104:             assert_equal(operator.getitem(a, f), operator.getitem(b, f))

108: def assert_equal(actual, desired, err_msg='')
117:         assert_equal(len(actual), len(desired), err_msg)

121:             assert_equal(actual[k], desired[k], f'key={k!r}\n{err_msg}')

125:         return _assert_equal_on_sequences(actual, desired, err_msg='')

141:         return _assert_equal_on_sequences(actual.tolist(),

144:     return assert_array_equal(actual, desired, err_msg)

149:     Raises an assertion error if two items are equal.

173: assert_not_equal = fail_if_equal

176: def assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)
184:         return assert_array_almost_equal(actual, desired, decimal=decimal,

192: assert_close = assert_almost_equal

195: def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',

213:     return np.testing.assert_array_compare(comparison,

220: def assert_array_equal(x, y, err_msg='', verbose=True)
225:     assert_array_compare(operator.__eq__, x, y,

232:     Raises an assertion error if two masked arrays are not equal elementwise.

237:     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,

241: def assert_array_approx_equal(x, y, decimal=6, err_msg='', verbose=True)
251:     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,

255: def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
265:     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,

269: def assert_array_less(x, y, err_msg='', verbose=True)
274:     assert_array_compare(operator.__lt__, x, y,

279: def assert_mask_equal(m1, m2, err_msg='')
285:         assert_(m2 is nomask)

287:         assert_(m1 is nomask)

288:     assert_array_equal(m1, m2, err_msg=err_msg)

Total asserts: 42

Filename: numpy/ma/tests/test_old_ma.py
7:     assert_, assert_raises, assert_equal,

54:         assert_(not isMaskedArray(x))

55:         assert_(isMaskedArray(xm))

56:         assert_equal(shape(xm), s)

57:         assert_equal(xm.shape, s)

58:         assert_equal(xm.dtype, x.dtype)

59:         assert_equal(xm.size, reduce(lambda x, y
60:         assert_equal(count(xm), len(m1) - reduce(lambda x, y
61:         assert_(eq(xm, xf))

62:         assert_(eq(filled(xm, 1.e20), xf))

63:         assert_(eq(x, xm))

75:             assert_(not isMaskedArray(x))

76:             assert_(isMaskedArray(xm))

77:             assert_equal(shape(xm), s)

78:             assert_equal(xm.shape, s)

79:             assert_equal(xm.size, reduce(lambda x, y
80:             assert_equal(count(xm),

82:             assert_(eq(xm, xf))

83:             assert_(eq(filled(xm, 1.e20), xf))

84:             assert_(eq(x, xm))

92:         assert_(eq(a2d * a2d, a2d * a2dm))

93:         assert_(eq(a2d + a2d, a2d + a2dm))

94:         assert_(eq(a2d - a2d, a2d - a2dm))

101:             assert_(eq(-x, -xm))

102:             assert_(eq(x + y, xm + ym))

103:             assert_(eq(x - y, xm - ym))

104:             assert_(eq(x * y, xm * ym))

106:                 assert_(eq(x / y, xm / ym))

107:             assert_(eq(a10 + y, a10 + ym))

108:             assert_(eq(a10 - y, a10 - ym))

109:             assert_(eq(a10 * y, a10 * ym))

111:                 assert_(eq(a10 / y, a10 / ym))

112:             assert_(eq(x + a10, xm + a10))

113:             assert_(eq(x - a10, xm - a10))

114:             assert_(eq(x * a10, xm * a10))

115:             assert_(eq(x / a10, xm / a10))

116:             assert_(eq(x ** 2, xm ** 2))

117:             assert_(eq(abs(x) ** 2.5, abs(xm) ** 2.5))

118:             assert_(eq(x ** y, xm ** ym))

119:             assert_(eq(np.add(x, y), add(xm, ym)))

120:             assert_(eq(np.subtract(x, y), subtract(xm, ym)))

121:             assert_(eq(np.multiply(x, y), multiply(xm, ym)))

123:                 assert_(eq(np.divide(x, y), divide(xm, ym)))

128:         assert_(isinstance(na + ma, MaskedArray))

129:         assert_(isinstance(ma + na, MaskedArray))

134:         assert_(eq(np.cos(x), cos(xm)))

135:         assert_(eq(np.cosh(x), cosh(xm)))

136:         assert_(eq(np.sin(x), sin(xm)))

137:         assert_(eq(np.sinh(x), sinh(xm)))

138:         assert_(eq(np.tan(x), tan(xm)))

139:         assert_(eq(np.tanh(x), tanh(xm)))

141:             assert_(eq(np.sqrt(abs(x)), sqrt(xm)))

142:             assert_(eq(np.log(abs(x)), log(xm)))

143:             assert_(eq(np.log10(abs(x)), log10(xm)))

144:         assert_(eq(np.exp(x), exp(xm)))

145:         assert_(eq(np.arcsin(z), arcsin(zm)))

146:         assert_(eq(np.arccos(z), arccos(zm)))

147:         assert_(eq(np.arctan(z), arctan(zm)))

148:         assert_(eq(np.arctan2(x, y), arctan2(xm, ym)))

149:         assert_(eq(np.absolute(x), absolute(xm)))

150:         assert_(eq(np.equal(x, y), equal(xm, ym)))

151:         assert_(eq(np.not_equal(x, y), not_equal(xm, ym)))

152:         assert_(eq(np.less(x, y), less(xm, ym)))

153:         assert_(eq(np.greater(x, y), greater(xm, ym)))

154:         assert_(eq(np.less_equal(x, y), less_equal(xm, ym)))

155:         assert_(eq(np.greater_equal(x, y), greater_equal(xm, ym)))

156:         assert_(eq(np.conjugate(x), conjugate(xm)))

157:         assert_(eq(np.concatenate((x, y)), concatenate((xm, ym))))

158:         assert_(eq(np.concatenate((x, y)), concatenate((x, y))))

159:         assert_(eq(np.concatenate((x, y)), concatenate((xm, y))))

160:         assert_(eq(np.concatenate((x, y, x)), concatenate((x, ym, x))))

165:         assert_(count(ott).dtype.type is np.intp)

166:         assert_equal(3, count(ott))

167:         assert_equal(1, count(1))

168:         assert_(eq(0, array(1, mask=[1])))

170:         assert_(count(ott).dtype.type is np.intp)

171:         assert_(isinstance(count(ott, 0), np.ndarray))

172:         assert_(count(ott).dtype.type is np.intp)

173:         assert_(eq(3, count(ott)))

174:         assert_(getmask(count(ott, 0)) is nomask)

175:         assert_(eq([1, 2], count(ott, 0)))

184:         assert_(eq(max(xr), maximum.reduce(xmr)))

185:         assert_(eq(min(xr), minimum.reduce(xmr)))

190:         assert_(eq(np.add.reduce(x), add.reduce(x)))

191:         assert_(eq(np.add.accumulate(x), add.accumulate(x)))

192:         assert_(eq(4, sum(array(4), axis=0)))

193:         assert_(eq(4, sum(array(4), axis=0)))

194:         assert_(eq(np.sum(x, axis=0), sum(x, axis=0)))

195:         assert_(eq(np.sum(filled(xm, 0), axis=0), sum(xm, axis=0)))

196:         assert_(eq(np.sum(x, 0), sum(x, 0)))

197:         assert_(eq(np.product(x, axis=0), product(x, axis=0)))

198:         assert_(eq(np.product(x, 0), product(x, 0)))

199:         assert_(eq(np.product(filled(xm, 1), axis=0),

202:             assert_(eq(np.concatenate((x, y), 1),

204:             assert_(eq(np.add.reduce(x, 1), add.reduce(x, 1)))

205:             assert_(eq(np.sum(x, 1), sum(x, 1)))

206:             assert_(eq(np.product(x, 1), product(x, 1)))

217:         assert_(eq(np.sort(x1), sort(x2, fill_value=0)))

219:         assert_(type(x2[1]) is type(x1[1]))

220:         assert_(x1[1] == x2[1])

221:         assert_(x2[0] is masked)

222:         assert_(eq(x1[2], x2[2]))

223:         assert_(eq(x1[2
224:         assert_(eq(x1[
225:         assert_(eq(x1[1
228:         assert_(eq(x1, x2))

231:         assert_(eq(x1, x2))

233:         assert_(eq(x1, x2))

235:         assert_(eq(x1, x2))

238:         assert_(allequal(getmask(x2), array([0, 1, 0, 0])))

240:         assert_(allequal(getmask(x3), array([0, 1, 1, 0])))

242:         assert_(allequal(getmask(x4), array([0, 1, 1, 0])))

243:         assert_(allequal(x4, array([1, 2, 3, 4])))

246:         assert_(eq(x1, x2))

247:         assert_(allequal(array([0, 0, 0, 1, 0], MaskType), x2.mask))

248:         assert_(eq(3.0, x2.fill_value))

253:         assert_equal(type(s2), str)

254:         assert_equal(type(s1), str)

255:         assert_equal(s1, s2)

256:         assert_(x1[1
263:         assert_(m is m2)

265:         assert_(m is not m3)

269:         assert_(y1._data is not x1)

270:         assert_(allequal(x1, y1._data))

271:         assert_(y1._mask is m)

277:         assert_(y1a._mask.__array_interface__ ==

281:         assert_(y2._mask is m3)

282:         assert_(y2[2] is masked)

284:         assert_(y2[2] is not masked)

285:         assert_(y2._mask is m3)

286:         assert_(allequal(y2.mask, 0))

289:         assert_(y2a._mask is not m)

290:         assert_(y2a[2] is masked)

292:         assert_(y2a[2] is not masked)

293:         assert_(y2a._mask is not m)

294:         assert_(allequal(y2a.mask, 0))

297:         assert_(filled(y3).dtype is (x1 * 1.0).dtype)

302:         assert_(eq(concatenate([x4, x4]), y4))

303:         assert_(eq(getmask(y4), [0, 0, 1, 0, 0, 0, 1, 0]))

305:         assert_(eq(y5, [0, 0, 1, 1, 2, 2, 3, 3]))

307:         assert_(eq(y5, y6))

316:         assert_(x[3] is masked)

317:         assert_(x[4] is masked)

319:         assert_(x._mask is m)

320:         assert_(x[3] is masked)

321:         assert_(x[4] is not masked)

322:         assert_(eq(x, [0, 10, 2, -1, 40]))

326:         assert_(x._mask is not m2)

327:         assert_(x[3] is masked)

328:         assert_(x[4] is masked)

329:         assert_(eq(x, [-1, 100, 200, 0, 0]))

336:         assert_(x[2] is not masked)

337:         assert_(x[3] is not masked)

339:         assert_(x[2] is masked)

340:         assert_(x[3] is not masked)

341:         assert_(eq(x, [0, 1, 10, 40, 4]))

347:         assert_(x[2] is not masked)

348:         assert_(x[3] is not masked)

350:         assert_(y[0] is masked)

351:         assert_(y[1] is not masked)

352:         assert_(eq(y, [10, 40]))

353:         assert_(x[2] is masked)

354:         assert_(x[3] is not masked)

355:         assert_(eq(x, [0, 1, 10, 40, 4]))

362:         assert_(all(take(ym, i, axis=0) == zm))

369:         assert_(x[1, 0] == 12)

371:         assert_(eq(z.real, x))

372:         assert_(eq(z.imag, 10 * x))

373:         assert_(eq((z * conjugate(z)).real, 101 * x * x))

378:         assert_(str(x[3]) == str(masked))

380:         assert_(count(where(c, masked, masked)) == 0)

381:         assert_(shape(where(c, masked, masked)) == c.shape)

383:         assert_(z.dtype is x.dtype)

384:         assert_(z[3] is masked)

385:         assert_(z[4] is masked)

386:         assert_(z[7] is masked)

387:         assert_(z[8] is not masked)

388:         assert_(z[9] is not masked)

389:         assert_(eq(x, z))

391:         assert_(z.dtype is x.dtype)

392:         assert_(z[3] is masked)

393:         assert_(z[4] is not masked)

394:         assert_(z[7] is not masked)

395:         assert_(z[8] is masked)

396:         assert_(z[9] is masked)

398:         assert_(z.dtype is x.dtype)

399:         assert_(z[3] is masked)

400:         assert_(z[4] is not masked)

401:         assert_(z[7] is not masked)

402:         assert_(z[8] is masked)

403:         assert_(z[9] is masked)

404:         assert_(eq(x, z))

409:         assert_(eq(z, [1., 2., 0., -4., -5]))

412:         assert_(eq(z, [1., 2., 0., -4., -5]))

413:         assert_(z[0] is masked)

414:         assert_(z[1] is not masked)

415:         assert_(z[2] is masked)

416:         assert_(eq(masked_where(greater(x, 2), x), masked_greater(x, 2)))

417:         assert_(eq(masked_where(greater_equal(x, 2), x),

419:         assert_(eq(masked_where(less(x, 2), x), masked_less(x, 2)))

420:         assert_(eq(masked_where(less_equal(x, 2), x), masked_less_equal(x, 2)))

421:         assert_(eq(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2)))

422:         assert_(eq(masked_where(equal(x, 2), x), masked_equal(x, 2)))

423:         assert_(eq(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2)))

424:         assert_(eq(masked_inside(list(range(5)), 1, 3), [0, 199, 199, 199, 4]))

425:         assert_(eq(masked_outside(list(range(5)), 1, 3), [199, 1, 2, 3, 199]))

426:         assert_(eq(masked_inside(array(list(range(5)),

429:         assert_(eq(masked_outside(array(list(range(5)),

432:         assert_(eq(masked_equal(array(list(range(5)),

435:         assert_(eq(masked_not_equal(array([2, 2, 1, 2, 1],

438:         assert_(eq(masked_where([1, 1, 0, 0, 0], [1, 2, 3, 4, 5]),

443:         assert_(eq(atest, ctest))

445:         assert_(eq(z, [1., 2., 0., -4., -5]))

446:         assert_(z[0] is masked)

447:         assert_(z[1] is not masked)

448:         assert_(z[2] is masked)

457:         assert_(eq(z, zm))

458:         assert_(getmask(zm) is nomask)

459:         assert_(eq(zm, [0, 1, 2, 30, 40, 50]))

461:         assert_(eq(z, [99, 99, 99, 1, 1, 1]))

463:         assert_(eq(z, [99, 1, 1, 99, 99, 99]))

467:         assert_(eq(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3]))

468:         assert_(eq(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9]))

473:         assert_(eq(minimum(x, y), where(less(x, y), x, y)))

474:         assert_(eq(maximum(x, y), where(greater(x, y), x, y)))

475:         assert_(minimum.reduce(x) == 0)

476:         assert_(maximum.reduce(x) == 4)

485:         assert_(eq(np.transpose(y, (2, 0, 1)), transpose(x, (2, 0, 1))))

486:         assert_(eq(np.take(y, (2, 0, 1), 1), take(x, (2, 0, 1), 1)))

487:         assert_(eq(np.inner(filled(x, 0), filled(y, 0)),

489:         assert_(eq(np.outer(filled(x, 0), filled(y, 0)),

494:         assert_(t[0] == 'abc')

495:         assert_(t[1] == 2)

496:         assert_(t[2] == 3)

506:         assert_(eq(x, y + 1))

508:         assert_(eq(x, y + 1))

514:         assert_(eq(x, y - 1))

516:         assert_(eq(xm, y - 1))

522:         assert_(eq(x, y * 2))

524:         assert_(eq(xm, y * 2))

530:         assert_(eq(x, y))

532:         assert_(eq(x, y))

538:         assert_(eq(x, y / 2.0))

540:         assert_(eq(xm, ones((10,))))

546:         assert_(eq(x, y + 1.))

556:             assert_(eq(x, y))

562:         assert_(str(masked) == '--')

563:         assert_(xx[1] is masked)

564:         assert_equal(filled(xx[1], 0), 0)

569:         assert_(eq(2.0, average(ott, axis=0)))

570:         assert_(eq(2.0, average(ott, weights=[1., 1., 2., 1.])))

572:         assert_(eq(2.0, result))

573:         assert_(wts == 4.0)

575:         assert_(average(ott, axis=0) is masked)

579:         assert_(eq(average(ott, axis=0), [2.0, 0.0]))

580:         assert_(average(ott, axis=1)[0] is masked)

581:         assert_(eq([2., 0.], average(ott, axis=0)))

583:         assert_(eq(wts, [1., 0.]))

590:         assert_(allclose(average(x, axis=0), 2.5))

591:         assert_(allclose(average(x, axis=0, weights=w1), 2.5))

593:         assert_(allclose(average(y, None),

595:         assert_(allclose(average(y, axis=0), np.arange(6) * 3. / 2.))

596:         assert_(allclose(average(y, axis=1),

598:         assert_(allclose(average(y, None, weights=w2), 20. / 6.))

599:         assert_(allclose(average(y, axis=0, weights=w2),

601:         assert_(allclose(average(y, axis=1),

608:         assert_(allclose(average(masked_array(x, m1), axis=0), 2.5))

609:         assert_(allclose(average(masked_array(x, m2), axis=0), 2.5))

610:         assert_(average(masked_array(x, m4), axis=0) is masked)

611:         assert_equal(average(masked_array(x, m5), axis=0), 0.0)

612:         assert_equal(count(average(masked_array(x, m4), axis=0)), 0)

614:         assert_(allclose(average(z, None), 20. / 6.))

615:         assert_(allclose(average(z, axis=0),

617:         assert_(allclose(average(z, axis=1), [2.5, 5.0]))

618:         assert_(allclose(average(z, axis=0, weights=w2),

624:         assert_equal(shape(r1), shape(w1))

625:         assert_equal(r1.shape, w1.shape)

627:         assert_equal(shape(w2), shape(r2))

629:         assert_equal(shape(w2), shape(r2))

631:         assert_(shape(w2) == shape(r2))

635:         assert_(eq(a2da, [0.5, 3.0]))

637:         assert_(eq(a2dma, [1.0, 3.0]))

639:         assert_(eq(a2dma, 7. / 3.))

641:         assert_(eq(a2dma, [1.5, 4.0]))

644:         assert_equal(1, int(array(1)))

645:         assert_equal(1.0, float(array(1)))

646:         assert_equal(1, int(array([[[1]]])))

647:         assert_equal(1.0, float(array([[1]])))

648:         assert_raises(TypeError, float, array([1, 1]))

649:         assert_raises(ValueError, bool, array([0, 1]))

650:         assert_raises(ValueError, bool, array([0, 0], mask=[0, 1]))

656:             assert_((1 / array(0)).mask)

657:         assert_((1 + xm).mask)

658:         assert_((-xm).mask)

659:         assert_((-xm).mask)

660:         assert_(maximum(xm, xm).mask)

661:         assert_(minimum(xm, xm).mask)

662:         assert_(xm.filled().dtype is xm._data.dtype)

664:         assert_(x.filled() == x._data)

665:         assert_equal(str(xm), str(masked_print_option))

669:         assert_(eq(a.any(), a._data.any()))

670:         assert_(eq(a.all(), a._data.all()))

671:         assert_(eq(a.argmax(), a._data.argmax()))

672:         assert_(eq(a.argmin(), a._data.argmin()))

673:         assert_(eq(a.choose(0, 1, 2, 3, 4),

675:         assert_(eq(a.compress([1, 0, 1]), a._data.compress([1, 0, 1])))

676:         assert_(eq(a.conj(), a._data.conj()))

677:         assert_(eq(a.conjugate(), a._data.conjugate()))

679:         assert_(eq(m.diagonal(), m._data.diagonal()))

680:         assert_(eq(a.sum(), a._data.sum()))

681:         assert_(eq(a.take([1, 2]), a._data.take([1, 2])))

682:         assert_(eq(m.transpose(), m._data.transpose()))

686:         assert_equal(a.ndim, 1)

689:         assert_(not [m for m in dir(np.ndarray)

696:         assert_equal(a[0].shape, ())

697:         assert_equal(b[0].shape, ())

698:         assert_equal(b[1].shape, ())

705:         assert_(a[2] is masked)

714:         assert_equal(b.mask, expected_mask)

756:             assert_(eq(ur.filled(0), mr.filled(0), f))

757:             assert_(eqmask(ur.mask, mr.mask))

761:         assert_(not alltrue(a, axis=0))

762:         assert_(sometrue(a, axis=0))

763:         assert_equal(sum(a[
764:         assert_equal(product(a, axis=0), 0)

769:         assert_equal(amask.max(), a.max())

770:         assert_equal(amask.min(), 5)

771:         assert_((amask.max(0) == a.max(0)).all())

772:         assert_((amask.min(0) == [5, 6, 7, 8]).all())

773:         assert_(amask.max(1)[0].mask)

774:         assert_(amask.min(1)[0].mask)

779:             assert_(eq(nonzero(x), [0]))

809:         assert_equal(mX.trace(), mX.diagonal().compressed().sum())

810:         assert_(eq(mX.trace(),

817:         assert_(eq(clipped.mask, mx.mask))

818:         assert_(eq(clipped._data, x.clip(2, 8)))

819:         assert_(eq(clipped._data, mx._data.clip(2, 8)))

824:         assert_equal(mx.ptp(), mx.compressed().ptp())

831:         assert_(eq(mX.ptp(0), cols))

832:         assert_(eq(mX.ptp(1), rows))

837:         assert_(eq(mXswapped[-1], mX[
839:         assert_equal(mXXswapped.shape, (2, 2, 3, 3))

844:         assert_(eq(mXcp._data, mX.filled(1).cumprod(0)))

846:         assert_(eq(mXcp._data, mX.filled(1).cumprod(1)))

851:         assert_(eq(mXcp._data, mX.filled(0).cumsum(0)))

853:         assert_(eq(mXcp._data, mX.filled(0).cumsum(1)))

857:         assert_(eq(mX.var(axis=None), mX.compressed().var()))

858:         assert_(eq(mX.std(axis=None), mX.compressed().std()))

859:         assert_(eq(mXX.var(axis=3).shape, XX.var(axis=3).shape))

860:         assert_(eq(mX.var().shape, X.var().shape))

863:             assert_(eq(mXvar1[k], mX[k].compressed().var()))

864:             assert_(eq(mXvar0[k], mX[
865:             assert_(eq(np.sqrt(mXvar0[k]),

Total asserts: 353

Filename: numpy/ma/tests/test_core.py
24:     assert_raises, assert_warns, suppress_warnings

29:     assert_, assert_array_equal, assert_equal, assert_almost_equal,

30:     assert_equal_records, fail_if_equal, assert_not_equal,

31:     assert_mask_equal

88:         assert_equal(a.ndim, 1)

89:         assert_equal(b.ndim, 1)

90:         assert_equal(a.size, 3)

91:         assert_equal(b.size, 3)

92:         assert_equal(a.shape, (3,))

93:         assert_equal(b.shape, (3,))

98:         assert_equal(str(x), '0')

100:         assert_equal(str(x), str(masked_print_option))

102:         assert_equal(str(x), '0')

104:         assert_(x.filled().dtype is x._data.dtype)

109:         assert_(not isMaskedArray(x))

110:         assert_(isMaskedArray(xm))

111:         assert_((xm - ym).filled(0).any())

114:         assert_equal(np.shape(xm), s)

115:         assert_equal(xm.shape, s)

116:         assert_equal(xm.dtype, x.dtype)

117:         assert_equal(zm.dtype, z.dtype)

118:         assert_equal(xm.size, reduce(lambda x, y
119:         assert_equal(count(xm), len(m1) - reduce(lambda x, y
120:         assert_array_equal(xm, xf)

121:         assert_array_equal(filled(xm, 1.e20), xf)

122:         assert_array_equal(x, xm)

134:             assert_(not isMaskedArray(x))

135:             assert_(isMaskedArray(xm))

136:             assert_equal(shape(xm), s)

137:             assert_equal(xm.shape, s)

138:             assert_equal(xm.size, reduce(lambda x, y
139:             assert_equal(count(xm), len(m1) - reduce(lambda x, y
140:             assert_equal(xm, xf)

141:             assert_equal(filled(xm, 1.e20), xf)

142:             assert_equal(x, xm)

148:         assert_equal(np.concatenate((x, y)), concatenate((xm, ym)))

149:         assert_equal(np.concatenate((x, y)), concatenate((x, y)))

150:         assert_equal(np.concatenate((x, y)), concatenate((xm, y)))

151:         assert_equal(np.concatenate((x, y, x)), concatenate((x, ym, x)))

159:         assert_equal(xm.mask, np.reshape(m1, s))

160:         assert_equal(ym.mask, np.reshape(m2, s))

162:         assert_equal(np.concatenate((x, y), 1), xmym)

163:         assert_equal(np.concatenate((xm.mask, ym.mask), 1), xmym._mask)

168:         assert_array_equal(z, [0, 0, 1, 1])

169:         assert_array_equal(z.mask, [False, False, False, True])

171:         assert_array_equal(z, [1, 1, 0, 0])

172:         assert_array_equal(z.mask, [False, True, False, False])

181:         assert_equal_records(test, data)

186:         assert_equal(x.shape, (1, 3))

187:         assert_equal(x._data, [[1, 2, 3]])

188:         assert_equal(x._mask, [[1, 0, 0]])

195:         assert_equal(x.shape, x._mask.shape)

196:         assert_equal(xx.shape, xx._mask.shape)

203:         assert_equal(dma_1.mask, data.mask)

205:         assert_equal(dma_2.mask, dma_1.mask)

210:         assert_equal(x._mask, [True, True, True])

212:         assert_equal(x._mask, [False, False, False])

214:         assert_(np.may_share_memory(x.mask, y.mask))

216:         assert_(not np.may_share_memory(x.mask, y.mask))

233:         assert_equal(data, [[0, 1, 2, 3, 4], [4, 3, 2, 1, 0]])

234:         assert_equal(data._mask, [[1, 0, 0, 0, 0], [0, 0, 0, 0, 1]])

238:         assert_equal(data, [[0, 1, 2, 3, 4], [4, 3, 2, 1, 0]])

239:         assert_(data.mask is nomask)

246:         assert_array_equal(res.mask, [[True, False], [False, False]])

259:         assert_array_equal(res.mask, [[True, False], [False, False]])

276:         assert_equal(xmm._data, xm._data)

277:         assert_equal(xmm._mask, xm._mask)

278:         assert_equal(xmm.fill_value, xm.fill_value)

279:         assert_equal(xmm._hardmask, xm._hardmask)

284:         assert_(not m.flags.c_contiguous)

287:         assert_(new_m.flags.c_contiguous)

292:         assert_(not m.flags.c_contiguous)

295:         assert_(new_m.flags.c_contiguous)

302:             assert_equal(data_fixed._data, [data.fill_value, 0., 1.])

303:             assert_equal(data_fixed._mask, [1., 0., 1.])

309:         assert_(str(masked) == '--')

310:         assert_(x[1] is masked)

311:         assert_equal(filled(x[1], 0), 0)

318:         assert_equal(a[0], x)

319:         assert_(a[0] is x)

324:         assert_(a[0] is dt)

335:         assert_equal(np.sort(x1), sort(x2, endwith=False))

337:         assert_(type(x2[1]) is type(x1[1]))

338:         assert_(x1[1] == x2[1])

339:         assert_(x2[0] is masked)

340:         assert_equal(x1[2], x2[2])

341:         assert_equal(x1[2
342:         assert_equal(x1[
343:         assert_equal(x1[1
346:         assert_equal(x1, x2)

349:         assert_equal(x1, x2)

351:         assert_equal(x1, x2)

353:         assert_equal(x1, x2)

356:         assert_(allequal(getmask(x2), array([0, 1, 0, 0])))

358:         assert_(allequal(getmask(x3), array([0, 1, 1, 0])))

360:         assert_(allequal(getmask(x4), array([0, 1, 1, 0])))

361:         assert_(allequal(x4, array([1, 2, 3, 4])))

364:         assert_equal(x1, x2)

365:         assert_(allequal(array([0, 0, 0, 1, 0], MaskType), x2.mask))

366:         assert_equal(3.0, x2.fill_value)

371:         assert_equal(type(s2), str)

372:         assert_equal(type(s1), str)

373:         assert_equal(s1, s2)

374:         assert_(x1[1
382:         assert_(m is m2)

384:         assert_(m is not m3)

388:         assert_equal(y1._data.__array_interface__, x1.__array_interface__)

389:         assert_(allequal(x1, y1.data))

390:         assert_equal(y1._mask.__array_interface__, m.__array_interface__)

394:         assert_(y1a._data.__array_interface__ ==

396:         assert_(y1a._mask.__array_interface__ ==

400:         assert_(y2._data.__array_interface__ == x1.__array_interface__)

401:         assert_(y2._mask.__array_interface__ == m3.__array_interface__)

402:         assert_(y2[2] is masked)

404:         assert_(y2[2] is not masked)

405:         assert_(y2._mask.__array_interface__ == m3.__array_interface__)

406:         assert_(allequal(y2.mask, 0))

409:         assert_(y2a._data.__array_interface__ != x1.__array_interface__)

410:         #assert_( y2a._mask is not m)

411:         assert_(y2a._mask.__array_interface__ != m.__array_interface__)

412:         assert_(y2a[2] is masked)

414:         assert_(y2a[2] is not masked)

415:         #assert_( y2a._mask is not m)

416:         assert_(y2a._mask.__array_interface__ != m.__array_interface__)

417:         assert_(allequal(y2a.mask, 0))

420:         assert_(filled(y3).dtype is (x1 * 1.0).dtype)

425:         assert_equal(concatenate([x4, x4]), y4)

426:         assert_equal(getmask(y4), [0, 0, 1, 0, 0, 0, 1, 0])

428:         assert_equal(y5, [0, 0, 1, 1, 2, 2, 3, 3])

430:         assert_equal(y5, y6)

432:         assert_equal(y5, y7)

434:         assert_equal(y5, y8)

437:         assert_equal(y9._data, x4._data)

438:         assert_equal(y9._mask, x4._mask)

443:         assert_equal(y._data.ctypes.data, x._data.ctypes.data)

444:         assert_equal(y._mask.ctypes.data, x._mask.ctypes.data)

446:         assert_not_equal(y._data.ctypes.data, x._data.ctypes.data)

447:         assert_not_equal(y._mask.ctypes.data, x._mask.ctypes.data)

453:         assert_equal(xc.mask, True)

457:         assert_(isMaskedArray(np.ma.copy([1,2,3])))

458:         assert_(isMaskedArray(np.ma.copy((1,2,3))))

466:         assert_equal(a_copy_method(), [1, 2, 3])

472:         assert_equal(copied.mask, a.mask)

473:         assert_not_equal(id(a._mask), id(copied._mask))

476:         assert_equal(copied.mask, [0, 0, 0])

477:         assert_equal(a.mask, [0, 1, 0])

480:         assert_equal(copied.mask, a.mask)

482:         assert_equal(copied.mask, [0, 0, 0])

483:         assert_equal(a.mask, [0, 1, 0])

487:         assert_equal(format(a), "[0 -- 2]")

488:         assert_equal(format(masked), "--")

489:         assert_equal(format(masked, ""), "--")

492:         # assert_equal(format(masked, " >5"), "   --")

493:         # assert_equal(format(masked, " <5"), "--   ")

496:         with assert_warns(FutureWarning)
498:         assert_equal(with_format_string, "--")

502:         assert_equal(str(a), '[0 -- 2]')

503:         assert_equal(

514:         assert_equal(

524:         assert_equal(

536:         assert_equal(

549:         assert_equal(

559:         assert_equal(

575:             assert_equal(str(a), '[0 -- 2]')

576:             assert_equal(repr(a), 'masked_array(data = [0 -- 2],\n'

582:             assert_equal(

598:         assert_equal(utype(arr_nomask), u)

599:         assert_equal(utype(arr_masked), u'--')

615:                     assert_equal(a_pickled._mask, a._mask)

616:                     assert_equal(a_pickled._data, a._data)

618:                         assert_equal(a_pickled.fill_value, 999)

620:                         assert_equal(a_pickled.fill_value, dtype(999))

621:                     assert_array_equal(a_pickled.mask, mask)

630:             assert_equal(a_pickled._mask, a._mask)

631:             assert_equal(a_pickled, a)

632:             assert_(isinstance(a_pickled._data, np.recarray))

639:             assert_equal(mc_pickled._baseclass, mc._baseclass)

640:             assert_equal(mc_pickled._mask, mc._mask)

641:             assert_equal(mc_pickled._data, mc._data)

649:             assert_equal(a_pickled._mask, a._mask)

650:             assert_equal(a_pickled, a)

659:             assert_equal(test, b)

665:         assert_equal(a[0].shape, ())

666:         assert_equal(b[0].shape, ())

667:         assert_equal(b[1].shape, ())

671:         assert_equal(1, int(array(1)))

672:         assert_equal(1.0, float(array(1)))

673:         assert_equal(1, int(array([[[1]]])))

674:         assert_equal(1.0, float(array([[1]])))

675:         assert_raises(TypeError, float, array([1, 1]))

679:             assert_(np.isnan(float(array([1], mask=[1]))))

682:             assert_raises(TypeError, lambda
683:             assert_equal(float(a[-1]), 3.)

684:             assert_(np.isnan(float(a[0])))

685:         assert_raises(TypeError, int, a)

686:         assert_equal(int(a[-1]), 3)

687:         assert_raises(MAError, lambda
694:         assert_(x[1, 0] == 12)

696:         assert_equal(z.real, x)

697:         assert_equal(z.imag, 10 * x)

698:         assert_equal((z * conjugate(z)).real, 101 * x * x)

703:         assert_(str(x[3]) == str(masked))

705:         assert_(count(where(c, masked, masked)) == 0)

706:         assert_(shape(where(c, masked, masked)) == c.shape)

709:         assert_(z.dtype is x.dtype)

710:         assert_(z[3] is masked)

711:         assert_(z[4] is not masked)

712:         assert_(z[7] is not masked)

713:         assert_(z[8] is masked)

714:         assert_(z[9] is masked)

715:         assert_equal(x, z)

723:         assert_equal(z, [1., 2., 0., -4., -5])

726:         assert_equal(z, [1., 2., 0., -4., -5])

727:         assert_(z[0] is masked)

728:         assert_(z[1] is not masked)

729:         assert_(z[2] is masked)

738:         assert_equal(atest, [20])

742:         assert_equal(a.filled('x')[0], 'x')

749:         assert_equal(flexi.filled(),

754:         assert_equal(flexi.filled(1),

763:         assert_equal(tuple(test), (1, default_fill_value(1.)))

766:         assert_equal(tuple(test), (1, -1))

769:         assert_equal(tuple(a.filled()), (1, -999))

778:         assert_equal(test, control)

782:         assert_equal(test, control)

786:         assert_equal(Z.data.dtype, numpy.dtype([('A', [('f0', 'i1', (2, 2)),

788:         assert_equal(Z.mask.dtype, numpy.dtype([('A', [('f0', '?', (2, 2)),

796:         assert_(a.flags['F_CONTIGUOUS'])

797:         assert_(a.filled(0).flags['F_CONTIGUOUS'])

804:         assert_equal(y._optinfo['info'], '???')

806:         assert_equal(x._optinfo['info'], '???')

811:         assert_equal(a._optinfo["key"], (a == 2)._optinfo["key"])

812:         assert_equal(a._optinfo["key"], (a != 2)._optinfo["key"])

813:         assert_equal(a._optinfo["key"], (a > 2)._optinfo["key"])

814:         assert_equal(a._optinfo["key"], (a >= 2)._optinfo["key"])

815:         assert_equal(a._optinfo["key"], (a <= 2)._optinfo["key"])

816:         assert_equal(a._optinfo["key"], (a + 2)._optinfo["key"])

817:         assert_equal(a._optinfo["key"], (a - 2)._optinfo["key"])

818:         assert_equal(a._optinfo["key"], (a * 2)._optinfo["key"])

819:         assert_equal(a._optinfo["key"], (a / 2)._optinfo["key"])

820:         assert_equal(a._optinfo["key"], a[
821:         assert_equal(a._optinfo["key"], a[[0,0,2]]._optinfo["key"])

822:         assert_equal(a._optinfo["key"], np.exp(a)._optinfo["key"])

823:         assert_equal(a._optinfo["key"], np.abs(a)._optinfo["key"])

824:         assert_equal(a._optinfo["key"], array(a, copy=True)._optinfo["key"])

825:         assert_equal(a._optinfo["key"], np.zeros_like(a)._optinfo["key"])

834:         assert_equal(str(test), control)

845:         assert_equal(str(t_2d0), control)

854:         assert_equal(test, control)

855:         assert_equal(test.dtype, control.dtype)

861:         assert_equal(test, control)

862:         assert_equal(test.dtype, control.dtype)

863:         assert_equal(test.mask, control.mask)

871:         assert_equal(test, control)

872:         assert_equal(test.dtype, control.dtype)

873:         assert_equal(test.mask, control.mask)

879:         assert_equal(test, control)

880:         assert_equal(test.dtype, control.dtype)

887:         assert_(isinstance(f, mvoid))

890:         assert_(isinstance(a, mvoid))

894:         assert_(isinstance(f, mvoid))

903:         assert_(isinstance(f, mvoid))

904:         assert_equal((f[0], f['a']), (1, 1))

905:         assert_equal(f['b'], 2)

908:         assert_(isinstance(f, mvoid))

909:         assert_(f[0] is masked)

910:         assert_(f['a'] is masked)

911:         assert_equal(f[1], 4)

917:         assert_equal(A[0]["A"], A["A"][0])

918:         assert_equal(A[0]["A"], masked_array(data=[0, 1],

927:         assert_equal(list(a[0]), [1, 2])

929:         assert_equal(list(a[1]), [masked, 4])

934:         assert_equal(str(mx[0]), "(1, 1)")

939:             assert_equal(str(mx[0]), "(1, -X-)")

940:             assert_equal(repr(mx[0]), "(1, -X-)")

946:         assert_equal(str(mx[0]), "(1,)")

955:         assert_(str(t_ma[0]) == "([1, --, 3],)")

956:         assert_(repr(t_ma[0]) == "([1, --, 3],)")

963:         assert_(str(t_2d[0]) == "([[1, --], [--, 4]],)")

964:         assert_(repr(t_2d[0]) == "([[1, --], [--, 4]],)")

969:         assert_(str(t_0d[0]) == "(--, 2)")

970:         assert_(repr(t_0d[0]) == "(--, 2)")

975:         assert_(str(t_2d[0]) == "([[1, --], [--, 4]], 1.0)")

976:         assert_(repr(t_2d[0]) == "([[1, --], [--, 4]], 1.0)")

981:         assert_(str(t_ne[0]) == "(--, (--, 1))")

982:         assert_(repr(t_ne[0]) == "(--, (--, 1))")

988:         assert_(mx[0] is mx1)

989:         assert_(mx[1] is not mx2)

990:         assert_(np.all(mx[1].data == mx2.data))

991:         assert_(np.all(mx[1].mask))

994:         assert_(mx2[0] == 0.)

1025:         assert_equal(a2d * a2d, a2d * a2dm)

1026:         assert_equal(a2d + a2d, a2d + a2dm)

1027:         assert_equal(a2d - a2d, a2d - a2dm)

1034:             assert_equal(-x, -xm)

1035:             assert_equal(x + y, xm + ym)

1036:             assert_equal(x - y, xm - ym)

1037:             assert_equal(x * y, xm * ym)

1038:             assert_equal(x / y, xm / ym)

1039:             assert_equal(a10 + y, a10 + ym)

1040:             assert_equal(a10 - y, a10 - ym)

1041:             assert_equal(a10 * y, a10 * ym)

1042:             assert_equal(a10 / y, a10 / ym)

1043:             assert_equal(x + a10, xm + a10)

1044:             assert_equal(x - a10, xm - a10)

1045:             assert_equal(x * a10, xm * a10)

1046:             assert_equal(x / a10, xm / a10)

1047:             assert_equal(x ** 2, xm ** 2)

1048:             assert_equal(abs(x) ** 2.5, abs(xm) ** 2.5)

1049:             assert_equal(x ** y, xm ** ym)

1050:             assert_equal(np.add(x, y), add(xm, ym))

1051:             assert_equal(np.subtract(x, y), subtract(xm, ym))

1052:             assert_equal(np.multiply(x, y), multiply(xm, ym))

1053:             assert_equal(np.divide(x, y), divide(xm, ym))

1061:         assert_equal(z, [[-1., 1., 1.], [-1., 4., 2.5]])

1062:         assert_equal(z.mask, [[1, 0, 0], [1, 0, 0]])

1065:         assert_equal(z, [[-1., 1., 1.], [-1., 4., 2.5]])

1066:         assert_equal(z.mask, [[1, 0, 0], [1, 0, 0]])

1070:         assert_equal(z, [[-1., -1., -1.], [3., 4., 5.]])

1071:         assert_equal(z.mask, [[1, 1, 1], [0, 0, 0]])

1077:         assert_(isinstance(na + ma, MaskedArray))

1078:         assert_(isinstance(ma + na, MaskedArray))

1083:         assert_equal(getmaskarray(a / 2), [0, 0, 0])

1084:         assert_equal(getmaskarray(2 / a), [1, 0, 1])

1090:         assert_((1 / array(0)).mask)

1091:         assert_((1 + xm).mask)

1092:         assert_((-xm).mask)

1093:         assert_(maximum(xm, xm).mask)

1094:         assert_(minimum(xm, xm).mask)

1099:         assert_((a[0] == 0) is masked)

1100:         assert_((a[0] != 0) is masked)

1101:         assert_equal((a[-1] == 0), False)

1102:         assert_equal((a[-1] != 0), True)

1108:         assert_equal(y.shape, x.shape)

1109:         assert_equal(y._mask, [True, True])

1111:         assert_(y is masked)

1113:         assert_equal(y.shape, x.shape)

1114:         assert_equal(y._mask, [True, True])

1120:         assert_equal(y.shape, x.shape)

1121:         assert_equal(y.mask, [True, ])

1125:         assert_equal(x.filled().ctypes.data, x.ctypes.data)

1128:         assert_equal(xm.shape, (2,))

1129:         assert_equal(xm.mask, [1, 1])

1134:         assert_equal(np.cos(x), cos(xm))

1135:         assert_equal(np.cosh(x), cosh(xm))

1136:         assert_equal(np.sin(x), sin(xm))

1137:         assert_equal(np.sinh(x), sinh(xm))

1138:         assert_equal(np.tan(x), tan(xm))

1139:         assert_equal(np.tanh(x), tanh(xm))

1140:         assert_equal(np.sqrt(abs(x)), sqrt(xm))

1141:         assert_equal(np.log(abs(x)), log(xm))

1142:         assert_equal(np.log10(abs(x)), log10(xm))

1143:         assert_equal(np.exp(x), exp(xm))

1144:         assert_equal(np.arcsin(z), arcsin(zm))

1145:         assert_equal(np.arccos(z), arccos(zm))

1146:         assert_equal(np.arctan(z), arctan(zm))

1147:         assert_equal(np.arctan2(x, y), arctan2(xm, ym))

1148:         assert_equal(np.absolute(x), absolute(xm))

1149:         assert_equal(np.angle(x + 1j*y), angle(xm + 1j*ym))

1150:         assert_equal(np.angle(x + 1j*y, deg=True), angle(xm + 1j*ym, deg=True))

1151:         assert_equal(np.equal(x, y), equal(xm, ym))

1152:         assert_equal(np.not_equal(x, y), not_equal(xm, ym))

1153:         assert_equal(np.less(x, y), less(xm, ym))

1154:         assert_equal(np.greater(x, y), greater(xm, ym))

1155:         assert_equal(np.less_equal(x, y), less_equal(xm, ym))

1156:         assert_equal(np.greater_equal(x, y), greater_equal(xm, ym))

1157:         assert_equal(np.conjugate(x), conjugate(xm))

1161:         assert_equal(1, count(1))

1162:         assert_equal(0, array(1, mask=[1]))

1166:         assert_(res.dtype.type is np.intp)

1167:         assert_equal(3, res)

1171:         assert_(res.dtype.type is np.intp)

1172:         assert_equal(3, res)

1174:         assert_(isinstance(res, ndarray))

1175:         assert_equal([1, 2], res)

1176:         assert_(getmask(res) is nomask)

1180:         assert_(isinstance(res, ndarray))

1181:         assert_(res.dtype.type is np.intp)

1182:         assert_raises(np.AxisError, ott.count, axis=1)

1186:         assert_equal(3, count([1,2,3]))

1187:         assert_equal(2, count((1,2)))

1196:         assert_equal(max(xr), maximum.reduce(xmr))

1197:         assert_equal(min(xr), minimum.reduce(xmr))

1199:         assert_equal(minimum([1, 2, 3], [4, 0, 9]), [1, 0, 3])

1200:         assert_equal(maximum([1, 2, 3], [4, 0, 9]), [4, 2, 9])

1205:         assert_equal(minimum(x, y), where(less(x, y), x, y))

1206:         assert_equal(maximum(x, y), where(greater(x, y), x, y))

1207:         assert_(minimum.reduce(x) == 0)

1208:         assert_(maximum.reduce(x) == 4)

1212:         assert_equal(maximum.reduce(x, axis=None), 2)

1217:         assert_(isinstance(aminimum, MaskedArray))

1218:         assert_equal(aminimum, np.minimum(a, a))

1221:         assert_(isinstance(aminimum, MaskedArray))

1222:         assert_equal(aminimum, np.minimum.outer(a, a))

1225:         assert_(isinstance(amaximum, MaskedArray))

1226:         assert_equal(amaximum, np.maximum(a, a))

1229:         assert_(isinstance(amaximum, MaskedArray))

1230:         assert_equal(amaximum, np.maximum.outer(a, a))

1236:         assert_equal(b, 3)

1255:             assert_(result is nout)

1259:             assert_(result is nout)

1265:         assert_equal(xm.max(), 10)

1266:         assert_(xm[0].max() is masked)

1267:         assert_(xm[0].max(0) is masked)

1268:         assert_(xm[0].max(-1) is masked)

1269:         assert_equal(xm.min(), -10.)

1270:         assert_(xm[0].min() is masked)

1271:         assert_(xm[0].min(0) is masked)

1272:         assert_(xm[0].min(-1) is masked)

1273:         assert_equal(xm.ptp(), 20.)

1274:         assert_(xm[0].ptp() is masked)

1275:         assert_(xm[0].ptp(0) is masked)

1276:         assert_(xm[0].ptp(-1) is masked)

1279:         assert_(x.min() is masked)

1280:         assert_(x.max() is masked)

1281:         assert_(x.ptp() is masked)

1294:             assert_equal(masked_array(x, mask=m1, dtype=float_dtype).max(),

1296:             assert_equal(masked_array(x, mask=m1, dtype=float_dtype).min(),

1299:         assert_equal(xm.min(), an10)

1300:         assert_equal(xm.max(), a10)

1304:             assert_equal(masked_array(x, mask=m1, dtype=float_dtype).max(),

1306:             assert_equal(masked_array(x, mask=m1, dtype=float_dtype).min(),

1313:             assert_equal(ym.min(), float_dtype(1e20-1j))

1314:             assert_equal(ym.max(), float_dtype(1e20+1j))

1318:             assert_equal(zm.min(), float_dtype(-np.inf-1j))

1319:             assert_equal(zm.max(), float_dtype(np.inf+2j))

1322:             assert masked_array([-cmax, 0], mask=[0, 1]).max() == -cmax

1323:             assert masked_array([cmax, 0], mask=[0, 1]).min() == cmax

1328:         assert_equal(np.add.reduce(x), add.reduce(x))

1329:         assert_equal(np.add.accumulate(x), add.accumulate(x))

1330:         assert_equal(4, sum(array(4), axis=0))

1331:         assert_equal(4, sum(array(4), axis=0))

1332:         assert_equal(np.sum(x, axis=0), sum(x, axis=0))

1333:         assert_equal(np.sum(filled(xm, 0), axis=0), sum(xm, axis=0))

1334:         assert_equal(np.sum(x, 0), sum(x, 0))

1335:         assert_equal(np.product(x, axis=0), product(x, axis=0))

1336:         assert_equal(np.product(x, 0), product(x, 0))

1337:         assert_equal(np.product(filled(xm, 1), axis=0), product(xm, axis=0))

1341:             assert_equal(np.concatenate((x, y), 1), concatenate((xm, ym), 1))

1342:             assert_equal(np.add.reduce(x, 1), add.reduce(x, 1))

1343:             assert_equal(np.sum(x, 1), sum(x, 1))

1344:             assert_equal(np.product(x, 1), product(x, 1))

1354:         assert_equal(test, control)

1355:         assert_equal(test.data, control.data)

1356:         assert_equal(test.mask, control.mask)

1361:         assert_equal(test, control)

1362:         assert_equal(test.data, control.data)

1363:         assert_equal(test.mask, control.mask)

1371:         assert_equal(test, control)

1372:         assert_equal(test.data, control.data)

1373:         assert_equal(test.mask, control.mask)

1378:         assert_equal(test, control)

1379:         assert_equal(test.data, control.data)

1380:         assert_equal(test.mask, control.mask)

1390:         assert_equal(test, control)

1391:         assert_equal(test.data, control.data)

1392:         assert_equal(test.mask, control.mask)

1397:         assert_equal(test, control)

1398:         assert_equal(test.data, control.data)

1399:         assert_equal(test.mask, control.mask)

1407:         assert_equal(test, control)

1408:         assert_equal(test.data, control.data)

1409:         assert_equal(test.mask, control.mask)

1414:         assert_equal(test, control)

1415:         assert_equal(test.data, control.data)

1416:         assert_equal(test.mask, control.mask)

1424:         assert_equal(b.mask, [0, 0, 0])

1427:         assert_equal(a.mask, [0, 0, 0])

1430:         assert_equal(b.mask, [0, 0, 0])

1433:         assert_equal(a.mask, [0, 0, 0])

1439:         assert_equal(np.true_divide(m, 5).mask.shape, ())

1444:         assert_equal(a.mask, [0, 0, 0])

1449:         assert_equal(mod(x, y), mod(xm, ym))

1451:         assert_equal(test, np.mod(ym, xm))

1452:         assert_equal(test.mask, mask_or(xm.mask, ym.mask))

1454:         assert_equal(test, np.mod(xm, ym))

1455:         assert_equal(test.mask, mask_or(mask_or(xm.mask, ym.mask), (ym == 0)))

1464:         assert_equal(np.transpose(y, (2, 0, 1)), transpose(x, (2, 0, 1)))

1465:         assert_equal(np.take(y, (2, 0, 1), 1), take(x, (2, 0, 1), 1))

1466:         assert_equal(np.inner(filled(x, 0), filled(y, 0)),

1468:         assert_equal(np.outer(filled(x, 0), filled(y, 0)),

1473:         assert_(t[0] == 'abc')

1474:         assert_(t[1] == 2)

1475:         assert_(t[2] == 3)

1480:         assert_equal(xx.imag, [10, 2])

1481:         assert_equal(xx.imag.filled(), [1e+20, 2])

1482:         assert_equal(xx.imag.dtype, xx._data.imag.dtype)

1483:         assert_equal(xx.real, [1, 20])

1484:         assert_equal(xx.real.filled(), [1e+20, 20])

1485:         assert_equal(xx.real.dtype, xx._data.real.dtype)

1501:             assert_(result is output)

1502:             assert_equal(result, xmmeth(axis=0, out=output))

1506:             assert_(result is output)

1507:             assert_(output[0] is masked)

1515:         assert_equal(test.data, [True, True])

1516:         assert_equal(test.mask, [False, False])

1517:         assert_(test.fill_value == True)

1520:         assert_equal(test.data, [True, False])

1521:         assert_equal(test.mask, [False, False])

1522:         assert_(test.fill_value == True)

1526:         assert_equal(test.data, [False, True])

1527:         assert_equal(test.mask, [True, False])

1528:         assert_(test.fill_value == True)

1531:         assert_equal(test.data, [False, False])

1532:         assert_equal(test.mask, [True, False])

1533:         assert_(test.fill_value == True)

1537:         assert_equal(test.data, [True, True])

1538:         assert_equal(test.mask, [False, False])

1539:         assert_(test.fill_value == True)

1548:         assert_equal(test.data, [[True, False], [False, False]])

1549:         assert_equal(test.mask, [[False, False], [False, True]])

1550:         assert_(test.fill_value == True)

1558:         assert_equal(test.data, [False, False])

1559:         assert_equal(test.mask, [False, False])

1560:         assert_(test.fill_value == True)

1563:         assert_equal(test.data, [False, True])

1564:         assert_equal(test.mask, [False, False])

1565:         assert_(test.fill_value == True)

1569:         assert_equal(test.data, [True, False])

1570:         assert_equal(test.mask, [True, False])

1571:         assert_(test.fill_value == True)

1574:         assert_equal(test.data, [True, True])

1575:         assert_equal(test.mask, [True, False])

1576:         assert_(test.fill_value == True)

1580:         assert_equal(test.data, [False, False])

1581:         assert_equal(test.mask, [False, False])

1582:         assert_(test.fill_value == True)

1591:         assert_equal(test.data, [[False, True], [True, True]])

1592:         assert_equal(test.mask, [[False, False], [False, True]])

1593:         assert_(test.fill_value == True)

1612:                 assert_equal(m1 == m2, eq_expected)

1613:                 assert_equal(m2 == m1, eq_expected)

1614:                 assert_equal(ma1 == m2, eq_expected)

1615:                 assert_equal(m1 == ma2, eq_expected)

1616:                 assert_equal(ma1 == ma2, eq_expected)

1619:                 assert_equal(array(el_by_el, dtype=bool).all(), eq_expected)

1621:                 assert_equal(m1 != m2, ne_expected)

1622:                 assert_equal(m2 != m1, ne_expected)

1623:                 assert_equal(ma1 != m2, ne_expected)

1624:                 assert_equal(m1 != ma2, ne_expected)

1625:                 assert_equal(ma1 != ma2, ne_expected)

1627:                 assert_equal(array(el_by_el, dtype=bool).any(), ne_expected)

1636:         assert_equal(test.data, [True, True])

1637:         assert_equal(test.mask, [False, True])

1638:         assert_(test.fill_value == True)

1641:         assert_equal(test.data, [True, False])

1642:         assert_equal(test.mask, [False, True])

1643:         assert_(test.fill_value == True)

1647:         assert_equal(test.data, [False, False])

1648:         assert_equal(test.mask, [True, True])

1649:         assert_(test.fill_value == True)

1652:         assert_equal(test.data, [False, False])

1653:         assert_equal(test.mask, [True, False])

1654:         assert_(test.fill_value == True)

1657:         assert_equal(test.data, [False, False])

1658:         assert_equal(test.mask, [True, False])

1659:         assert_(test.fill_value == True)

1668:         assert_equal(test.data, [False, False])

1669:         assert_equal(test.mask, [False, True])

1670:         assert_(test.fill_value == True)

1673:         assert_equal(test.data, [False, True])

1674:         assert_equal(test.mask, [False, True])

1675:         assert_(test.fill_value == True)

1679:         assert_equal(test.data, [True, True])

1680:         assert_equal(test.mask, [True, True])

1681:         assert_(test.fill_value == True)

1684:         assert_equal(test.data, [True, True])

1685:         assert_equal(test.mask, [True, False])

1686:         assert_(test.fill_value == True)

1689:         assert_equal(test.data, [True, True])

1690:         assert_equal(test.mask, [True, False])

1691:         assert_(test.fill_value == True)

1701:         assert_equal(test.data, [True, True])

1702:         assert_equal(test.mask, [False, True])

1703:         assert_(test.fill_value == True)

1706:         assert_equal(test.data, [True, False])

1707:         assert_equal(test.mask, [False, True])

1708:         assert_(test.fill_value == True)

1712:         assert_equal(test.data, [False, False])

1713:         assert_equal(test.mask, [True, True])

1714:         assert_(test.fill_value == True)

1717:         assert_equal(test.data, [False, False])

1718:         assert_equal(test.mask, [True, False])

1719:         assert_(test.fill_value == True)

1722:         assert_equal(test.data, [False, False])

1723:         assert_equal(test.mask, [True, False])

1724:         assert_(test.fill_value == True)

1734:         assert_equal(test.data, [False, False])

1735:         assert_equal(test.mask, [False, True])

1736:         assert_(test.fill_value == True)

1739:         assert_equal(test.data, [False, True])

1740:         assert_equal(test.mask, [False, True])

1741:         assert_(test.fill_value == True)

1745:         assert_equal(test.data, [True, True])

1746:         assert_equal(test.mask, [True, True])

1747:         assert_(test.fill_value == True)

1750:         assert_equal(test.data, [True, True])

1751:         assert_equal(test.mask, [True, False])

1752:         assert_(test.fill_value == True)

1755:         assert_equal(test.data, [True, True])

1756:         assert_equal(test.mask, [True, False])

1757:         assert_(test.fill_value == True)

1769:             assert_equal(a == None, array([True, False], mask=[0, 1]))

1770:             assert_equal(a.data == None, [True, False])

1771:             assert_equal(a != None, array([False, True], mask=[0, 1]))

1774:             assert_equal(a == None, [True, False])

1775:             assert_equal(a != None, [False, True])

1778:             assert_equal(a == None, array([False, True], mask=True))

1779:             assert_equal(a != None, array([True, False], mask=True))

1782:             assert_equal(a == None, masked)

1786:         assert_equal(a == 1, True)

1787:         assert_equal(a == 0, False)

1788:         assert_equal(a != 1, False)

1789:         assert_equal(a != 0, True)

1791:         assert_equal(b == 0, masked)

1792:         assert_equal(b == 1, masked)

1793:         assert_equal(b != 0, masked)

1794:         assert_equal(b != 1, masked)

1802:             assert_equal(test.data, [[False, False],

1804:             assert_equal(test.mask, [[False, True],

1814:         assert_equal(test, control)

1815:         assert_equal(test.mask, control.mask)

1816:         assert_equal(a.mask, [0, 0, 0, 0, 1])

1819:         assert_equal(test, control)

1820:         assert_equal(test.mask, control.mask)

1821:         assert_equal(a.mask, [0, 0, 0, 0, 1])

1830:         assert_equal(mx.mask, x.mask)

1832:         assert_equal(mx.mask, [0, 1, 0])

1834:         assert_equal(mx.mask, [1, 1, 0])

1837:         assert_equal(mx.mask, [1, 1, 0])

1849:         assert_equal(xh._data, [0, 10, 2, 3, 4])

1850:         assert_equal(xs._data, [0, 10, 2, 3, 40])

1851:         assert_equal(xs.mask, [0, 0, 0, 1, 0])

1852:         assert_(xh._hardmask)

1853:         assert_(not xs._hardmask)

1856:         assert_equal(xh._data, [0, 10, 20, 3, 4])

1857:         assert_equal(xs._data, [0, 10, 20, 30, 40])

1858:         assert_equal(xs.mask, nomask)

1861:         assert_equal(xh.mask, [1, 0, 0, 1, 1])

1862:         assert_equal(xs.mask, [1, 0, 0, 0, 0])

1865:         assert_equal(xh._data, [0, 1, 1, 3, 4])

1866:         assert_equal(xs._data, [1, 1, 1, 1, 1])

1867:         assert_equal(xh.mask, [1, 0, 0, 1, 1])

1868:         assert_equal(xs.mask, nomask)

1872:         assert_equal(xh._data, [0, 1, 2, 3, 4])

1873:         assert_equal(xh.mask, nomask)

1877:         assert_equal(xh._data, [0, 1, 2, 3, 4])

1878:         assert_equal(xh._mask, [1, 1, 1, 0, 0])

1880:         assert_equal(xh._data, [0, 1, 2, 5, 5])

1881:         assert_equal(xh._mask, [1, 1, 1, 0, 0])

1885:         assert_equal(xh._data, [[1, 0], [3, 4]])

1886:         assert_equal(xh._mask, [[1, 0], [0, 0]])

1888:         assert_equal(xh._data, [[1, 0], [3, 5]])

1889:         assert_equal(xh._mask, [[1, 0], [0, 0]])

1891:         assert_equal(xh._data, [[1, 2], [2, 5]])

1892:         assert_equal(xh._mask, [[1, 0], [0, 0]])

1902:         assert_equal(xh._data, [999, 1, 2, 3, 4])

1909:         assert_equal(a, b)

1911:         assert_equal(a, b)

1912:         assert_equal(b, array([1, 2, 3], mask=[1, 0, 0]))

1915:         assert_equal(a, b)

1916:         assert_equal(b, array([0, 2, 3], mask=[0, 0, 0]))

1923:         assert_equal(a._mask, nomask)

1928:         assert_equal(a._mask, zeros(10))

1934:         assert_equal(a, b)

1935:         assert_equal(a.mask, nomask)

1941:         assert_equal(a.mask, b.mask)

1955:         assert_equal(xflat[0], x[0, 0])

1956:         assert_equal(xflat[1], x[0, 1])

1957:         assert_equal(xflat[2], x[0, 2])

1958:         assert_equal(xflat[
1959:         assert_equal(xflat[3], x[1, 0])

1960:         assert_equal(xflat[4], x[1, 1])

1961:         assert_equal(xflat[5], x[1, 2])

1962:         assert_equal(xflat[3
1963:         assert_equal(xflat[-1], x[-1, -1])

1967:             assert_equal(xf, x[j, i])

1980:         assert_equal(m.dtype, np.dtype('f4'))

1987:         assert_raises(ValueError, assign)

1990:         assert_equal(b.dtype, np.dtype('f4'))

1996:         assert_equal(m.dtype, np.dtype('f4,i4'))

1997:         assert_equal(m._mask, np.ma.nomask)

2007:         assert_equal(fval, 0)

2009:         assert_equal(fval, default_fill_value(0))

2012:         assert_equal(fval, b"0")

2014:         assert_equal(fval, default_fill_value(b"camelot!"))

2015:         assert_raises(TypeError, _check_fill_value, 1e+20, int)

2016:         assert_raises(TypeError, _check_fill_value, 'stuff', int)

2024:         assert_(isinstance(fval, ndarray))

2025:         assert_equal(fval.item(), [-999, -12345678.9, b"???"])

2028:         assert_(isinstance(fval, ndarray))

2029:         assert_equal(fval.item(), [default_fill_value(0),

2035:         assert_(isinstance(fval, ndarray))

2036:         assert_equal(fval.item(), [-999, -12345678.9, b"???"])

2044:         assert_(isinstance(fval, ndarray))

2045:         assert_equal(fval.item(), [-999, -12345678.9, b"???"])

2051:         assert_(isinstance(fval, ndarray))

2052:         assert_equal(fval.item(), [-999, -12345678.9, b"???"])

2057:         #assert_(isinstance(fval, ndarray))

2058:         #assert_equal(fval.item(), [-999, -12345678.9, b"???"])

2062:         assert_(isinstance(fval, ndarray))

2063:         assert_equal(fval.item(), (-999999999,))

2073:         assert_equal(b._data, [3, 4, 5])

2074:         assert_equal(b.fill_value, default_fill_value(0))

2077:         assert_equal(b._data, [3, 4, 5])

2078:         assert_equal(b.fill_value, default_fill_value(0.))

2081:         assert_equal(b._data, [3, 4, 5])

2082:         assert_equal(b.fill_value, default_fill_value(0))

2083:         assert_equal(b._optinfo['comment'], "updated!")

2086:         assert_equal(b['a']._data, a._data)

2087:         assert_equal(b['a'].fill_value, a.fill_value)

2094:         assert_equal(f1, f2)

2095:         assert_equal(f1, f3)

2106:         assert_equal(f1, expected)

2107:         assert_equal(f2, expected)

2112:         assert_equal(f['v'], np.array(default_fill_value(dt['v']), dt['v']))

2118:         assert_equal(series._fill_value, data._fill_value)

2123:         assert_equal(x.fill_value.item(), [999., b'999'])

2124:         assert_equal(x['f'].fill_value, 999)

2125:         assert_equal(x['s'].fill_value, b'999')

2128:         assert_equal(x.fill_value.item(), (9, b'???'))

2129:         assert_equal(x['f'].fill_value, 9)

2130:         assert_equal(x['s'].fill_value, b'???')

2134:         assert_equal(np.asarray(x.fill_value).dtype, float)

2135:         assert_equal(x.fill_value, 999.)

2136:         assert_equal(x._fill_value, np.array(999.))

2145:             assert_equal(tuple(subfields.fill_value), (999999, 1.e+20))

2157:         assert_equal(_check_fill_value(None, ndtype), control)

2162:         assert_equal(_check_fill_value(None, ndtype), control)

2164:         assert_equal(_check_fill_value(0, ndtype), control)

2172:         assert_equal(test, control)

2174:         assert_equal(_check_fill_value(0, ndtype), control)

2178:         assert_equal(M["f1"].fill_value.ndim, 0)

2189:             np.testing.assert_equal(test, control)

2193:             np.testing.assert_equal(test, control)

2200:         assert_equal(test.dtype, a.dtype)

2201:         assert_equal(test['A'], default_fill_value(a['A']))

2202:         assert_equal(test['B']['BA'], default_fill_value(a['B']['BA']))

2203:         assert_equal(test['B']['BB'], default_fill_value(a['B']['BB']))

2206:         assert_equal(test.dtype, a.dtype)

2207:         assert_equal(test[0], minimum_fill_value(a['A']))

2208:         assert_equal(test[1][0], minimum_fill_value(a['B']['BA']))

2209:         assert_equal(test[1][1], minimum_fill_value(a['B']['BB']))

2210:         assert_equal(test[1], minimum_fill_value(a['B']))

2213:         assert_equal(test.dtype, a.dtype)

2214:         assert_equal(test[0], maximum_fill_value(a['A']))

2215:         assert_equal(test[1][0], maximum_fill_value(a['B']['BA']))

2216:         assert_equal(test[1][1], maximum_fill_value(a['B']['BB']))

2217:         assert_equal(test[1], maximum_fill_value(a['B']))

2223:         assert_equal(test.dtype, a.dtype)

2224:         assert_equal(test[0], np.full(3, minimum_fill_value(a['value'])))

2227:         assert_equal(test.dtype, a.dtype)

2228:         assert_equal(test[0], np.full(3, maximum_fill_value(a['value'])))

2238:         assert_equal(aa._fill_value, np.array(10))

2239:         assert_equal(tuple(a.fill_value), (10, -999))

2241:         assert_equal(tuple(a.fill_value), (10, -10))

2246:         assert_equal(tt._fill_value, np.array(10))

2247:         assert_equal(tuple(t.fill_value), (10, default_fill_value(0)))

2259:         assert_(np.isnan(f[0]))

2260:         assert_equal(f[-1], default_fill_value(1.))

2265:         assert_equal(a.fill_value, 999.)

2268:         assert_equal(a.fill_value, 999.)

2271:         assert_equal(a.fill_value, 0.)

2274:         assert_equal(a.fill_value, 0.)

2280:         assert_equal(a.shape, (3, ))

2283:         assert_equal(a.shape, (3, ))

2286:         assert_equal(a.shape, (3, ))

2296:         assert_(y.fill_value == 1)

2301:         assert_(y.fill_value == 1)

2307:         assert_(y.fill_value == 1)

2316:         assert_(y.fill_value == 2)

2320:         assert_(y.fill_value == 2)

2328:         assert_(y.fill_value == 999999)

2334:         assert_equal(a["f0"].fill_value, default_fill_value(b"spam"))

2335:         assert_equal(a["f1"].fill_value, default_fill_value("eggs"))

2378:             assert_equal(ur.filled(0), mr.filled(0), f)

2379:             assert_mask_equal(ur.mask, mr.mask, err_msg=f)

2384:         assert_(not alltrue(a, axis=0))

2385:         assert_(sometrue(a, axis=0))

2386:         assert_equal(sum(a[
2387:         assert_equal(product(a, axis=0), 0)

2388:         assert_equal(add.reduce(a), pi)

2394:         assert_equal(amask.max(), a.max())

2395:         assert_equal(amask.min(), 5)

2396:         assert_equal(amask.max(0), a.max(0))

2397:         assert_equal(amask.min(0), [5, 6, 7, 8])

2398:         assert_(amask.max(1)[0].mask)

2399:         assert_(amask.min(1)[0].mask)

2407:         assert_equal(test, control)

2408:         assert_equal(test.mask, control.mask)

2409:         assert_(not isinstance(test.mask, MaskedArray))

2415:         assert_raises(TypeError, operator.mul, a, "abc")

2416:         assert_raises(TypeError, operator.truediv, a, "abc")

2428:         assert_(me * a == "My mul")

2429:         assert_(a * me == "My rmul")

2447:         assert_(a.__mul__(me_too) is NotImplemented)

2448:         assert_(all(multiply.outer(a, me_too) == "Me2rmul"))

2449:         assert_(a.__truediv__(me_too) is NotImplemented)

2450:         assert_(me_too * a == "Me2mul")

2451:         assert_(a * me_too == "Me2rmul")

2452:         assert_(a / me_too == "Me2rdiv")

2505:         assert_equal(x, y + 1)

2507:         assert_equal(xm, y + 1)

2512:         assert_(id1 == x.data.ctypes.data)

2513:         assert_equal(x, y + 1.)

2523:         assert_equal(x, y + a)

2524:         assert_equal(xm, y + a)

2525:         assert_equal(xm.mask, mask_or(m, a.mask))

2531:         assert_equal(x, y - 1)

2533:         assert_equal(xm, y - 1)

2543:         assert_equal(x, y - a)

2544:         assert_equal(xm, y - a)

2545:         assert_equal(xm.mask, mask_or(m, a.mask))

2551:         assert_equal(x, y * 2)

2553:         assert_equal(xm, y * 2)

2563:         assert_equal(x, y * a)

2564:         assert_equal(xm, y * a)

2565:         assert_equal(xm.mask, mask_or(m, a.mask))

2574:         assert_equal(x, y)

2576:         assert_equal(xm, y)

2582:         assert_equal(x, y / 2.0)

2584:         assert_equal(xm, ones((10,)))

2594:         assert_equal(x, y / a)

2595:         assert_equal(xm, y / a)

2596:         assert_equal(xm.mask, mask_or(mask_or(m, a.mask), (a == 0)))

2608:         assert_equal(z._mask, [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1])

2609:         assert_equal(z._data,

2614:         assert_equal(xm._mask, [1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1])

2615:         assert_equal(z._data,

2623:         assert_equal(xx.data, [2, 3, 3])

2624:         assert_equal(xx.mask, [0, 0, 1])

2627:         assert_equal(x.data, [2, 3, 3])

2628:         assert_equal(x.mask, [0, 0, 1])

2632:         assert_equal(xx.data, [1, 4, 3])

2633:         assert_equal(xx.mask, [1, 0, 1])

2637:         assert_equal(x.data, [1, 4, 3])

2638:         assert_equal(x.mask, [1, 0, 1])

2645:         assert_equal(xx.data, [0, 1, 3])

2646:         assert_equal(xx.mask, [0, 0, 1])

2650:         assert_equal(x.data, [0, 1, 3])

2651:         assert_equal(x.mask, [0, 0, 1])

2655:         assert_equal(xx.data, [1, 0, 3])

2656:         assert_equal(xx.mask, [1, 0, 1])

2660:         assert_equal(x.data, [1, 0, 3])

2661:         assert_equal(x.mask, [1, 0, 1])

2668:         assert_equal(xx.data, [2, 4, 3])

2669:         assert_equal(xx.mask, [0, 0, 1])

2673:         assert_equal(x.data, [2, 4, 3])

2674:         assert_equal(x.mask, [0, 0, 1])

2678:         assert_equal(xx.data, [1, 40, 3])

2679:         assert_equal(xx.mask, [1, 0, 1])

2683:         assert_equal(x.data, [1, 40, 3])

2684:         assert_equal(x.mask, [1, 0, 1])

2691:         assert_equal(xx.data, [1 / 2., 2 / 2., 3])

2692:         assert_equal(xx.mask, [0, 0, 1])

2696:         assert_equal(x.data, [1 / 2., 2 / 2., 3])

2697:         assert_equal(x.mask, [0, 0, 1])

2701:         assert_equal(xx.data, [1., 2. / 20., 3.])

2702:         assert_equal(xx.mask, [1, 0, 1])

2706:         assert_equal(x.data, [1., 2 / 20., 3.])

2707:         assert_equal(x.mask, [1, 0, 1])

2714:         assert_equal(xx.data, [1., 2. ** 2.5, 3.])

2715:         assert_equal(xx.mask, [0, 0, 1])

2718:         assert_equal(x.data, [1., 2. ** 2.5, 3])

2719:         assert_equal(x.mask, [0, 0, 1])

2725:         assert_equal(a, [[2, 2], [4, 4]])

2727:             assert_equal(a.mask, [[0, 0], [0, 0]])

2732:         assert_equal(a, [[2, 2], [4, 4]])

2733:         assert_equal(a.mask, [[0, 1], [0, 1]])

2739:         assert_equal(a, [[0, 0], [2, 2]])

2741:             assert_equal(a.mask, [[0, 0], [0, 0]])

2746:         assert_equal(a, [[0, 0], [2, 2]])

2747:         assert_equal(a.mask, [[0, 1], [0, 1]])

2753:         assert_equal(a, [[1, 1], [3, 3]])

2755:             assert_equal(a.mask, [[0, 0], [0, 0]])

2760:         assert_equal(a, [[1, 1], [3, 3]])

2761:         assert_equal(a.mask, [[0, 1], [0, 1]])

2771:                 assert_equal(x, y + t(1))

2773:                 assert_equal(xm, y + t(1))

2775:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2788:                 assert_equal(x, y + a)

2789:                 assert_equal(xm, y + a)

2790:                 assert_equal(xm.mask, mask_or(m, a.mask))

2792:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2801:                 assert_equal(x, y - t(1))

2803:                 assert_equal(xm, y - t(1))

2805:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2818:                 assert_equal(x, y - a)

2819:                 assert_equal(xm, y - a)

2820:                 assert_equal(xm.mask, mask_or(m, a.mask))

2822:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2831:                 assert_equal(x, y * t(2))

2833:                 assert_equal(xm, y * t(2))

2835:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2848:                 assert_equal(x, y * a)

2849:                 assert_equal(xm, y * a)

2850:                 assert_equal(xm.mask, mask_or(m, a.mask))

2852:                 assert_equal(len(w), 0, f'Failed on type={t}.')

2868:                     assert_equal(x, y)

2869:                     assert_equal(xm, y)

2871:                     assert_equal(len(w), 0, "Failed on type=%s." % t)

2874:                     assert t in unsupported, msg

2890:                     assert_equal(x, y // a)

2891:                     assert_equal(xm, y // a)

2892:                     assert_equal(

2897:                     assert_equal(len(w), 0, f'Failed on type={t}.')

2900:                     assert t in unsupported, msg

2924:                     assert_equal(x, y)

2929:                     assert_equal(xm, y)

2934:                     assert_equal(len(sup.log), 2, f'Failed on type={t}.')

2936:                     assert_equal(len(sup.log), 0, f'Failed on type={t}.')

2959:                     assert_equal(x, y / a)

2964:                     assert_equal(xm, y / a)

2965:                     assert_equal(

2973:                     assert_equal(len(sup.log), 2, f'Failed on type={t}.')

2975:                     assert_equal(len(sup.log), 0, f'Failed on type={t}.')

2986:                 assert_equal(xx.data, xx_r.data)

2987:                 assert_equal(xx.mask, xx_r.mask)

2990:                 assert_equal(x.data, xx_r.data)

2991:                 assert_equal(x.mask, xx_r.mask)

2993:                 assert_equal(len(w), 0, f'Failed on type={t}.')

3033:         assert_equal(a.any(), a._data.any())

3034:         assert_equal(a.all(), a._data.all())

3035:         assert_equal(a.argmax(), a._data.argmax())

3036:         assert_equal(a.argmin(), a._data.argmin())

3037:         assert_equal(a.choose(0, 1, 2, 3, 4), a._data.choose(0, 1, 2, 3, 4))

3038:         assert_equal(a.compress([1, 0, 1]), a._data.compress([1, 0, 1]))

3039:         assert_equal(a.conj(), a._data.conj())

3040:         assert_equal(a.conjugate(), a._data.conjugate())

3043:         assert_equal(m.diagonal(), m._data.diagonal())

3044:         assert_equal(a.sum(), a._data.sum())

3045:         assert_equal(a.take([1, 2]), a._data.take([1, 2]))

3046:         assert_equal(m.transpose(), m._data.transpose())

3052:         assert_(allclose(a, b))

3055:         assert_(not allclose(a, b))

3057:         assert_(allclose(a, b))

3061:         assert_(allclose(a, b, masked_equal=True))

3062:         assert_(not allclose(a, b, masked_equal=False))

3066:         assert_(allclose(a, 0, masked_equal=True))

3070:         assert_(allclose(a, a))

3076:         assert allclose(a, a, atol=0)

3077:         assert allclose(a, a, atol=np.timedelta64(1, "ns"))

3091:         assert_(not mxbig.all())

3092:         assert_(mxbig.any())

3093:         assert_equal(mxbig.all(0), [False, False, True])

3094:         assert_equal(mxbig.all(1), [False, False, True])

3095:         assert_equal(mxbig.any(0), [False, False, True])

3096:         assert_equal(mxbig.any(1), [True, True, True])

3098:         assert_(not mxsmall.all())

3099:         assert_(mxsmall.any())

3100:         assert_equal(mxsmall.all(0), [True, True, False])

3101:         assert_equal(mxsmall.all(1), [False, False, False])

3102:         assert_equal(mxsmall.any(0), [True, True, False])

3103:         assert_equal(mxsmall.any(1), [True, True, False])

3110:         assert_(full.all() is masked)

3112:         assert_(store)

3113:         assert_(store._mask, True)

3114:         assert_(store is not masked)

3117:         assert_(full.any() is masked)

3119:         assert_(not store)

3120:         assert_(store._mask, True)

3121:         assert_(store is not masked)

3127:         assert_equal(mx.argmin(), 35)

3128:         assert_equal(mX.argmin(), 35)

3129:         assert_equal(m2x.argmin(), 4)

3130:         assert_equal(m2X.argmin(), 4)

3131:         assert_equal(mx.argmax(), 28)

3132:         assert_equal(mX.argmax(), 28)

3133:         assert_equal(m2x.argmax(), 31)

3134:         assert_equal(m2X.argmax(), 31)

3136:         assert_equal(mX.argmin(0), [2, 2, 2, 5, 0, 5])

3137:         assert_equal(m2X.argmin(0), [2, 2, 4, 5, 0, 4])

3138:         assert_equal(mX.argmax(0), [0, 5, 0, 5, 4, 0])

3139:         assert_equal(m2X.argmax(0), [5, 5, 0, 5, 1, 0])

3141:         assert_equal(mX.argmin(1), [4, 1, 0, 0, 5, 5, ])

3142:         assert_equal(m2X.argmin(1), [4, 4, 0, 0, 5, 3])

3143:         assert_equal(mX.argmax(1), [2, 4, 1, 1, 4, 1])

3144:         assert_equal(m2X.argmax(1), [2, 4, 1, 1, 1, 1])

3159:         assert_equal(clipped.mask, mx.mask)

3160:         assert_equal(clipped._data, x.clip(2, 8))

3161:         assert_equal(clipped._data, mx._data.clip(2, 8))

3168:         assert_equal(m.mask, [0, 1] * 5)

3174:         assert_equal(a.compress(condition), [2., 3.])

3178:         assert_equal(b._data, [2., 3.])

3179:         assert_equal(b._mask, [0, 1])

3180:         assert_equal(b.fill_value, 9999)

3181:         assert_equal(b, a[condition])

3185:         assert_equal(b._data, [1., 2., 3.])

3186:         assert_equal(b._mask, [0, 0, 1])

3187:         assert_equal(b.fill_value, 9999)

3188:         assert_equal(b, a[condition])

3193:         assert_equal(b._data, [30, 40, 50, 60])

3194:         assert_equal(b._mask, [1, 1, 0, 0])

3198:         assert_equal(b._data, [[10, 30], [40, 60]])

3199:         assert_equal(b._mask, [[0, 1], [1, 0]])

3205:         assert_equal(b, a)

3208:         assert_equal(b, [2, 3, 4])

3215:         assert_equal(len(a.fill_value.item()), len(datatype))

3218:         assert_equal(b.shape, a.shape)

3219:         assert_equal(b.fill_value, a.fill_value)

3222:         assert_equal(b.shape, a.shape)

3223:         assert_equal(b.fill_value, a.fill_value)

3228:         assert_(not np.may_share_memory(a.mask, b.mask))

3230:         assert_(np.may_share_memory(a.mask, b.mask))

3237:         assert_equal(len(a.fill_value.item()), len(datatype))

3240:         assert_equal(b.shape, a.shape)

3241:         assert_equal(b.fill_value, a.fill_value)

3244:         assert_equal(b.shape, a.shape)

3245:         assert_equal(b.fill_value, a.fill_value)

3250:         assert_(not np.may_share_memory(a.mask, b.mask))

3252:         assert_(np.may_share_memory(a.mask, b.mask))

3259:         assert_equal(len(a.fill_value.item()), len(datatype))

3262:         assert_equal(b.shape, a.shape)

3263:         assert_equal(b.fill_value, a.fill_value)

3266:         assert_equal(b.shape, a.shape)

3267:         assert_equal(b.fill_value, a.fill_value)

3272:         assert_(not np.may_share_memory(a.mask, b.mask))

3274:         assert_(np.may_share_memory(a.mask, b.mask))

3283:         assert_(x[3] is masked)

3284:         assert_(x[4] is masked)

3286:         assert_(x[3] is masked)

3287:         assert_(x[4] is not masked)

3288:         assert_equal(x, [0, 10, 2, -1, 40])

3293:         assert_equal(x, asarray([6, 1, 4, 3, 2, 5, 0, 7, 8, 9, ]))

3294:         assert_equal(x.mask, [0, 0, 0, 0, 0, 1, 0, 0, 0, 0])

3296:         assert_array_equal(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ])

3297:         assert_equal(x.mask, [1, 0, 0, 0, 1, 1, 0, 0, 0, 0])

3301:         assert_equal(x, asarray([6, 1, 4, 3, 2, 5, 0, 7, 8, 9, ]))

3302:         assert_equal(x.mask, [0, 0, 0, 0, 0, 1, 0, 0, 0, 0])

3304:         assert_array_equal(x, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ])

3305:         assert_equal(x.mask, [1, 0, 0, 0, 1, 1, 0, 0, 0, 0])

3313:         assert_(x[0] is not masked)

3314:         assert_equal(x[0], 0)

3315:         assert_(x[1] is not masked)

3316:         assert_equal(x[1], 3)

3317:         assert_(x[2] is masked)

3318:         assert_(x[3] is not masked)

3319:         assert_equal(x[3], 0)

3328:         assert_equal(xh._data, [3, 4, 2, 4, 5])

3337:         assert_equal(xx, [1, 2, 99, 4, 5, 99])

3341:         assert_equal(mxx._data, [1, 2, 99, 4, 5, 99])

3342:         assert_equal(mxx._mask, [0, 0, 0, 1, 1, 0])

3347:         assert_equal(xx._data, [1, 2, 30, 4, 5, 60])

3348:         assert_equal(xx._mask, [0, 0, 1, 0, 0, 0])

3352:         assert_equal(mxx._data, [1, 2, 30, 4, 5, 60])

3353:         assert_equal(mxx._mask, [0, 0, 1, 1, 1, 0])

3358:         assert_equal(mxx, [1, 2, 30, 4, 5, 60])

3364:         assert_equal(aravel._mask.shape, aravel.shape)

3367:         assert_equal(aravel._mask.shape, a.shape)

3370:         assert_equal(a.ravel()._mask, [0, 0, 0, 0])

3375:         assert_equal(ar._mask, [0, 0, 0, 0])

3376:         assert_equal(ar._data, [1, 2, 3, 4])

3377:         assert_equal(ar.fill_value, -99)

3379:         assert_equal(a.ravel(order='C'), [1, 2, 3, 4])

3380:         assert_equal(a.ravel(order='F'), [1, 3, 2, 4])

3387:         assert_equal(y.shape, (2, 2,))

3388:         assert_equal(y._mask.shape, (2, 2,))

3389:         assert_equal(x.shape, (4,))

3390:         assert_equal(x._mask.shape, (4,))

3397:         assert_equal(sortedx._data, [1, 2, 3, 4])

3398:         assert_equal(sortedx._mask, [0, 0, 0, 1])

3401:         assert_equal(sortedx._data, [4, 1, 2, 3])

3402:         assert_equal(sortedx._mask, [1, 0, 0, 0])

3405:         assert_equal(x._data, [1, 2, 3, 4])

3406:         assert_equal(x._mask, [0, 0, 0, 1])

3410:         assert_equal(x._data, [4, 1, 2, 3])

3411:         assert_equal(x._mask, [1, 0, 0, 0])

3415:         assert_(not isinstance(sorted, MaskedArray))

3419:         assert_equal(sortedx._data, [-2, -1, 0, 1, 2])

3422:         assert_equal(sortedx._data, [1, 2, -2, -1, 0])

3423:         assert_equal(sortedx._mask, [1, 1, 0, 0, 0])

3427:         assert_equal(sortedx, array([-1, 0], dtype=np.int8))

3433:         assert_equal(computed, expected)

3446:             assert_equal(sortedx._data, argsortedx._data)

3447:             assert_equal(sortedx._mask, argsortedx._mask)

3454:         assert_equal(a, [[2, 0, 1], [8, 4, 9]])

3457:         assert_equal(a, [[1, 4, 8], [0, 2, 9]])

3461:         assert_equal(a, [[2, 0, 1], [8, 4, 9]])

3462:         assert_equal(a._mask, [[0, 0, 0], [1, 0, 1]])

3465:         assert_equal(a, [[1, 4, 8], [0, 2, 9]])

3466:         assert_equal(a._mask, [[0, 0, 1], [0, 0, 1]])

3477:         assert_equal(am, an)

3482:         assert_equal(am, an)

3487:         assert_equal(am, an)

3505:         assert_equal(test, mask_last)

3506:         assert_equal(test.mask, mask_last.mask)

3509:         assert_equal(test, mask_first)

3510:         assert_equal(test.mask, mask_first.mask)

3524:         assert_equal(np.argsort(a), argsort(a))

3529:         assert_equal(data.squeeze(), [1, 2, 3])

3531:         assert_equal(data.squeeze(), [1, 2, 3])

3532:         assert_equal(data.squeeze()._mask, [1, 1, 1])

3537:         assert_equal(arr_sq, 1)

3539:         assert_equal(arr[0,0], 2)

3544:         assert_(m_arr_sq is not np.ma.masked)

3545:         assert_equal(m_arr_sq.mask, True)

3547:         assert_equal(m_arr[0,0], 2)

3567:         assert_equal(mXswapped[-1], mX[
3570:         assert_equal(mXXswapped.shape, (2, 2, 3, 3))

3575:         assert_equal(x.take([0, 0, 3]), masked_array([10, 10, 40], [0, 0, 1]))

3576:         assert_equal(x.take([0, 0, 3]), x[[0, 0, 3]])

3577:         assert_equal(x.take([[0, 1], [0, 1]]),

3580:         # assert_equal crashes when passed np.ma.mask

3581:         assert_(x[1] is np.ma.masked)

3582:         assert_(x.take(1) is np.ma.masked)

3585:         assert_equal(x.take([0, 2], axis=1),

3587:         assert_equal(take(x, [0, 2], axis=1),

3602:         assert_equal(test, ctrl)

3611:         assert_equal(test, ctrl)

3612:         assert_equal(test.mask, ctrl.mask)

3617:         assert_equal(test, ctrl)

3618:         assert_equal(test.mask, ctrl.mask)

3626:         assert_(xlist[1] is None)

3627:         assert_(xlist[-2] is None)

3632:         assert_equal(xlist[0], [0, None, 2, 3])

3633:         assert_equal(xlist[1], [4, 5, 6, 7])

3634:         assert_equal(xlist[2], [8, 9, None, 11])

3635:         assert_equal(xlist, ctrl)

3642:         assert_equal(x.tolist(),

3650:         assert_equal(test, [[1, None], [3, 4]])

3654:         assert_equal(test, [1, None])

3662:                 assert_(not isinstance(item, np.generic))

3668:                 assert_(not isinstance(item, np.generic))

3674:         assert_equal(record['_data'], data._data)

3675:         assert_equal(record['_mask'], data._mask)

3679:         assert_equal(record['_data'], data._data)

3680:         assert_equal(record['_mask'], data._mask)

3689:         assert_equal(record['_data'], data._data)

3690:         assert_equal(record['_mask'], data._mask)

3699:         assert_equal_records(record['_data'], data._data)

3700:         assert_equal_records(record['_mask'], data._mask)

3706:         assert_equal(test, a)

3707:         assert_equal(test.mask, a.mask)

3711:         assert_equal(test, a)

3712:         assert_equal(test.mask, a.mask)

3717:         assert_equal(test, a)

3718:         assert_equal(test.data, a.data)

3725:         assert_equal(marray.T, control)

3726:         assert_equal(marray.transpose(), control)

3728:         assert_equal(MaskedArray.cumsum(marray.T, 0), control.cumsum(0))

3733:         assert_equal(x.T.mask, x.mask)

3734:         assert_equal(x.T.data, x.data)

3744:         assert_equal(x.data, xt.T.data)

3745:         assert_equal(x.mask, xt.T.mask)

3754:         assert_equal(xd.mask, x.diagonal().mask)

3755:         assert_equal(xd.data, x.diagonal().data)

3796:         assert_equal(mXcp._data, mX.filled(0).cumsum(0))

3798:         assert_equal(mXcp._data, mX.filled(0).cumsum(1))

3801:         assert_equal(mXcp._data, mX.filled(1).cumprod(0))

3803:         assert_equal(mXcp._data, mX.filled(1).cumprod(1))

3819:             assert_(result is output)

3820:             assert_equal(result, xmmeth(axis=0, out=output))

3824:             assert_(result is output)

3830:         assert_equal(mx.ptp(), mx.compressed().ptp())

3837:         assert_equal(mX.ptp(0), cols)

3838:         assert_equal(mX.ptp(1), rows)

3843:         assert_equal(y[1], 'bx')

3844:         assert_(y.mask[0])

3849:         assert_equal(a.sum(), 5)

3851:         assert_equal(a.sum(axis=0), [5, 7, 9])

3856:         assert_equal(a.prod(), 2 * 3)

3858:         assert_equal(a.prod(axis=0), [4, 10, 18])

3863:         assert_equal(a.mean(), 2)

3864:         assert_equal(a.anom(), [-1, 0, 1])

3868:         assert_equal(a.anom().shape, a.shape)

3870:         assert_equal(a.anom().shape, a.shape)

3871:         assert_(np.ma.is_masked(a.anom()))

3875:         assert_almost_equal(a.anom(),

3877:         assert_almost_equal(a.anom(axis=0),

3879:         assert_almost_equal(a.anom(axis=1),

3883:         assert_almost_equal(a.anom().filled(mval),

3885:         assert_almost_equal(a.anom(axis=0).filled(mval),

3887:         assert_almost_equal(a.anom(axis=1).filled(mval),

3894:         assert_equal(mX.trace(), mX.diagonal().compressed().sum())

3895:         assert_almost_equal(mX.trace(),

3898:         assert_equal(np.trace(mX), mX.trace())

3903:         assert_equal(arr.trace(axis1=1, axis2=2), m_arr.trace(axis1=1, axis2=2))

3910:         assert_almost_equal(r.filled(0), fx.dot(fx))

3911:         assert_(r.mask is nomask)

3915:         assert_almost_equal(r.filled(0), fX.dot(fX))

3916:         assert_(r.mask[1,3])

3919:         assert_almost_equal(r, r1)

3924:         assert_almost_equal(r.filled(0), fXX.dot(fYY))

3927:         assert_almost_equal(r, r1)

3935:         assert_almost_equal(z.filled(0), [[1, 0], [15, 16]])

3936:         assert_almost_equal(z.mask, [[0, 1], [0, 0]])

3942:         assert_equal(type(foo.mean()), np.float64)

3943:         assert_equal(type(foo.var()), np.float64)

3944:         assert((foo.mean() == bar.mean()) is np.bool_(True))

3949:         assert_equal(type(foo.mean(axis=1)), MaskedArray)

3950:         assert_equal(type(foo.var(axis=1)), MaskedArray)

3951:         assert_(foo.mean(axis=1, out=bar) is bar)

3952:         assert_(foo.var(axis=1, out=bar) is bar)

3957:         assert_almost_equal(mX.var(axis=None), mX.compressed().var())

3958:         assert_almost_equal(mX.std(axis=None), mX.compressed().std())

3959:         assert_almost_equal(mX.std(axis=None, ddof=1),

3961:         assert_almost_equal(mX.var(axis=None, ddof=1),

3963:         assert_equal(mXX.var(axis=3).shape, XX.var(axis=3).shape)

3964:         assert_equal(mX.var().shape, X.var().shape)

3966:         assert_almost_equal(mX.var(axis=None, ddof=2),

3968:         assert_almost_equal(mX.std(axis=None, ddof=2),

3971:             assert_almost_equal(mXvar1[k], mX[k].compressed().var())

3972:             assert_almost_equal(mXvar0[k], mX[
3973:             assert_almost_equal(np.sqrt(mXvar0[k]),

3985:             assert_(method() is masked)

3986:             assert_(method(0) is masked)

3987:             assert_(method(-1) is masked)

3990:             assert_(mout is not masked)

3991:             assert_equal(mout.mask, True)

3994:             assert_(np.isnan(nout))

4000:             assert_(method(ddof=1) is masked)

4001:             assert_(method(0, ddof=1) is masked)

4002:             assert_(method(-1, ddof=1) is masked)

4005:             assert_(mout is not masked)

4006:             assert_equal(mout.mask, True)

4009:             assert_(np.isnan(nout))

4014:         assert_equal(test.filled(0), [0, 0, 0])

4015:         assert_equal(test.mask, [0, 0, 1])

4017:         assert_equal(test.filled(0), [0, 0, 0])

4018:         assert_equal(test.mask, [0, 0, 1])

4020:         assert_equal(test.filled(0), [0, 0, 0])

4021:         assert_equal(test.mask, [1, 1, 1])

4028:         assert_equal(out, [0, 4, 8])

4030:         assert_equal(out, [0, 4, 8])

4031:         assert_equal(out.mask, [0, 1, 0])

4035:         assert_equal(out, control)

4041:         assert_equal(a.sum(0), [5, 7, 9])

4042:         assert_equal(a.sum(-1), [6, 15])

4043:         assert_equal(a.sum(1), [6, 15])

4045:         assert_equal(a.prod(0), [4, 10, 18])

4046:         assert_equal(a.prod(-1), [6, 120])

4047:         assert_equal(a.prod(1), [6, 120])

4049:         assert_equal(a.min(0), [1, 2, 3])

4050:         assert_equal(a.min(-1), [1, 4])

4051:         assert_equal(a.min(1), [1, 4])

4053:         assert_equal(a.max(0), [4, 5, 6])

4054:         assert_equal(a.max(-1), [3, 6])

4055:         assert_equal(a.max(1), [3, 6])

4095:         assert_almost_equal(mX.var(axis=None), mX.compressed().var())

4096:         assert_almost_equal(mX.std(axis=None), mX.compressed().std())

4097:         assert_equal(mXX.var(axis=3).shape, XX.var(axis=3).shape)

4098:         assert_equal(mX.var().shape, X.var().shape)

4100:         assert_almost_equal(mX.var(axis=None, ddof=2),

4102:         assert_almost_equal(mX.std(axis=None, ddof=2),

4105:             assert_almost_equal(mXvar1[k], mX[k].compressed().var())

4106:             assert_almost_equal(mXvar0[k], mX[
4107:             assert_almost_equal(np.sqrt(mXvar0[k]),

4127:         assert_equal(y, [1, 2])

4128:         assert_equal(y[1], 2)

4133:         assert_equal(mx, x)

4134:         assert_equal(mx._mask, [0, 0, 1])

4136:         assert_equal(mx, x)

4137:         assert_equal(mx._mask, [1, 1, 0])

4142:         assert_equal(mx._mask, [0, 0, 1])

4143:         assert_equal(mx.fill_value, 3)

4149:         assert_equal(masked_where(greater(x, 2), x), masked_greater(x, 2))

4150:         assert_equal(masked_where(greater_equal(x, 2), x),

4152:         assert_equal(masked_where(less(x, 2), x), masked_less(x, 2))

4153:         assert_equal(masked_where(less_equal(x, 2), x),

4155:         assert_equal(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2))

4156:         assert_equal(masked_where(equal(x, 2), x), masked_equal(x, 2))

4157:         assert_equal(masked_where(not_equal(x, 2), x), masked_not_equal(x, 2))

4158:         assert_equal(masked_where([1, 1, 0, 0, 0], [1, 2, 3, 4, 5]),

4166:         assert_equal(atest, ctest)

4170:         with assert_raises(IndexError)
4173:         assert_equal(test.mask, [0, 1, 0, 0, 0, 0, 0, 0, 0, 0])

4180:         assert_equal(am.mask.dtype.names, am.dtype.names)

4181:         assert_equal(am["A"],

4188:         assert_raises(IndexError, np.ma.masked_where, y > 6, x)

4191:         assert_equal(masked_inside(list(range(5)), 1, 3),

4193:         assert_equal(masked_outside(list(range(5)), 1, 3), [199, 1, 2, 3, 199])

4194:         assert_equal(masked_inside(array(list(range(5)),

4197:         assert_equal(masked_outside(array(list(range(5)),

4200:         assert_equal(masked_equal(array(list(range(5)),

4203:         assert_equal(masked_not_equal(array([2, 2, 1, 2, 1],

4210:         assert_equal(a.round(), [1., 2., 3., 5., 6.])

4211:         assert_equal(a.round(1), [1.2, 2.3, 3.5, 4.6, 5.7])

4212:         assert_equal(a.round(3), [1.235, 2.346, 3.457, 4.568, 5.679])

4215:         assert_equal(b, [1., 2., 3., 5., 6.])

4221:         assert_equal(z, [1., 2., 0., -4., -5])

4224:         assert_equal(z, [1., 2., 0., -4., -5])

4225:         assert_(z[0] is masked)

4226:         assert_(z[1] is not masked)

4227:         assert_(z[2] is masked)

4240:         assert_(result is output)

4241:         assert_equal(result, xm.round(decimals=2, out=output))

4245:         assert_(result is output)

4251:         assert_equal(a.round(), 1)

4254:         assert_(a.round() is masked)

4260:         assert_equal(output, 1)

4265:         assert_equal(output[()], 1)

4270:         assert_(output[()] is masked)

4274:         assert_(isinstance(a, MaskedArray))

4275:         assert_equal(a, np.identity(5))

4279:         assert_almost_equal(power(x, 2.), 1.21)

4280:         assert_(power(x, masked) is masked)

4284:         assert_almost_equal(y, [0, 1.21, 1.04880884817, 1.21, 0.])

4285:         assert_equal(y._mask, [1, 0, 0, 0, 1])

4288:         assert_equal(y._mask, [1, 0, 0, 0, 1])

4290:         assert_equal(z._mask, y._mask)

4291:         assert_almost_equal(z, y)

4292:         assert_almost_equal(z._data, y._data)

4294:         assert_equal(x._mask, y._mask)

4295:         assert_almost_equal(x, y)

4296:         assert_almost_equal(x._data, y._data)

4310:         assert_equal(test, ctrl)

4311:         assert_equal(test.mask, ctrl.mask)

4314:         assert_equal(test, ctrl)

4315:         assert_equal(test.mask, a2m.mask)

4318:         assert_equal(test, ctrl)

4319:         assert_equal(test.mask, b2m.mask)

4324:         assert_equal(test, ctrl)

4325:         assert_equal(test.mask, ctrl.mask)

4327:         assert_equal(test, ctrl)

4328:         assert_equal(test.mask, ctrl.mask)

4341:         assert_equal(d, [-9., -9., -9., -9., -9., 4.,

4343:         assert_equal(d._mask, xm._mask)

4345:         assert_equal(d, [5., 0., 3., 2., -1., -9.,

4347:         assert_equal(d._mask, [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0])

4349:         assert_equal(d, [-9., -9., -9., -9., -9., 4.,

4353:         assert_equal(d._mask, tmp)

4357:         assert_equal(d, [-9, -9, -9, -9, -9, 4, -9, -9, 10, -9, -9, 3])

4358:         assert_equal(d.dtype, ixm.dtype)

4364:         assert_equal(np.ma.where(True, a, a), r)

4365:         assert_equal(np.ma.where(True, b, b), r)

4373:         assert_(z.dtype is x.dtype)

4374:         assert_(z[3] is masked)

4375:         assert_(z[4] is masked)

4376:         assert_(z[7] is masked)

4377:         assert_(z[8] is not masked)

4378:         assert_(z[9] is not masked)

4379:         assert_equal(x, z)

4382:         assert_(z.dtype is x.dtype)

4383:         assert_(z[3] is masked)

4384:         assert_(z[4] is not masked)

4385:         assert_(z[7] is not masked)

4386:         assert_(z[8] is masked)

4387:         assert_(z[9] is masked)

4394:         assert_equal(z, [1., 2., 0., -4., -5])

4397:         assert_equal(z, [1., 2., 0., -4., -5])

4398:         assert_(z[0] is masked)

4399:         assert_(z[1] is not masked)

4400:         assert_(z[2] is masked)

4410:         assert_equal(z, zm)

4411:         assert_(getmask(zm) is nomask)

4412:         assert_equal(zm, [1, 2, 3, 40, 50])

4414:         assert_equal(z, [99, 99, 99, 1, 1])

4416:         assert_equal(z, [99, 1, 1, 99, 99])

4424:         assert_equal(test, control)

4433:         assert_equal(core, ma)

4434:         assert_equal(core.dtype, ma.dtype)

4444:         assert_equal(core, ma)

4445:         assert_equal(core.dtype, ma.dtype)

4454:         assert_equal(ma.dtype, expected.dtype)

4455:         assert_equal(ma, expected)

4456:         assert_equal(ma.mask, expected.mask)

4463:         assert_equal(chosen, array([20, 31, 12, 3]))

4465:         assert_equal(chosen, array([20, 31, 12, 3]))

4467:         assert_equal(chosen, array([20, 1, 12, 3]))

4471:         assert_equal(chosen, array([99, 1, 12, 99]))

4472:         assert_equal(chosen.mask, [1, 0, 0, 1])

4478:         assert_equal(chosen, array([20, 31, 12, 3]))

4479:         assert_equal(chosen.mask, [1, 0, 0, 1])

4487:         assert_equal(store, array([20, 31, 12, 3]))

4488:         assert_(store is chosen)

4493:         assert_equal(store, array([99, 31, 12, 99]))

4494:         assert_equal(store.mask, [1, 0, 0, 1])

4501:         assert_equal(store, array([999999, 31, 12, 999999]))

4508:         assert_equal(b.shape, (5, 2))

4509:         assert_(b.flags['C'])

4512:         assert_equal(b.shape, (5, 2))

4513:         assert_(b.flags['C'])

4516:         assert_equal(b.shape, (5, 2))

4517:         assert_(b.flags['F'])

4520:         assert_equal(b.shape, (5, 2))

4521:         assert_(b.flags['F'])

4524:         assert_(isinstance(c, MaskedArray))

4525:         assert_equal(c.shape, (2, 5))

4526:         assert_(c[0, 0] is masked)

4527:         assert_(c.flags['C'])

4533:         assert_equal(test, [('a', bool), ('b', bool)])

4534:         assert_(test is make_mask_descr(test))

4539:         assert_equal(test, (bool, 2))

4540:         assert_(test is make_mask_descr(test))

4545:         assert_equal(test, np.dtype(bool))

4546:         assert_(test is make_mask_descr(test))

4552:         assert_equal(test, control)

4553:         assert_(test is make_mask_descr(test))

4558:         assert_equal(test, np.dtype([('a', (bool, 2))]))

4559:         assert_(test is make_mask_descr(test))

4564:         assert_equal(test, np.dtype([(('A', 'a'), bool)]))

4565:         assert_(test is make_mask_descr(test))

4572:         assert_equal(test, np.dtype([('a', bool), ('b', [('a', bool, 3)])]))

4573:         assert_(test.fields['b'][0] is base_mtype)

4580:         assert_equal(test.dtype, MaskType)

4581:         assert_equal(test, [0, 1])

4585:         assert_equal(test.dtype, MaskType)

4586:         assert_equal(test, [0, 1])

4591:         assert_equal(test.dtype, MaskType)

4592:         assert_equal(test, [1, 1])

4597:         assert_equal(test.dtype, mdtype)

4598:         assert_equal(test, mask)

4604:         assert_equal(test.dtype, bdtype)

4605:         assert_equal(test, np.array([(0, 0), (0, 1)], dtype=bdtype))

4608:         assert_(isinstance(mask, np.void))

4610:         assert_equal(test, mask)

4611:         assert_(test is not mask)

4614:         assert_equal(test2, test)

4621:             assert_(res is nomask, msgformat % (cpy, shr, dt))

4629:         assert_equal(test, mask)

4631:         assert_equal(test, mask)

4634:         assert_equal(test, mask)

4639:         assert_equal(test, control)

4652:         assert_equal(mask_or(amask, bmask), cntrl)

4658:         assert_equal(flatten_mask(mask), mask)

4663:         assert_equal(test, control)

4670:         assert_equal(test, control)

4677:         assert_equal(test, m.anom())

4679:         assert_equal(test, m.reshape(2, 2))

4689:         assert_equal(test, control)

4692:         assert_equal(test, control)

4699:         assert_(type(test) is np.ndarray)

4707:         assert_(type(test) is A)

4711:         assert_equal(test.ndim, 1)

4713:         assert_equal(test.ndim, 1)

4720:         assert_equal(test.ndim, 1)

4728:         assert_equal(test, 42)

4734:         assert_equal(test, masked_equal([0, 1, -1, -1, 7, 4], -1))

4737:         assert_equal(test, masked_equal([0, 1, 1, 3, 7, 4], -1))

4740:         assert_equal(test, masked_equal([1, 2, 2, 1], -1))

4745:         assert_equal(test, masked_equal([1, 1, -1, 1, 1], -1))

4747:         assert_equal(test, masked_equal([-1, -1, -1, -1, -1], -1))

4767:         assert_equal_records(base._mask, np.zeros(base.shape, dtype=mdtype))

4769:         assert_equal_records(base._mask, np.ones(base.shape, dtype=mdtype))

4772:         assert_equal_records(base._mask, np.zeros(base.shape, dtype=mdtype))

4774:         assert_equal_records(base._mask, np.ones(base.shape, dtype=mdtype))

4777:         assert_equal_records(base._mask,

4787:         assert_equal(base_a.dtype, int)

4788:         assert_equal(base_a._data, [3, 2, 3, 4, 5])

4790:         assert_equal(base_b.dtype, float)

4791:         assert_equal(base_b._data, [pi, 2.2, 3.3, 4.4, 5.5])

4793:         assert_equal(base_c.dtype, '|S8')

4794:         assert_equal(base_c._data,

4802:         assert_equal(base_a.dtype, int)

4803:         assert_equal(base_a._data, [3, 3, 3, 4, 5])

4805:         assert_equal(base_b.dtype, float)

4806:         assert_equal(base_b._data, [pi, pi, pi, 4.4, 5.5])

4808:         assert_equal(base_c.dtype, '|S8')

4809:         assert_equal(base_c._data,

4818:             assert_equal(base[n].mask, [1, 1, 0, 0, 1])

4819:             assert_equal(base[n]._data, base._data[n])

4825:         assert_equal(getmaskarray(test),

4829:         assert_equal(getmaskarray(test),

4842:         assert_equal(test, data.ravel())

4843:         assert_equal(test.mask, controlmask)

4846:         assert_equal(test, data)

4847:         assert_equal(test.mask, controlmask.reshape(-1, 2))

4857:             assert_equal(type(a[i]), mvoid)

4858:             assert_equal_records(a[i]._data, a._data[i])

4859:             assert_equal_records(a[i]._mask, a._mask[i])

4861:             assert_equal(type(a[i, ...]), MaskedArray)

4862:             assert_equal_records(a[i,...]._data, a._data[i,...])

4863:             assert_equal_records(a[i,...]._mask, a._mask[i,...])

4875:         assert_equal(ma['a'], np.array([1.0, 3.0]))

4877:         assert_equal(ma['a'], np.array([1.0, 4.0]))

4884:         assert_equal(a.mask, control)

4887:         assert_equal(a.mask, control)

4893:         assert_equal(a.mask, control)

4897:         assert_equal(a.mask, control)

4904:         assert_array_equal(arr.mask, [True, False, False])

4909:             assert_equal(len(rec), len(self.data['ddtype']))

4922:             assert_(arr[0] is a0)

4923:             assert_(arr[1] is a1)

4924:             assert_(isinstance(arr[0,...], MaskedArray))

4925:             assert_(isinstance(arr[1,...], MaskedArray))

4926:             assert_(arr[0,...][()] is a0)

4927:             assert_(arr[1,...][()] is a1)

4931:             assert_(arr[1] is a1)

4932:             assert_(isinstance(arr[0,...], MaskedArray))

4933:             assert_(isinstance(arr[1,...], MaskedArray))

4934:             assert_equal(arr[0,...].mask, True)

4935:             assert_(arr[1,...][()] is a1)

4938:             assert_equal(arr[0].data, a0)

4939:             assert_equal(arr[0].mask, True)

4940:             assert_equal(arr[0,...][()].data, a0)

4941:             assert_equal(arr[0,...][()].mask, True)

4950:         assert_(arr.data[0] is np.ma.masked)

4953:         assert_(arr[0] is np.ma.masked)

4957:         assert_(arr[0] is np.ma.masked)

4973:         assert_(isinstance(test, MaskedArray))

4974:         assert_equal(test._data, a._data)

4975:         assert_equal(test._mask, a._mask)

4980:         assert_(not isinstance(test, MaskedArray))

4981:         assert_equal(test, a._data)

4982:         assert_equal_records(test, data.view(a.dtype).squeeze())

4988:         assert_(isinstance(test, MaskedArray))

4989:         assert_equal(test, data.ravel())

4990:         assert_equal(test.mask, controlmask)

4996:         assert_equal(test.mask.dtype.names, ('A', 'B'))

4997:         assert_equal(test['A'], a['a'])

4998:         assert_equal(test['B'], a['b'])

5001:         assert_(isinstance(test, MaskedArray))

5002:         assert_equal(test.mask.dtype.names, ('A', 'B'))

5003:         assert_equal(test['A'], a['a'][0])

5004:         assert_equal(test['B'], a['b'][0])

5007:         assert_(isinstance(test, MaskedArray))

5008:         assert_equal(test.dtype.names, ('A', 'B'))

5009:         assert_equal(test['A'], a['a'][-1])

5010:         assert_equal(test['B'], a['b'][-1])

5016:         assert_(isinstance(test, MaskedArray))

5017:         assert_equal(test, data)

5018:         assert_equal(test.mask, controlmask.reshape(-1, 2))

5021:         assert_(isinstance(test, MaskedArray))

5022:         assert_equal(test, data[0])

5023:         assert_equal(test.mask, (1, 0))

5026:         assert_(isinstance(test, MaskedArray))

5027:         assert_equal(test, data[-1])

5033:         assert_equal(test, data)

5034:         assert_(isinstance(test, np.recarray))

5035:         assert_(not isinstance(test, MaskedArray))

5053:             assert_equal(ma_f(a, axis=1)[...,
5054:             assert_equal(ma_f(a, axis=(0,1))[...,
5062:             assert_equal(ma_f(a, keepdims=True).shape,

5064:             assert_equal(ma_f(a, keepdims=False).shape,

5068:             assert_equal(ma_f(a, axis=1, keepdims=True)[...,
5070:             assert_equal(ma_f(a, axis=(0,1), keepdims=True)[...,
5094:         assert_equal(count(a), 16)

5095:         assert_equal(count(a, axis=1), 2*ones((2,4)))

5096:         assert_equal(count(a, axis=(0,1)), 4*ones((4,)))

5097:         assert_equal(count(a, keepdims=True), 16*ones((1,1,1)))

5098:         assert_equal(count(a, axis=1, keepdims=True), 2*ones((2,1,4)))

5099:         assert_equal(count(a, axis=(0,1), keepdims=True), 4*ones((1,1,4)))

5100:         assert_equal(count(a, axis=-2), 2*ones((2,4)))

5101:         assert_raises(ValueError, count, a, axis=(1,1))

5102:         assert_raises(np.AxisError, count, a, axis=3)

5107:         assert_equal(count(a), 24)

5108:         assert_equal(count(a, axis=1), 3*ones((2,4)))

5109:         assert_equal(count(a, axis=(0,1)), 6*ones((4,)))

5110:         assert_equal(count(a, keepdims=True), 24*ones((1,1,1)))

5111:         assert_equal(np.ndim(count(a, keepdims=True)), 3)

5112:         assert_equal(count(a, axis=1, keepdims=True), 3*ones((2,1,4)))

5113:         assert_equal(count(a, axis=(0,1), keepdims=True), 6*ones((1,1,4)))

5114:         assert_equal(count(a, axis=-2), 3*ones((2,4)))

5115:         assert_raises(ValueError, count, a, axis=(1,1))

5116:         assert_raises(np.AxisError, count, a, axis=3)

5119:         assert_equal(count(np.ma.masked), 0)

5122:         assert_raises(np.AxisError, count, np.ma.array(1), axis=1)

5128:         assert_(add(np.ma.masked, 1) is np.ma.masked)

5135:         assert_(result is not np.ma.masked)

5136:         assert_(not isinstance(result, np.ma.core.MaskedConstant))

5137:         assert_equal(result.shape, vector.shape)

5138:         assert_equal(np.ma.getmask(result), np.ones(vector.shape, dtype=bool))

5151:         assert_(not isinstance(m, np.ma.core.MaskedConstant))

5152:         assert_(m is not np.ma.masked)

5157:         assert_equal(repr(np.ma.masked), 'masked')

5161:         assert_not_equal(repr(masked2), 'masked')

5171:             assert_(res is np.ma.masked)

5176:         assert_equal(

5182:         assert_(

5187:         assert_(

5192:         assert_raises(np.ma.core.MaskError, operator.setitem, orig, (), 1)

5193:         assert_raises(ValueError,operator.setitem, orig.data, (), 1)

5194:         assert_raises(ValueError, operator.setitem, orig.mask, (), False)

5197:         assert_raises(ValueError, operator.setitem, view, (), 1)

5198:         assert_raises(ValueError, operator.setitem, view.data, (), 1)

5199:         assert_raises(ValueError, operator.setitem, view.mask, (), False)

5203:         assert_raises(MaskError, operator.setitem, a_i, (), np.ma.masked)

5204:         assert_raises(MaskError, int, np.ma.masked)

5208:         assert_warns(UserWarning, operator.setitem, a_f, (), np.ma.masked)

5209:         assert_(np.isnan(a_f[()]))

5215:         assert_equal(a_u[()], u'--')

5221:         assert_equal(a_b[()], b'--')

5228:         assert_(a is Sub())

5229:         assert_(a is not np.ma.masked)

5230:         assert_not_equal(repr(a), 'masked')

5233:         assert_raises(AttributeError, setattr, np.ma.masked, 'shape', (1,))

5234:         assert_raises(AttributeError, setattr, np.ma.masked, 'dtype', np.int64)

5243:         assert_equal(res.mask, [True])

5246:         assert_equal(res.mask, True)

5249:         assert_equal(res.mask, False)

5252:         assert_(res.mask is np.ma.nomask)

5255:         assert_equal(res.mask, [False] * 4)

5260:     assert_equal(np.argwhere(a), [[1], [3]])

5266:     assert_array_equal(a.mask, [False, False, True, False])

5270:     assert_array_equal(a.mask, [True, False, True, False])

5279:     assert_array_equal(result.data, expected_data)

5280:     assert_array_equal(result.mask, expected_mask)

5288:     assert_array_equal(result.data[-3], expected_data)

5289:     assert_array_equal(result.mask, expected_mask)

5292:     assert_array_equal(result.data[-3], expected_data)

5293:     assert_array_equal(result.mask, expected_mask)

5301:     assert_raises(ValueError, np.ma.append, a, b, axis=0)

5307:     assert_array_equal(result.data, expected.data)

5308:     assert_array_equal(result.mask, expected.mask)

5312:     assert_(default_fill_value(1 + 1j) == 1.e20 + 0.0j)

5320:     assert_(y is x)

5340:     assert_equal(res_kw.mask,  expected.mask)

5341:     assert_equal(res_kw.data,  expected.data)

5342:     assert_equal(res_tup.mask, expected.mask)

5343:     assert_equal(res_tup.data, expected.data)

5344:     assert_equal(res_pos.mask, expected.mask)

5345:     assert_equal(res_pos.data, expected.data)

5356:     assert x_a.dtype.names == np.dtype(descr).names

5357:     assert x_a.mask.dtype.names == np.dtype(descr).names

5358:     assert_equal(x, x_a)

5360:     assert_(x is x.astype(x.dtype, copy=False))

5361:     assert_equal(type(x.astype(x.dtype, subok=False)), np.ndarray)

5364:     assert_(x_f.flags.f_contiguous)

5365:     assert_(x_f.mask.flags.f_contiguous)

5369:     assert x_a2.dtype.names == np.dtype(descr).names

5370:     assert x_a2.mask.dtype.names == np.dtype(descr).names

5371:     assert_equal(x, x_a2)

5373:     assert_(x is np.array(x, dtype=descr, copy=False, subok=True))

5376:     assert_(x_f2.flags.f_contiguous)

5377:     assert_(x_f2.mask.flags.f_contiguous)

5388:     assert_(src.fill_value == 1)

5389:     assert_(src.dtype == dt1)

5390:     assert_(src.fill_value.dtype == dt1)

5392:     assert_(dst.fill_value == 1)

5393:     assert_(dst.dtype == dt2)

5394:     assert_(dst.fill_value.dtype == dt2)

5396:     assert_equal(src, dst)

5406:     assert_equal(mx.dtype, x.dtype)

5407:     assert_equal(mx.shape, x.shape)

5410:     assert_equal(mx.dtype, x.dtype)

5411:     assert_equal(mx.shape, x.shape)

5418:     assert_equal(a.mask.shape, ())

5448:     assert_equal(np.ma.core.doc_note(method.__doc__, "note"), expected_doc)

Total asserts: 1628

Filename: numpy/ma/tests/test_deprecations.py
6: from numpy.testing import assert_warns

7: from numpy.ma.testutils import assert_equal

23:         result = assert_warns(

25:         assert_equal(result, argsort(arr_2d, axis=None))

43:         assert_warns(DeprecationWarning, np.ma.minimum, np.ma.array([1, 2]))

46:         assert_warns(DeprecationWarning, np.ma.maximum, np.ma.array([1, 2]))

58:         result = assert_warns(MaskedArrayFutureWarning, ma_max, data2d)

59:         assert_equal(result, ma_max(data2d, axis=None))

61:         result = assert_warns(MaskedArrayFutureWarning, ma_min, data2d)

62:         assert_equal(result, ma_min(data2d, axis=None))

66:         assert_equal(result, ma_min(data1d, axis=None))

67:         assert_equal(result, ma_min(data1d, axis=0))

70:         assert_equal(result, ma_max(data1d, axis=None))

71:         assert_equal(result, ma_max(data1d, axis=0))

Total asserts: 14

Filename: numpy/ma/tests/test_subclassing.py
10: from numpy.testing import assert_, assert_raises

11: from numpy.ma.testutils import assert_equal

18: def assert_startswith(a, b)
19:     # produces a better error message than assert_(a.startswith(b))

20:     assert_equal(a[
164:         assert_(isinstance(xmsub, MaskedArray))

165:         assert_equal(xmsub._data, xsub)

166:         assert_(isinstance(xmsub._data, SubArray))

171:         assert_(isinstance(mx._data, subarray))

177:             assert_(isinstance(log(mx), msubarray))

178:             assert_equal(log(x), np.log(x))

184:         assert_(isinstance(add(mx, mx), msubarray))

185:         assert_(isinstance(add(mx, x), msubarray))

187:         assert_equal(add(mx, x), mx+x)

188:         assert_(isinstance(add(mx, mx)._data, subarray))

189:         assert_(isinstance(add.outer(mx, mx), msubarray))

190:         assert_(isinstance(hypot(mx, mx), msubarray))

191:         assert_(isinstance(hypot(mx, x), msubarray))

197:         assert_(isinstance(divide(mx, mx), msubarray))

198:         assert_(isinstance(divide(mx, x), msubarray))

199:         assert_equal(divide(mx, mx), divide(xmx, xmx))

207:         assert_(isinstance(z, MaskedArray))

208:         assert_(not isinstance(z, MSubArray))

209:         assert_(isinstance(z._data, SubArray))

210:         assert_equal(z._data.info, {})

213:         assert_(isinstance(z, MaskedArray))

214:         assert_(isinstance(z, MSubArray))

215:         assert_(isinstance(z._data, SubArray))

216:         assert_(z._data.info['added'] > 0)

219:         assert_(isinstance(ym, MaskedArray))

220:         assert_(isinstance(ym, MSubArray))

221:         assert_(isinstance(ym._data, SubArray))

222:         assert_(ym._data.info['iadded'] > 0)

225:         assert_equal(ym._mask, [1, 0, 0, 0, 1])

227:         assert_equal(ym._mask, [0, 0, 0, 0, 1])

231:         assert_(hasattr(mxsub, 'info'))

232:         assert_equal(mxsub.info, xsub.info)

242:         assert_(not isinstance(mxsub, MSubArray))

243:         assert_(isinstance(mxsub, MaskedArray))

244:         assert_equal(mxsub._mask, m)

247:         assert_(not isinstance(mxsub, MSubArray))

248:         assert_(isinstance(mxsub, MaskedArray))

249:         assert_equal(mxsub._mask, m)

252:         assert_(isinstance(mxsub, MSubArray))

253:         assert_equal(mxsub.info, xsub.info)

254:         assert_equal(mxsub._mask, xsub._mask)

257:         assert_(isinstance(mxsub, MSubArray))

258:         assert_equal(mxsub.info, xsub.info)

259:         assert_equal(mxsub._mask, m)

268:         assert_(isinstance(xcsub[1], ComplicatedSubArray))

269:         assert_(isinstance(xcsub[1,...], ComplicatedSubArray))

270:         assert_(isinstance(xcsub[1
273:         assert_(isinstance(mxcsub[1], ComplicatedSubArray))

274:         assert_(isinstance(mxcsub[1,...].data, ComplicatedSubArray))

275:         assert_(mxcsub[0] is masked)

276:         assert_(isinstance(mxcsub[0,...].data, ComplicatedSubArray))

277:         assert_(isinstance(mxcsub[1
280:         assert_(isinstance(mxcsub.flat[1].data, ComplicatedSubArray))

281:         assert_(mxcsub.flat[0] is masked)

282:         assert_(isinstance(mxcsub.flat[1
286:         assert_raises(ValueError, xcsub.__setitem__, 1, x[4])

288:         assert_raises(ValueError, mxcsub.__setitem__, 1, x[4])

289:         assert_raises(ValueError, mxcsub.__setitem__, slice(1, 4), x[1
293:         assert_raises(ValueError, mxcsub.flat.__setitem__, 1, x[4])

294:         assert_raises(ValueError, mxcsub.flat.__setitem__, slice(1, 4), x[1
303:         assert_(isinstance(mxcsub_nomask[1,...].data, ComplicatedSubArray))

304:         assert_(isinstance(mxcsub_nomask[0,...].data, ComplicatedSubArray))

306:         assert_(isinstance(mxcsub_nomask[1], ComplicatedSubArray))

307:         assert_(isinstance(mxcsub_nomask[0], ComplicatedSubArray))

314:         assert_startswith(repr(mx), 'masked_array')

317:         assert_startswith(repr(mxsub),

326:         assert_equal(str(mxsub), '[-- 1 -- 3 4]')

329:         assert_raises(ValueError, xcsub.__setitem__, 0,

332:         assert_equal(str(mxcsub), 'myprefix [-- 1 -- 3 4] mypostfix')

340:         assert_('info' in diff1._optinfo)

341:         assert_(diff1._optinfo['info'] == 'test')

343:         assert_('info' in diff2._optinfo)

344:         assert_(diff2._optinfo['info'] == 'test')

363:     assert_equal(data_masked.data, new_array.data)

364:     assert_equal(data_masked.mask, new_array.mask)

367:     assert_equal(data_masked.mask, new_array.mask)

368:     assert_(new_array.sharedmask)

372:     assert_equal(data_masked.data, new_array.data)

373:     assert_equal(data_masked.mask, new_array.mask)

376:     assert_equal([True, False, False], new_array.mask)

377:     assert_(not new_array.sharedmask)

381:     assert_equal(data_masked.data, new_array.data)

383:     assert_equal(data_masked.mask, [True, False, True])

385:     assert_(not new_array.mask)

386:     assert_(not new_array.sharedmask)

Total asserts: 90

Filename: numpy/ma/tests/test_extras.py
16:     assert_warns, suppress_warnings

19:     assert_, assert_array_equal, assert_equal, assert_almost_equal

42:         assert_equal(test, control)

47:         assert_equal(test, control)

52:         assert_equal(test, control)

58:         assert_equal(test, control)

62:         assert_equal(test, control)

65:         assert_equal(test, control)

73:         assert_equal(type(masked_arr['b']), np.ma.core.MaskedArray)

74:         assert_equal(type(masked_arr['b']['c']), np.ma.core.MaskedArray)

75:         assert_equal(len(masked_arr['b']['c']), 1)

76:         assert_equal(masked_arr['b']['c'].shape, (1, 1))

77:         assert_equal(masked_arr['b']['c']._fill_value.shape, ())

84:         assert_equal(type(masked_arr['b']), np.ma.core.MaskedArray)

85:         assert_equal(len(masked_arr['b']), 1)

86:         assert_equal(masked_arr['b'].shape, (1, 1))

87:         assert_equal(masked_arr['b']._fill_value.shape, ())

95:         assert_equal(test, control)

101:         assert_equal(test, control)

107:         assert_equal(test, control)

120:                     assert_equal(a.compressed().sum(), s)

123:                     assert_equal(a.compressed().sum(), s)

132:         assert_equal(test, control)

142:         assert_equal(test, control)

151:         assert_equal(test, [slice(0, a.size)])

154:         assert_equal(test, [slice(0, a.size)])

158:         assert_equal(test, [slice(3, 5), slice(6, 9)])

162:         assert_equal(test, [])

170:         assert_equal(2.0, average(ott, axis=0))

171:         assert_equal(2.0, average(ott, weights=[1., 1., 2., 1.]))

173:         assert_equal(2.0, result)

174:         assert_(wts == 4.0)

176:         assert_equal(average(ott, axis=0).mask, [True])

180:         assert_equal(average(ott, axis=0), [2.0, 0.0])

181:         assert_equal(average(ott, axis=1).mask[0], [True])

182:         assert_equal([2., 0.], average(ott, axis=0))

184:         assert_equal(wts, [1., 0.])

191:         assert_equal(average(x, axis=0), 2.5)

192:         assert_equal(average(x, axis=0, weights=w1), 2.5)

194:         assert_equal(average(y, None), np.add.reduce(np.arange(6)) * 3. / 12.)

195:         assert_equal(average(y, axis=0), np.arange(6) * 3. / 2.)

196:         assert_equal(average(y, axis=1),

198:         assert_equal(average(y, None, weights=w2), 20. / 6.)

199:         assert_equal(average(y, axis=0, weights=w2),

201:         assert_equal(average(y, axis=1),

208:         assert_equal(average(masked_array(x, m1), axis=0), 2.5)

209:         assert_equal(average(masked_array(x, m2), axis=0), 2.5)

210:         assert_equal(average(masked_array(x, m4), axis=0).mask, [True])

211:         assert_equal(average(masked_array(x, m5), axis=0), 0.0)

212:         assert_equal(count(average(masked_array(x, m4), axis=0)), 0)

214:         assert_equal(average(z, None), 20. / 6.)

215:         assert_equal(average(z, axis=0), [0., 1., 99., 99., 4.0, 7.5])

216:         assert_equal(average(z, axis=1), [2.5, 5.0])

217:         assert_equal(average(z, axis=0, weights=w2),

225:         assert_equal(shape(r1), shape(w1))

226:         assert_equal(r1.shape, w1.shape)

228:         assert_equal(shape(w2), shape(r2))

230:         assert_equal(shape(w2), shape(r2))

232:         assert_equal(shape(w2), shape(r2))

236:         assert_equal(a2da, [0.5, 3.0])

238:         assert_equal(a2dma, [1.0, 3.0])

240:         assert_equal(a2dma, 7. / 3.)

242:         assert_equal(a2dma, [1.5, 4.0])

247:         assert_equal(a, 1.5)

249:         assert_equal(a, 1.5)

262:         assert_almost_equal(av.real, expected.real)

263:         assert_almost_equal(av.imag, expected.imag)

267:         assert_almost_equal(av0.real, expected0.real)

268:         assert_almost_equal(av0.imag, expected0.imag)

272:         assert_almost_equal(av1.real, expected1.real)

273:         assert_almost_equal(av1.imag, expected1.imag)

280:         assert_almost_equal(wav.real, expected.real)

281:         assert_almost_equal(wav.imag, expected.imag)

286:         assert_almost_equal(wav0.real, expected0.real)

287:         assert_almost_equal(wav0.imag, expected0.imag)

292:         assert_almost_equal(wav1.real, expected1.real)

293:         assert_almost_equal(wav1.imag, expected1.imag)

306:         assert_almost_equal(avg_unmasked, expected_unmasked)

310:         assert_almost_equal(avg_masked, expected_masked)

319:         assert_almost_equal(avg_unmasked, 1.5)

335:         assert_almost_equal(avg_masked, avg_expected)

336:         assert_equal(avg_masked.mask, avg_expected.mask)

343:         assert_array_equal(mr_[1, 2, 3, 4, 5, 6], array([1, 2, 3, 4, 5, 6]))

348:         assert_(isinstance(c, MaskedArray))

349:         assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1])

350:         assert_array_equal(c.mask, mr_[m, 0, 0, m])

362:         assert_(d.shape == (5, 10))

363:         assert_array_equal(d[
364:         assert_array_equal(d[
365:         assert_array_equal(d.mask, np.r_['1', m_1, m_2])

367:         assert_(d.shape == (10, 5))

368:         assert_array_equal(d[
369:         assert_array_equal(d[5
370:         assert_array_equal(d.mask, np.r_[m_1, m_2])

374:         assert_equal(actual.mask, [True, False])

375:         assert_equal(actual.data[1], 1)

378:         assert_equal(actual.mask, [False, False, True])

379:         assert_equal(actual.data[
394:         assert_equal(test, [0, 24])

396:         assert_equal(test[0], [(0, 0, 1, 0, 0), (0, 1, 2, 3, 4)])

397:         assert_equal(test[1], [(3, 3, 3, 4, 4), (0, 1, 2, 3, 4)])

399:         assert_equal(test[0], [(0, 1, 2, 3, 4), (0, 0, 2, 0, 3)])

400:         assert_equal(test[1], [(0, 1, 2, 3, 4), (4, 2, 4, 4, 4)])

403:         assert_equal(test, [0, 24])

405:         assert_equal(test[0], [(0, 0, 0, 0, 0), (0, 1, 2, 3, 4)])

406:         assert_equal(test[1], [(4, 4, 4, 4, 4), (0, 1, 2, 3, 4)])

408:         assert_equal(test[0], [(0, 1, 2, 3, 4), (0, 0, 0, 0, 0)])

409:         assert_equal(test[1], [(0, 1, 2, 3, 4), (4, 4, 4, 4, 4)])

413:         assert_equal(test[0], [(0, 0, 1, 0, 0), (0, 1, 2, 3, 4)])

414:         assert_equal(test[1], [(1, 1, 2, 4, 4), (0, 1, 2, 3, 4)])

416:         assert_equal(test[0], [(0, 1, 2, 4), (0, 0, 2, 3)])

417:         assert_equal(test[1], [(0, 1, 2, 4), (4, 2, 4, 4)])

426:         assert_equal(tmp, [

433:         assert_equal(tmp, [

445:         assert_equal(tmp, [

463:         assert_equal(a, [[[ 0,  2,  3,  4],

472:         assert_equal(a, [[[ 0,  1,  2,  3,  4],

483:         assert_equal(a, [[[ 0,  1,  2,  3,  4],

496:         assert_equal(a, a2)

497:         assert_equal(a, a3)

498:         assert_equal(a, a4)

502:         assert_equal(a, [[[ 0, 2,  3,  4],

518:         assert_equal(a, a2)

519:         assert_equal(a, a3)

520:         assert_equal(a, a4)

524:         assert_equal(a, [[[ 0,  1,  2,  3,  4],

531:         assert_equal(a, a2)

535:         assert_equal(a, [[[ 0,  2,  3,  4],

548:         assert_equal(a, a2)

549:         assert_equal(a, a3)

550:         assert_equal(a, a4)

554:         assert_equal(a, [[[ 0,  2,  3,  4],

564:         assert_equal(a, a2)

570:         assert_equal(compress_rowcols(x), [[4, 5], [7, 8]])

571:         assert_equal(compress_rowcols(x, 0), [[3, 4, 5], [6, 7, 8]])

572:         assert_equal(compress_rowcols(x, 1), [[1, 2], [4, 5], [7, 8]])

574:         assert_equal(compress_rowcols(x), [[0, 2], [6, 8]])

575:         assert_equal(compress_rowcols(x, 0), [[0, 1, 2], [6, 7, 8]])

576:         assert_equal(compress_rowcols(x, 1), [[0, 2], [3, 5], [6, 8]])

578:         assert_equal(compress_rowcols(x), [[8]])

579:         assert_equal(compress_rowcols(x, 0), [[6, 7, 8]])

580:         assert_equal(compress_rowcols(x, 1,), [[2], [5], [8]])

582:         assert_equal(compress_rowcols(x).size, 0)

583:         assert_equal(compress_rowcols(x, 0).size, 0)

584:         assert_equal(compress_rowcols(x, 1).size, 0)

590:         assert_equal(mask_rowcols(x).mask,

592:         assert_equal(mask_rowcols(x, 0).mask,

594:         assert_equal(mask_rowcols(x, 1).mask,

597:         assert_equal(mask_rowcols(x).mask,

599:         assert_equal(mask_rowcols(x, 0).mask,

601:         assert_equal(mask_rowcols(x, 1).mask,

604:         assert_equal(mask_rowcols(x).mask,

606:         assert_equal(mask_rowcols(x, 0).mask,

608:         assert_equal(mask_rowcols(x, 1,).mask,

611:         assert_(mask_rowcols(x).all() is masked)

612:         assert_(mask_rowcols(x, 0).all() is masked)

613:         assert_(mask_rowcols(x, 1).all() is masked)

614:         assert_(mask_rowcols(x).mask.all())

615:         assert_(mask_rowcols(x, 0).mask.all())

616:         assert_(mask_rowcols(x, 1).mask.all())

626:         with assert_warns(DeprecationWarning)
628:             assert_equal(res, mask_rowcols(x, rowcols_axis))

638:         assert_equal(c.mask, [[1, 1], [1, 0]])

640:         assert_equal(c.mask, [[1, 1, 1], [1, 0, 0], [1, 0, 0]])

642:         assert_equal(c, np.dot(a.filled(0), b.filled(0)))

644:         assert_equal(c, np.dot(b.filled(0), a.filled(0)))

650:         assert_equal(c.mask, [[0, 1], [1, 1]])

652:         assert_equal(c.mask, [[0, 0, 1], [0, 0, 1], [1, 1, 1]])

654:         assert_equal(c, np.dot(a.filled(0), b.filled(0)))

655:         assert_equal(c, dot(a, b))

657:         assert_equal(c, np.dot(b.filled(0), a.filled(0)))

663:         assert_equal(c.mask, nomask)

665:         assert_equal(c.mask, nomask)

670:         assert_equal(c.mask, [[1, 1], [0, 0]])

672:         assert_equal(c, np.dot(a.filled(0), b.filled(0)))

674:         assert_equal(c.mask, [[1, 0, 0], [1, 0, 0], [1, 0, 0]])

676:         assert_equal(c, np.dot(b.filled(0), a.filled(0)))

681:         assert_equal(c.mask, [[0, 0], [1, 1]])

683:         assert_equal(c, np.dot(a.filled(0), b.filled(0)))

685:         assert_equal(c.mask, [[0, 0, 1], [0, 0, 1], [0, 0, 1]])

687:         assert_equal(c, np.dot(b.filled(0), a.filled(0)))

692:         assert_equal(c.mask, [[1, 0], [1, 1]])

694:         assert_equal(c, np.dot(a.filled(0), b.filled(0)))

696:         assert_equal(c.mask, [[0, 0, 1], [1, 1, 1], [0, 0, 1]])

698:         assert_equal(c, np.dot(b.filled(0), a.filled(0)))

704:         assert_(type(dot(a, a)) is MaskedArray)

705:         assert_(type(dot(a, b)) is MaskedArray)

706:         assert_(type(dot(b, a)) is MaskedArray)

707:         assert_(type(dot(b, b)) is MaskedArray)

713:         assert_(res is out)

714:         assert_equal(a, res)

726:         assert_equal(xa, [[1, 4], [7, 10]])

736:         assert_equal(xa, [[2, 5], [8, 11]])

745:         assert_equal(test, ctrl)

749:         assert_equal(test, ctrl)

755:         assert_equal(r, np.inf)

761:         assert_equal(r, np.inf)

764:         assert_equal(r, np.inf)

769:         assert_equal(r.mask, True)

773:         assert_equal(r.mask, True)

777:         assert_equal(np.ma.median(x), 4.)

778:         assert_(type(np.ma.median(x)) is not MaskedArray)

780:         assert_equal(np.ma.median(x), 3.5)

781:         assert_(type(np.ma.median(x)) is not MaskedArray)

783:         assert_equal(np.ma.median(x), 5.)

784:         assert_(type(np.ma.median(x)) is not MaskedArray)

787:         assert_equal(np.ma.median(x, axis=0), np.median(x, axis=0))

788:         assert_equal(np.ma.median(x, axis=1), np.median(x, axis=1))

789:         assert_(np.ma.median(x, axis=1) is not MaskedArray)

792:         assert_equal(np.ma.median(x, axis=0), np.median(x, axis=0))

793:         assert_equal(np.ma.median(x, axis=1), np.median(x, axis=1))

794:         assert_(np.ma.median(x, axis=1) is not MaskedArray)

799:         assert_equal(np.ma.median(x), 1.5)

800:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

801:         assert_(type(np.ma.median(x)) is not MaskedArray)

803:         assert_equal(np.ma.median(x), 2.5)

804:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

805:         assert_(type(np.ma.median(x)) is not MaskedArray)

807:         assert_equal(ma_x, [2., 5.])

808:         assert_equal(ma_x.shape, (2,), "shape mismatch")

809:         assert_(type(ma_x) is MaskedArray)

838:         assert_equal(np.ma.median(x), 1)

840:         assert_equal(np.ma.median(x), np.ma.masked)

844:         assert_equal(np.ma.median(x), np.ma.masked)

845:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

846:         assert_(type(np.ma.median(x)) is np.ma.core.MaskedConstant)

848:         assert_equal(np.ma.median(x), 2.)

849:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

850:         assert_(type(np.ma.median(x)) is not MaskedArray)

852:         assert_equal(np.ma.median(x), 2.5)

853:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

854:         assert_(type(np.ma.median(x)) is not MaskedArray)

856:         assert_equal(np.ma.median(x), 0.)

857:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

858:         assert_(type(np.ma.median(x)) is not MaskedArray)

861:         assert_equal(np.ma.median(x), 3.)

862:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

863:         assert_(type(np.ma.median(x)) is not MaskedArray)

866:         assert_equal(np.ma.median(x), 3.)

867:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

868:         assert_(type(np.ma.median(x)) is not MaskedArray)

871:         assert_equal(np.ma.median(x), 2.5)

872:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

873:         assert_(type(np.ma.median(x)) is not MaskedArray)

876:         assert_equal(np.ma.median(x), 2.5)

877:         assert_equal(np.ma.median(x).shape, (), "shape mismatch")

878:         assert_(type(np.ma.median(x)) is not MaskedArray)

881:         assert_equal(np.ma.median(array([1,2,3],mask=[0,0,0])).shape,

895:         assert_equal(median(z[
896:         assert_equal(median(z), 0)

897:         assert_equal(median(z, axis=0), np.zeros(p))

898:         assert_equal(median(z.T, axis=1), np.zeros(p))

904:         assert_equal(median(x), 14.5)

905:         assert_(type(np.ma.median(x)) is not MaskedArray)

906:         assert_equal(median(x, axis=0), [13.5, 14.5, 15.5])

907:         assert_(type(np.ma.median(x, axis=0)) is MaskedArray)

908:         assert_equal(median(x, axis=1), [0, 0, 0, 10, 13, 16, 19, 0, 0, 0])

909:         assert_(type(np.ma.median(x, axis=1)) is MaskedArray)

910:         assert_equal(median(x, axis=1).mask, [1, 1, 1, 0, 0, 0, 0, 1, 1, 1])

916:         assert_equal(median(x, 0), [[12, 9], [6, 15], [12, 9], [18, 15]])

918:         assert_equal(median(x, 0), [[99, 10], [11, 99], [13, 14]])

921:         assert_equal(median(x, 0), [[12, 10], [8, 9], [16, 17]])

926:         assert_equal(median(x, axis=-1), median(x, axis=1))

936:                 assert_equal(out, 14.5)

938:                 assert_equal(out, 15.)

939:             assert_(r is out)

940:             assert_(type(r) is MaskedArray)

955:             assert_equal(r, e)

956:             assert_(r is out)

957:             assert_(type(r) is MaskedArray)

965:         assert_array_equal(np.ma.median(masked_arr, axis=0),

975:             assert_(np.isscalar(r))

976:             assert_array_equal(r, np.nan)

978:             assert_(np.isscalar(r))

979:             assert_array_equal(r, np.nan)

982:             assert_equal(type(r), MaskedArray)

983:             assert_array_equal(r, [1, np.nan, 3])

985:             assert_equal(type(r), MaskedArray)

986:             assert_array_equal(r, [np.nan, 2])

988:             assert_equal(type(r), MaskedArray)

989:             assert_array_equal(r, [np.nan, 2])

993:         assert_array_equal(np.ma.median(dm, axis=None), np.nan)

994:         assert_array_equal(np.ma.median(dm, axis=0), [1, np.nan, 3])

995:         assert_array_equal(np.ma.median(dm, axis=1), [np.nan, 1.5])

1002:         assert_equal(np.ma.median(d, 0, out=o), o)

1004:         assert_equal(np.ma.median(d, 1, out=o), o)

1006:         assert_equal(np.ma.median(d, out=o), o)

1012:         assert_array_equal(np.ma.median(a), np.nan)

1013:         assert_array_equal(np.ma.median(a, axis=0), np.nan)

1022:         assert_array_equal(np.ma.median(a), np.nan)

1023:         assert_(np.isscalar(np.ma.median(a)))

1029:         assert_equal(np.ma.median(a, 0), b)

1035:         assert_equal(np.ma.median(a, 1), b)

1041:         assert_equal(np.ma.median(a, (0, 2)), b)

1047:         assert_array_equal(np.ma.median(a, axis=1), 255)

1048:         assert_array_equal(np.ma.median(a, axis=1).mask, False)

1049:         assert_array_equal(np.ma.median(a, axis=0), a[0])

1050:         assert_array_equal(np.ma.median(a), 255)

1056:             assert_equal(np.ma.median(a, axis=0), [inf,  np.nan])

1057:             assert_equal(np.ma.median(a, axis=1), [inf,  np.nan])

1058:             assert_equal(np.ma.median(a), inf)

1062:             assert_array_equal(np.ma.median(a, axis=1), inf)

1063:             assert_array_equal(np.ma.median(a, axis=1).mask, False)

1064:             assert_array_equal(np.ma.median(a, axis=0), a[0])

1065:             assert_array_equal(np.ma.median(a), inf)

1069:             assert_equal(np.ma.median(a), inf)

1070:             assert_equal(np.ma.median(a, axis=0), inf)

1071:             assert_equal(np.ma.median(a, axis=1), inf)

1079:                 assert_equal(np.ma.median(a, axis=0), [4., 7., -inf, 5.])

1080:                 assert_equal(np.ma.median(a), 4.5)

1082:                 assert_equal(np.ma.median(a, axis=0), [-10., 7., -inf, -9.])

1083:                 assert_equal(np.ma.median(a), -2.5)

1084:             assert_equal(np.ma.median(a, axis=1), [-1., -2.5, inf])

1090:                     assert_equal(np.ma.median(a), inf)

1091:                     assert_equal(np.ma.median(a, axis=1), inf)

1092:                     assert_equal(np.ma.median(a, axis=0),

1100:             assert_array_equal(np.ma.median(a), np.nan)

1101:             assert_(w.log[0].category is RuntimeWarning)

1109:             assert_array_equal(np.ma.median(a), np.nan)

1110:             assert_(w.log[0].category is RuntimeWarning)

1114:         assert_equal(np.ma.median(a, axis=0), b)

1115:         assert_equal(np.ma.median(a, axis=1), b)

1121:             assert_equal(np.ma.median(a, axis=2), b)

1122:             assert_(w[0].category is RuntimeWarning)

1126:         assert_(type(np.ma.median(o.astype(object))), float)

1128:         assert_(type(np.ma.median(o.astype(object))), float)

1139:         assert_almost_equal(np.cov(x), cov(x))

1140:         assert_almost_equal(np.cov(x, rowvar=False), cov(x, rowvar=False))

1141:         assert_almost_equal(np.cov(x, rowvar=False, bias=True),

1147:         assert_almost_equal(np.cov(x), cov(x))

1148:         assert_almost_equal(np.cov(x, rowvar=False), cov(x, rowvar=False))

1149:         assert_almost_equal(np.cov(x, rowvar=False, bias=True),

1158:         assert_almost_equal(np.cov(nx), cov(x))

1159:         assert_almost_equal(np.cov(nx, rowvar=False), cov(x, rowvar=False))

1160:         assert_almost_equal(np.cov(nx, rowvar=False, bias=True),

1170:         assert_almost_equal(np.cov(nx, nx[
1171:         assert_almost_equal(np.cov(nx, nx[
1173:         assert_almost_equal(np.cov(nx, nx[
1184:         assert_almost_equal(cov(x),

1186:         assert_almost_equal(cov(x, bias=True),

1190:         assert_almost_equal(cov(x, rowvar=False),

1193:         assert_almost_equal(cov(x, rowvar=False, bias=True),

1211:             assert_warns(DeprecationWarning, corrcoef, x, ddof=-1)

1214:             assert_almost_equal(np.corrcoef(x, ddof=0), corrcoef(x, ddof=0))

1215:             assert_almost_equal(corrcoef(x, ddof=-1), expected)

1216:             assert_almost_equal(corrcoef(x, y, ddof=-1), expected2)

1217:             assert_almost_equal(corrcoef(x, ddof=3), expected)

1218:             assert_almost_equal(corrcoef(x, y, ddof=3), expected2)

1226:             assert_warns(DeprecationWarning, corrcoef, x, y, True, False)

1227:             assert_warns(DeprecationWarning, corrcoef, x, y, True, True)

1228:             assert_warns(DeprecationWarning, corrcoef, x, bias=False)

1231:             assert_almost_equal(corrcoef(x, bias=1), expected)

1236:         assert_almost_equal(np.corrcoef(x), corrcoef(x))

1237:         assert_almost_equal(np.corrcoef(x, rowvar=False),

1241:             assert_almost_equal(np.corrcoef(x, rowvar=False, bias=True),

1247:         assert_almost_equal(np.corrcoef(x), corrcoef(x))

1248:         assert_almost_equal(np.corrcoef(x, rowvar=False),

1252:             assert_almost_equal(np.corrcoef(x, rowvar=False, bias=True),

1261:         assert_almost_equal(np.corrcoef(nx), corrcoef(x))

1262:         assert_almost_equal(np.corrcoef(nx, rowvar=False),

1266:             assert_almost_equal(np.corrcoef(nx, rowvar=False, bias=True),

1274:         assert_almost_equal(np.corrcoef(nx, nx[
1275:         assert_almost_equal(np.corrcoef(nx, nx[
1280:             assert_almost_equal(np.corrcoef(nx, nx[
1282:             assert_almost_equal(np.corrcoef(nx, nx[
1293:         assert_almost_equal(test[
1297:             assert_almost_equal(corrcoef(x, ddof=-2)[
1299:             assert_almost_equal(corrcoef(x, ddof=3)[
1301:             assert_almost_equal(corrcoef(x, bias=1)[
1312:         assert_almost_equal(polyfit(x, y, 3), np.polyfit(x, y, 3))

1323:             assert_almost_equal(a, a_)

1328:             assert_almost_equal(a, a_)

1333:             assert_almost_equal(a, a_)

1342:         assert_equal(w, wo)

1344:             assert_almost_equal(a, a_)

1360:             assert_almost_equal(a, a_)

1369:         assert_(isinstance(test[0], MaskedArray))

1370:         assert_equal(test[0], masked_array([1, 2, 3], mask=[0, 0, 0]))

1371:         assert_equal(test[1], [0, 3, 5])

1372:         assert_equal(test[2], [0, 0, 0, 1, 1, 2])

1378:         assert_equal(test[0], masked_array([1, 2, 3, -1], mask=[0, 0, 0, 1]))

1379:         assert_equal(test[1], [0, 3, 5, 2])

1380:         assert_equal(test[2], [0, 0, 3, 1, 3, 2])

1386:         assert_equal(test[0], masked_array([1, 2, 3, -1], mask=[0, 0, 0, 1]))

1387:         assert_equal(test[1], [0, 3, 5, 2])

1388:         assert_equal(test[2], [0, 0, 3, 1, 3, 2])

1394:         assert_equal(test[0], masked_array([1, ], mask=[True]))

1395:         assert_equal(test[1], [0])

1396:         assert_equal(test[2], [0, 0, 0])

1401:         assert_equal(test[0], masked_array(masked))

1402:         assert_equal(test[1], [0])

1403:         assert_equal(test[2], [0])

1410:         assert_equal(test, control)

1411:         assert_equal(test.filled(0), control.filled(0))

1412:         assert_equal(test.mask, control.mask)

1419:         assert_equal(test, control)

1420:         assert_equal(test.filled(0), control.filled(0))

1421:         assert_equal(test.mask, control.mask)

1425:         assert_equal(test, control)

1426:         assert_equal(test.filled(0), control.filled(0))

1427:         assert_equal(test.mask, control.mask)

1434:         assert_equal(test, control)

1435:         assert_equal(test.filled(0), control.filled(0))

1436:         assert_equal(test.mask, control.mask)

1440:         assert_equal(test, control)

1441:         assert_equal(test.filled(0), control.filled(0))

1442:         assert_equal(test.mask, control.mask)

1449:         assert_equal(test, control)

1450:         assert_equal(test.filled(0), control.filled(0))

1451:         assert_equal(test.mask, control.mask)

1456:         assert_equal(test, control)

1457:         assert_equal(test.filled(0), control.filled(0))

1458:         assert_equal(test.mask, control.mask)

1465:         assert_equal(test, control)

1466:         assert_(isinstance(test, MaskedArray))

1467:         assert_equal(test.filled(0), control.filled(0))

1468:         assert_equal(test.mask, control.mask)

1472:         assert_(isinstance(test, MaskedArray))

1473:         assert_equal(test.filled(0), control.filled(0))

1474:         assert_equal(test.mask, control.mask)

1482:         assert_equal(test, control)

1489:         assert_equal(test, array([3, 4, 7]))

1494:         assert_equal(test, array([3, 4, 7, -1], mask=[0, 0, 0, 1]))

1499:         assert_(isinstance(test, MaskedArray))

1500:         assert_equal(test, [1, 2, 3, 4, 5, 6])

1505:         assert_(isinstance(test, MaskedArray))

1506:         assert_equal(test, [1, 2, 3, 4, 5, 6])

1508:         assert_array_equal([], setxor1d([], []))

1525:         assert_(isinstance(c, MaskedArray))

1526:         assert_array_equal(c, ec)

1529:         assert_array_equal(c, d)

1536:         assert_equal(test, [True, True, True, False, True])

1541:         assert_equal(test, [True, True, False, True, True])

1543:         assert_array_equal([], in1d([], []))

1549:         assert_equal(np.invert(in1d(a, b)), in1d(a, b, invert=True))

1553:         assert_equal(np.invert(in1d(a, b)), in1d(a, b, invert=True))

1555:         assert_array_equal([], in1d([], [], invert=True))

1563:         assert_equal(test, control)

1571:         assert_equal(z, ez)

1573:         assert_array_equal([], union1d([], []))

1580:         assert_equal(test, array([6, 7, -1], mask=[0, 0, 1]))

1584:         assert_equal(setdiff1d(a, b), array([8, 9]))

1586:         assert_equal(setdiff1d(a, []).dtype, np.uint32)

1592:         assert_array_equal(setdiff1d(a, b), np.array(['c']))

1601:         assert_equal(b.shape, (1, 3))

1602:         assert_equal(b.mask.shape, b.data.shape)

1603:         assert_equal(a.shape, (3,))

1604:         assert_equal(a.mask.shape, a.data.shape)

1605:         assert_equal(b.mask.shape, b.data.shape)

1613:         assert_equal(b.shape, (1,))

1614:         assert_equal(b.mask.shape, b.shape)

1615:         assert_equal(b.data.shape, b.shape)

1619:             assert_equal(a.shape, (1,))

1620:             assert_equal(a.mask.shape, a.shape)

1621:             assert_equal(a.data.shape, a.shape)

1624:         assert_equal(b.shape, (1, 1))

1625:         assert_equal(b.mask.shape, b.shape)

1626:         assert_equal(b.data.shape, b.shape)

1630:             assert_equal(a.shape, (1, 1))

1631:             assert_equal(a.mask.shape, a.shape)

1632:             assert_equal(a.data.shape, a.shape)

1635:         assert_equal(b.shape, (1, 1, 1))

1636:         assert_equal(b.mask.shape, b.shape)

1637:         assert_equal(b.data.shape, b.shape)

1641:             assert_equal(a.shape, (1, 1, 1))

1642:             assert_equal(a.mask.shape, a.shape)

1643:             assert_equal(a.data.shape, a.shape)

1647:         assert_equal(b.shape, (1, 1))

1648:         assert_equal(b.mask.shape, b.data.shape)

1658:         assert_equal(c.shape, (2, 3))

1659:         assert_array_equal(a.mask, c[0].mask)

1660:         assert_array_equal(b.mask, c[1].mask)

1663:         assert_array_equal(c.data, d.data)

1664:         assert_array_equal(c.mask, d.mask)

1667:         assert_equal(c.shape, (3, 2))

1668:         assert_array_equal(a.mask, c[
1669:         assert_array_equal(b.mask, c[
1676:         assert_equal(c.shape, (2, 3))

1677:         assert_array_equal(a.mask, c[0].mask)

1678:         assert_array_equal(b.mask, c[1].mask)

1681:         assert_array_equal(c.data, d.data)

1682:         assert_array_equal(c.mask, d.mask)

1685:         assert_equal(c.shape, (3, 2))

1686:         assert_array_equal(a.mask, c[
1687:         assert_array_equal(b.mask, c[
1701:         assert_equal(c.shape, c_shp)

1702:         assert_array_equal(a1.mask, c[0].mask)

1703:         assert_array_equal(a2.mask, c[1].mask)

1707:         assert_equal(c.shape, c_shp)

1708:         assert_array_equal(a1.mask, c[..., 0].mask)

1709:         assert_array_equal(a2.mask, c[..., 1].mask)

1722:         assert_equal(c.shape, c_shp)

1723:         assert_array_equal(a1.mask, c[0].mask)

1724:         assert_array_equal(a2.mask, c[1].mask)

1728:         assert_equal(c.shape, c_shp)

1729:         assert_array_equal(a1.mask, c[..., 0].mask)

1730:         assert_array_equal(a2.mask, c[..., 1].mask)

Total asserts: 497

Filename: numpy/ma/tests/test_mrecords.py
21:     assert_, assert_equal,

22:     assert_equal_records,

40:         assert_equal(mbase.recordmask, base.recordmask)

41:         assert_equal_records(mbase._mask, base._mask)

42:         assert_(isinstance(mbase._data, recarray))

43:         assert_equal_records(mbase._data, base._data.view(recarray))

45:             assert_equal(base[field], mbase[field])

46:         assert_equal_records(mbase.view(mrecarray), mbase)

54:             assert_equal(getattr(mbase, field), mbase[field])

55:             assert_equal(base[field], mbase[field])

58:         assert_(isinstance(mbase_first, mrecarray))

59:         assert_equal(mbase_first.dtype, mbase.dtype)

60:         assert_equal(mbase_first.tolist(), (1, 1.1, b'one'))

62:         assert_equal(mbase_first.recordmask, nomask)

63:         assert_equal(mbase_first._mask.item(), (False, False, False))

64:         assert_equal(mbase_first['a'], mbase['a'][0])

66:         assert_(isinstance(mbase_last, mrecarray))

67:         assert_equal(mbase_last.dtype, mbase.dtype)

68:         assert_equal(mbase_last.tolist(), (None, None, None))

70:         assert_equal(mbase_last.recordmask, True)

71:         assert_equal(mbase_last._mask.item(), (True, True, True))

72:         assert_equal(mbase_last['a'], mbase['a'][-1])

73:         assert_((mbase_last['a'] is masked))

76:         assert_(isinstance(mbase_sl, mrecarray))

77:         assert_equal(mbase_sl.dtype, mbase.dtype)

79:         assert_equal(mbase_sl.recordmask, [0, 1])

80:         assert_equal_records(mbase_sl.mask,

84:         assert_equal_records(mbase_sl, base[
86:             assert_equal(getattr(mbase_sl, field), base[
96:         assert_equal(mbase['a']._data, [5, 5, 5, 5, 5])

97:         assert_equal(mbase['a']._mask, [0, 1, 0, 0, 1])

100:         assert_equal(mbase['a']._data, [1]*5)

101:         assert_equal(ma.getmaskarray(mbase['a']), [0]*5)

103:         assert_equal(mbase.recordmask, [False]*5)

104:         assert_equal(mbase._mask.tolist(),

114:         assert_equal(mbase.c.mask, [1]*5)

115:         assert_equal(mbase.c.recordmask, [1]*5)

116:         assert_equal(ma.getmaskarray(mbase['c']), [1]*5)

117:         assert_equal(ma.getdata(mbase['c']), [b'N/A']*5)

118:         assert_equal(mbase._mask.tolist(),

128:         assert_equal(mbase.a, [1, 2, 3, 5, 5])

129:         assert_equal(mbase.a._mask, [0, 1, 0, 0, 0])

131:         assert_equal(mbase.b, base['b'])

132:         assert_equal(mbase.b._mask, [0, 1, 0, 1, 1])

140:         assert_equal(rdata.num, val)

141:         assert_equal(rdata.num.mask, [1, 0, 0])

149:         assert_equal(mbase.a, [1, 2, 3, 4, 5])

150:         assert_equal(mbase.a._mask, [0, 1, 0, 1, 1])

155:         assert_equal(mbase.a, [0, 1, 2, 3, 4])

156:         assert_equal(mbase.a._mask, [0, 0, 0, 1, 0])

163:         assert_equal(ma.getmaskarray(mbase['b']), [1]*5)

164:         assert_equal(mbase['a']._mask, mbase['b']._mask)

165:         assert_equal(mbase['a']._mask, mbase['c']._mask)

166:         assert_equal(mbase._mask.tolist(),

170:         assert_equal(ma.getmaskarray(mbase['c']), [0]*5)

171:         assert_equal(mbase._mask.tolist(),

179:         assert_equal(mbase.a.mask, [1, 0, 0, 0, 1])

180:         assert_equal(mbase.b.mask, [1, 0, 0, 0, 1])

181:         assert_equal(mbase.c.mask, [1, 0, 0, 0, 1])

184:         assert_equal(mbase.a.mask, [0, 0, 0, 0, 1])

185:         assert_equal(mbase.b.mask, [0, 0, 0, 0, 1])

186:         assert_equal(mbase.c.mask, [0, 0, 0, 0, 1])

195:         assert_equal(mbase.a.mask, [0, 0, 1, 1, 0])

196:         assert_equal(mbase.b.mask, [1, 1, 0, 0, 0])

197:         assert_equal(mbase.c.mask, [0, 0, 1, 1, 0])

201:         assert_equal(mbase.a.mask, [0, 0, 1, 1, 0])

202:         assert_equal(mbase.b.mask, [1, 1, 0, 0, 0])

203:         assert_equal(mbase.c.mask, [0, 0, 1, 1, 0])

210:         assert_equal(

215:         assert_equal(mbase.recordmask, [0, 1, 0, 1, 1])

219:         assert_equal(mbase.a._data, [5, 5, 3, 4, 5])

220:         assert_equal(mbase.a._mask, [0, 0, 0, 0, 1])

221:         assert_equal(mbase.b._data, [5., 5., 3.3, 4.4, 5.5])

222:         assert_equal(mbase.b._mask, [0, 0, 0, 0, 1])

223:         assert_equal(mbase.c._data,

225:         assert_equal(mbase.b._mask, [0, 0, 0, 0, 1])

229:         assert_equal(mbase.a._data, [1, 2, 3, 4, 5])

230:         assert_equal(mbase.a._mask, [1, 1, 0, 0, 1])

231:         assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 4.4, 5.5])

232:         assert_equal(mbase.b._mask, [1, 1, 0, 0, 1])

233:         assert_equal(mbase.c._data,

235:         assert_equal(mbase.b._mask, [1, 1, 0, 0, 1])

244:             assert_equal(mbase.a._data, [1, 2, 3, 5, 5])

245:             assert_equal(mbase.b._data, [1.1, 2.2, 3.3, 5, 5.5])

246:             assert_equal(mbase.c._data,

248:             assert_equal(mbase.a._mask, [0, 1, 0, 0, 1])

249:             assert_equal(mbase.b._mask, mbase.a._mask)

250:             assert_equal(mbase.b._mask, mbase.c._mask)

271:         assert_(mbase._hardmask)

273:         assert_equal_records(mbase._mask, base._mask)

275:         assert_(not mbase._hardmask)

278:         assert_equal_records(mbase._mask,

280:         assert_(ma.make_mask(mbase['b']._mask) is nomask)

281:         assert_equal(mbase['a']._mask, mbase['b']._mask)

290:             assert_equal(mrec_.dtype, mrec.dtype)

291:             assert_equal_records(mrec_._data, mrec._data)

292:             assert_equal(mrec_._mask, mrec._mask)

293:             assert_equal_records(mrec_._mask, mrec._mask)

304:         assert_equal(mrecfilled['a'], np.array((1, 2, 99999), dtype=int))

305:         assert_equal(mrecfilled['b'], np.array((1.1, 2.2, 99999.),

307:         assert_equal(mrecfilled['c'], np.array(('one', 'two', 'N/A'),

319:         assert_equal(mrec.tolist(),

327:         assert_equal(x['base'][0], 10)

333:         assert_equal(easy.filled(1).item(), (1, b'1', 1.))

337:         assert_equal(solo.filled(1).item(),

344:         assert_equal_records(mult.filled(0),

363:         assert_(isinstance(test, MaskedRecords))

364:         assert_equal_records(test, mrec)

365:         assert_equal_records(test._mask, mrec._mask)

371:         assert_(isinstance(test, ma.MaskedArray))

372:         assert_equal(test, np.array(list(zip(a, b)), dtype=float))

373:         assert_(test[3, 1] is ma.masked)

379:         assert_(isinstance(test, MaskedRecords))

380:         assert_equal_records(test, arr.view(alttype))

381:         assert_(test['B'][3] is masked)

382:         assert_equal(test.dtype, np.dtype(alttype))

383:         assert_(test._fill_value is None)

406:             assert_equal(getattr(mrec, f)._mask, l._mask)

409:         assert_equal_records(fromarrays(_x, dtype=mrec.dtype), mrec[0])

420:         assert_equal_records(pa, mpa)

423:         assert_equal(_mrec.dtype, mrec.dtype)

425:             assert_equal(getattr(_mrec, field), getattr(mrec._data, field))

428:         assert_equal(_mrec.dtype, [('c1', int), ('c2', float), ('c3', '|S5')])

430:             assert_equal(getattr(_mrec, f), getattr(mrec._data, n))

433:         assert_equal(_mrec.dtype, mrec.dtype)

434:         assert_equal_records(_mrec._data, mrec.filled())

435:         assert_equal_records(_mrec._mask, mrec._mask)

442:         assert_equal_records(_mrec._data, mrec._data)

443:         assert_equal(_mrec._mask.tolist(), [(0, 0, 0), (1, 1, 1), (0, 0, 0)])

446:         assert_equal_records(_mrec._data, mrec._data)

447:         assert_equal(_mrec._mask.tolist(), [(1, 1, 1), (1, 1, 1), (1, 1, 1)])

450:         assert_equal_records(_mrec._data, mrec._data)

451:         assert_equal(_mrec._mask.tolist(), mrec._mask.tolist())

455:         assert_equal_records(_mrec._data, mrec._data)

456:         assert_equal(_mrec._mask.tolist(), mrec._mask.tolist())

472:         assert_(isinstance(mrectxt, MaskedRecords))

473:         assert_equal(mrectxt.F, [1, 1, 1, 1])

474:         assert_equal(mrectxt.E._mask, [1, 1, 1, 1])

475:         assert_equal(mrectxt.C, [1, 2, 3.e+5, -1e-10])

482:         assert_equal(mrec.f3, d)

483:         assert_equal(mrec.f3._mask, m)

Total asserts: 141

Filename: numpy/ma/tests/test_regression.py
3:     assert_, assert_array_equal, assert_allclose, suppress_warnings

12:         assert_array_equal(np.ma.nonzero(x), [[1, 2, 6, 7]])

46:         assert_(a.mask.ndim == 1)

47:         assert_(b.mask.ndim == 2)

53:         assert_(a.fill_value == 'X')

60:         assert_(mout._data == 0)

72:             assert_allclose(r0.data, r1.data)

77:         assert_(a.mask.shape == (2,))

80:         assert_(a.mask.shape == (2,))

81:         assert_(b.shape == (2, 2))

82:         assert_(b.mask.shape == (2, 2))

87:         assert_array_equal(ma[[]], ma[
91:         assert_array_equal(ma.tobytes(order='F'), ma.T.tobytes())

Total asserts: 13

Filename: numpy/ma/core.py
3597:         >>> assert not m.hardmask

3612:         >>> assert m.hardmask and hardened is m

Total asserts: 2

Filename: numpy/ma/timer_comparison.py
48:     def assert_array_compare(self, comparison, x, y, err_msg='', header='',

80:                 assert cond, msg

98:                 assert cond, msg

103:     def assert_array_equal(self, x, y, err_msg='')
108:         self.assert_array_compare(self.equal, x, y, err_msg=err_msg,

137:         assert((xm-ym).filled(0).any())

139:         assert(xm.size == reduce(lambda x, y
140:         assert(self.count(xm) == len(m1) - reduce(lambda x, y
148:             assert(self.count(xm) == len(m1) - reduce(lambda x, y
164:         assert type(x2[1]) is type(x1[1])

165:         assert x1[1] == x2[1]

168:         self.assert_array_equal(x1, x2)

184:         assert x1[1
189:         assert(m is m2)

191:         assert(m is not m3)

202:         assert self.allequal(self.concatenate([x4, x4]), y4)

203:         assert self.allequal(self.getmask(y4), [0, 0, 1, 0, 0, 0, 1, 0])

205:         self.assert_array_equal(y5, [0, 0, 1, 1, 2, 2, 3, 3])

207:         assert self.allequal(y5, y6)

209:         assert self.allequal(y5, y7)

211:         assert self.allequal(y5, y8)

224:         assert self.allequal(np.transpose(y, (2, 0, 1)), self.transpose(x, (2, 0, 1)))

225:         assert self.allequal(np.take(y, (2, 0, 1), 1), self.take(x, (2, 0, 1), 1))

226:         assert self.allequal(np.inner(self.filled(x, 0), self.filled(y, 0)),

228:         assert self.allequal(np.outer(self.filled(x, 0), self.filled(y, 0)),

233:         assert t[0] == 'abc'

234:         assert t[1] == 2

235:         assert t[2] == 3

248:         assert self.allequal(x, y+1)

250:         assert self.allequal(xm, y+1)

256:         assert self.allequal(x, y-1)

258:         assert self.allequal(xm, y-1)

264:         assert self.allequal(x, y*2)

266:         assert self.allequal(xm, y*2)

272:         assert self.allequal(x, y)

274:         assert self.allequal(xm, y)

280:         assert self.allequal(x, y/2.0)

282:         self.assert_array_equal(xm, self.ones((10,)))

288:         assert self.allequal(x, y + 1.)

305:         assert self.allequal(x, y+a)

306:         assert self.allequal(xm, y+a)

307:         assert self.allequal(xm.mask, self.mask_or(m, a.mask))

317:         assert self.allequal(x, y-a)

318:         assert self.allequal(xm, y-a)

319:         assert self.allequal(xm.mask, self.mask_or(m, a.mask))

329:         assert self.allequal(x, y*a)

330:         assert self.allequal(xm, y*a)

331:         assert self.allequal(xm.mask, self.mask_or(m, a.mask))

374:             self.assert_array_equal(ur.filled(0), mr.filled(0), f)

375:             self.assert_array_equal(ur._mask, mr._mask)

381:         self.assert_array_equal(2.0, self.average(ott, axis=0))

382:         self.assert_array_equal(2.0, self.average(ott, weights=[1., 1., 2., 1.]))

384:         self.assert_array_equal(2.0, result)

385:         assert(wts == 4.0)

387:         assert(self.average(ott, axis=0) is self.masked)

391:         self.assert_array_equal(self.average(ott, axis=0), [2.0, 0.0])

392:         assert(self.average(ott, axis=1)[0] is self.masked)

393:         self.assert_array_equal([2., 0.], self.average(ott, axis=0))

395:         self.assert_array_equal(wts, [1., 0.])

399:         self.assert_array_equal(self.average(x, axis=0), 2.5)

400:         self.assert_array_equal(self.average(x, axis=0, weights=w1), 2.5)

402:         self.assert_array_equal(self.average(y, None), np.add.reduce(np.arange(6))*3./12.)

403:         self.assert_array_equal(self.average(y, axis=0), np.arange(6) * 3./2.)

404:         self.assert_array_equal(self.average(y, axis=1), [self.average(x, axis=0), self.average(x, axis=0) * 2.0])

405:         self.assert_array_equal(self.average(y, None, weights=w2), 20./6.)

406:         self.assert_array_equal(self.average(y, axis=0, weights=w2), [0., 1., 2., 3., 4., 10.])

407:         self.assert_array_equal(self.average(y, axis=1), [self.average(x, axis=0), self.average(x, axis=0) * 2.0])

413:         self.assert_array_equal(self.average(self.masked_array(x, m1), axis=0), 2.5)

414:         self.assert_array_equal(self.average(self.masked_array(x, m2), axis=0), 2.5)

415:         self.assert_array_equal(self.average(self.masked_array(x, m5), axis=0), 0.0)

416:         self.assert_array_equal(self.count(self.average(self.masked_array(x, m4), axis=0)), 0)

418:         self.assert_array_equal(self.average(z, None), 20./6.)

419:         self.assert_array_equal(self.average(z, axis=0), [0., 1., 99., 99., 4.0, 7.5])

420:         self.assert_array_equal(self.average(z, axis=1), [2.5, 5.0])

421:         self.assert_array_equal(self.average(z, axis=0, weights=w2), [0., 1., 99., 99., 4.0, 10.0])

Total asserts: 75

Filename: numpy/_version.py
72:     assert isinstance(commands, list)

Total asserts: 1

Filename: numpy/tests/test_matlib.py
3: from numpy.testing import assert_array_equal, assert_

7:     assert_(isinstance(x, np.matrix))

8:     assert_(x.shape, (1, 2))

11:     assert_array_equal(numpy.matlib.ones((2, 3)),

15:     assert_array_equal(numpy.matlib.ones(2), np.matrix([[ 1.,  1.]]))

18:     assert_array_equal(numpy.matlib.zeros((2, 3)),

22:     assert_array_equal(numpy.matlib.zeros(2), np.matrix([[ 0.,  0.]]))

26:     assert_array_equal(x, np.matrix([[1, 0], [0, 1]]))

30:     assert_array_equal(xc, np.matrix([[ 0,  1,  0],

33:     assert xc.flags.c_contiguous

34:     assert not xc.flags.f_contiguous

37:     assert_array_equal(xf, np.matrix([[ 1,  0,  0,  0],

40:     assert not xf.flags.c_contiguous

41:     assert xf.flags.f_contiguous

46:     assert_(x.ndim == 2)

51:     assert_(x.ndim == 2)

58:     assert_array_equal(x, y)

Total asserts: 17

Filename: numpy/tests/test_ctypeslib.py
9: from numpy.testing import assert_, assert_array_equal, assert_raises, assert_equal

48:         assert isinstance(out1, ctypes.CDLL)

49:         assert out1 is out2 is out3 is out4

71:         assert_(p.from_param(np.array([1], dt)))

74:         assert_(p.from_param(np.array([1], dt)))

78:         assert_raises(TypeError, p.from_param,

85:         assert_(p.from_param(np.zeros((10,), dt)))

88:         assert_(p.from_param(np.zeros((10,), dt)))

91:             assert_raises(TypeError, p.from_param, np.zeros((10,), dt2))

93:             assert_(p.from_param(np.zeros((10,), dt2)))

97:         assert_(p.from_param(np.array(1)))

98:         assert_raises(TypeError, p.from_param, np.array([1]))

100:         assert_raises(TypeError, p.from_param, np.array(1))

101:         assert_(p.from_param(np.array([1])))

103:         assert_(p.from_param(np.array([[1]])))

107:         assert_(p.from_param(np.array([[1, 2]])))

108:         assert_raises(TypeError, p.from_param, np.array([[1], [2]]))

110:         assert_(p.from_param(np.array(1)))

115:         assert_(p.from_param(x))

117:         assert_raises(TypeError, p.from_param, x)

119:         assert_(p.from_param(x))

120:         assert_raises(TypeError, p.from_param, np.array([[1, 2], [3, 4]]))

123:         assert_(ndpointer(dtype=np.float64) is ndpointer(dtype=np.float64))

126:         assert_(ndpointer(shape=2) is ndpointer(shape=(2,)))

129:         assert_(ndpointer(shape=2) is not ndpointer(ndim=2))

130:         assert_(ndpointer(ndim=2) is not ndpointer(shape=2))

142:         assert_raises(

169:         assert_equal(arr2.dtype, arr.dtype)

170:         assert_equal(arr2.shape, arr.shape)

171:         assert_equal(

185:         assert_(isinstance(ret, ptr_type))

196:         assert_equal(a.shape, (2,))

197:         assert_array_equal(a, np.array([1, 2]))

199:         assert_equal(a.shape, (3, 2))

200:         assert_array_equal(a, np.array([[1, 2], [3, 4], [5, 6]]))

208:         assert_equal(a.shape, (10,))

209:         assert_array_equal(a, np.arange(10))

212:         assert_equal(a.shape, (2, 5))

213:         assert_array_equal(a, np.arange(10).reshape((2, 5)))

216:         assert_raises(TypeError, as_array, p)

237:             assert_equal(x.dtype, expected.dtype)

238:             assert_equal(x, expected)

258:         with np.testing.assert_no_gc_cycles()
273:         assert_(arr_ref() is not None)

286:         assert_equal(ct, ctypes.c_uint16.__ctype_le__)

290:         assert_equal(ct, ctypes.c_uint16.__ctype_be__)

294:         assert_equal(ct, ctypes.c_uint16)

299:         assert_equal(ct, 2 * (3 * ctypes.c_int32))

308:         assert_(issubclass(ct, ctypes.Structure))

309:         assert_equal(ctypes.sizeof(ct), dt.itemsize)

310:         assert_equal(ct._fields_, [

322:         assert_(issubclass(ct, ctypes.Structure))

323:         assert_equal(ctypes.sizeof(ct), dt.itemsize)

324:         assert_equal(ct._fields_, [

338:         assert_(issubclass(ct, ctypes.Union))

339:         assert_equal(ctypes.sizeof(ct), dt.itemsize)

340:         assert_equal(ct._fields_, [

354:         assert_(issubclass(ct, ctypes.Union))

355:         assert_equal(ctypes.sizeof(ct), dt.itemsize)

356:         assert_equal(ct._fields_, [

368:         assert_raises(NotImplementedError, np.ctypeslib.as_ctypes_type, dt)

Total asserts: 61

Filename: numpy/tests/test__all__.py
9:     assert len(dups) == 0

Total asserts: 1

Filename: numpy/tests/test_numpy_version.py
21: from numpy.testing import assert_

34:     assert_(res is not None, np.__version__)

40:         assert_(np.__version__ == np.version.short_version,

43:         assert_(np.__version__.split("+")[0] == np.version.short_version,

Total asserts: 4

Filename: numpy/tests/test_reloading.py
1: from numpy.testing import assert_raises, assert_warns, assert_, assert_equal

19:     with assert_warns(UserWarning)
21:     assert_(_NoValue is np._NoValue)

22:     assert_(ModuleDeprecationWarning is np.ModuleDeprecationWarning)

23:     assert_(VisibleDeprecationWarning is np.VisibleDeprecationWarning)

25:     assert_raises(RuntimeError, reload, numpy._globals)

26:     with assert_warns(UserWarning)
28:     assert_(_NoValue is np._NoValue)

29:     assert_(ModuleDeprecationWarning is np.ModuleDeprecationWarning)

30:     assert_(VisibleDeprecationWarning is np.VisibleDeprecationWarning)

35:         assert_equal(repr(np._NoValue), '<no value>')

36:         assert_(pickle.loads(pickle.dumps(np._NoValue,

Total asserts: 12

Filename: numpy/tests/test_public_api.py
59:     # pytest gives better error messages with the builtin assert than with

60:     # assert_equal

61:     assert bad_results == allowlist

80:     assert not result

83:     assert name in dir(np)

89:     assert len(dir(np)) == len(set(dir(np)))

94:     assert bad_results == {}

99:     assert bad_results == {}

108:     assert f is None, ("'test_not_exported' is mistakenly exported, "

490:     assert len(xp_eps) > 0, "No entry points for 'array_api' found"

502:     assert xp is numpy.array_api, msg

Total asserts: 11

Filename: numpy/tests/test_scripts.py
12: from numpy.testing import assert_equal

41:     assert_equal(stdout.strip(), np.__version__.encode('ascii'))

46:     assert_equal(stdout.strip(), np.__version__.encode('ascii'))

Total asserts: 3

Filename: numpy/_pyinstaller/test_pyinstaller.py
35:     assert p.stdout.strip() == b"I made it!"

Total asserts: 1

Filename: numpy/array_api/tests/test_set_functions.py
19:     assert out.inverse_indices.shape == x.shape

Total asserts: 1

Filename: numpy/array_api/tests/test_array_object.py
3: from numpy.testing import assert_raises

39:     assert_raises(IndexError, lambda
40:     assert_raises(IndexError, lambda
41:     assert_raises(IndexError, lambda
42:     assert_raises(IndexError, lambda
43:     assert_raises(IndexError, lambda
44:     assert_raises(IndexError, lambda
45:     assert_raises(IndexError, lambda
46:     assert_raises(IndexError, lambda
48:     assert_raises(IndexError, lambda
49:     assert_raises(IndexError, lambda
50:     assert_raises(IndexError, lambda
51:     assert_raises(IndexError, lambda
52:     assert_raises(IndexError, lambda
53:     assert_raises(IndexError, lambda
54:     assert_raises(IndexError, lambda
55:     assert_raises(IndexError, lambda
58:     assert_raises(IndexError, lambda
59:     assert_raises(IndexError, lambda
60:     assert_raises(IndexError, lambda
61:     assert_raises(IndexError, lambda
62:     assert_raises(IndexError, lambda
66:     assert_raises(IndexError, lambda
67:     assert_raises(IndexError, lambda
68:     assert_raises(IndexError, lambda
69:     assert_raises(IndexError, lambda
70:     assert_raises(IndexError, lambda
71:     assert_raises(IndexError, lambda
74:     assert_raises(IndexError, lambda
75:     assert_raises(IndexError, lambda
76:     assert_raises(IndexError, lambda
79:     assert_raises(IndexError, lambda
80:     assert_raises(IndexError, lambda
81:     assert_raises(IndexError, lambda
82:     assert_raises(IndexError, lambda
152:                         assert_raises(TypeError, lambda
170:                                 assert_raises(TypeError, lambda
176:                                 assert_raises(TypeError, lambda
189:                                 assert_raises(TypeError, lambda
208:                 assert_raises(TypeError, lambda
228:                     assert_raises(ValueError, lambda
230:                     assert_raises(TypeError, lambda
243:                 assert_raises(TypeError, lambda
244:                 assert_raises(TypeError, lambda
245:                 assert_raises(TypeError, lambda
247:                 assert_raises(ValueError, lambda
248:                 assert_raises(ValueError, lambda
250:                     assert_raises(TypeError, lambda
252:                     assert_raises(ValueError, lambda
257:                     assert_raises(TypeError, lambda
260:                     assert_raises(ValueError, lambda
270:     assert bool(b) == False

271:     assert int(i) == 0

272:     assert float(f) == 0.0

273:     assert operator.index(i) == 0

276:     assert_raises(TypeError, lambda
277:     assert_raises(TypeError, lambda
278:     assert_raises(TypeError, lambda
279:     assert_raises(TypeError, lambda
283:     assert_raises(ValueError, lambda
284:     assert_raises(ValueError, lambda
286:     assert_raises(ValueError, lambda
287:     assert_raises(ValueError, lambda
289:     assert_raises(ValueError, lambda
290:     assert_raises(ValueError, lambda
292:     assert_raises(TypeError, lambda
293:     assert_raises(TypeError, lambda
298:     assert a.device == 'cpu'

300:     assert all(equal(a.to_device('cpu'), a))

301:     assert_raises(ValueError, lambda
303:     assert all(equal(asarray(a, device='cpu'), a))

304:     assert_raises(ValueError, lambda
309:     assert_raises(ValueError, lambda
311:     assert isinstance(b.T, Array)

312:     assert b.T.shape == (3, 2)

314:     assert isinstance(a.mT, Array)

315:     assert a.mT.shape == (1, 3, 2)

316:     assert isinstance(b.mT, Array)

317:     assert b.mT.shape == (3, 2)

321:     assert np.asarray(a) is a._array

323:     assert np.all(np.equal(b, np.ones((2, 3), dtype=np.float64)))

324:     assert b.dtype == np.float64

Total asserts: 82

Filename: numpy/array_api/tests/test_data_type_functions.py
19:     assert xp.can_cast(from_, to) == expected

Total asserts: 1

Filename: numpy/array_api/tests/test_elementwise_functions.py
3: from numpy.testing import assert_raises

98:                         assert_raises(TypeError, lambda
101:                     assert_raises(TypeError, lambda
106:     assert_raises(

109:     assert_raises(

Total asserts: 5

Filename: numpy/array_api/tests/test_sorting_functions.py
23:     assert xp.all(out == xp.asarray(expected))

Total asserts: 1

Filename: numpy/array_api/tests/test_creation_functions.py
1: from numpy.testing import assert_raises

26:     assert_raises(TypeError, lambda
27:     assert_raises(TypeError, lambda
28:     assert_raises(ValueError, lambda
29:     assert_raises(OverflowError, lambda
31:     # assert_raises(OverflowError, lambda
32:     assert_raises(TypeError, lambda
34:     assert_raises(ValueError, lambda
36:     assert_raises(ValueError, lambda
37:     assert_raises(ValueError, lambda
44:     assert all(b[0] == 1)

45:     assert all(a[0] == 0)

49:     assert all(b[0] == 1)

50:     assert all(a[0] == 0)

54:     assert all(b[0] == 0)

55:     assert_raises(NotImplementedError, lambda
56:     assert_raises(NotImplementedError,

62:     assert_raises(ValueError, lambda
63:     assert_raises(ValueError, lambda
64:     assert_raises(ValueError, lambda
69:     assert_raises(ValueError, lambda
70:     assert_raises(ValueError, lambda
71:     assert_raises(ValueError, lambda
76:     assert_raises(ValueError, lambda
77:     assert_raises(ValueError, lambda
78:     assert_raises(ValueError, lambda
83:     assert_raises(ValueError, lambda
84:     assert_raises(ValueError, lambda
85:     assert_raises(ValueError, lambda
90:     assert_raises(ValueError, lambda
91:     assert_raises(ValueError, lambda
92:     assert_raises(ValueError, lambda
97:     assert_raises(ValueError, lambda
98:     assert_raises(ValueError, lambda
99:     assert_raises(ValueError, lambda
104:     assert_raises(ValueError, lambda
105:     assert_raises(ValueError, lambda
106:     assert_raises(ValueError, lambda
111:     assert_raises(ValueError, lambda
112:     assert_raises(ValueError, lambda
113:     assert_raises(ValueError, lambda
118:     assert_raises(ValueError, lambda
119:     assert_raises(ValueError, lambda
120:     assert_raises(ValueError, lambda
125:     assert_raises(ValueError, lambda
126:     assert_raises(ValueError, lambda
127:     assert_raises(ValueError, lambda
132:     assert_raises(ValueError, lambda
133:     assert_raises(ValueError, lambda
134:     assert_raises(ValueError, lambda
142:     assert_raises(ValueError, lambda
Total asserts: 51

Filename: numpy/array_api/linalg.py
290:     from ..linalg.linalg import (_makearray, _assert_stacked_2d,

291:                                  _assert_stacked_square, _commonType,

297:     _assert_stacked_2d(a)

298:     _assert_stacked_square(a)

Total asserts: 4

Filename: numpy/typing/tests/test_isfile.py
5: from numpy.testing import assert_

30:             assert_(os.path.isfile(file))

Total asserts: 2

Filename: numpy/typing/tests/test_typing.py
137:     assert path in output_mypy

348:     assert path in output_mypy

358:         assert "Revealed type is" in error_line

404:     assert spec is not None

405:     assert spec.loader is not None

432:     assert path in output_mypy

444:         assert msg_typ in {"error", "note"}

Total asserts: 7

Filename: numpy/typing/tests/test_runtime.py
37:     assert out == ref

45:     assert out == ref

60:     assert out == ref

75:     assert out == ref

82:     assert keys == ref

Total asserts: 5

Filename: numpy/typing/tests/test_generic_alias.py
82:             assert value == value_ref

97:             assert value == value_ref

105:             assert value == value_ref

118:             assert value == value_ref1 == value_ref2

120:             assert value == value_ref1

Total asserts: 5

Filename: numpy/f2py/cfuncs.py
668:         assert(ISCONTIGUOUS(arr));

Total asserts: 1

Filename: numpy/f2py/crackfortran.py
636:     assert not (set('"\'') & set(characters)), "cannot split by unquoted quotes"

677:         assert reset == 0, repr(reset)

854:     assert not f, repr((f, line, l))

1143:             assert result is None, repr(result)

Total asserts: 4

Filename: numpy/f2py/tests/test_mixed.py
17:         assert self.module.bar11() == 11

18:         assert self.module.foo_fixed.bar12() == 12

19:         assert self.module.foo_free.bar13() == 13

33:         assert self.module.bar11.__doc__ == expected

Total asserts: 4

Filename: numpy/f2py/tests/test_return_logical.py
9:         assert t(True) == 1

10:         assert t(False) == 0

11:         assert t(0) == 0

12:         assert t(None) == 0

13:         assert t(0.0) == 0

14:         assert t(0j) == 0

15:         assert t(1j) == 1

16:         assert t(234) == 1

17:         assert t(234.6) == 1

18:         assert t(234.6 + 3j) == 1

19:         assert t("234") == 1

20:         assert t("aaa") == 1

21:         assert t("") == 0

22:         assert t([]) == 0

23:         assert t(()) == 0

24:         assert t({}) == 0

25:         assert t(t) == 1

26:         assert t(-234) == 1

27:         assert t(10**100) == 1

28:         assert t([234]) == 1

29:         assert t((234, )) == 1

30:         assert t(array(234)) == 1

31:         assert t(array([234])) == 1

32:         assert t(array([[234]])) == 1

33:         assert t(array([234], "b")) == 1

34:         assert t(array([234], "h")) == 1

35:         assert t(array([234], "i")) == 1

36:         assert t(array([234], "l")) == 1

37:         assert t(array([234], "f")) == 1

38:         assert t(array([234], "d")) == 1

39:         assert t(array([234 + 3j], "F")) == 1

40:         assert t(array([234], "D")) == 1

41:         assert t(array(0)) == 0

42:         assert t(array([0])) == 0

43:         assert t(array([[0]])) == 0

44:         assert t(array([0j])) == 0

45:         assert t(array([1])) == 1

Total asserts: 37

Filename: numpy/f2py/tests/test_assumed_shape.py
20:         assert r == 3

22:         assert r == 3

24:         assert r == 3

27:         assert r == 3

29:         assert r == 3

Total asserts: 5

Filename: numpy/f2py/tests/test_common.py
16:         assert self.module.block.long_bn == np.array(1.0, dtype=np.float64)

17:         assert self.module.block.string_bn == np.array("2", dtype="|S1")

18:         assert self.module.block.ok == np.array(3, dtype=np.int32)

Total asserts: 3

Filename: numpy/f2py/tests/test_kind.py
19:             assert selectedintkind(i) == selected_int_kind(

24:             assert selectedrealkind(i) == selected_real_kind(

Total asserts: 2

Filename: numpy/f2py/tests/test_array_from_pyobj.py
189:         assert self.type_num == info.num

239:         assert isinstance(self.arr, np.ndarray)

245:                 assert (intent.flags & wrap.F2PY_INTENT_C)

246:                 assert not self.arr.flags["FORTRAN"]

247:                 assert self.arr.flags["CONTIGUOUS"]

248:                 assert (not self.arr_attr[6] & wrap.FORTRAN)

250:                 assert (not intent.flags & wrap.F2PY_INTENT_C)

251:                 assert self.arr.flags["FORTRAN"]

252:                 assert not self.arr.flags["CONTIGUOUS"]

253:                 assert (self.arr_attr[6] & wrap.FORTRAN)

261:             assert isinstance(obj, np.ndarray), repr(type(obj))

268:             assert self.pyarr.dtype == typ

270:         assert self.pyarr.flags["OWNDATA"], (obj, intent)

275:                 assert not self.pyarr.flags["FORTRAN"]

276:                 assert self.pyarr.flags["CONTIGUOUS"]

277:                 assert (not self.pyarr_attr[6] & wrap.FORTRAN)

279:                 assert self.pyarr.flags["FORTRAN"]

280:                 assert not self.pyarr.flags["CONTIGUOUS"]

281:                 assert (self.pyarr_attr[6] & wrap.FORTRAN)

283:         assert self.arr_attr[1] == self.pyarr_attr[1]  # nd

284:         assert self.arr_attr[2] == self.pyarr_attr[2]  # dimensions

286:             assert self.arr_attr[3] == self.pyarr_attr[3], repr((

292:         assert self.arr_attr[5][-2
293:         assert self.arr_attr[6] == self.pyarr_attr[6], repr((

302:             assert self.arr_attr[5][3] >= self.type.elsize

304:             assert self.arr_attr[5][3] == self.type.elsize

305:             assert (self.arr_equal(self.pyarr, self.arr))

310:                     assert self.has_shared_memory()

332:         assert str(intent.in_.out) == "intent(in,out)"

333:         assert intent.in_.c.is_intent("c")

334:         assert not intent.in_.c.is_intent_exact("c")

335:         assert intent.in_.c.is_intent_exact("c", "in")

336:         assert intent.in_.c.is_intent_exact("in", "c")

337:         assert not intent.in_.is_intent("c")

352:         assert not a.has_shared_memory()

359:                 assert a.has_shared_memory(), repr((self.type.dtype, t.dtype))

361:                 assert not a.has_shared_memory()

373:         assert a.has_shared_memory()

378:         assert a.has_shared_memory()

393:         assert a.has_shared_memory()

411:         assert a.has_shared_memory()

417:             assert not a.has_shared_memory()

423:         assert not a.has_shared_memory()

430:             assert not a.has_shared_memory()

438:                 assert a.has_shared_memory()

440:                 assert not a.has_shared_memory()

448:                 assert a.has_shared_memory()

450:                 assert not a.has_shared_memory()

458:             assert not a.has_shared_memory()

466:             assert not a.has_shared_memory()

475:             assert a.has_shared_memory()

478:             assert a.has_shared_memory()

482:             assert a.has_shared_memory()

485:             assert a.has_shared_memory(), repr(t.dtype)

516:         assert a.arr.shape == shape

520:         assert a.arr.shape == shape

536:         assert a.arr.shape == shape

537:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

541:         assert a.arr.shape == shape

542:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

543:         assert a.arr.flags["FORTRAN"] and not a.arr.flags["CONTIGUOUS"]

547:         assert a.arr.shape == shape

548:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

549:         assert not a.arr.flags["FORTRAN"] and a.arr.flags["CONTIGUOUS"]

565:         assert a.arr.shape == shape

566:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

570:         assert a.arr.shape == shape

571:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

572:         assert a.arr.flags["FORTRAN"] and not a.arr.flags["CONTIGUOUS"]

576:         assert a.arr.shape == shape

577:         assert a.arr_equal(a.arr, np.zeros(shape, dtype=self.type.dtype))

578:         assert not a.arr.flags["FORTRAN"] and a.arr.flags["CONTIGUOUS"]

584:         assert a.arr.shape == shape

585:         assert not a.has_shared_memory()

591:         assert a.arr.shape == shape

592:         assert not a.has_shared_memory()

595:         assert a.arr.shape == shape

596:         assert not a.has_shared_memory()

600:         assert not obj.flags["FORTRAN"] and obj.flags["CONTIGUOUS"]

603:         assert obj[1][2] == a.arr[1][2], repr((obj, a.arr))

605:         assert obj[1][2] == a.arr[1][2] == np.array(54, dtype=self.type.dtype)

606:         assert a.arr is obj

607:         assert obj.flags["FORTRAN"]  # obj attributes are changed inplace!

608:         assert not obj.flags["CONTIGUOUS"]

615:             assert obj.dtype.type == t.type

616:             assert obj.dtype.type is not self.type.type

617:             assert not obj.flags["FORTRAN"] and obj.flags["CONTIGUOUS"]

620:             assert obj[1][2] == a.arr[1][2], repr((obj, a.arr))

622:             assert obj[1][2] == a.arr[1][2] == np.array(54,

624:             assert a.arr is obj

625:             assert obj.flags["FORTRAN"]  # obj attributes changed inplace!

626:             assert not obj.flags["CONTIGUOUS"]

627:             assert obj.dtype.type is self.type.type  # obj changed inplace!

Total asserts: 93

Filename: numpy/f2py/tests/test_return_real.py
14:         assert abs(t(234) - 234.0) <= err

15:         assert abs(t(234.6) - 234.6) <= err

16:         assert abs(t("234") - 234) <= err

17:         assert abs(t("234.6") - 234.6) <= err

18:         assert abs(t(-234) + 234) <= err

19:         assert abs(t([234]) - 234) <= err

20:         assert abs(t((234, )) - 234.0) <= err

21:         assert abs(t(array(234)) - 234.0) <= err

22:         assert abs(t(array([234])) - 234.0) <= err

23:         assert abs(t(array([[234]])) - 234.0) <= err

24:         assert abs(t(array([234], "b")) + 22) <= err

25:         assert abs(t(array([234], "h")) - 234.0) <= err

26:         assert abs(t(array([234], "i")) - 234.0) <= err

27:         assert abs(t(array([234], "l")) - 234.0) <= err

28:         assert abs(t(array([234], "B")) - 234.0) <= err

29:         assert abs(t(array([234], "f")) - 234.0) <= err

30:         assert abs(t(array([234], "d")) - 234.0) <= err

32:             assert t(1e200) == t(1e300)  # inf

45:             assert repr(r) in ["inf", "Infinity"]

Total asserts: 19

Filename: numpy/f2py/tests/test_symbolic.py
40:             assert s1 == s

55:         assert x.op == Op.SYMBOL

56:         assert repr(x) == "Expr(Op.SYMBOL, 'x')"

57:         assert x == x

58:         assert x != y

59:         assert hash(x) is not None

63:         assert n.op == Op.INTEGER

64:         assert repr(n) == "Expr(Op.INTEGER, (123, 4))"

65:         assert n == n

66:         assert n != m

67:         assert hash(n) is not None

71:         assert fn.op == Op.REAL

72:         assert repr(fn) == "Expr(Op.REAL, (12.3, 4))"

73:         assert fn == fn

74:         assert fn != fm

75:         assert hash(fn) is not None

79:         assert c.op == Op.COMPLEX

80:         assert repr(c) == ("Expr(Op.COMPLEX, (Expr(Op.INTEGER, (1, 4)),"

82:         assert c == c

83:         assert c != c2

84:         assert hash(c) is not None

88:         assert s.op == Op.STRING

89:         assert repr(s) == "Expr(Op.STRING, (\"'123'\", 1))", repr(s)

90:         assert s == s

91:         assert s != s2

95:         assert a.op == Op.ARRAY

96:         assert repr(a) == ("Expr(Op.ARRAY, (Expr(Op.INTEGER, (123, 4)),"

98:         assert a == a

99:         assert a != b

103:         assert t.op == Op.TERMS

104:         assert repr(t) == "Expr(Op.TERMS, {Expr(Op.SYMBOL, 'x')
105:         assert t == t

106:         assert t != u

107:         assert hash(t) is not None

111:         assert v.op == Op.FACTORS

112:         assert repr(v) == "Expr(Op.FACTORS, {Expr(Op.SYMBOL, 'x')
113:         assert v == v

114:         assert w != v

115:         assert hash(v) is not None

119:         assert t.op == Op.TERNARY

120:         assert t == t

121:         assert t != u

122:         assert hash(t) is not None

126:         assert e.op == Op.RELATIONAL

127:         assert e == e

128:         assert e != f

129:         assert hash(e) is not None

140:         assert str(x) == "x"

141:         assert str(n) == "123"

142:         assert str(a) == "[123, 456]"

143:         assert str(c) == "(123, 456)"

145:         assert str(Expr(Op.TERMS, {x
146:         assert str(Expr(Op.TERMS, {x
147:         assert str(Expr(Op.TERMS, {x
148:         assert str(Expr(Op.TERMS, {x
149:         assert str(Expr(Op.TERMS, {x
150:         assert str(Expr(Op.TERMS, {x
151:         assert str(Expr(Op.TERMS, {x
152:         assert str(Expr(Op.TERMS, {x
153:         assert str(Expr(Op.TERMS, {x
155:         assert str(Expr(Op.FACTORS, {x
156:         assert str(Expr(Op.FACTORS, {x
157:         assert str(Expr(Op.FACTORS, {x
158:         assert str(Expr(Op.FACTORS, {x
159:         assert str(Expr(Op.FACTORS, {x
160:         assert str(Expr(Op.FACTORS, {x
163:         assert str(v) == "x ** 2 * (x + y) ** 3", str(v)

165:         assert str(v) == "x ** 2 * (x * y) ** 3", str(v)

167:         assert str(Expr(Op.APPLY, ("f", (), {}))) == "f()"

168:         assert str(Expr(Op.APPLY, ("f", (x, ), {}))) == "f(x)"

169:         assert str(Expr(Op.APPLY, ("f", (x, y), {}))) == "f(x, y)"

170:         assert str(Expr(Op.INDEXING, ("f", x))) == "f[x]"

172:         assert str(as_ternary(x, y, z)) == "merge(y, z, x)"

173:         assert str(as_eq(x, y)) == "x .eq. y"

174:         assert str(as_ne(x, y)) == "x .ne. y"

175:         assert str(as_lt(x, y)) == "x .lt. y"

176:         assert str(as_le(x, y)) == "x .le. y"

177:         assert str(as_gt(x, y)) == "x .gt. y"

178:         assert str(as_ge(x, y)) == "x .ge. y"

187:         assert Expr(Op.FACTORS, {x
188:         assert (Expr(Op.FACTORS, {

191:         assert Expr(Op.FACTORS, {

195:         assert as_apply(ArithOp.DIV, x,

197:         assert (as_apply(ArithOp.DIV, x,

199:         assert (as_apply(ArithOp.DIV, x - y, x +

201:         assert (x + (x - y) / (x + y) +

204:         assert as_ternary(x, y, z).tostring(language=language) == "(x?y
205:         assert as_eq(x, y).tostring(language=language) == "x == y"

206:         assert as_ne(x, y).tostring(language=language) == "x != y"

207:         assert as_lt(x, y).tostring(language=language) == "x < y"

208:         assert as_le(x, y).tostring(language=language) == "x <= y"

209:         assert as_gt(x, y).tostring(language=language) == "x > y"

210:         assert as_ge(x, y).tostring(language=language) == "x >= y"

217:         assert x + x == Expr(Op.TERMS, {x
218:         assert x - x == Expr(Op.INTEGER, (0, 4))

219:         assert x + y == Expr(Op.TERMS, {x
220:         assert x - y == Expr(Op.TERMS, {x
221:         assert x * x == Expr(Op.FACTORS, {x
222:         assert x * y == Expr(Op.FACTORS, {x
224:         assert +x == x

225:         assert -x == Expr(Op.TERMS, {x
226:         assert 2 * x == Expr(Op.TERMS, {x
227:         assert 2 + x == Expr(Op.TERMS, {x
228:         assert 2 * x + 3 * y == Expr(Op.TERMS, {x
229:         assert (x + y) * 2 == Expr(Op.TERMS, {x
231:         assert x**2 == Expr(Op.FACTORS, {x
232:         assert (x + y)**2 == Expr(

243:         assert (x + y) * x == x**2 + x * y

244:         assert (x + y)**2 == x**2 + 2 * x * y + y**2

245:         assert (x + y)**2 + (x - y)**2 == 2 * x**2 + 2 * y**2

246:         assert (x + y) * z == x * z + y * z

247:         assert z * (x + y) == x * z + y * z

249:         assert (x / 2) == as_apply(ArithOp.DIV, x, as_number(2))

250:         assert (2 * x / 2) == x

251:         assert (3 * x / 2) == as_apply(ArithOp.DIV, 3 * x, as_number(2))

252:         assert (4 * x / 2) == 2 * x

253:         assert (5 * x / 2) == as_apply(ArithOp.DIV, 5 * x, as_number(2))

254:         assert (6 * x / 2) == 3 * x

255:         assert ((3 * 5) * x / 6) == as_apply(ArithOp.DIV, 5 * x, as_number(2))

256:         assert (30 * x**2 * y**4 / (24 * x**3 * y**3)) == as_apply(

258:         assert ((15 * x / 6) / 5) == as_apply(ArithOp.DIV, x,

260:         assert (x / (5 / x)) == as_apply(ArithOp.DIV, x**2, as_number(5))

262:         assert (x / 2.0) == Expr(Op.TERMS, {x
267:         assert s // t == Expr(Op.STRING, ('"ABC123"', 1))

268:         assert s // x == Expr(Op.CONCAT, (s, x))

269:         assert x // s == Expr(Op.CONCAT, (x, s))

272:         assert -c == as_complex(-1.0, -2.0)

273:         assert c + c == as_expr((1 + 2j) * 2)

274:         assert c * c == as_expr((1 + 2j)**2)

282:         assert x.substitute({x
283:         assert (x + y).substitute({x
284:         assert (x * y).substitute({x
285:         assert (x**4).substitute({x
286:         assert (x / y).substitute({x
287:         assert x.substitute({x
288:         assert a.substitute({x
290:         assert as_ternary(x, y,

292:         assert as_eq(x, y).substitute({x
304:         assert fromstring("x") == x

305:         assert fromstring("+ x") == x

306:         assert fromstring("-  x") == -x

307:         assert fromstring("x + y") == x + y

308:         assert fromstring("x + 1") == x + 1

309:         assert fromstring("x * y") == x * y

310:         assert fromstring("x * 2") == x * 2

311:         assert fromstring("x / y") == x / y

312:         assert fromstring("x ** 2", language=Language.Python) == x**2

313:         assert fromstring("x ** 2 ** 3", language=Language.Python) == x**2**3

314:         assert fromstring("(x + y) * z") == (x + y) * z

316:         assert fromstring("f(x)") == f(x)

317:         assert fromstring("f(x,y)") == f(x, y)

318:         assert fromstring("f[x]") == f[x]

319:         assert fromstring("f[x][y]") == f[x][y]

321:         assert fromstring('"ABC"') == s

322:         assert (normalize(

325:         assert fromstring('f("ABC")') == f(s)

326:         assert fromstring('MYSTRKIND_"ABC"') == as_string('"ABC"', "MYSTRKIND")

328:         assert fromstring("(/x, y/)") == a, fromstring("(/x, y/)")

329:         assert fromstring("f((/x, y/))") == f(a)

330:         assert fromstring("(/(x+y)*z/)") == as_array(((x + y) * z, ))

332:         assert fromstring("123") == as_number(123)

333:         assert fromstring("123_2") == as_number(123, 2)

334:         assert fromstring("123_myintkind") == as_number(123, "myintkind")

336:         assert fromstring("123.0") == as_number(123.0, 4)

337:         assert fromstring("123.0_4") == as_number(123.0, 4)

338:         assert fromstring("123.0_8") == as_number(123.0, 8)

339:         assert fromstring("123.0e0") == as_number(123.0, 4)

340:         assert fromstring("123.0d0") == as_number(123.0, 8)

341:         assert fromstring("123d0") == as_number(123.0, 8)

342:         assert fromstring("123e-0") == as_number(123.0, 4)

343:         assert fromstring("123d+0") == as_number(123.0, 8)

344:         assert fromstring("123.0_myrealkind") == as_number(123.0, "myrealkind")

345:         assert fromstring("3E4") == as_number(30000.0, 4)

347:         assert fromstring("(1, 2)") == as_complex(1, 2)

348:         assert fromstring("(1e2, PI)") == as_complex(as_number(100.0),

351:         assert fromstring("[1, 2]") == as_array((as_number(1), as_number(2)))

353:         assert fromstring("POINT(x, y=1)") == as_apply(as_symbol("POINT"),

356:         assert fromstring(

364:         assert fromstring("x?y
366:         assert fromstring("*x") == as_deref(x)

367:         assert fromstring("**x") == as_deref(as_deref(x))

368:         assert fromstring("&x") == as_ref(x)

369:         assert fromstring("(*x) * (*y)") == as_deref(x) * as_deref(y)

370:         assert fromstring("(*x) * *y") == as_deref(x) * as_deref(y)

371:         assert fromstring("*x * *y") == as_deref(x) * as_deref(y)

372:         assert fromstring("*x**y") == as_deref(x) * as_deref(y)

374:         assert fromstring("x == y") == as_eq(x, y)

375:         assert fromstring("x != y") == as_ne(x, y)

376:         assert fromstring("x < y") == as_lt(x, y)

377:         assert fromstring("x > y") == as_gt(x, y)

378:         assert fromstring("x <= y") == as_le(x, y)

379:         assert fromstring("x >= y") == as_ge(x, y)

381:         assert fromstring("x .eq. y", language=Language.Fortran) == as_eq(x, y)

382:         assert fromstring("x .ne. y", language=Language.Fortran) == as_ne(x, y)

383:         assert fromstring("x .lt. y", language=Language.Fortran) == as_lt(x, y)

384:         assert fromstring("x .gt. y", language=Language.Fortran) == as_gt(x, y)

385:         assert fromstring("x .le. y", language=Language.Fortran) == as_le(x, y)

386:         assert fromstring("x .ge. y", language=Language.Fortran) == as_ge(x, y)

399:         assert x.traverse(replace_visit) == z

400:         assert y.traverse(replace_visit) == y

401:         assert z.traverse(replace_visit) == z

402:         assert (f(y)).traverse(replace_visit) == f(y)

403:         assert (f(x)).traverse(replace_visit) == f(z)

404:         assert (f[y]).traverse(replace_visit) == f[y]

405:         assert (f[z]).traverse(replace_visit) == f[z]

406:         assert (x + y + z).traverse(replace_visit) == (2 * z + y)

407:         assert (x +

410:         assert as_eq(x, y).traverse(replace_visit) == as_eq(z, y)

426:         assert function_symbols == {f}

427:         assert symbols == {x, y, z}

436:         assert symbols == {x, y, z, f}

448:         assert symbols == {x}

455:         assert x.linear_solve(x) == (as_number(1), as_number(0))

456:         assert (x + 1).linear_solve(x) == (as_number(1), as_number(1))

457:         assert (2 * x).linear_solve(x) == (as_number(2), as_number(0))

458:         assert (2 * x + 3).linear_solve(x) == (as_number(2), as_number(3))

459:         assert as_number(3).linear_solve(x) == (as_number(0), as_number(3))

460:         assert y.linear_solve(x) == (as_number(0), y)

461:         assert (y * z).linear_solve(x) == (as_number(0), y * z)

463:         assert (x + y).linear_solve(x) == (as_number(1), y)

464:         assert (z * x + y).linear_solve(x) == (z, y)

465:         assert ((z + y) * x + y).linear_solve(x) == (z + y, y)

466:         assert (z * y * x + y).linear_solve(x) == (z * y, y)

475:         assert as_numer_denom(x) == (x, as_number(1))

476:         assert as_numer_denom(x / n) == (x, n)

477:         assert as_numer_denom(n / x) == (n, x)

478:         assert as_numer_denom(x / y) == (x, y)

479:         assert as_numer_denom(x * y) == (x * y, as_number(1))

480:         assert as_numer_denom(n + x / y) == (x + n * y, y)

481:         assert as_numer_denom(n + x / (y - x / n)) == (y * n**2, y * n - x)

488:         assert x.polynomial_atoms() == {x}

489:         assert n.polynomial_atoms() == set()

490:         assert (y[x]).polynomial_atoms() == {y[x]}

491:         assert (y(x)).polynomial_atoms() == {y(x)}

492:         assert (y(x) + x).polynomial_atoms() == {y(x), x}

493:         assert (y(x) * x[y]).polynomial_atoms() == {y(x), x[y]}

494:         assert (y(x)**x).polynomial_atoms() == {y(x)}

Total asserts: 237

Filename: numpy/f2py/tests/test_size.py
14:         assert r == [0]

17:         assert r == [3]

20:         assert np.allclose(r, [3, 7])

23:         assert np.allclose(r, [3, 7, 11])

28:         assert np.allclose(r.T, np.array([[]]))

31:         assert np.allclose(r, [[1.], [2.]])

34:         assert np.allclose(r, [[1, 4], [2, 5], [3, 6]])

39:         assert np.allclose(r, [])

42:         assert np.allclose(r, [1, 2])

45:         assert np.allclose(r, [1, 2, 3, 4, 5, 6])

Total asserts: 10

Filename: numpy/f2py/tests/test_callback.py
50:         assert self.module.t.__doc__ == expected

55:         assert r == 4

57:         assert r == 5

59:         assert r == 6

61:         assert r == 12

63:         assert r == 180

65:         assert r == 180

68:         assert r == 17

70:         assert r == 11

72:         assert r == 11

83:         assert r == 7

85:         assert r == 9

98:         assert r == 0

117:         assert res == 0

131:             assert r == 123

139:                     assert r == 42

163:             assert str(msg).startswith("Callback global_f not defined")

168:             assert str(msg).startswith("cb
172:         assert r == 3

176:         assert r == 4

182:             assert str(msg).startswith("Callback global_f not defined")

186:         assert r == 5

190:         assert r == 3

211:         assert r == 123 + 1 + 2 + 3

228:         assert r == 123 + 1

Total asserts: 25

Filename: numpy/f2py/tests/test_string.py
16:         assert inp == pytest.approx(strings)

19:         assert out == pytest.approx(expected)

33:         assert a.tobytes() == b"123\0\0"

34:         assert b.tobytes() == b"B23\0\0"

35:         assert c.tobytes() == b"123"

36:         assert d.tobytes() == b"D23"

54:         assert isinstance(s, bytes)

90:             assert r == expected, s

97:             assert r == expected

100:             assert rest == self._sint(s, start=4)

Total asserts: 10

Filename: numpy/f2py/tests/test_module_doc.py
21:         assert self.module.mod.__doc__ == textwrap.dedent("""\

Total asserts: 1

Filename: numpy/f2py/tests/test_quoted_character.py
16:         assert self.module.foo() == (b"'", b'"', b";", b"!", b"(", b")")

Total asserts: 1

Filename: numpy/f2py/tests/test_parameter.py
28:         assert np.allclose(x, [0 + 1 + 2 * 3, 1, 2])

39:         assert np.allclose(x, [0 + 1 + 2 * 3, 1, 2])

50:         assert np.allclose(x, [0 + 1 + 2 * 6, 1, 2])

57:         assert np.allclose(x, [0 + 1 + 2 + 3 * 4, 1, 2, 3])

68:         assert np.allclose(x, [0 + 1 + 2 * 3, 1, 2])

79:         assert np.allclose(x, [0 + 1 + 2 * 3, 1, 2])

90:         assert np.allclose(x, [0 + 1 * 3 * 3 + 2 * 3 * 3, 1 * 3, 2 * 3])

101:         assert np.allclose(x, [0 + 1 * 3 * 3 + 2 * 3 * 3, 1 * 3, 2 * 3])

112:         assert np.allclose(x, [0 + 1 * 3 * 3 + 2 * 3 * 3, 1 * 3, 2 * 3])

Total asserts: 9

Filename: numpy/f2py/tests/test_abstract_interface.py
13:         assert self.module.ops_module.foo(3, 5) == (8, 13)

20:         assert len(mod) == 1

21:         assert len(mod[0]["body"]) == 1

22:         assert mod[0]["body"][0]["block"] == "abstract interface"

Total asserts: 4

Filename: numpy/f2py/tests/test_semicolon_split.py
33:         assert self.module.foo() == 42

65:         assert self.module.foo() == 42

Total asserts: 2

Filename: numpy/f2py/tests/test_compile_function.py
62:             assert ret_val == 0

73:         assert calc_result == 15

83:     assert ret_val == 1

99:         assert ret_val == 127

117:         assert ret_val == 0

Total asserts: 5

Filename: numpy/f2py/tests/test_block_docstring.py
17:         assert self.module.block.__doc__ == expected

Total asserts: 1

Filename: numpy/f2py/tests/test_return_integer.py
9:         assert t(123) == 123

10:         assert t(123.6) == 123

11:         assert t("123") == 123

12:         assert t(-123) == -123

13:         assert t([123]) == 123

14:         assert t((123, )) == 123

15:         assert t(array(123)) == 123

16:         assert t(array([123])) == 123

17:         assert t(array([[123]])) == 123

18:         assert t(array([123], "b")) == 123

19:         assert t(array([123], "h")) == 123

20:         assert t(array([123], "i")) == 123

21:         assert t(array([123], "l")) == 123

22:         assert t(array([123], "B")) == 123

23:         assert t(array([123], "f")) == 123

24:         assert t(array([123], "d")) == 123

Total asserts: 16

Filename: numpy/f2py/tests/test_return_character.py
13:             assert t(23) == b"2"

15:             assert r == b"a"

17:             assert r == b"a"

19:             assert r == b"M"

21:             assert t(23) == b"23"

22:             assert t("123456789abcdef") == b"123456789a"

24:             assert t(23) == b"23"

25:             assert t("ab") == b"ab"

26:             assert t("123456789abcdef") == b"12345"

Total asserts: 9

Filename: numpy/f2py/tests/test_return_complex.py
13:         assert abs(t(234j) - 234.0j) <= err

14:         assert abs(t(234.6) - 234.6) <= err

15:         assert abs(t(234) - 234.0) <= err

16:         assert abs(t(234.6 + 3j) - (234.6 + 3j)) <= err

17:         # assert abs(t('234')-234.)<=err

18:         # assert abs(t('234.6')-234.6)<=err

19:         assert abs(t(-234) + 234.0) <= err

20:         assert abs(t([234]) - 234.0) <= err

21:         assert abs(t((234, )) - 234.0) <= err

22:         assert abs(t(array(234)) - 234.0) <= err

23:         assert abs(t(array(23 + 4j, "F")) - (23 + 4j)) <= err

24:         assert abs(t(array([234])) - 234.0) <= err

25:         assert abs(t(array([[234]])) - 234.0) <= err

26:         assert abs(t(array([234], "b")) + 22.0) <= err

27:         assert abs(t(array([234], "h")) - 234.0) <= err

28:         assert abs(t(array([234], "i")) - 234.0) <= err

29:         assert abs(t(array([234], "l")) - 234.0) <= err

30:         assert abs(t(array([234], "q")) - 234.0) <= err

31:         assert abs(t(array([234], "f")) - 234.0) <= err

32:         assert abs(t(array([234], "d")) - 234.0) <= err

33:         assert abs(t(array([234 + 3j], "F")) - (234 + 3j)) <= err

34:         assert abs(t(array([234], "D")) - 234.0) <= err

47:             assert repr(r) in ["(inf+0j)", "(Infinity+0j)"]

Total asserts: 23

Filename: numpy/f2py/tests/test_crackfortran.py
18:         assert np.allclose(k, w + 1)

20:         assert np.allclose(k, w + 1)

21:         assert self.module.t0(23) == b"2"

28:         assert len(mod) == 1

30:         assert "private" in mod["vars"]["a"]["attrspec"]

31:         assert "public" not in mod["vars"]["a"]["attrspec"]

32:         assert "private" in mod["vars"]["b"]["attrspec"]

33:         assert "public" not in mod["vars"]["b"]["attrspec"]

34:         assert "private" not in mod["vars"]["seta"]["attrspec"]

35:         assert "public" in mod["vars"]["seta"]["attrspec"]

40:         assert len(mod) == 1

42:         assert "private" in mod["vars"]["a"]["attrspec"]

43:         assert "public" not in mod["vars"]["a"]["attrspec"]

44:         assert "private" not in mod["vars"]["seta"]["attrspec"]

45:         assert "public" in mod["vars"]["seta"]["attrspec"]

50:         assert len(mod) == 1

52:         assert set(tt['a']['attrspec']) == {'private', 'bind(c)'}

53:         assert set(tt['b_']['attrspec']) == {'public', 'bind(c)'}

54:         assert set(tt['c']['attrspec']) == {'public'}

61:         assert len(mod) == 1

63:         assert "body" in mod and len(mod["body"]) == 9

64:         assert mod["body"][1]["name"] == "operator(.item.)"

65:         assert "implementedby" in mod["body"][1]

66:         assert mod["body"][1]["implementedby"] == \

68:         assert mod["body"][2]["name"] == "operator(==)"

69:         assert "implementedby" in mod["body"][2]

70:         assert mod["body"][2]["implementedby"] == ["items_are_equal"]

71:         assert mod["body"][3]["name"] == "assignment(=)"

72:         assert "implementedby" in mod["body"][3]

73:         assert mod["body"][3]["implementedby"] == \

86:         assert r == 123

93:         assert r == 123

102:         assert r == (1, 2)

111:             assert markinnerspaces(i) == i

114:         assert markinnerspaces("a 'b c' \\' \\'") == "a 'b@_@c' \\' \\'"

115:         assert markinnerspaces(r'a "b c" \" \"') == r'a "b@_@c" \" \"'

118:         assert markinnerspaces("a 'b c\" \" d' e") == "a 'b@_@c\"@_@\"@_@d' e"

119:         assert markinnerspaces("a \"b c' ' d\" e") == "a \"b@_@c'@_@'@_@d\" e"

122:         assert markinnerspaces("a 'b c' 'd e'") == "a 'b@_@c' 'd@_@e'"

123:         assert markinnerspaces(r'a "b c" "d e"') == r'a "b@_@c" "d@_@e"'

202:             assert a.size == sz

225:             assert sz == sz1, (n, n1, sz, sz1)

232:         assert len(mod) == 1

233:         assert mod[0]["vars"]["abar"]["="] == "bar('abar')"

Total asserts: 44

Filename: numpy/f2py/tests/test_f2py2e.py
94:         assert "Saving signatures to file" in out

95:         assert Path(f'{opath}').exists()

107:         assert "Saving signatures to file" in out

122:             assert "Use --overwrite-signature to overwrite" in err

142:             assert (

146:             assert f'Constructing wrapper function "{rkey}"' in out

165:             assert (

169:             assert f'Constructing wrapper function "{rkey}"' in out

195:             assert (

199:             assert f'Constructing wrapper function "{rkey}"' in out

214:     assert Path.exists(foutl.cmodf)

216:     assert Path.exists(foutl.wrap77)

233:         assert capslo.search(out) is not None

234:         assert capshi.search(out) is None

241:         assert capslo.search(out) is None

242:         assert capshi.search(out) is not None

266:         assert capslo.search(out) is not None

267:         assert capshi.search(out) is None

280:         assert capslo.search(out) is None

281:         assert capshi.search(out) is not None

298:         assert f"Wrote C/API module \"{mname}\"" in out

315:         assert "Saving signatures to file" in out

331:         assert "Documentation is saved to file" in out

333:             assert "\\documentclass" in otex.read()

349:         assert "Documentation is saved to file" not in out

369:         assert "Documentation is saved to file" in out

371:             assert "\\documentclass" not in otex.read()

387:         assert "ReST Documentation is saved to file" in out

389:             assert r".. -*- rest -*-" in orst.read()

405:         assert "ReST Documentation is saved to file" not in out

421:             assert r"#define DEBUGCFUNCS" in ocmod.read()

450:         assert rout.stdout == eout

451:         assert rout.stderr == eerr

467:     assert r"Fortran 77 wrappers are saved to" in out

476:         assert r"Fortran 77 wrappers are saved to" in out

492:         assert r"Fortran 77 wrappers are saved to" not in out

514:             assert "#include <stdbool.h>" in ocmr

515:             assert "#include <stdio.h>" in ocmr

556:         assert len(out) == 0

570:         assert "analyzeline" in out

584:         assert np.__version__ == out.strip()

600:         assert rout.stdout == eout

Total asserts: 42

Filename: numpy/f2py/tests/test_regression.py
22:         assert np.allclose(x, [3, 1, 2])

41:         assert np.allclose(rval, expval)

53:         assert hasattr(self.module, "__f2py_numpy_version__")

56:         assert isinstance(self.module.__f2py_numpy_version__, str)

59:         assert np.__version__ == self.module.__f2py_numpy_version__

66:         assert fname in fnames_in_dir

Total asserts: 6

Filename: numpy/f2py/f2py2e.py
576:     assert len(flib_flags) <= 2, repr(flib_flags)

Total asserts: 1

Filename: numpy/f2py/func2subr.py
79:     assert isfunction(rout)

185:     assert issubroutine(rout)

Total asserts: 2

Filename: numpy/f2py/symbolic.py
163:         assert isinstance(op, Op)

169:             assert isinstance(data, tuple) and len(data) == 2

170:             assert isinstance(data[0], int)

171:             assert isinstance(data[1], (int, str)), data

175:             assert isinstance(data, tuple) and len(data) == 2

176:             assert isinstance(data[0], float)

177:             assert isinstance(data[1], (int, str)), data

180:             assert isinstance(data, tuple) and len(data) == 2

184:             assert isinstance(data, tuple) and len(data) == 2

185:             assert (isinstance(data[0], str)

187:             assert isinstance(data[1], (int, str)), data

190:             assert hash(data) is not None

193:             assert isinstance(data, tuple)

194:             assert all(isinstance(item, Expr) for item in data), data

198:             assert isinstance(data, dict)

202:             assert isinstance(data, tuple) and len(data) == 3

204:             assert hash(data[0]) is not None

205:             assert isinstance(data[1], tuple)

206:             assert isinstance(data[2], dict)

209:             assert isinstance(data, tuple) and len(data) == 2

211:             assert hash(data[0]) is not None

214:             assert isinstance(data, tuple) and len(data) == 3

217:             assert isinstance(data, Expr)

220:             assert isinstance(data, tuple) and len(data) == 3

593:                 assert paren == 'ROUND', (paren, value)

840:             assert isinstance(coeff, number_types)

1188:     assert '"' not in new_s

1189:     assert "'" not in new_s

1249:     assert s.startswith('@__f2py_PARENTHESIS_'), s

1323:         assert isinstance(s, str), (type(s), s)

1350:             assert context == 'expr', context

1389:                     assert op == '-'

1416:                     assert op == '/'

1498:                 assert paren == 'SQUARE'

Total asserts: 34

Filename: numpy/testing/tests/test_utils.py
10:     assert_equal, assert_array_equal, assert_almost_equal,

11:     assert_array_almost_equal, assert_array_less, build_err_msg, raises,

12:     assert_raises, assert_warns, assert_no_warnings, assert_allclose,

13:     assert_approx_equal, assert_array_almost_equal_nulp, assert_array_max_ulp,

14:     clear_and_catch_warnings, suppress_warnings, assert_string_equal, assert_,

15:     tempdir, temppath, assert_no_gc_cycles, HAS_REFCOUNT

23:         self._assert_func(a, b)

26:         with assert_raises(AssertionError)
27:             self._assert_func(a, b)

69:         self._assert_func = assert_array_equal

93:         assert_raises(AssertionError, self._assert_func, x, y)

96:         self._assert_func(x, y)

100:         assert_raises(AssertionError, self._assert_func, x, y)

103:         self._assert_func(x, y)

161:             assert_equal(len(l), 1)

188:         assert_(type(a == a), bool)

189:         assert_(a == a)

190:         assert_(a != b)

204:         with assert_raises(TypeError)
214:                 np.testing.assert_array_equal(

230:         assert_equal(a, b)

239:         assert_equal(a, b)

250:         assert_equal(a, b)

261:         assert_equal(a, b)

267:         self._assert_func = assert_equal

270:         self._assert_func(np.nan, np.nan)

271:         self._assert_func([np.nan], [np.nan])

276:         self._assert_func(np.inf, np.inf)

277:         self._assert_func([np.inf], [np.inf])

313:             self._assert_func(a, b)

314:             self._assert_func([a], [b])

318:             self._assert_func(a, b)

319:             self._assert_func([a], [b])

332:         self._assert_func('ab', 'ab')

336:         self._assert_func(complex(1, 2), complex(1, 2))

337:         self._assert_func(complex(1, np.nan), complex(1, np.nan))

348:         self._assert_func(x, x)

362:         self._assert_func = assert_array_almost_equal

372:         self._assert_func(1.499999, 0.0, decimal=0)

373:         assert_raises(AssertionError,

374:                           lambda
377:         self._assert_func([1.499999], [0.0], decimal=0)

378:         assert_raises(AssertionError,

379:                           lambda
385:         self._assert_func(x, y, decimal=3)

386:         self._assert_func(x, y, decimal=4)

387:         assert_raises(AssertionError,

388:                 lambda
394:         self._assert_func(anan, anan)

395:         assert_raises(AssertionError,

396:                 lambda
397:         assert_raises(AssertionError,

398:                 lambda
399:         assert_raises(AssertionError,

400:                 lambda
406:         assert_raises(AssertionError,

407:                 lambda
409:         assert_raises(AssertionError,

410:                 lambda
416:         self._assert_func(a, b)

417:         self._assert_func(b, a)

418:         self._assert_func(b, b)

454:         self._assert_func(a, a)

460:         self._assert_func = assert_almost_equal

470:         self._assert_func(1.499999, 0.0, decimal=0)

471:         assert_raises(AssertionError,

472:                       lambda
475:         self._assert_func([1.499999], [0.0], decimal=0)

476:         assert_raises(AssertionError,

477:                       lambda
480:         self._assert_func(np.nan, np.nan)

481:         assert_raises(AssertionError,

482:                       lambda
483:         assert_raises(AssertionError,

484:                       lambda
485:         assert_raises(AssertionError,

486:                       lambda
489:         self._assert_func(np.inf, np.inf)

490:         self._assert_func(-np.inf, -np.inf)

491:         assert_raises(AssertionError,

492:                       lambda
493:         assert_raises(AssertionError,

494:                       lambda
500:         self._assert_func(complex(1, 2), complex(1, 2))

501:         self._assert_func(complex(1, np.nan), complex(1, np.nan))

502:         self._assert_func(complex(np.inf, np.nan), complex(np.inf, np.nan))

511:         self._assert_func(x, x)

523:             self._assert_func(x, y, decimal=12)

525:         assert_equal(msgs[3], 'Mismatched elements
526:         assert_equal(msgs[4], 'Max absolute difference
527:         assert_equal(msgs[5], 'Max relative difference
528:         assert_equal(

531:         assert_equal(

539:             self._assert_func(x, y)

541:         assert_equal(msgs[3], 'Mismatched elements
542:         assert_equal(msgs[4], 'Max absolute difference
543:         assert_equal(msgs[5], 'Max relative difference
544:         assert_equal(msgs[6], ' x
545:         assert_equal(msgs[7], ' y
551:             self._assert_func(x, y)

553:         assert_equal(msgs[3], 'Mismatched elements
554:         assert_equal(msgs[4], 'Max absolute difference
555:         assert_equal(msgs[5], 'Max relative difference
556:         assert_equal(msgs[6], ' x
557:         assert_equal(msgs[7], ' y
563:             self._assert_func(x, y)

565:         assert_equal(msgs[3], 'Mismatched elements
566:         assert_equal(msgs[4], 'Max absolute difference
567:         assert_equal(msgs[5], 'Max relative difference
574:             self._assert_func(x, y)

576:         assert_equal(msgs[3], 'Mismatched elements
577:         assert_equal(msgs[4], 'Max absolute difference
578:         assert_equal(msgs[5], 'Max relative difference
583:             self._assert_func(x, y)

585:         assert_equal(msgs[3], 'Mismatched elements
586:         assert_equal(msgs[4], 'Max absolute difference
587:         assert_equal(msgs[5], 'Max relative difference
605:         self._assert_func(a, a)

611:         self._assert_func = assert_approx_equal

617:         self._assert_func(x, y, significant=5)

618:         self._assert_func(x, y, significant=6)

619:         assert_raises(AssertionError,

620:                       lambda
626:         self._assert_func(x, y, significant=4)

627:         self._assert_func(x, y, significant=5)

628:         self._assert_func(x, y, significant=6)

629:         assert_raises(AssertionError,

630:                       lambda
636:         self._assert_func(anan, anan)

637:         assert_raises(AssertionError, lambda
638:         assert_raises(AssertionError, lambda
639:         assert_raises(AssertionError, lambda
645:         self._assert_func(anan, anan)

646:         assert_raises(AssertionError, lambda
647:         assert_raises(AssertionError, lambda
648:         assert_raises(AssertionError, lambda
654:         self._assert_func = assert_array_less

660:         self._assert_func(x, y)

661:         assert_raises(AssertionError, lambda
665:         assert_raises(AssertionError, lambda
666:         assert_raises(AssertionError, lambda
672:         self._assert_func(x, y)

673:         assert_raises(AssertionError, lambda
677:         assert_raises(AssertionError, lambda
678:         assert_raises(AssertionError, lambda
684:         self._assert_func(x, y)

685:         assert_raises(AssertionError, lambda
689:         assert_raises(AssertionError, lambda
690:         assert_raises(AssertionError, lambda
696:         self._assert_func(x, y)

697:         assert_raises(AssertionError, lambda
701:         self._assert_func(x, y)

702:         assert_raises(AssertionError, lambda
706:         assert_raises(AssertionError, lambda
712:         self._assert_func(anan, anan)

713:         assert_raises(AssertionError, lambda
714:         assert_raises(AssertionError, lambda
715:         assert_raises(AssertionError, lambda
716:         assert_raises(AssertionError, lambda
722:         assert_raises(AssertionError, lambda
723:         assert_raises(AssertionError, lambda
727:         assert_raises(AssertionError, lambda
728:         assert_raises(AssertionError, lambda
732:         self._assert_func(y, x)

733:         assert_raises(AssertionError, lambda
739:         self._assert_func(aone, ainf)

740:         self._assert_func(-ainf, aone)

741:         self._assert_func(-ainf, ainf)

742:         assert_raises(AssertionError, lambda
743:         assert_raises(AssertionError, lambda
744:         assert_raises(AssertionError, lambda
745:         assert_raises(AssertionError, lambda
746:         assert_raises(AssertionError, lambda
752:         assert_raises(AssertionError, lambda
753:         assert_raises(AssertionError, lambda
754:         assert_raises(AssertionError, lambda
755:         assert_raises(AssertionError, lambda
756:         assert_raises(AssertionError, lambda
757:         self._assert_func(-ainf, x)

803:         assert_equal(assert_warns(UserWarning, f), 3)

806:         assert_raises(AssertionError, assert_no_warnings, f)

807:         assert_equal(assert_no_warnings(lambda x
810:         assert_equal(before_filters, after_filters,

811:                      "assert_warns does not preserver warnings state")

816:         with assert_warns(UserWarning)
821:             with assert_no_warnings()
824:         assert_raises(AssertionError, no_warnings)

825:         assert_equal(before_filters, after_filters,

826:                      "assert_warns does not preserver warnings state")

837:                 assert_warns(UserWarning, f)

843:             raise AssertionError("wrong warning caught by assert_warn")

852:         assert_allclose(x, y, atol=1)

853:         assert_raises(AssertionError, assert_allclose, x, y)

858:         assert_allclose(a, b, atol=1)

859:         assert_raises(AssertionError, assert_allclose, a, b)

862:         assert_allclose(a, b)

863:         assert_raises(AssertionError, assert_allclose, a, b, rtol=1e-9)

865:         assert_allclose(6, 10, rtol=0.5)

866:         assert_raises(AssertionError, assert_allclose, 10, 6, rtol=0.5)

871:         assert_allclose(a, a)

878:             assert_allclose(a, b)

880:         assert_('Mismatched elements
888:         assert_allclose(a, b, equal_nan=True)

893:         assert_raises(AssertionError, assert_allclose, a, b, equal_nan=False)

897:         # of these functions use assert_array_compare under the hood.)

901:         assert_array_equal(a, b)

902:         assert_array_almost_equal(a, b)

903:         assert_array_less(a, b)

904:         assert_allclose(a, b)

911:             assert_allclose(a, b)

913:         assert_('Max relative difference
918:         assert_allclose(a, a)

934:         assert_array_almost_equal_nulp(x, y, nulp)

939:         assert_array_almost_equal_nulp(x, y, nulp)

949:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

954:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

966:         assert_array_max_ulp(nan1_f64, nan2_f64, 0)

976:         assert_array_almost_equal_nulp(x, y, nulp)

980:         assert_array_almost_equal_nulp(x, y, nulp)

990:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

995:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1007:         assert_array_max_ulp(nan1_f32, nan2_f32, 0)

1017:         assert_array_almost_equal_nulp(x, y, nulp)

1021:         assert_array_almost_equal_nulp(x, y, nulp)

1031:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1036:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1048:         assert_array_max_ulp(nan1_f16, nan2_f16, 0)

1059:         assert_array_almost_equal_nulp(xi, x + y*1j, nulp)

1060:         assert_array_almost_equal_nulp(xi, y + x*1j, nulp)

1064:         assert_array_almost_equal_nulp(xi, y + y*1j, nulp)

1068:         assert_array_almost_equal_nulp(xi, x + y*1j, nulp)

1069:         assert_array_almost_equal_nulp(xi, y + x*1j, nulp)

1071:         assert_array_almost_equal_nulp(xi, y + y*1j, nulp)

1082:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1084:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1089:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1094:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1096:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1099:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1111:         assert_array_almost_equal_nulp(xi, x + y*1j, nulp)

1112:         assert_array_almost_equal_nulp(xi, y + x*1j, nulp)

1114:         assert_array_almost_equal_nulp(xi, y + y*1j, nulp)

1118:         assert_array_almost_equal_nulp(xi, x + y*1j, nulp)

1119:         assert_array_almost_equal_nulp(xi, y + x*1j, nulp)

1121:         assert_array_almost_equal_nulp(xi, y + y*1j, nulp)

1132:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1134:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1137:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1142:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1144:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1147:         assert_raises(AssertionError, assert_array_almost_equal_nulp,

1155:         assert_array_max_ulp(x, x, maxulp=0)

1162:         assert_array_max_ulp(x, x+eps, maxulp=20)

1169:         assert_array_max_ulp(x, x+eps, maxulp=200)

1175:             assert_array_max_ulp(inf, big, maxulp=200)

1190:             assert_raises(AssertionError,

1191:                           lambda
1193:             assert_raises(AssertionError,

1194:                           lambda
1196:             assert_raises(AssertionError,

1197:                           lambda
1199:             assert_raises(AssertionError,

1200:                           lambda
1202:             assert_raises(AssertionError,

1203:                           lambda
1209:         assert_string_equal("hello", "hello")

1210:         assert_string_equal("hello\nmultiline", "hello\nmultiline")

1213:             assert_string_equal("foo\nbar", "hello\nbar")

1215:         assert_equal(msg, "Differences in strings
1217:         assert_raises(AssertionError,

1218:                       lambda
1221:         assert_string_equal("a+*b", "a+*b")

1223:         assert_raises(AssertionError,

1224:                       lambda
1227: def assert_warn_len_equal(mod, n_in_context, py34=None, py37=None)
1259:     assert_equal(num_warns, n_in_context)

1262:     # assert_warn_len_equal is called under

1266:     # check that no assertion is uncaught

1274:     assert_warn_len_equal(mod=mod_inst,

1285:     assert_warn_len_equal(mod=mod_inst,

1304:     assert_equal(getattr(my_mod, '__warningregistry__', {}), {})

1308:     assert_equal(my_mod.__warningregistry__, {})

1314:     assert_warn_len_equal(my_mod, 1, py37=0)

1319:     assert_warn_len_equal(my_mod, 1, py37=0)

1321:     # Python 3.4 (see comments in `assert_warn_len_equal`)

1326:     assert_warn_len_equal(my_mod, 2, py34=1, py37=0)

1332:     assert_equal(getattr(my_mod, '__warningregistry__', {}), {})

1343:     assert_warn_len_equal(my_mod, 0)

1353:     assert_equal(len(sup.log), 1)

1354:     assert_equal(sup.log[0].message.args[0], "Some warning")

1355:     assert_warn_len_equal(my_mod, 0, py37=0)

1361:     assert_warn_len_equal(my_mod, 0)

1366:     assert_warn_len_equal(my_mod, 0)

1373:     assert_warn_len_equal(my_mod, 1, py37=0)

1378:     assert_equal(getattr(my_mod, '__warningregistry__', {}), {})

1384:     assert_warn_len_equal(my_mod, 0)

1389:     assert_warn_len_equal(my_mod, 0)

1394:     assert_warn_len_equal(my_mod, 0)

1401:     assert_warn_len_equal(my_mod, 1, py37=0)

1416:         assert_equal(len(w), 1)

1430:         assert_equal(len(sup.log), 2)

1431:         assert_equal(len(log1), 1)

1432:         assert_equal(len(log2),1)

1433:         assert_equal(log2[0].message.args[0], 'Some other warning 2')

1443:         assert_equal(len(sup.log), 2)

1444:         assert_equal(len(log1), 1)

1445:         assert_equal(len(log2), 1)

1446:         assert_equal(log2[0].message.args[0], 'Some other warning 2')

1455:             assert_equal(len(sup2.log), 1)

1456:         assert_equal(len(sup.log), 1)

1474:         assert_equal(len(sup.log), 2)

1483:         assert_equal(len(sup.log), 2)

1493:         assert_equal(len(sup.log), 2)

1503:         assert_equal(len(sup.log), 2)

1511:     assert_(not os.path.isdir(tdir))

1519:     assert_(raised)

1520:     assert_(not os.path.isdir(tdir))

1527:     assert_(not os.path.isfile(fpath))

1535:     assert_(raised)

1536:     assert_(not os.path.isfile(fpath))

1550:     assert_equal(my_mod.__warningregistry__, {})

1555:     """ Test assert_no_gc_cycles """

1562:         with assert_no_gc_cycles()
1565:         assert_no_gc_cycles(no_cycle)

1567:     def test_asserts(self)
1574:         with assert_raises(AssertionError)
1575:             with assert_no_gc_cycles()
1578:         with assert_raises(AssertionError)
1579:             assert_no_gc_cycles(make_cycle)

1610:                 with assert_raises(RuntimeError)
1612:                     assert_no_gc_cycles(lambda
Total asserts: 331

Filename: numpy/testing/__init__.py
11: from ._private.utils import (_assert_valid_refcount, _gen_alignment_data)

Total asserts: 1

Filename: numpy/testing/_private/extbuild.py
51:     >>> assert not mod.test_bytes(u'abc')

52:     >>> assert mod.test_bytes(b'abc')

250:     assert ret

Total asserts: 3

Filename: numpy/testing/_private/utils.py
28:         'assert_equal', 'assert_almost_equal', 'assert_approx_equal',

29:         'assert_array_equal', 'assert_array_less', 'assert_string_equal',

30:         'assert_array_almost_equal', 'assert_raises', 'build_err_msg',

31:         'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal',

33:         'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex',

34:         'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings',

35:         'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings',

37:         'HAS_REFCOUNT', 'suppress_warnings', 'assert_array_compare',

38:         'assert_no_gc_cycles', 'break_cycles', 'HAS_LAPACK64', 'IS_PYSTON',

78: def assert_(val, msg='')
83:     The Python built-in ``assert`` does not work when executing code in

275: def assert_equal(actual, desired, err_msg='', verbose=True)
310:     >>> np.testing.assert_equal([4,5], [4,6])

322:     >>> np.testing.assert_equal(np.array([1.0, 2.0, np.nan]), [1, 2, np.nan])

329:         assert_equal(len(actual), len(desired), err_msg, verbose)

333:             assert_equal(actual[k], desired[k], f'key={k!r}\n{err_msg}',

337:         assert_equal(len(actual), len(desired), err_msg, verbose)

339:             assert_equal(actual[k], desired[k], f'item={k!r}\n{err_msg}',

345:         return assert_array_equal(actual, desired, err_msg, verbose)

370:             assert_equal(actualr, desiredr)

371:             assert_equal(actuali, desiredi)

435: def print_assert_equal(test_string, actual, desired)
452:     >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 1])

453:     >>> np.testing.print_assert_equal('Test XYZ of func xyz', [0, 1], [0, 2])

476: def assert_almost_equal(actual,desired,decimal=7,err_msg='',verbose=True)
481:     .. note
482:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`

491:     actual implementation in `assert_array_almost_equal` did up to rounding

493:     delegates to assert_array_almost_equal

515:     assert_allclose
517:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal

521:     >>> from numpy.testing import assert_almost_equal

522:     >>> assert_almost_equal(2.3333333333333, 2.33333334)

523:     >>> assert_almost_equal(2.3333333333333, 2.33333334, decimal=10)

531:     >>> assert_almost_equal(np.array([1.0,2.3333333333333]),

576:             assert_almost_equal(actualr, desiredr, decimal=decimal)

577:             assert_almost_equal(actuali, desiredi, decimal=decimal)

583:         return assert_array_almost_equal(actual, desired, decimal, err_msg)

602: def assert_approx_equal(actual,desired,significant=7,err_msg='',verbose=True)
607:     .. note
608:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`

636:     assert_allclose
638:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal

642:     >>> np.testing.assert_approx_equal(0.12345677777777e-20, 0.1234567e-20)

643:     >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345671e-20,

645:     >>> np.testing.assert_approx_equal(0.12345670e-20, 0.12345672e-20,

701: def assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='',

718:     def func_assert_same_pos(x, y, func=isnan, hasval='nan')
768:                 flagged = func_assert_same_pos(x, y, func=isnan, hasval='nan')

771:                 flagged |= func_assert_same_pos(x, y,

774:                 flagged |= func_assert_same_pos(x, y,

781:                 flagged = func_assert_same_pos(x, y, func=isnat, hasval="NaT")

826:                     # used by assert_allclose (found in np.isclose)

848:         header = f'error during assertion
855: def assert_array_equal(x, y, err_msg='', verbose=True)
863:     are compared like numbers, no assertion is raised if both objects have

887:     assert_allclose
889:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal

899:     The first assert does not raise an exception
901:     >>> np.testing.assert_array_equal([1.0,2.33333,np.nan],

906:     >>> np.testing.assert_array_equal([1.0,np.pi,np.nan],

919:     Use `assert_allclose` or one of the nulp (number of floating point values)

922:     >>> np.testing.assert_allclose([1.0,np.pi,np.nan],

926:     As mentioned in the Notes section, `assert_array_equal` has special

930:     >>> np.testing.assert_array_equal(x, 3)

934:     assert_array_compare(operator.__eq__, x, y, err_msg=err_msg,

938: def assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
943:     .. note
944:               `assert_array_almost_equal_nulp` or `assert_array_max_ulp`

956:     in numpy, NaNs are compared like numbers, no assertion is raised if both

979:     assert_allclose
981:     assert_array_almost_equal_nulp, assert_array_max_ulp, assert_equal

985:     the first assert does not raise an exception

987:     >>> np.testing.assert_array_almost_equal([1.0,2.333,np.nan],

990:     >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],

1003:     >>> np.testing.assert_array_almost_equal([1.0,2.33333,np.nan],

1046:     assert_array_compare(compare, x, y, err_msg=err_msg, verbose=verbose,

1051: def assert_array_less(x, y, err_msg='', verbose=True)
1061:     compared, no assertion is raised if both objects have NaNs in the same

1084:     assert_array_equal
1085:     assert_array_almost_equal
1091:     >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1.1, 2.0, np.nan])

1092:     >>> np.testing.assert_array_less([1.0, 1.0, np.nan], [1, 2.0, np.nan])

1104:     >>> np.testing.assert_array_less([1.0, 4.0], 3)

1116:     >>> np.testing.assert_array_less([1.0, 2.0, 3.0], [4])

1128:     assert_array_compare(operator.__lt__, x, y, err_msg=err_msg,

1138: def assert_string_equal(actual, desired)
1142:     If the given strings are equal, `assert_string_equal` does nothing.

1155:     >>> np.testing.assert_string_equal('abc', 'abc')

1156:     >>> np.testing.assert_string_equal('abc', 'abcd')

1259:     pass.  If you want to test many assertions about exceptions in a single

1260:     test, you may want to use `assert_raises` instead.

1293: # assert_raises and assert_raises_regex are taken from unittest.

1304: def assert_raises(*args, **kwargs)
1306:     assert_raises(exception_class, callable, *args, **kwargs)

1307:     assert_raises(exception_class)

1316:     Alternatively, `assert_raises` can be used as a context manager
1318:     >>> from numpy.testing import assert_raises

1319:     >>> with assert_raises(ZeroDivisionError)
1326:     >>> assert_raises(ZeroDivisionError, div, 1, 0)

1330:     return _d.assertRaises(*args,**kwargs)

1333: def assert_raises_regex(exception_class, expected_regexp, *args, **kwargs)
1335:     assert_raises_regex(exception_class, expected_regexp, callable, *args,

1337:     assert_raises_regex(exception_class, expected_regexp)

1343:     Alternatively, can be used as a context manager like `assert_raises`.

1354:     return _d.assertRaisesRegex(exception_class, expected_regexp, *args, **kwargs)

1450: def _assert_valid_refcount(op)
1470:         assert_(sys.getrefcount(i) >= rc)

1476: def assert_allclose(actual, desired, rtol=1e-7, atol=0, equal_nan=True,

1512:     assert_array_almost_equal_nulp, assert_array_max_ulp

1518:     >>> np.testing.assert_allclose(x, y, rtol=1e-5, atol=0)

1530:     assert_array_compare(compare, actual, desired, err_msg=str(err_msg),

1534: def assert_array_almost_equal_nulp(x, y, nulp=1)
1561:     assert_array_max_ulp 
1567:     An assertion is raised if the following condition is not met
1575:     >>> np.testing.assert_array_almost_equal_nulp(x, x*eps/2 + x)

1577:     >>> np.testing.assert_array_almost_equal_nulp(x, x*eps + x)

1597: def assert_array_max_ulp(a, b, maxulp=1, dtype=None)
1630:     assert_array_almost_equal_nulp 
1636:     >>> res = np.testing.assert_array_max_ulp(a, np.arcsin(np.sin(a)))

1742: def _assert_warns_context(warning_class, name=None)
1752: def assert_warns(warning_class, *args, **kwargs)
1763:         with assert_warns(SomeWarning)
1791:     >>> with np.testing.assert_warns(DeprecationWarning)
1792:     ...     assert deprecated_func(4) == 16

1794:     >>> ret = np.testing.assert_warns(DeprecationWarning, deprecated_func, 4)

1795:     >>> assert ret == 16

1798:         return _assert_warns_context(warning_class)

1802:     with _assert_warns_context(warning_class, name=func.__name__)
1807: def _assert_no_warnings_context(name=None)
1817: def assert_no_warnings(*args, **kwargs)
1823:         with assert_no_warnings()
1845:         return _assert_no_warnings_context()

1849:     with _assert_no_warnings_context(name=func.__name__)
2092:             assert_(len(log) == 1)

2093:             assert_(len(sup.log) == 1)  # also stored in log attribute

2309: def _assert_no_gc_cycles_context(name=None)
2317:     assert_(gc.isenabled())

2360: def assert_no_gc_cycles(*args, **kwargs)
2366:         with assert_no_gc_cycles()
2387:         return _assert_no_gc_cycles_context()

2391:     with _assert_no_gc_cycles_context(name=func.__name__)
Total asserts: 142

Filename: numpy/testing/_private/parameterized.py
267:                     assert_equal(actual, expected)

274:                 assert_equal(a + b, expected)

282:         self.assert_not_in_testcase_subclass()

322:     def assert_not_in_testcase_subclass(self)
374:             ...     assert_equal(actual, expected)

Total asserts: 5

Filename: numpy/testing/_private/decorators.py
19: from .utils import SkipTest, assert_warns, HAS_REFCOUNT

293:             with assert_warns(DeprecationWarning)
Total asserts: 2

Filename: numpy/testing/utils.py
15: from ._private.utils import _assert_valid_refcount, _gen_alignment_data

18:         'assert_equal', 'assert_almost_equal', 'assert_approx_equal',

19:         'assert_array_equal', 'assert_array_less', 'assert_string_equal',

20:         'assert_array_almost_equal', 'assert_raises', 'build_err_msg',

21:         'decorate_methods', 'jiffies', 'memusage', 'print_assert_equal',

23:         'assert_', 'assert_array_almost_equal_nulp', 'assert_raises_regex',

24:         'assert_array_max_ulp', 'assert_warns', 'assert_no_warnings',

25:         'assert_allclose', 'IgnoreException', 'clear_and_catch_warnings',

27:         'HAS_REFCOUNT', 'suppress_warnings', 'assert_array_compare',

28:         'assert_no_gc_cycles'

Total asserts: 10

Filename: numpy/lib/nanfunctions.py
1204:     >>> assert not np.all(a==b)

1208:     >>> assert not np.all(a==b)

1365:     >>> assert not np.all(a==b)

1524:     >>> assert not np.all(a==b)

Total asserts: 4

Filename: numpy/lib/tests/test_type_check.py
3:     assert_, assert_equal, assert_array_equal, assert_raises

11: def assert_all(x)
12:     assert_(np.all(x), x)

23:         assert_(common_type(ai32) == np.float64)

24:         assert_(common_type(af16) == np.float16)

25:         assert_(common_type(af32) == np.float32)

26:         assert_(common_type(af64) == np.float64)

27:         assert_(common_type(acs) == np.csingle)

28:         assert_(common_type(acd) == np.cdouble)

35:             assert_equal(mintypecode(itype), 'd')

36:         assert_equal(mintypecode('f'), 'f')

37:         assert_equal(mintypecode('d'), 'd')

38:         assert_equal(mintypecode('F'), 'F')

39:         assert_equal(mintypecode('D'), 'D')

43:             assert_equal(mintypecode(itype+'f'), 'f')

44:             assert_equal(mintypecode(itype+'d'), 'd')

45:             assert_equal(mintypecode(itype+'F'), 'F')

46:             assert_equal(mintypecode(itype+'D'), 'D')

47:         assert_equal(mintypecode('ff'), 'f')

48:         assert_equal(mintypecode('fd'), 'd')

49:         assert_equal(mintypecode('fF'), 'F')

50:         assert_equal(mintypecode('fD'), 'D')

51:         assert_equal(mintypecode('df'), 'd')

52:         assert_equal(mintypecode('dd'), 'd')

53:         #assert_equal(mintypecode('dF',savespace=1),'F')

54:         assert_equal(mintypecode('dF'), 'D')

55:         assert_equal(mintypecode('dD'), 'D')

56:         assert_equal(mintypecode('Ff'), 'F')

57:         #assert_equal(mintypecode('Fd',savespace=1),'F')

58:         assert_equal(mintypecode('Fd'), 'D')

59:         assert_equal(mintypecode('FF'), 'F')

60:         assert_equal(mintypecode('FD'), 'D')

61:         assert_equal(mintypecode('Df'), 'D')

62:         assert_equal(mintypecode('Dd'), 'D')

63:         assert_equal(mintypecode('DF'), 'D')

64:         assert_equal(mintypecode('DD'), 'D')

67:         assert_equal(mintypecode('fdF'), 'D')

68:         #assert_equal(mintypecode('fdF',savespace=1),'F')

69:         assert_equal(mintypecode('fdD'), 'D')

70:         assert_equal(mintypecode('fFD'), 'D')

71:         assert_equal(mintypecode('dFD'), 'D')

73:         assert_equal(mintypecode('ifd'), 'd')

74:         assert_equal(mintypecode('ifF'), 'F')

75:         assert_equal(mintypecode('ifD'), 'D')

76:         assert_equal(mintypecode('idF'), 'D')

77:         #assert_equal(mintypecode('idF',savespace=1),'F')

78:         assert_equal(mintypecode('idD'), 'D')

84:         assert_(np.isscalar(3))

85:         assert_(not np.isscalar([3]))

86:         assert_(not np.isscalar((3,)))

87:         assert_(np.isscalar(3j))

88:         assert_(np.isscalar(4.0))

95:         assert_array_equal(y, np.real(y))

99:         assert_array_equal(y, out)

100:         assert_(isinstance(out, np.ndarray))

104:         assert_equal(y, out)

105:         assert_(not isinstance(out, np.ndarray))

109:         assert_array_equal(y.real, np.real(y))

113:         assert_array_equal(y.real, out)

114:         assert_(isinstance(out, np.ndarray))

118:         assert_equal(1.0, out)

119:         assert_(not isinstance(out, np.ndarray))

126:         assert_array_equal(0, np.imag(y))

130:         assert_array_equal(0, out)

131:         assert_(isinstance(out, np.ndarray))

135:         assert_equal(0, out)

136:         assert_(not isinstance(out, np.ndarray))

140:         assert_array_equal(y.imag, np.imag(y))

144:         assert_array_equal(y.imag, out)

145:         assert_(isinstance(out, np.ndarray))

149:         assert_equal(1.0, out)

150:         assert_(not isinstance(out, np.ndarray))

158:         assert_(not np.sometrue(res, axis=0))

163:         assert_array_equal(res, [1, 0, 0])

171:         assert_array_equal(res, [1, 1, 0])

176:         assert_array_equal(res, [0, 1, 1])

183:         assert_(not iscomplexobj(z))

185:         assert_(iscomplexobj(z))

188:         assert_(not iscomplexobj(1.0))

189:         assert_(iscomplexobj(1+0j))

192:         assert_(iscomplexobj([3, 1+0j, True]))

193:         assert_(not iscomplexobj([3, 1, True]))

201:         assert_(iscomplexobj(dummy))

220:         assert_(iscomplexobj(dummy))

229:         assert_(iscomplexobj(a))

235:         assert_(isrealobj(z))

237:         assert_(not isrealobj(z))

245:         assert_all(np.all(res, axis=0))

249:             assert_all(np.isnan(np.array((1.,))/0.) == 0)

253:             assert_all(np.isnan(np.array((-1.,))/0.) == 0)

257:             assert_all(np.isnan(np.array((0.,))/0.) == 1)

260:         assert_all(np.isnan(1) == 0)

263:         assert_all(np.isnan(1+1j) == 0)

267:             assert_all(np.isnan(np.array(0+0j)/0.) == 1)

276:         assert_all(np.all(res, axis=0))

280:             assert_all(np.isfinite(np.array((1.,))/0.) == 0)

284:             assert_all(np.isfinite(np.array((-1.,))/0.) == 0)

288:             assert_all(np.isfinite(np.array((0.,))/0.) == 0)

291:         assert_all(np.isfinite(1) == 1)

294:         assert_all(np.isfinite(1+1j) == 1)

298:             assert_all(np.isfinite(np.array(1+1j)/0.) == 0)

307:         assert_all(np.all(res, axis=0))

311:             assert_all(np.isinf(np.array((1.,))/0.) == 1)

315:             assert_all(np.isinf(np.array(1.,)/0.) == 1)

319:             assert_all(np.isinf(np.array((-1.,))/0.) == 1)

323:             assert_all(np.isinf(np.array(-1.)/0.) == 1)

327:             assert_all(np.isinf(np.array((0.,))/0.) == 0)

335:         assert_(vals[0] == 0)

336:         assert_(vals[1] == 0)

337:         assert_(vals[2] == 1)

345:         assert_(vals[0] == 1)

346:         assert_(vals[1] == 0)

347:         assert_(vals[2] == 0)

355:         assert_all(vals[0] < -1e10) and assert_all(np.isfinite(vals[0]))

356:         assert_(vals[1] == 0)

357:         assert_all(vals[2] > 1e10) and assert_all(np.isfinite(vals[2]))

358:         assert_equal(type(vals), np.ndarray)

364:         assert_equal(vals, [30, 10, 20])

365:         assert_all(np.isfinite(vals[[0, 2]]))

366:         assert_equal(type(vals), np.ndarray)

373:         assert_(result is vals)

374:         assert_all(vals[0] < -1e10) and assert_all(np.isfinite(vals[0]))

375:         assert_(vals[1] == 0)

376:         assert_all(vals[2] > 1e10) and assert_all(np.isfinite(vals[2]))

377:         assert_equal(type(vals), np.ndarray)

384:         assert_(result is vals)

385:         assert_equal(vals, [30, 10, 20])

386:         assert_all(np.isfinite(vals[[0, 2]]))

387:         assert_equal(type(vals), np.ndarray)

391:         assert_array_equal(vals, np.array([1], int))

392:         assert_equal(type(vals), np.ndarray)

394:         assert_array_equal(vals, np.array([1], int))

395:         assert_equal(type(vals), np.ndarray)

399:         assert_all(vals == 1)

400:         assert_equal(type(vals), np.int_)

402:         assert_all(vals == 1)

403:         assert_equal(type(vals), np.int_)

407:         assert_all(vals == 1.0)

408:         assert_equal(type(vals), np.float_)

410:         assert_all(vals == 1.1)

411:         assert_equal(type(vals), np.float_)

415:         assert_all(vals == 1+1j)

416:         assert_equal(type(vals), np.complex_)

418:         assert_all(vals == 1+1j)

419:         assert_equal(type(vals), np.complex_)

427:         assert_all(np.isfinite(vals))

428:         assert_equal(type(vals), np.complex_)

435:         assert_all(np.isfinite(vals))

436:         assert_equal(type(vals), np.complex_)

438:         #assert_all(vals.imag > 1e10)  and assert_all(np.isfinite(vals))

442:         #assert_all(vals.real < -1e10) and assert_all(np.isfinite(vals))

449:         assert_all(np.isfinite(vals[[0, 2]]))

450:         assert_all(vals[0] < -1e10)

451:         assert_equal(vals[[1, 2]], [np.inf, 999])

452:         assert_equal(type(vals), np.ndarray)

460:         assert_all(isrealobj(b))

461:         assert_array_equal(a, b)

463:         assert_all(iscomplexobj(b))

465:         assert_all(isrealobj(b))

472:         assert_equal(a.__class__, np.ndarray)

473:         assert_(np.issubdtype(a.dtype, np.floating))

477:         assert_raises(TypeError,

Total asserts: 162

Filename: numpy/lib/tests/test_utils.py
6: from numpy.testing import assert_, assert_equal, assert_raises_regex

23:     assert_('numpy.linalg.eig' in out)

73:     assert_('deprecated' in old_func.__doc__)

77:     assert_('Rather use new_func2' in old_func2.__doc__)

81:     assert_('old_func3' in new_func3.__doc__)

82:     assert_('new_func3' in new_func3.__doc__)

86:     assert_('Rather use new_func7' in old_func7.__doc__)

101:                 assert line.startswith('    ') or not line.startswith(' '), knd

103:                 assert line.startswith('    '), knd

110:     assert_equal(new_doc[index
115:     assert_('\n        Bizarre' in new_func5.__doc__)

130:         assert_equal(high - low, a.size * a.itemsize)

136:         assert_equal(high - low, b.size * b.itemsize)

142:         assert_equal(high - low, b.size * b.itemsize)

150:         assert_equal(high - low, b.size * 2 * b.itemsize - b.itemsize)

153: def test_assert_raises_regex_context_manager()
154:     with assert_raises_regex(ValueError, 'no deprecation warning')
173:     assert _has_method_heading(WithPublicMethods)

174:     assert not _has_method_heading(NoPublicMethods)

Total asserts: 19

Filename: numpy/lib/tests/test_twodim_base.py
5:     assert_equal, assert_array_equal, assert_array_max_ulp,

6:     assert_array_almost_equal, assert_raises, assert_

32:         assert_equal(eye(4),

38:         assert_equal(eye(4, dtype='f'),

44:         assert_equal(eye(3) == 1,

48:         assert_equal(eye(4, k=1),

54:         assert_equal(eye(4, k=-1),

61:         assert_equal(eye(4, 3),

67:         assert_equal(eye(3, 4),

73:         assert_equal(eye(3, 4, k=2),

78:         assert_equal(eye(4, 3, k=-2),

85:         assert_equal(eye(2, 2, 1), [[0, 1], [0, 0]])

86:         assert_equal(eye(2, 2, -1), [[0, 0], [1, 0]])

87:         assert_equal(eye(2, 2, 2), [[0, 0], [0, 0]])

88:         assert_equal(eye(2, 2, -2), [[0, 0], [0, 0]])

89:         assert_equal(eye(3, 2, 2), [[0, 0], [0, 0], [0, 0]])

90:         assert_equal(eye(3, 2, 1), [[0, 1], [0, 0], [0, 0]])

91:         assert_equal(eye(3, 2, -1), [[0, 0], [1, 0], [0, 1]])

92:         assert_equal(eye(3, 2, -2), [[0, 0], [0, 0], [1, 0]])

93:         assert_equal(eye(3, 2, -3), [[0, 0], [0, 0], [0, 0]])

96:         assert_equal(eye(2, 2, dtype='S3'),

100:         assert_equal(eye(2, 2, dtype=bool), [[True, False], [False, True]])

105:         assert_equal(mat_c, mat_f)

106:         assert mat_c.flags.c_contiguous

107:         assert not mat_c.flags.f_contiguous

108:         assert not mat_f.flags.c_contiguous

109:         assert mat_f.flags.f_contiguous

118:         assert_equal(diag(vals), b)

124:         assert_equal(diag(vals, k=2), b)

125:         assert_equal(diag(vals, k=-2), c)

133:         assert_equal(diag(vals), b)

137:         assert_equal(diag(vals, 2), b[
140:         assert_equal(diag(vals, -2), b[
148:         assert_equal(diag(A, k=2), [])

149:         assert_equal(diag(A, k=1), [2])

150:         assert_equal(diag(A, k=0), [1, 4])

151:         assert_equal(diag(A, k=-1), [3, 6])

152:         assert_equal(diag(A, k=-2), [5])

153:         assert_equal(diag(A, k=-3), [])

156:         assert_raises(ValueError, diag, [[[1]]])

161:         assert_raises(ValueError, fliplr, ones(4))

164:         assert_equal(fliplr(a), b)

169:         assert_equal(fliplr(a), b)

176:         assert_equal(flipud(a), b)

181:         assert_equal(flipud(a), b)

203:         assert_array_equal(H.T, answer)

205:         assert_array_equal(H.T, answer)

207:         assert_array_equal(H, eye(10, 10))

208:         assert_array_equal(xedges, np.linspace(0, 9, 11))

209:         assert_array_equal(yedges, np.linspace(0, 9, 11))

223:         assert_array_almost_equal(H, answer/8., 3)

224:         assert_array_equal(xed, np.linspace(0, 6, 7))

225:         assert_array_equal(yed, np.linspace(0, 5, 6))

235:         assert_array_almost_equal(H, answer, 3)

240:         assert_array_equal(H, 0)

244:         assert_array_max_ulp(a, array([[0.]]))

247:         assert_array_max_ulp(a, np.zeros((4, 4)))

269:         assert_array_equal(H, answer)

270:         assert_array_equal(ye, array([0., 0.25, 0.5, 0.75, 1]))

277:         assert_array_equal(H, answer)

278:         assert_array_equal(xe, array([0., 0.25, 0.5, 0.75, 1]))

289:         # Cannot use assert_equal since that dispatches...

290:         assert_(r == ((ShouldDispatch,), (s_d, xy), {}))

292:         assert_(r == ((ShouldDispatch,), (xy, s_d), {}))

294:         assert_(r, ((ShouldDispatch,), (xy, xy), dict(bins=s_d)))

296:         assert_(r, ((ShouldDispatch,), (xy, xy), dict(bins=[s_d, 5])))

297:         assert_raises(Exception, histogram2d, xy, xy, bins=[s_d])

299:         assert_(r, ((ShouldDispatch,), (xy, xy), dict(weights=s_d)))

314:         assert_array_equal(tri(3), out)

315:         assert_array_equal(tri(3, dtype=bool), out.astype(bool))

323:         assert_array_equal(b, [[1, 0], [1, 1]])

324:         assert_array_equal(c, b.T)

326:         assert_equal(b.dtype, a.dtype)

327:         assert_equal(c.dtype, a.dtype)

349:         assert_array_equal(a_triu_observed, a_triu_desired)

350:         assert_array_equal(a_tril_observed, a_tril_desired)

351:         assert_equal(a_triu_observed.dtype, a.dtype)

352:         assert_equal(a_tril_observed.dtype, a.dtype)

364:     assert_array_equal(np.triu(arr), out_triu)

365:     assert_array_equal(np.tril(arr), out_tril)

375:         assert_equal(np.triu(arr).dtype, arr.dtype)

376:         assert_equal(np.tril(arr).dtype, arr.dtype)

382:     assert_equal(np.triu(arr).dtype, arr.dtype)

383:     assert_equal(np.tril(arr).dtype, arr.dtype)

386:     assert_equal(np.triu(arr).dtype, arr.dtype)

387:     assert_equal(np.tril(arr).dtype, arr.dtype)

394:     assert_array_equal(a[iu], array([0, 1, 2, 4, 5, 8]))

397:     assert_array_equal(a[iu1], array([1, 2, 5]))

414:     assert_array_equal(a[il1],

416:     assert_array_equal(b[il3],

421:     assert_array_equal(a,

427:     assert_array_equal(b,

434:     assert_array_equal(a,

440:     assert_array_equal(b,

461:         assert_array_equal(a[iu1],

463:         assert_array_equal(b[iu3],

469:         assert_array_equal(a,

475:         assert_array_equal(b,

484:         assert_array_equal(a,

490:         assert_array_equal(b,

499:         assert_raises(ValueError, tril_indices_from, np.ones((2,)))

500:         assert_raises(ValueError, tril_indices_from, np.ones((2, 2, 2)))

501:         # assert_raises(ValueError, tril_indices_from, np.ones((2, 3)))

506:         assert_raises(ValueError, triu_indices_from, np.ones((2,)))

507:         assert_raises(ValueError, triu_indices_from, np.ones((2, 2, 2)))

508:         # assert_raises(ValueError, triu_indices_from, np.ones((2, 3)))

520:         assert_array_equal(v, powers[
525:             assert_array_equal(v, powers[
533:         assert_array_equal(v, expected)

540:         # so assert_array_equal *should* be safe here (rather than, say,

541:         # assert_array_almost_equal).

542:         assert_array_equal(v, expected)

Total asserts: 112

Filename: numpy/lib/tests/test_polynomial.py
3:     assert_, assert_equal, assert_array_equal, assert_almost_equal,

4:     assert_array_almost_equal, assert_raises, assert_allclose

17:         assert_equal(repr(p), 'poly1d([1., 2., 3.])')

18:         assert_equal(str(p),

23:         assert_equal(repr(q), 'poly1d([3., 2., 1.])')

24:         assert_equal(str(q),

29:         assert_equal(str(r),

33:         assert_equal(str(np.poly1d([-3, -2, -1])),

40:         assert_equal(p(0), 3.0)

41:         assert_equal(p(5), 38.0)

42:         assert_equal(q(0), 1.0)

43:         assert_equal(q(5), 86.0)

49:         assert_equal(p/q, (np.poly1d([0.25]), np.poly1d([1.5, 3.75])))

50:         assert_equal(p.integ(), np.poly1d([1/3, 1., 4., 0.]))

51:         assert_equal(p.integ(1), np.poly1d([1/3, 1., 4., 0.]))

55:         assert_equal(p * q, np.poly1d([3., 8., 14., 8., 3.]))

56:         assert_equal(p + q, np.poly1d([4., 4., 4.]))

57:         assert_equal(p - q, np.poly1d([-2., 0., 2.]))

58:         assert_equal(p ** 4, np.poly1d([1., 8., 36., 104., 214., 312., 324., 216., 81.]))

59:         assert_equal(p(q), np.poly1d([9., 12., 16., 8., 6.]))

60:         assert_equal(q(p), np.poly1d([3., 12., 32., 40., 34.]))

61:         assert_equal(p.deriv(), np.poly1d([2., 2.]))

62:         assert_equal(p.deriv(2), np.poly1d([2.]))

63:         assert_equal(np.polydiv(np.poly1d([1, 0, -1]), np.poly1d([1, 1])),

73:         assert_equal(np.asarray(p), ar)

74:         assert_equal(np.asarray(p).dtype, dtype)

75:         assert_equal(len(p), 2)

81:             assert_equal(scalar, ref)

83:                 assert isinstance(scalar, int)

85:                 assert_equal(scalar.dtype, dtype)

89:         assert_equal(str(q),

93:         assert_equal(str(q),

98:         assert_array_almost_equal(np.poly([3, -np.sqrt(2), np.sqrt(2)]),

103:         assert_array_almost_equal(np.poly(A), [1, -6, -72, -27])

106:         assert_(np.isrealobj(np.poly([+1.082j, +2.613j, -2.613j, -1.082j])))

107:         assert_(np.isrealobj(np.poly([0+1j, -0+-1j, 1+2j,

109:         assert_(np.isrealobj(np.poly([1j, -1j, 1+2j, 1-2j, 1+3j, 1-3.j])))

110:         assert_(np.isrealobj(np.poly([1j, -1j, 1+2j, 1-2j])))

111:         assert_(np.isrealobj(np.poly([1j, -1j, 2j, -2j])))

112:         assert_(np.isrealobj(np.poly([1j, -1j])))

113:         assert_(np.isrealobj(np.poly([1, -1])))

115:         assert_(np.iscomplexobj(np.poly([1j, -1.0000001j])))

119:         assert_(np.isrealobj(np.poly(np.concatenate((a, np.conjugate(a))))))

122:         assert_array_equal(np.roots([1, 0, 0]), [0, 0])

127:         assert_equal(str(p),

134:         assert_equal(str(p), " \n0")

146:         assert_raises(ValueError, np.polyfit,

152:         assert_almost_equal(est, m, decimal=4)

156:         assert_almost_equal(val0, cov, decimal=4)

159:         assert_almost_equal([4.8927, -1.0177, 1.7768], m2, decimal=4)

163:         assert_almost_equal(val, cov2, decimal=4)

166:         assert_almost_equal([4.8927, -1.0177, 1.7768], m3, decimal=4)

170:         assert_almost_equal(val, cov3, decimal=4)

175:         assert_almost_equal(c, np.polyfit(x, y, 2))

179:         assert_almost_equal(cc, np.polyfit(x, yy, 2))

182:         assert_almost_equal(est, m[
183:         assert_almost_equal(est, m[
184:         assert_almost_equal(val0, cov[
185:         assert_almost_equal(val0, cov[
192:         assert_allclose(mean.std(), 0.5, atol=0.01)

193:         assert_allclose(np.sqrt(cov.mean()), 0.5, atol=0.01)

197:         assert_allclose(mean.std(), 0.5, atol=0.01)

198:         assert_almost_equal(np.sqrt(cov.mean()), 0.5)

202:         assert_allclose(mean.std(), 0.5, atol=0.01)

203:         assert_allclose(np.sqrt(cov.mean()), 0.5, atol=0.01)

207:         assert_allclose(mean.std(), 0.5, atol=0.01)

208:         assert_almost_equal(np.sqrt(cov.mean()), 0.25)

214:         assert_(p2[1] == Decimal("3.9999999999999990"))

216:         assert_(p2[1] == Decimal('8.0'))

218:         assert_(p2[3] == Decimal("1.333333333333333333333333333"))

219:         assert_(p2[2] == Decimal('1.5'))

220:         assert_(np.issubdtype(p2.coeffs.dtype, np.object_))

222:         assert_equal(np.poly([Decimal(1), Decimal(2)]),

228:         assert_((p2.coeffs == [1j, 1j, 1j, 0]).all())

230:         assert_((p2.coeffs == [6j, 2j]).all())

235:         assert_(

249:         assert_almost_equal(np.poly(v), np.poly(np.diag(v)))

257:         assert_equal(p.coeffs.dtype, np.int64)

260:         assert_equal(p.coeffs.dtype, np.float32)

263:         assert_equal(p.coeffs.dtype, np.complex64)

268:         assert_equal(p == None, False)

269:         assert_equal(p != None, True)

270:         assert_equal(p == p, True)

271:         assert_equal(p == p2, False)

272:         assert_equal(p != p2, True)

278:         assert_equal(q.coeffs.dtype, np.complex128)

279:         assert_equal(r.coeffs.dtype, np.complex128)

280:         assert_equal(q*a + r, b)

285:         assert isinstance(s, np.poly1d)

286:         assert isinstance(t, np.poly1d)

288:         assert isinstance(u, np.poly1d)

289:         assert isinstance(v, np.poly1d)

296:         assert_equal(p.coeffs, [2, 3, 4])

299:         assert_equal(p.coeffs, [2, 3, 14])

303:         assert_raises(AttributeError, setattr, p, 'coeffs', np.array(1))

Total asserts: 95

Filename: numpy/lib/tests/test__iotools.py
6:     assert_, assert_equal, assert_allclose, assert_raises,

21:         assert_equal(test, ['1', '2', '3', '4', '5'])

23:         assert_equal(test, ['1', '2', '3', '4', '5'])

29:         assert_equal(test, ['1', '2', '3', '4', '', '5'])

31:         assert_equal(test, ['1 2 3 4', '5'])

37:         assert_equal(test, ['1', '2', '3', '4', '5  6'])

40:         assert_equal(test, ['1  2', '3  4', '5  6'])

46:         assert_equal(test, ['1', '2', '3', '4', '', '5'])

50:         assert_equal(test, ['1', '2', '3', '4', '', '5'])

55:         assert_equal(test, ['1', '2', '3', '4', '', '5'])

61:         assert_equal(test, ['1', '2', '3', '4', '', '5', ''])

65:         assert_equal(test, ['1     3  4  5  6'])

69:         assert_equal(test, ['1     3  4  5  6'])

74:         assert_equal(test, ['1', '3', '4  5', '6'])

78:         assert_equal(test, ['1', '3  4', '5  6'])

89:         assert_equal(test, ['A', 'a', 'b', 'c'])

91:         assert_equal(test, ['A', 'A_1', 'B', 'C'])

93:         assert_equal(test, ['A', 'A_1', 'B', 'C'])

95:         assert_equal(test, ['a', 'a_1', 'b', 'c'])

98:         assert_raises(ValueError, NameValidator, case_sensitive='foobar')

105:         assert_equal(test, ['dates_', 'data_', 'Other_Data', 'mask_'])

111:         assert_equal(validator(namelist), ['a', 'b', 'c'])

113:         assert_equal(validator(namelist), ['f0', 'b', 'c'])

115:         assert_equal(validator(namelist), ['a', 'b', 'f0'])

117:         assert_equal(validator(namelist), ['f1', 'f0', 'f2'])

123:         assert_equal(validator(namelist, nbfields=1), ('a',))

124:         assert_equal(validator(namelist, nbfields=5, defaultfmt="g%i"),

131:         assert_(validator(namelist) is None)

132:         assert_equal(validator(namelist, nbfields=3), ['f0', 'f1', 'f2'])

147:         assert_equal(converter._status, 1)

148:         assert_equal(converter.default, -99999)

154:         assert_equal(converter._status, 0)

157:         assert_equal(converter.upgrade('0'), 0)

158:         assert_equal(converter._status, 1)

166:         assert_equal(converter.upgrade('17179869184'), 17179869184)

167:         assert_equal(converter._status, 1 + status_offset)

170:         assert_allclose(converter.upgrade('0.'), 0.0)

171:         assert_equal(converter._status, 2 + status_offset)

174:         assert_equal(converter.upgrade('0j'), complex('0j'))

175:         assert_equal(converter._status, 3 + status_offset)

183:             assert_(type(res) is str)

184:             assert_equal(res, 'a')

185:             assert_equal(converter._status, 8 + status_offset)

192:         assert_equal(converter('0'), 0)

193:         assert_equal(converter(''), converter.default)

194:         assert_equal(converter('missing'), converter.default)

195:         assert_equal(converter('missed'), converter.default)

209:             assert_equal(test, date(2001, 1, 1))

211:             assert_equal(test, date(2009, 1, 1))

213:             assert_equal(test, date(2000, 1, 1))

221:         assert_equal(conv._mapper, old_mapper)

222:         assert_(hasattr(conv, 'default'))

229:         assert_equal(converter.default, -999)

230:         assert_equal(converter.type, np.dtype(float))

235:         assert_equal(converter.default, 0)

236:         assert_equal(converter.type, np.dtype(float))

242:         assert_equal(converter.default, 0)

248:         assert_equal(

255:         assert_(converter(val) == -9223372036854775807)

257:         assert_(converter(val) == 9223372036854775807)

263:         assert_(converter(val) == 9223372043271415339)

271:         assert_equal(has_nested_fields(ndtype), False)

273:         assert_equal(has_nested_fields(ndtype), False)

275:         assert_equal(has_nested_fields(ndtype), True)

281:         assert_equal(easy_dtype(ndtype), np.dtype(float))

284:         assert_equal(easy_dtype(ndtype),

287:         assert_equal(easy_dtype(ndtype, defaultfmt="field_%03i"),

291:         assert_equal(easy_dtype(ndtype, names="a, b"),

295:         assert_equal(easy_dtype(ndtype, names="a, b, c"),

299:         assert_equal(easy_dtype(ndtype, names=", b"),

302:         assert_equal(easy_dtype(ndtype, names="a", defaultfmt="f%02i"),

306:         assert_equal(easy_dtype(ndtype), np.dtype([('A', int), ('B', float)]))

308:         assert_equal(easy_dtype(ndtype, names="a,b"),

311:         assert_equal(easy_dtype(ndtype, names="a"),

314:         assert_equal(easy_dtype(ndtype, names="a,b,c"),

318:         assert_equal(easy_dtype(ndtype),

322:         assert_equal(easy_dtype(ndtype, names="a, b, c"),

326:         assert_equal(easy_dtype(ndtype, names="a, b, c"),

330:         assert_equal(

339:         assert_equal(dt_flat, [float, float])

343:         assert_equal(dt_flat, [np.dtype('|S1'), np.dtype('|S2'), int])

347:         assert_equal(dt_flat, [float, int])

349:         assert_equal(dt_flat, [float] * 2 + [int] * 3)

353:         assert_equal(dt_flat, [float, float])

Total asserts: 84

Filename: numpy/lib/tests/test_shape_base.py
12:     assert_, assert_equal, assert_array_equal, assert_raises, assert_warns

47:                 assert_equal(a_func, take_along_axis(a, ai_func, axis=axis))

58:         assert_raises(ValueError, take_along_axis, a, np.array(1), axis=1)

60:         assert_raises(IndexError, take_along_axis, a, ai.astype(bool), axis=1)

62:         assert_raises(IndexError, take_along_axis, a, ai.astype(float), axis=1)

64:         assert_raises(np.AxisError, take_along_axis, a, ai, axis=10)

72:         assert_equal(actual.shape, ai.shape)

79:         assert_equal(actual.shape, (3, 2, 5))

97:             assert_equal(i_min, i_max)

104:         assert_equal(take_along_axis(a, ai, axis=1), 20)

110:         assert_array_equal(

115:         assert_array_equal(

120:         assert_array_equal(apply_along_axis(np.sum, 0, a),

134:         assert_(isinstance(result, MyNDArray))

135:         assert_array_equal(result, expected)

138:         assert_(isinstance(result, MyNDArray))

139:         assert_array_equal(result, expected)

150:         assert_array_equal(

157:         assert_(isinstance(res, cls))

158:         assert_array_equal(res, np.array([6, 6, 6]).view(cls))

163:             assert_equal(x.ndim, 1)

167:         assert_(isinstance(res, cls))

168:         assert_array_equal(res, np.array([6, 6, 6]).view(cls))

171:         assert_(isinstance(res, cls))

172:         assert_array_equal(res, np.array([3, 3, 3, 3, 3, 3]).view(cls))

177:             assert_equal(x.ndim, 1)

187:         assert_equal(type(actual), type(expected))

188:         assert_equal(actual, expected)

195:         assert_equal(type(actual), type(expected))

196:         assert_equal(actual, expected)

208:         assert_equal(type(actual), type(expected))

209:         assert_equal(actual, expected)

221:             assert_equal(x.ndim, 1)

226:         assert_(isinstance(res, np.ma.masked_array))

227:         assert_equal(res.ndim, 3)

228:         assert_array_equal(res[
229:         assert_array_equal(res[
230:         assert_array_equal(res[
236:         assert_array_equal(res, np.array([[2, 1], [4, 3]]))

241:             assert_(False) # should never be reached

244:         assert_raises(ValueError, np.apply_along_axis, never_call, 0, a)

245:         assert_raises(ValueError, np.apply_along_axis, never_call, 1, a)

249:             assert_(len(x) == 0)

254:         assert_equal(actual, np.ones(10))

255:         assert_raises(ValueError, np.apply_along_axis, empty_to_1, 0, a)

266:         assert_equal(actual, expected)

268:         # issue 8642 - assert_equal doesn't detect this!

270:             assert_equal(type(actual[i]), type(expected[i]))

277:         assert_array_equal(aoa_a, np.array([[[60], [92], [124]]]))

286:             assert_(b.shape[axis] == 1)

287:             assert_(np.squeeze(b).shape == s)

291:         assert np.expand_dims(a, axis=(0, 1, 2)).shape == (1, 1, 1, 3, 3, 3)

292:         assert np.expand_dims(a, axis=(0, -1, -2)).shape == (1, 3, 3, 3, 1, 1)

293:         assert np.expand_dims(a, axis=(0, 3, 5)).shape == (1, 3, 3, 1, 3, 1)

294:         assert np.expand_dims(a, axis=(0, -3, -5)).shape == (1, 1, 3, 1, 3, 3)

299:         assert_raises(np.AxisError, expand_dims, a, -6)

300:         assert_raises(np.AxisError, expand_dims, a, 5)

303:         assert_raises(np.AxisError, expand_dims, a, (0, -6))

304:         assert_raises(np.AxisError, expand_dims, a, (0, 5))

308:         assert_raises(ValueError, expand_dims, a, axis=(1, 1))

315:         assert_(isinstance(expanded, np.ma.MaskedArray))

316:         assert_equal(expanded.shape, (2, 1, 5))

317:         assert_equal(expanded.mask.shape, (2, 1, 5))

323:         assert_raises(ValueError, array_split, a, 0)

392:         assert_(a.dtype.type is res[-1].dtype.type)

399:         assert_(a.dtype.type is res[-1].dtype.type)

417:         assert_(a.dtype.type is res[-1].dtype.type)

427:             assert_equal(res[i].shape, tgt[i].shape)

467:         assert_raises(ValueError, split, a, 3)

472:         assert_raises(TypeError, column_stack, 1)

482:         assert_equal(actual, expected)

492:         assert_equal(actual, expected)

495:         with assert_warns(FutureWarning)
501:         assert_raises(TypeError, dstack, 1)

508:         assert_array_equal(res, desired)

515:         assert_array_equal(res, desired)

522:         assert_array_equal(res, desired)

529:         assert_array_equal(res, desired)

532:         with assert_warns(FutureWarning)
543:         assert_raises(ValueError, hsplit, 1, 1)

549:             assert_(0)

572:         assert_raises(ValueError, vsplit, 1, 1)

576:         assert_raises(ValueError, vsplit, a, 2)

582:             assert_(0)

597:         assert_raises(ValueError, dsplit, 1, 1)

601:         assert_raises(ValueError, dsplit, a, 2)

605:         assert_raises(ValueError, dsplit, a, 2)

612:             assert_(0)

634:         assert_array_equal(np.squeeze(a), np.reshape(a, (20, 10, 10)))

635:         assert_array_equal(np.squeeze(b), np.reshape(b, (20, 10, 20)))

636:         assert_array_equal(np.squeeze(c), np.reshape(c, (20, 10)))

641:         assert_equal(res, 1.5)

642:         assert_equal(res.ndim, 0)

643:         assert_equal(type(res), np.ndarray)

653:         assert_equal(type(kron(a, a)), np.ndarray)

654:         assert_equal(type(kron(ma, ma)), myarray)

655:         assert_equal(type(kron(a, ma)), myarray)

656:         assert_equal(type(kron(ma, a)), myarray)

666:         assert_array_equal(np.kron(a, b), k)

673:         assert_array_equal(k, np.kron(x, x))

692:         assert np.array_equal(

700:         assert_equal(tile(a, 2), [0, 1, 2, 0, 1, 2])

701:         assert_equal(tile(a, (2, 2)), [[0, 1, 2, 0, 1, 2], [0, 1, 2, 0, 1, 2]])

702:         assert_equal(tile(a, (1, 2)), [[0, 1, 2, 0, 1, 2]])

703:         assert_equal(tile(b, 2), [[1, 2, 1, 2], [3, 4, 3, 4]])

704:         assert_equal(tile(b, (2, 1)), [[1, 2], [3, 4], [1, 2], [3, 4]])

705:         assert_equal(tile(b, (2, 2)), [[1, 2, 1, 2], [3, 4, 3, 4],

712:         assert_equal(a, np.arange(5))

719:         assert_equal(c, (2, 0))

720:         assert_equal(d, (3, 2, 0))

733:                 assert_equal(large, klarge)

740:         assert_(np.may_share_memory(d, d))

741:         assert_(np.may_share_memory(d, d[
742:         assert_(np.may_share_memory(d, d[
743:         assert_(np.may_share_memory(d, d[1
745:         assert_(not np.may_share_memory(d[
746:         assert_(not np.may_share_memory(d[
747:         assert_(not np.may_share_memory(d[1
748:         assert_(np.may_share_memory(d2[1
758:         assert_array_equal(x, y)

Total asserts: 120

Filename: numpy/lib/tests/test_ufunclike.py
5:     assert_, assert_equal, assert_array_equal, assert_warns, assert_raises

17:         assert_equal(res, tgt)

19:         assert_equal(res, tgt)

20:         assert_equal(out, tgt)

23:         with assert_raises(TypeError)
32:         assert_equal(res, tgt)

34:         assert_equal(res, tgt)

35:         assert_equal(out, tgt)

38:         with assert_raises(TypeError)
47:         assert_equal(res, tgt)

49:         assert_equal(res, tgt)

50:         assert_equal(out, tgt)

51:         assert_equal(ufl.fix(3.14), 3)

72:         assert_array_equal(f, nx.array([1, -1]))

73:         assert_(isinstance(f, MyArray))

74:         assert_equal(f.metadata, 'foo')

80:         assert_(isinstance(f0d, MyArray))

81:         assert_equal(f0d.metadata, 'bar')

85:         assert_warns(DeprecationWarning, ufl.fix, [1, 2], y=nx.empty(2))

86:         assert_warns(DeprecationWarning, ufl.isposinf, [1, 2], y=nx.empty(2))

87:         assert_warns(DeprecationWarning, ufl.isneginf, [1, 2], y=nx.empty(2))

93:         assert_equal(actual, expected)

94:         assert_equal(type(actual), type(expected))

99:         assert_equal(actual, expected)

100:         assert_equal(type(actual), type(expected))

104:         assert_(actual is out)

Total asserts: 26

Filename: numpy/lib/tests/test_index_tricks.py
5:     assert_, assert_equal, assert_array_equal, assert_almost_equal,

6:     assert_array_almost_equal, assert_raises, assert_raises_regex,

16:         assert_equal(np.unravel_index(2, (2, 2)), (1, 0))

19:         assert_equal(np.unravel_index(indices=2,

25:         with assert_raises(TypeError)
28:         with assert_raises(TypeError)
31:         with assert_raises(TypeError)
34:         with assert_raises(TypeError)
37:         assert_equal(np.ravel_multi_index((1, 0), (2, 2)), 2)

38:         assert_equal(np.unravel_index(254, (17, 94)), (2, 66))

39:         assert_equal(np.ravel_multi_index((2, 66), (17, 94)), 254)

40:         assert_raises(ValueError, np.unravel_index, -1, (2, 2))

41:         assert_raises(TypeError, np.unravel_index, 0.5, (2, 2))

42:         assert_raises(ValueError, np.unravel_index, 4, (2, 2))

43:         assert_raises(ValueError, np.ravel_multi_index, (-3, 1), (2, 2))

44:         assert_raises(ValueError, np.ravel_multi_index, (2, 1), (2, 2))

45:         assert_raises(ValueError, np.ravel_multi_index, (0, -3), (2, 2))

46:         assert_raises(ValueError, np.ravel_multi_index, (0, 2), (2, 2))

47:         assert_raises(TypeError, np.ravel_multi_index, (0.1, 0.), (2, 2))

49:         assert_equal(np.unravel_index((2*3 + 1)*6 + 4, (4, 3, 6)), [2, 1, 4])

50:         assert_equal(

54:         assert_equal(np.ravel_multi_index(arr, (7, 6)), [22, 41, 37])

55:         assert_equal(

57:         assert_equal(

59:         assert_equal(np.ravel_multi_index(arr, (4, 4), mode=('clip', 'wrap')),

61:         assert_equal(np.ravel_multi_index((3, 1, 4, 1), (6, 7, 8, 9)), 1621)

63:         assert_equal(np.unravel_index(np.array([22, 41, 37]), (7, 6)),

65:         assert_equal(

68:         assert_equal(np.unravel_index(1621, (6, 7, 8, 9)), [3, 1, 4, 1])

73:         assert_raises_regex(TypeError, msg1, np.unravel_index, [], (10, 3, 5))

74:         assert_raises_regex(TypeError, msg1, np.unravel_index, (), (10, 3, 5))

75:         assert_raises_regex(TypeError, msg2, np.unravel_index, np.array([]),

77:         assert_equal(np.unravel_index(np.array([],dtype=int), (10, 3, 5)),

79:         assert_raises_regex(TypeError, msg1, np.ravel_multi_index, ([], []),

81:         assert_raises_regex(TypeError, msg1, np.ravel_multi_index, ([], ['abc']),

83:         assert_raises_regex(TypeError, msg2, np.ravel_multi_index,

85:         assert_equal(np.ravel_multi_index(

87:         assert_equal(np.ravel_multi_index(np.array([[], []], dtype=int),

95:             assert_equal(

100:         assert_raises(ValueError, np.unravel_index, 1, (2**32-1, 2**31+1))

105:         assert_equal(

107:         assert_raises(ValueError,

109:         assert_equal(

111:         assert_raises(ValueError,

122:             assert_equal(np.ravel_multi_index(coords, shape), uncoords)

123:             assert_equal(coords, np.unravel_index(uncoords, shape))

125:             assert_equal(

127:             assert_equal(coords, np.unravel_index(uncoords, shape, order='F'))

134:             assert_equal(np.ravel_multi_index(coords, shape), uncoords)

135:             assert_equal(coords, np.unravel_index(uncoords, shape))

137:             assert_equal(

139:             assert_equal(coords, np.unravel_index(uncoords, shape, order='F'))

143:         assert_equal(

146:         assert_equal(np.ravel_multi_index([5, 1, -1, 2], (4, 3, 7, 12),

150:         assert_raises(

156:         assert_(x.flags.writeable)

157:         assert_(y.flags.writeable)

162:         assert_equal(x, ())

164:         assert_raises_regex(ValueError, "0d array", np.unravel_index, [0], ())

165:         assert_raises_regex(

172:         assert(res.shape == (0,))

174:         with assert_raises(ValueError)
181:         assert(len(res) == 3)

182:         assert(all(a.shape == (0,) for a in res))

184:         with assert_raises(ValueError)
191:         assert_(a.shape == (10,))

192:         assert_(b.shape == (20,))

193:         assert_(a[0] == -1)

194:         assert_almost_equal(a[-1], 1)

195:         assert_(b[0] == -1)

196:         assert_almost_equal(b[1]-b[0], 0.1, 11)

197:         assert_almost_equal(b[-1], b[0]+19*0.1, 11)

198:         assert_almost_equal(a[1]-a[0], 2.0/9.0, 11)

202:         assert_almost_equal(st, 8/49.0)

203:         assert_array_almost_equal(y, mgrid[2
208:         assert_(c.shape == (2, 10, 10))

209:         assert_(d.shape == (2, 20, 20))

210:         assert_array_equal(c[0][0, 
211:         assert_array_equal(c[1][
212:         assert_array_almost_equal(c[0][-1, 
213:         assert_array_almost_equal(c[1][
214:         assert_array_almost_equal(d[0, 1, 
216:         assert_array_almost_equal(d[1, 
226:             assert_equal(f, b)

241:         assert_equal(grid.size, expected[0])

242:         assert_equal(grid_small.size, expected[1])

248:         assert_(grid32.dtype == np.float64)

249:         assert_array_almost_equal(grid64, grid32)

254:         assert_(grid32.dtype == np.float64)

255:         assert_array_almost_equal(grid64, grid32)

259:         assert_array_almost_equal(

264:         assert_array_almost_equal(

270:         assert_array_equal(r_[1, 2, 3, 4, 5, 6], np.array([1, 2, 3, 4, 5, 6]))

273:         assert_array_equal(c, [1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1])

277:         assert_(g.dtype == 'f8')

281:         assert_(g.dtype == 'f8')

286:         assert_(g.shape == (100,))

290:         assert_(g.shape == (100,))

296:         assert_(d.shape == (5, 10))

297:         assert_array_equal(d[
298:         assert_array_equal(d[
300:         assert_(d.shape == (10, 5))

301:         assert_array_equal(d[
302:         assert_array_equal(d[5
305:         assert_equal(r_[0, np.array(1), 2], [0, 1, 2])

306:         assert_equal(r_[[0, 1, 2], np.array(3)], [0, 1, 2, 3])

307:         assert_equal(r_[np.array(0), [1, 2, 3]], [0, 1, 2, 3])

313:         assert_equal(list(ndenumerate(a)),

321:         assert_equal(a[
322:         assert_equal(a[
327:         assert_equal(a[
328:         assert_equal(a[
335:         assert_equal(a.dtype, np.intp)

338:         assert_equal(a.dtype, np.intp)

342:         assert_equal(a.dtype, np.float32)

350:                 assert_equal(a.shape[k], sz)

351:                 assert_(all(sh == 1 for j, sh in enumerate(a.shape) if j != k))

352:                 assert_(np.issubdtype(a.dtype, np.integer))

357:         assert_equal(np.ix_(bool_a)[0], int_a)

361:         assert_raises(ValueError, np.ix_, idx2d)

367:         assert_equal(out[0].shape, (length_of_vector, 1))

368:         assert_equal(out[1].shape, (1, length_of_vector))

370:         assert_equal(x.shape, (length_of_vector,))

375:     assert_equal(a, [[1, 2, 3, 0, 0, 4, 5, 6]])

382:         assert_array_equal(

391:         assert_array_equal(

407:         assert_array_equal(

423:         assert_array_equal(

433:         assert_equal(np.where(a != 0), (i, i, i, i))

438:         with assert_raises_regex(ValueError, "at least 2-d")
445:         with assert_raises_regex(ValueError, "equal length")
456:     assert_array_equal(

469:     assert_array_equal(

482:         assert_array_equal(r, np.arange(4))

483:         assert_array_equal(c, np.arange(4))

487:         with assert_raises_regex(ValueError, "at least 2-d")
492:         with assert_raises_regex(ValueError, "equal length")
499:     assert_array_equal(x, expected)

502:     assert_array_equal(x, expected)

506:     assert_array_equal(x, list(ndindex(3)))

510:     assert_equal(x, [()])

513:     assert_equal(x, [()])

517:     assert_equal(x, [])

Total asserts: 143

Filename: numpy/lib/tests/test_arrayterator.py
7: from numpy.testing import assert_

25:         assert_(len(block.flat) <= (buf_size or els))

28:     assert_(list(b.flat) == list(a.flat))

40:         assert_(len(block.flat) <= (buf_size or els))

43:     assert_(np.all(c.__array__() == d))

46:     assert_(list(c.flat) == list(d.flat))

Total asserts: 6

Filename: numpy/lib/tests/test__version.py
4: from numpy.testing import assert_, assert_raises

9:     assert_(NumpyVersion('1.8.0') == '1.8.0')

11:         assert_(NumpyVersion('1.8.0') < ver)

14:         assert_(NumpyVersion('1.8.0') > ver)

19:     assert_(NumpyVersion('1.9.0') < '1.10.0')

20:     assert_(NumpyVersion('1.11.0') < '1.11.1')

21:     assert_(NumpyVersion('1.11.0') == '1.11.0')

22:     assert_(NumpyVersion('1.99.11') < '1.99.12')

26:     assert_(NumpyVersion('1.8.0rc1') == '1.8.0rc1')

28:         assert_(NumpyVersion('1.8.0rc1') < ver)

31:         assert_(NumpyVersion('1.8.0rc1') > ver)

33:     assert_(NumpyVersion('1.8.0b1') > '1.8.0a2')

37:     assert_(NumpyVersion('1.9.0.dev-Unknown') < '1.9.0')

39:         assert_(NumpyVersion('1.9.0.dev-f16acvda') < ver)

41:     assert_(NumpyVersion('1.9.0.dev-f16acvda') == '1.9.0.dev-11111111')

45:     assert_(NumpyVersion('1.9.0a2.dev-f16acvda') == '1.9.0a2.dev-11111111')

46:     assert_(NumpyVersion('1.9.0a2.dev-6acvda54') < '1.9.0a2')

50:     assert_(NumpyVersion('1.9.0.dev0+Unknown') < '1.9.0')

52:         assert_(NumpyVersion('1.9.0.dev0+f16acvda') < ver)

54:     assert_(NumpyVersion('1.9.0.dev0+f16acvda') == '1.9.0.dev0+11111111')

58:     assert_(NumpyVersion('1.9.0a2.dev0+f16acvda') == '1.9.0a2.dev0+11111111')

59:     assert_(NumpyVersion('1.9.0a2.dev0+6acvda54') < '1.9.0a2')

64:         assert_raises(ValueError, NumpyVersion, ver)

Total asserts: 23

Filename: numpy/lib/tests/test_io.py
23: from numpy.ma.testutils import assert_equal

25:     assert_warns, assert_, assert_raises_regex, assert_raises,

26:     assert_allclose, assert_array_equal, temppath, tempdir, IS_PYPY,

27:     HAS_REFCOUNT, suppress_warnings, assert_no_gc_cycles, assert_no_warnings,

186:         assert_equal(self.arr[0], self.arr_reloaded)

187:         assert_equal(self.arr[0].dtype, self.arr_reloaded.dtype)

188:         assert_equal(self.arr[0].flags.fnc, self.arr_reloaded.flags.fnc)

197:                 assert_equal(arr, reloaded)

198:                 assert_equal(arr.dtype, reloaded.dtype)

199:                 assert_equal(arr.flags.fnc, reloaded.flags.fnc)

231:         assert_equal(a, l['file_a'])

232:         assert_equal(b, l['file_b'])

241:         assert_equal(sorted(dir(l.f)), ['file_a','file_b'])

242:         assert_equal(a, l.f.file_a)

243:         assert_equal(b, l.f.file_b)

276:                 assert_(not fp.closed)

279:                 assert_(not fp.closed)

281:                 assert_(not fp.closed)

320:             assert_(fp.closed)

330:         assert_equal(c.readlines(),

338:         assert_equal(c.readlines(), [b'1 2\n', b'3 4\n'])

346:         assert_equal(lines, [b'1\n', b'2\n', b'3\n', b'4\n'])

350:         assert_raises(ValueError, np.savetxt, c, np.array(1))

351:         assert_raises(ValueError, np.savetxt, c, np.array([[[1], [2]]]))

358:         assert_equal(c.readlines(), [b'1 2\n', b'3 4\n'])

368:         assert_equal(c.readlines(), [b'1 3\n', b'4 6\n'])

377:             assert_array_equal(data, v)

384:         assert_equal(c.readlines(), [b'1,2\n', b'3,4\n'])

392:         assert_equal(c.readlines(), [b'01 2.0\n', b'03 4.0\n'])

399:         assert_equal(lines, [b'01 
406:         assert_equal(lines, [b'01 
410:         assert_raises(ValueError, np.savetxt, c, a, fmt=99)

421:         assert_equal(c.read(),

427:         assert_equal(c.read(),

435:         assert_equal(c.read(),

443:         assert_equal(c.read(),

451:             assert_array_equal(a, b)

466:         assert_equal(

476:         assert_equal(

486:         assert_equal(

503:         assert_equal(

519:         assert_array_equal(a, b)

544:                 assert_array_equal(a, b)

552:         assert_equal(s.read().decode('UTF-8'), utf8 + '\n')

560:         assert_equal(s.read(), utf8 + '\n')

571:             assert_equal(s.read(), u"%f\n" % 1.)

573:             assert_equal(s.read(), b"%f\n" % 1.)

605:         assert p.exitcode == 0

619:                     assert_array_equal(res, wanted)

622:                     assert_array_equal(res, wanted)

640:             assert_array_equal(x, [0., 1., 2.])

649:             assert_array_equal(x, nonascii)

654:         assert_array_equal(v, np.array(utf16.decode('UTF-16').split()))

664:         assert_array_equal(x, a)

676:             assert_array_equal(x, a)

695:         assert_array_equal(x, a)

705:         assert_array_equal(y, b)

714:         assert_array_equal(x, a)

719:         assert_array_equal(x, a)

727:         assert_array_equal(x, a)

734:         assert_array_equal(x, a)

743:         assert_array_equal(x, a)

753:         assert_array_equal(x, a)

762:         assert_array_equal(x, a)

771:         assert_array_equal(x, a)

780:         assert_array_equal(x, a)

791:         assert_array_equal(x, a)

797:         assert_raises(ValueError, np.loadtxt, c, dtype=int, delimiter=',',

807:         assert_array_equal(x, a)

815:         assert_array_equal(x, a)

823:         assert_array_equal(x, a[
830:         assert_array_equal(x, a[
835:         assert_array_equal(x, a[
844:             assert_array_equal(x, a[
854:         assert_array_equal(x, a[
858:         assert_array_equal(x, a[
868:         assert_equal(arr['stid'], [b"JOE", b"BOB"])

869:         assert_equal(arr['temp'], [25.3, 27.9])

874:         assert_raises_regex(

880:         assert_raises_regex(

904:         assert_array_equal(x, a)

913:         assert_array_equal(x, a)

923:         assert_array_equal(x, a)

932:             assert_array_equal(x, a)

938:             assert_equal(x.shape, (0,))

940:             assert_equal(x.shape, (0,))

941:             assert_(x.dtype == np.int64)

949:         assert_array_equal(data, [21, 42])

954:         assert_array_equal(data, [33, 66])

968:         assert_equal(test, control)

976:         assert_equal(res, tgt)

984:         assert_equal(res, tgt)

998:             assert_equal(res, tgt, err_msg="%s" % dt)

1030:         assert_equal(res, tgt)

1046:         assert_(txt_bad != txt)

1050:         assert_equal(res, a)

1057:         assert_array_equal(data, [[1, 21], [3, 42]])

1067:         assert_array_equal(x['comment'], a)

1073:         assert_(a.dtype.str == '|S1')

1074:         assert_(b.dtype.str == '<i4')

1075:         assert_(c.dtype.str == '<f4')

1076:         assert_array_equal(a, np.array([b'M', b'F']))

1077:         assert_array_equal(b, np.array([21, 35]))

1078:         assert_array_equal(c, np.array([72.,  58.]))

1084:         assert_raises(ValueError, np.loadtxt, c, ndmin=3)

1086:         assert_raises(ValueError, np.loadtxt, c, ndmin=1.5)

1090:         assert_array_equal(x, a)

1096:         assert_(x.shape == (1, 3))

1099:         assert_(x.shape == (3,))

1102:         assert_(x.shape == (3,))

1108:         assert_(x.shape == (3, 1))

1111:         assert_(x.shape == (3,))

1114:         assert_(x.shape == (3,))

1119:             assert_(np.loadtxt(f, ndmin=2).shape == (0, 1,))

1120:             assert_(np.loadtxt(f, ndmin=1).shape == (0,))

1128:         assert_array_equal(res, np.arange(10))

1136:         assert_raises_regex(ValueError, "3", np.loadtxt, c)

1157:             assert_array_equal(x, sutf8)

1162:             assert_array_equal(x, np.array(x, dtype="S"))

1171:         assert_array_equal(x, a)

1180:         assert_array_equal(x, a)

1188:         assert_array_equal(x, a)

1197:         assert_array_equal(x, a)

1201:         assert_array_equal(x, a)

1211:         assert_array_equal(x, a)

1227:             assert_array_equal(res, [[-1, 0], [1, 2], [3, 4]][skip
1248:         assert_array_equal(x, a)

1259:         assert_array_equal(x, a)

1269:         assert_array_equal(x, a)

1283:             assert_array_equal(x, a)

1287:             assert_array_equal(x, a)

1295:         assert_array_equal(x, a)

1315:         assert_equal(test, control)

1323:         assert_equal(test, control)

1330:         assert_array_equal(test, control)

1335:         assert_array_equal(test, control)

1343:         assert_array_equal(test, control)

1347:         assert_array_equal(test, control)

1355:         assert_equal(test, control)

1359:         assert_equal(test, control)

1368:         assert_equal(test, control)

1372:         assert_equal(test, control)

1383:         assert_equal(test, ctrl)

1390:             assert_raises(ValueError, np.genfromtxt,

1396:             assert_equal(a, np.array([[1., 1.], [2., 2.], [3., 3.], [4., 4.]]))

1399:             assert_equal(a, np.array([[1., 1.], [2., 2.], [3., 3.], [4., 4.]]))

1404:             assert_equal(a, np.array([[1., 1.], [3., 3.], [4., 4.], [6., 6.]]))

1407:             assert_equal(a, np.array([[1., 1.], [3., 3.], [4., 4.]]))

1415:             assert_(w[0].category is np.VisibleDeprecationWarning)

1419:         assert_equal(test['gender'], control['gender'])

1420:         assert_equal(test['age'], control['age'])

1421:         assert_equal(test['weight'], control['weight'])

1429:             assert_(w[0].category is np.VisibleDeprecationWarning)

1435:         assert_equal(test.dtype.names, ['f0', 'f1', 'f2', 'f3', 'f4'])

1437:             assert_equal(test['f%i' % i], ctrl)

1444:         assert_equal(test, control)

1452:         assert_equal(test, control)

1464:         assert_equal(test, control)

1482:             assert_(w[0].category is np.VisibleDeprecationWarning)

1485:         assert_equal(test, ctrl)

1496:             assert_(w[0].category is np.VisibleDeprecationWarning)

1497:         assert_equal(test, ctrl)

1504:         assert_equal(test, control)

1515:             with assert_no_warnings()
1526:             assert_(w[0].category is np.VisibleDeprecationWarning)

1529:         assert_equal(test, control)

1538:         assert_equal(test, control)

1548:             assert_(w[0].category is np.VisibleDeprecationWarning)

1551:         assert_equal(test, control)

1562:         assert_equal(test, control)

1573:         assert_equal(test, control)

1580:         assert_equal(test, [21, 42])

1585:         assert_equal(test, [33, 66])

1598:         assert_raises(ConverterError, np.genfromtxt, s, **kwargs)

1606:         assert_equal(test, control)

1614:         assert_equal(test, control)

1618:         assert_equal(test, control)

1628:         assert_equal(test, control)

1633:         assert_equal(test, control)

1647:         assert_equal(test, control)

1650:         with assert_raises_regex(NotImplementedError,

1657:         with assert_raises_regex(NotImplementedError,

1665:         assert parsed[()] == b"1"

1667:         assert parsed[()] == b"string"

1676:         assert_equal(test, control)

1688:         assert_equal(test, control)

1696:         assert_equal(test, control)

1703:         assert_equal(test, control)

1710:         assert_equal(test, control)

1719:         assert_equal(test.data, ctrl_d)

1720:         assert_equal(test.mask, ctrl_m)

1730:         assert_equal(test, control[
1737:         assert_equal(test, control[
1741:         assert_equal(test, control[
1749:         assert_equal(test, ctrl)

1758:         assert_equal(test['stid'], [b"JOE", b"BOB"])

1759:         assert_equal(test['temp'], [25.3, 27.9])

1764:         assert_equal(test, np.array([1., 4.]))

1772:         assert_equal(test, ctrl)

1775:         assert_equal(test, ctrl)

1783:             assert_equal(test, np.array([]))

1787:             assert_equal(test, np.array([]))

1795:         assert_equal(test, control)

1804:         assert_array_equal(x, a)

1813:         assert_equal(test, control)

1814:         assert_equal(test.mask, control.mask)

1821:         assert_equal(test, control)

1822:         assert_equal(test.mask, control.mask)

1835:         assert_equal(test, control)

1844:         assert_equal(test, control)

1854:         assert_equal(test, control)

1868:         assert_equal(test, ctrl)

1872:         assert_equal(test, ctrl)

1878:         assert_equal(test, ctrl)

1882:         assert_equal(test, ctrl)

1891:         assert_equal(test, control)

1892:         assert_equal(test.mask, control.mask)

1900:         assert_equal(test, control)

1910:         assert_equal(test, control)

1923:         mtest = assert_warns(ConversionWarning, f)

1924:         assert_equal(len(mtest), 45)

1925:         assert_equal(mtest, np.ones(45, dtype=[(_, int) for _ in 'abcde']))

1928:         assert_raises(ValueError, np.genfromtxt, mdata,

1943:         mtest = assert_warns(ConversionWarning, f)

1944:         assert_equal(len(mtest), 45)

1945:         assert_equal(mtest, np.ones(45, dtype=[(_, int) for _ in 'ae']))

1949:         assert_equal(len(mtest), 50)

1952:         assert_equal(mtest, control)

1962:         assert_raises(ValueError, np.genfromtxt, mdata, **kwargs)

1971:         assert_equal(mtest, ctrl)

1979:         assert_equal(mtest, ctrl)

1988:         assert_equal(mtest, ctrl)

1997:         assert_equal(mtest, ctrl)

2006:         assert_equal(mtest, ctrl)

2015:             assert_(w[0].category is np.VisibleDeprecationWarning)

2018:         assert_equal(mtest, ctrl)

2022:             assert_(w[0].category is np.VisibleDeprecationWarning)

2025:         assert_equal(mtest, ctrl)

2035:         assert_equal(test, ctrl)

2042:         assert_equal(test, ctrl)

2049:         assert_equal(test, ctrl)

2059:         assert_equal(test, ctrl)

2066:         assert_equal(test, ctrl)

2073:         assert_equal(test, ctrl)

2083:         assert_equal(test, ctrl)

2096:         assert_equal(test, ctrl)

2105:         assert_equal(test.dtype.names, ctrl_names)

2110:         assert_equal(test.dtype.names, ctrl_names)

2115:         assert_equal(test.dtype.names, ctrl_names)

2124:         assert_equal(test, ctrl)

2130:         assert_equal(test, ctrl)

2138:         assert_equal(test, ctrl)

2146:             assert_(w[0].category is np.VisibleDeprecationWarning)

2147:         assert_equal(test[1], b'testNonetherestofthedata')

2152:             assert_(w[0].category is np.VisibleDeprecationWarning)

2153:         assert_equal(test[1], b' testNonetherestofthedata')

2164:             assert_(w[0].category is np.VisibleDeprecationWarning)

2165:         assert_equal(test[1, 0], b"test1")

2166:         assert_equal(test[1, 1], b"testNonethe" + latin1)

2167:         assert_equal(test[1, 2], b"test3")

2171:         assert_equal(test[1, 0], u"test1")

2172:         assert_equal(test[1, 1], u"testNonethe" + latin1.decode('latin1'))

2173:         assert_equal(test[1, 2], u"test3")

2179:             assert_(w[0].category is np.VisibleDeprecationWarning)

2180:         assert_equal(test['f0'], 0)

2181:         assert_equal(test['f1'], b"testNonethe" + latin1)

2186:         assert_array_equal(v, np.array(utf16.decode('UTF-16').split()))

2197:             assert_(w[0].category is np.VisibleDeprecationWarning)

2202:         assert_array_equal(test, ctl)

2215:             assert_array_equal(test, ctl)

2222:             assert_equal(test['f0'], 0)

2223:             assert_equal(test['f1'], "testNonethe" + utf8.decode("UTF-8"))

2252:                 assert_(w[0].category is np.VisibleDeprecationWarning)

2258:             assert_array_equal(test, ctl)

2267:         assert_(isinstance(test, np.recarray))

2268:         assert_equal(test, control)

2275:         assert_equal(test, control)

2276:         assert_equal(test.mask, control.mask)

2277:         assert_equal(test.A, [0, 2])

2286:         assert_(isinstance(test, np.recarray))

2287:         assert_equal(test, control)

2294:         assert_equal(test, control)

2295:         assert_equal(test.mask, control.mask)

2296:         assert_equal(test.A, [0, 2])

2302:         assert_(isinstance(test, np.recarray))

2303:         assert_equal(test, control)

2310:         assert_(isinstance(test, np.recarray))

2311:         assert_equal(test, control)

2317:         assert_equal(test.dtype, control.dtype)

2318:         assert_equal(test, control)

2326:         assert_equal(a1, [[1, 2], [3, 4], [5, 6]])

2327:         assert_equal(a2, [[7, 8], [9, 10]])

2330:         assert_raises(ValueError, np.genfromtxt, TextIO(data), max_rows=0)

2337:         assert_equal(test, control)

2340:         assert_raises(ValueError, np.genfromtxt, TextIO(data), skip_footer=1,

2344:         assert_raises(ValueError, np.genfromtxt, TextIO(data), max_rows=4)

2352:             assert_equal(test, control)

2356:             assert_equal(test, control)

2366:         assert_equal(test, control)

2372:         assert_equal(test, control)

2386:             assert_array_equal(res, tgt)

2402:                 assert_array_equal(np.genfromtxt(name), wanted)

2411:         assert_array_equal(res, np.arange(10))

2428:         assert_equal(test.dtype.names, ['f0', 'f1', 'f2'])

2430:         assert_(test.dtype['f0'] == float)

2431:         assert_(test.dtype['f1'] == np.int64)

2432:         assert_(test.dtype['f2'] == np.int_)

2434:         assert_allclose(test['f0'], 73786976294838206464.)

2435:         assert_equal(test['f1'], 17179869184)

2436:         assert_equal(test['f2'], 1024)

2441:         assert_array_equal(a, np.array([1.0, 4.0, 7.0, 0.0]))

2442:         assert_array_equal(b, np.array([2.0, 5.0, 8.0, 1.0]))

2443:         assert_array_equal(c, np.array([3.0, 6.0, 9.0, 2.0]))

2451:         assert_equal(a.dtype, np.dtype('S1'))

2452:         assert_equal(b.dtype, np.dtype('i4'))

2453:         assert_equal(c.dtype, np.dtype('f4'))

2454:         assert_array_equal(a, np.array([b'M', b'F']))

2455:         assert_array_equal(b, np.array([21, 35]))

2456:         assert_array_equal(c, np.array([72.,  58.]))

2465:             assert_array_equal(arr, result)

2466:             assert_equal(arr.dtype, result.dtype)

2475:         assert_array_equal(expected, test)

2476:         assert_equal(expected.dtype, test.dtype)

2486:         assert_array_equal(expected, test)

2487:         assert_equal((), test.shape)

2488:         assert_equal(expected.dtype, test.dtype)

2499:         assert_array_equal(a, b)

2510:             assert_array_equal(x, a)

2519:             assert_array_equal(data, a)

2528:             assert_array_equal(data, a)

2549:             assert_array_equal(data, a)

2557:                 assert_array_equal(data['lab'], 'place holder')

2565:             assert_array_equal(data['lab'], 'place holder')

2574:             assert_array_equal(a, data)

2586:             assert_(isinstance(test, np.recarray))

2587:             assert_equal(test, control)

2599:             assert_(isinstance(test, np.recarray))

2600:             assert_equal(test, control)

2614:     assert_array_equal(np.load(f), a)

2651:     assert_array_equal(np.load(f), a)

2673:     assert_array_equal(res, [1, 2, 3])

2684:     assert_array_equal(np.loadtxt(f), [1, 2, 3])

2697:     assert_('x' in z)

2698:     assert_('y' in z)

2699:     assert_('x' in z.keys())

2700:     assert_('y' in z.keys())

2703:         assert_(f in ['x', 'y'])

2704:         assert_equal(a.shape, (3, 3))

2706:     assert_(len(z.items()) == 2)

2709:         assert_(f in ['x', 'y'])

2711:     assert_('x' in z.keys())

2723:     with assert_no_gc_cycles()
2728:     with assert_no_gc_cycles()
2730:         assert_equal(x, np.array([((0, 1), (2, 3))], dtype=dt))

Total asserts: 354

Filename: numpy/lib/tests/test_arraysetops.py
6: from numpy.testing import (assert_array_equal, assert_equal,

7:                            assert_raises, assert_raises_regex)

23:         assert_array_equal(c, ec)

31:         assert_array_equal(c, ed)

32:         assert_array_equal([], intersect1d([], []))

42:         assert_array_equal(res, a)

44:         assert_array_equal(res, [1, 2, 3])

52:         assert_array_equal(c, ee)

53:         assert_array_equal(a[i1], ee)

54:         assert_array_equal(b[i2], ee)

61:         assert_array_equal(c, ef)

62:         assert_array_equal(a[i1], ef)

63:         assert_array_equal(b[i2], ef)

72:         assert_array_equal(ea, a[ui1])

73:         assert_array_equal(ea, b[ui2])

82:         assert_array_equal(ea, a[ui1])

83:         assert_array_equal(ea, b[ui2])

91:         assert_array_equal(c, ec)

98:         assert_array_equal(c, ec)

105:         assert_array_equal(c, ec)

107:         assert_array_equal([], setxor1d([], []))

114:         assert_array_equal([], ediff1d(zero_elem))

115:         assert_array_equal([0], ediff1d(zero_elem, to_begin=0))

116:         assert_array_equal([0], ediff1d(zero_elem, to_end=0))

117:         assert_array_equal([-1, 0], ediff1d(zero_elem, to_begin=-1, to_end=0))

118:         assert_array_equal([], ediff1d(one_elem))

119:         assert_array_equal([1], ediff1d(two_elem))

120:         assert_array_equal([7, 1, 9], ediff1d(two_elem, to_begin=7, to_end=9))

121:         assert_array_equal([5, 6, 1, 7, 8],

123:         assert_array_equal([1, 9], ediff1d(two_elem, to_end=9))

124:         assert_array_equal([1, 7, 8], ediff1d(two_elem, to_end=[7, 8]))

125:         assert_array_equal([7, 1], ediff1d(two_elem, to_begin=7))

126:         assert_array_equal([5, 6, 1], ediff1d(two_elem, to_begin=[5, 6]))

158:         with assert_raises_regex(TypeError, msg)
195:         assert_equal(actual, expected)

196:         assert actual.dtype == expected.dtype

207:         def assert_isin_equal(a, b)
210:             assert_array_equal(x, y)

215:         assert_isin_equal(a, b)

220:         assert_isin_equal(c, d)

224:         assert_isin_equal(f, b)

225:         assert_isin_equal(a, f)

226:         assert_isin_equal(f, f)

229:         assert_isin_equal(5, b)

230:         assert_isin_equal(a, 6)

231:         assert_isin_equal(5, 6)

235:         assert_isin_equal(x, b)

236:         assert_isin_equal(a, x)

237:         assert_isin_equal(x, x)

248:             assert_array_equal(c, ec)

253:             assert_array_equal(c, ec)

258:             assert_array_equal(c, ec)

265:             assert_array_equal(c, ec)

271:             assert_array_equal(c, ec)

277:             assert_array_equal(c, ec)

283:             assert_array_equal(c, ec)

289:             assert_array_equal(c, ec)

295:         assert_array_equal(c, ec)

297:         assert_array_equal(in1d([], []), [])

306:         assert_array_equal(c, ec)

315:             assert_array_equal(np.invert(in1d(a, b)), in1d(a, b, invert=True))

325:         assert_array_equal(in1d(a, b, assume_unique=True), ec)

326:         assert_array_equal(in1d(a, b, assume_unique=False), ec)

327:         assert_array_equal(in1d(a, long_b, assume_unique=True), ec)

328:         assert_array_equal(in1d(a, long_b, assume_unique=False), ec)

335:         assert_array_equal(result, expected)

342:         assert_array_equal(result, expected)

349:         assert_array_equal(result, expected)

359:         assert_array_equal(result, expected)

366:         assert_array_equal(result, expected)

368:         assert_array_equal(result, np.invert(expected))

381:         assert_array_equal(result, expected)

383:         assert_array_equal(result, np.invert(expected))

390:         assert_array_equal(result, expected)

392:         assert_array_equal(result, np.invert(expected))

400:         assert_array_equal(c, ec)

408:         assert_array_equal(z, ez)

410:         assert_array_equal([], union1d([], []))

418:         assert_array_equal(c, ec)

424:         assert_array_equal(c, ec)

426:         assert_array_equal([], setdiff1d([], []))

428:         assert_equal(setdiff1d(a, []).dtype, np.uint32)

435:         assert_equal(actual, expected)

440:         assert_array_equal(setdiff1d(a, b), np.array(['c']))

450:         assert_array_equal(c1, c2)

462:             assert_array_equal(v, b, msg)

466:             assert_array_equal(v, b, msg)

467:             assert_array_equal(j, i1, msg)

471:             assert_array_equal(v, b, msg)

472:             assert_array_equal(j, i2, msg)

476:             assert_array_equal(v, b, msg)

477:             assert_array_equal(j, c, msg)

481:             assert_array_equal(v, b, msg)

482:             assert_array_equal(j1, i1, msg)

483:             assert_array_equal(j2, i2, msg)

487:             assert_array_equal(v, b, msg)

488:             assert_array_equal(j1, i1, msg)

489:             assert_array_equal(j2, c, msg)

493:             assert_array_equal(v, b, msg)

494:             assert_array_equal(j1, i2, msg)

495:             assert_array_equal(j2, c, msg)

500:             assert_array_equal(v, b, msg)

501:             assert_array_equal(j1, i1, msg)

502:             assert_array_equal(j2, i2, msg)

503:             assert_array_equal(j3, c, msg)

538:         assert_array_equal(np.unique(aa), [1. - 1.j, 1. + 0.j])

545:         assert_array_equal(a1, unq)

547:         assert_array_equal(a2, unq)

548:         assert_array_equal(a2_inv, inv)

554:         assert_array_equal(a2_inv, np.zeros(5))

562:         assert_equal(a1_idx.dtype, np.intp)

563:         assert_equal(a2_inv.dtype, np.intp)

564:         assert_equal(a3_idx.dtype, np.intp)

565:         assert_equal(a3_inv.dtype, np.intp)

573:         assert_equal(np.unique(a), ua)

574:         assert_equal(np.unique(a, return_index=True), (ua, ua_idx))

575:         assert_equal(np.unique(a, return_inverse=True), (ua, ua_inv))

576:         assert_equal(np.unique(a, return_counts=True), (ua, ua_cnt))

584:         assert_equal(np.unique(a), ua)

585:         assert_equal(np.unique(a, return_index=True), (ua, ua_idx))

586:         assert_equal(np.unique(a, return_inverse=True), (ua, ua_inv))

587:         assert_equal(np.unique(a, return_counts=True), (ua, ua_cnt))

596:         assert_equal(np.unique(a), ua)

597:         assert_equal(np.unique(a, return_index=True), (ua, ua_idx))

598:         assert_equal(np.unique(a, return_inverse=True), (ua, ua_inv))

599:         assert_equal(np.unique(a, return_counts=True), (ua, ua_cnt))

608:         assert_equal(np.unique(a), ua)

609:         assert_equal(np.unique(a, return_index=True), (ua, ua_idx))

610:         assert_equal(np.unique(a, return_inverse=True), (ua, ua_inv))

611:         assert_equal(np.unique(a, return_counts=True), (ua, ua_cnt))

619:         assert_equal(np.unique(all_nans), ua)

620:         assert_equal(np.unique(all_nans, return_index=True), (ua, ua_idx))

621:         assert_equal(np.unique(all_nans, return_inverse=True), (ua, ua_inv))

622:         assert_equal(np.unique(all_nans, return_counts=True), (ua, ua_cnt))

625:         assert_raises(TypeError, self._run_axis_tests, object)

626:         assert_raises(TypeError, self._run_axis_tests,

629:         assert_raises(np.AxisError, unique, np.arange(10), axis=2)

630:         assert_raises(np.AxisError, unique, np.arange(10), axis=-2)

636:         assert_array_equal(unique(inp, axis=0), unique(inp_arr, axis=0), msg)

637:         assert_array_equal(unique(inp, axis=1), unique(inp_arr, axis=1), msg)

654:         assert_array_equal(unique(data, axis=0), result, msg)

659:         assert_array_equal(unique(data, axis=0), result, msg)

665:         assert_array_equal(uniq, [1, 2, 3, 4])

674:         assert_equal(uniq.dtype, single_zero.dtype)

675:         assert_array_equal(uniq, np.empty(shape=(1, 0)))

676:         assert_array_equal(idx, np.array([0]))

677:         assert_array_equal(inv, np.array([0, 0]))

678:         assert_array_equal(cnt, np.array([2]))

684:         assert_equal(uniq.dtype, single_zero.dtype)

685:         assert_array_equal(uniq, np.empty(shape=(2, 0)))

686:         assert_array_equal(idx, np.array([]))

687:         assert_array_equal(inv, np.array([]))

688:         assert_array_equal(cnt, np.array([]))

700:             assert_array_equal(unique(multiple_zeros, axis=axis),

713:         assert_array_equal(v.data, v2.data, msg)

714:         assert_array_equal(v.mask, v2.mask, msg)

723:             assert_array_equal(a, b, fmt % dt)

733:         assert_array_equal(unique(data), result.astype(dtype), msg)

737:         assert_array_equal(unique(data, axis=0), result.astype(dtype), msg)

741:         assert_array_equal(unique(data, axis=1), result.astype(dtype), msg)

749:         assert_array_equal(unique(data3d, axis=2), result, msg)

754:         assert_array_equal(data[idx], uniq, msg)

756:         assert_array_equal(uniq[inv], data)

758:         assert_array_equal(cnt, np.array([2, 2]), msg)

763:         assert_array_equal(data[
765:         assert_array_equal(uniq[
767:         assert_array_equal(cnt, np.array([2, 1, 1]), msg)

Total asserts: 167

Filename: numpy/lib/tests/test_function_base.py
16:     assert_, assert_equal, assert_array_equal, assert_almost_equal,

17:     assert_array_almost_equal, assert_raises, assert_allclose, IS_PYPY,

18:     assert_warns, assert_raises_regex, suppress_warnings, HAS_REFCOUNT,

49:         assert_raises(ValueError, rot90, np.ones(4))

50:         assert_raises(ValueError, rot90, np.ones((2,2,2)), axes=(0,1,2))

51:         assert_raises(ValueError, rot90, np.ones((2,2)), axes=(0,2))

52:         assert_raises(ValueError, rot90, np.ones((2,2)), axes=(1,1))

53:         assert_raises(ValueError, rot90, np.ones((2,2,2)), axes=(-2,1))

69:             assert_equal(rot90(a, k=k), b1)

71:             assert_equal(rot90(a, k=k), b2)

73:             assert_equal(rot90(a, k=k), b3)

75:             assert_equal(rot90(a, k=k), b4)

77:         assert_equal(rot90(rot90(a, axes=(0,1)), axes=(1,0)), a)

78:         assert_equal(rot90(a, k=1, axes=(1,0)), rot90(a, k=-1, axes=(0,1)))

82:         assert_equal(rot90(a).shape, (40, 50, 3))

83:         assert_equal(rot90(a, axes=(0,2)), rot90(a, axes=(0,-1)))

84:         assert_equal(rot90(a, axes=(1,2)), rot90(a, axes=(-2,-1)))

106:         assert_equal(rot90(a, axes=(0, 1)), a_rot90_01)

107:         assert_equal(rot90(a, axes=(1, 0)), a_rot90_10)

108:         assert_equal(rot90(a, axes=(1, 2)), a_rot90_12)

111:             assert_equal(rot90(a, k=k, axes=(2, 0)),

118:         assert_raises(np.AxisError, np.flip, np.ones(4), axis=1)

119:         assert_raises(np.AxisError, np.flip, np.ones((4, 4)), axis=2)

120:         assert_raises(np.AxisError, np.flip, np.ones((4, 4)), axis=-3)

121:         assert_raises(np.AxisError, np.flip, np.ones((4, 4)), axis=(0, 3))

126:         assert_equal(np.flip(a, 1), b)

131:         assert_equal(np.flip(a, 1), b)

136:         assert_equal(np.flip(a, 0), b)

141:         assert_equal(np.flip(a, 0), b)

154:         assert_equal(np.flip(a, 0), b)

167:         assert_equal(np.flip(a, 1), b)

180:         assert_equal(np.flip(a, 2), b)

185:             assert_equal(np.flip(a, i),

193:         assert_equal(np.flip(a), b)

201:         assert_equal(np.flip(a, axis=()), a)

208:         assert_equal(np.flip(a, axis=(0, 2)), b)

215:         assert_equal(np.flip(a, axis=(1, 2)), c)

224:         assert_(np.any(y1))

225:         assert_(np.any(y3))

226:         assert_(not np.any(y2))

230:         assert_(np.any(y1))

231:         assert_array_equal(np.sometrue(y1, axis=0), [1, 1, 0])

232:         assert_array_equal(np.sometrue(y1, axis=1), [0, 1, 1])

241:         assert_(not np.all(y1))

242:         assert_(np.all(y3))

243:         assert_(not np.all(y2))

244:         assert_(np.all(~np.array(y2)))

248:         assert_(not np.all(y1))

249:         assert_array_equal(np.alltrue(y1, axis=0), [0, 0, 1])

250:         assert_array_equal(np.alltrue(y1, axis=1), [0, 0, 1])

258:         assert_array_equal(a, a_copy)

260:         assert_equal(a[0, 0], 1)

261:         assert_equal(a_copy[0, 0], 10)

268:         assert_(a.flags.c_contiguous)

269:         assert_(not a.flags.f_contiguous)

271:         assert_(not a_fort.flags.c_contiguous)

272:         assert_(a_fort.flags.f_contiguous)

274:         assert_(a_copy.flags.c_contiguous)

275:         assert_(not a_copy.flags.f_contiguous)

277:         assert_(not a_fort_copy.flags.c_contiguous)

278:         assert_(a_fort_copy.flags.f_contiguous)

282:         assert_(not ma.isMaskedArray(np.copy(mx, subok=False)))

283:         assert_(ma.isMaskedArray(np.copy(mx, subok=True)))

285:         assert_(not ma.isMaskedArray(np.copy(mx)))

292:         assert_(average(y1, axis=0) == 2.)

294:         assert_(average(y2, axis=0) == 2.)

296:         assert_(average(y3, axis=0) == 0.)

301:         assert_almost_equal(y4.mean(0), average(y4, 0))

302:         assert_almost_equal(y4.mean(1), average(y4, 1))

305:         assert_almost_equal(y5.mean(0), average(y5, 0))

306:         assert_almost_equal(y5.mean(1), average(y5, 1))

313:         assert_almost_equal(actual, desired)

319:         assert_almost_equal(actual, desired)

324:         assert_almost_equal(actual, desired)

327:         # assert_equal(average(y1, weights=w1), 9./2.)

332:         assert_array_equal(average(y1, weights=w2, axis=1), desired)

333:         assert_equal(average(y1, weights=w2), 5.)

338:         assert_(np.average(y3, weights=w3).dtype == np.result_type(y3, w3))

345:         assert_equal(scl, 6.)

348:         assert_array_equal(scl, np.array([2., 2., 2.]))

351:         assert_array_equal(scl, np.array([3., 3.]))

356:         assert_array_equal(scl, np.array([3., 3., 3.]))

360:         assert_array_equal(scl, np.array([6., 6.]))

364:         assert_array_equal(scl, np.array([1., 6.]))

372:         assert_equal(type(np.average(a)), subclass)

373:         assert_equal(type(np.average(a, weights=w)), subclass)

381:             assert_equal(np.average(a, weights=w).dtype, np.dtype(rt))

387:         assert_almost_equal(a.mean(0), average(a, weights=w))

406:         assert_array_equal(select(conditions, choices, default=15),

409:         assert_equal(len(choices), 3)

410:         assert_equal(len(conditions), 3)

415:         assert_array_equal(select(conditions, choices), np.ones((4, 3)))

417:         assert_equal(select([True], [0], default=[0]).shape, (1,))

420:         assert_equal(select(self.conditions, self.choices, 1j).dtype,

425:         assert_equal(select(self.conditions, choices).dtype, np.int8)

429:         assert_equal(select([m], [d]), [0, 0, 0, np.nan, 0, 0])

432:         assert_raises(ValueError, select, [], [], 3j)

433:         assert_raises(ValueError, select, [], [])

439:         assert_raises(TypeError, select, conditions, choices)

441:         assert_raises(TypeError, select, conditions, choices)

442:         assert_raises(TypeError, select, conditions, choices)

455:         assert_equal(insert(a, 0, 1), [1, 1, 2, 3])

456:         assert_equal(insert(a, 3, 1), [1, 2, 3, 1])

457:         assert_equal(insert(a, [1, 1, 1], [1, 2, 3]), [1, 1, 2, 3, 2, 3])

458:         assert_equal(insert(a, 1, [1, 2, 3]), [1, 1, 2, 3, 2, 3])

459:         assert_equal(insert(a, [1, -1, 3], 9), [1, 9, 2, 9, 3, 9])

460:         assert_equal(insert(a, slice(-1, None, -1), 9), [9, 1, 9, 2, 9, 3])

461:         assert_equal(insert(a, [-1, 1, 3], [7, 8, 9]), [1, 8, 2, 7, 3, 9])

463:         assert_equal(insert(b, 0, b[0]), [0., 0., 1.])

464:         assert_equal(insert(b, [], []), b)

466:         # assert_equal(insert(a, np.array([True]*4), 9), [9, 1, 9, 2, 9, 3, 9])

469:             assert_equal(

471:             assert_(w[0].category is FutureWarning)

477:         assert_equal(insert(a, 0, [1]), [1, 1, 1, 1])

478:         assert_equal(insert(a, 0, [2, 2, 2], axis=0), r)

479:         assert_equal(insert(a, 0, 2, axis=0), r)

480:         assert_equal(insert(a, 2, 2, axis=1), [[1, 1, 2, 1]])

487:         assert_equal(insert(a, [1], [[1], [2], [3]], axis=1), b)

488:         assert_equal(insert(a, [1], [1, 2, 3], axis=1), c)

490:         assert_equal(insert(a, 1, [1, 2, 3], axis=1), b)

491:         assert_equal(insert(a, 1, [[1], [2], [3]], axis=1), c)

494:         assert_equal(insert(a[
495:         assert_equal(insert(a[
499:         assert_equal(insert(a, 1, a[
501:         assert_equal(insert(a, 1, a[
505:         assert_raises(np.AxisError, insert, a, 1, a[
506:         assert_raises(np.AxisError, insert, a, 1, a[
510:         assert_equal(insert(a, 1, a[
512:         assert_equal(insert(a, 1, a[
526:         assert_(isinstance(np.insert(a, 0, [0]), SubClass))

527:         assert_(isinstance(np.insert(a, [], []), SubClass))

528:         assert_(isinstance(np.insert(a, [0, 1], [1, 2]), SubClass))

529:         assert_(isinstance(np.insert(a, slice(1, 2), [1, 2]), SubClass))

530:         assert_(isinstance(np.insert(a, slice(1, -2, -1), []), SubClass))

533:         assert_(isinstance(np.insert(a, 0, [0]), SubClass))

538:         assert_equal(x, np.array([1, 1, 1]))

545:         assert_array_equal(b[0], np.array(val, dtype=b.dtype))

548:         assert_array_equal(b[[0, 3]], np.array(val, dtype=b.dtype))

566:         assert_equal(np.amax(a), 10.0)

570:         assert_equal(np.amax(b, axis=0), [8.0, 10.0, 9.0])

571:         assert_equal(np.amax(b, axis=1), [9.0, 10.0, 8.0])

578:         assert_equal(np.amin(a), -5.0)

582:         assert_equal(np.amin(b, axis=0), [3.0, 3.0, 2.0])

583:         assert_equal(np.amin(b, axis=1), [3.0, 4.0, 2.0])

590:         assert_equal(a.ptp(axis=0), 15.0)

594:         assert_equal(b.ptp(axis=0), [5.0, 7.0, 7.0])

595:         assert_equal(b.ptp(axis=-1), [6.0, 6.0, 6.0])

597:         assert_equal(b.ptp(axis=0, keepdims=True), [[5.0, 7.0, 7.0]])

598:         assert_equal(b.ptp(axis=(0,1), keepdims=True), [[8.0]])

613:             assert_array_equal(np.cumsum(a, axis=0), tgt)

617:             assert_array_equal(np.cumsum(a2, axis=0), tgt)

621:             assert_array_equal(np.cumsum(a2, axis=1), tgt)

634:                 assert_raises(ArithmeticError, np.prod, a)

635:                 assert_raises(ArithmeticError, np.prod, a2, 1)

637:                 assert_equal(a.prod(axis=0), 26400)

638:                 assert_array_equal(a2.prod(axis=0),

640:                 assert_array_equal(a2.prod(axis=-1),

654:                 assert_raises(ArithmeticError, np.cumprod, a)

655:                 assert_raises(ArithmeticError, np.cumprod, a2, 1)

656:                 assert_raises(ArithmeticError, np.cumprod, a)

658:                 assert_array_equal(np.cumprod(a, axis=-1),

661:                 assert_array_equal(np.cumprod(a2, axis=0),

665:                 assert_array_equal(np.cumprod(a2, axis=-1),

678:         assert_array_equal(diff(x), out)

679:         assert_array_equal(diff(x, n=2), out2)

680:         assert_array_equal(diff(x, n=3), out3)

684:         assert_almost_equal(diff(x), out)

689:         assert_array_equal(diff(x), out)

690:         assert_array_equal(diff(x, n=2), out2)

697:         assert_array_equal(diff(x), np.zeros((10, 20, 29)))

698:         assert_array_equal(diff(x, axis=-1), np.zeros((10, 20, 29)))

699:         assert_array_equal(diff(x, axis=0), np.zeros((9, 20, 30)))

700:         assert_array_equal(diff(x, axis=1), exp)

701:         assert_array_equal(diff(x, axis=-2), exp)

702:         assert_raises(np.AxisError, diff, x, axis=3)

703:         assert_raises(np.AxisError, diff, x, axis=-4)

706:         assert_raises(ValueError, diff, x)

714:         assert_array_equal(diff(x), out1)

715:         assert_array_equal(diff(x, n=2), out2)

716:         assert_array_equal(diff(x, axis=0), out3)

717:         assert_array_equal(diff(x, n=2, axis=0), out4)

721:         assert_raises(ValueError, diff, x, n=-1)

724:         assert_(diff(x, n=0) is x)

726:             assert_(type(out) is np.ndarray)

727:             assert_array_equal(out, expected)

728:             assert_equal(out.dtype, np.int_)

729:             assert_equal(len(out), max(0, len(x) - n))

740:             assert_array_equal(out, exp)

741:             assert_equal(out.dtype, exp.dtype)

748:         assert_array_equal(out.data, [[1], [1], [1], [1], [1]])

749:         assert_array_equal(out.mask, [[False], [True],

751:         assert_(type(out) is type(x))

754:         assert_array_equal(out3.data, [[], [], [], [], []])

755:         assert_array_equal(out3.mask, [[], [], [], [], []])

756:         assert_(type(out3) is type(x))

760:         assert_array_equal(diff(x, prepend=0), np.ones(5))

761:         assert_array_equal(diff(x, prepend=[0]), np.ones(5))

762:         assert_array_equal(np.cumsum(np.diff(x, prepend=0)), x)

763:         assert_array_equal(diff(x, prepend=[-1, 0]), np.ones(6))

768:         assert_array_equal(result, expected)

770:         assert_array_equal(result, expected)

774:         assert_array_equal(result, expected)

776:         assert_array_equal(result, expected)

778:         assert_raises(ValueError, np.diff, x, prepend=np.zeros((3,3)))

780:         assert_raises(np.AxisError, diff, x, prepend=0, axis=3)

786:         assert_array_equal(result, expected)

788:         assert_array_equal(result, expected)

791:         assert_array_equal(result, expected)

796:         assert_array_equal(result, expected)

798:         assert_array_equal(result, expected)

802:         assert_array_equal(result, expected)

804:         assert_array_equal(result, expected)

806:         assert_raises(ValueError, np.diff, x, append=np.zeros((3,3)))

808:         assert_raises(np.AxisError, diff, x, append=0, axis=3)

821:         assert_array_equal(setxor1d(a_del, self.a[indices, ]), self.a,

824:         assert_array_equal(xor, self.nd_a[0,
871:         assert_(isinstance(delete(a, 0), SubClass))

872:         assert_(isinstance(delete(a, []), SubClass))

873:         assert_(isinstance(delete(a, [0, 1]), SubClass))

874:         assert_(isinstance(delete(a, slice(1, 2)), SubClass))

875:         assert_(isinstance(delete(a, slice(1, -2)), SubClass))

884:         assert_equal(m.flags.c_contiguous, k.flags.c_contiguous)

885:         assert_equal(m.flags.f_contiguous, k.flags.f_contiguous)

898:         assert_equal(a_del, a_del_arr, a_del_lst, a_del_obj)

904:         assert_equal(nd_a_del, nd_a_del_arr, nd_a_del_lst, nd_a_del_obj)

914:         assert_array_equal(gradient(x), dx)

915:         assert_array_equal(gradient(v), dx)

939:         assert_raises_regex(ValueError, '.*scalars or 1d',

947:         assert_raises(ValueError, gradient, f_2d, x, np.ones(2))

948:         assert_raises(ValueError, gradient, f_2d, 1, np.ones(2))

949:         assert_raises(ValueError, gradient, f_2d, np.ones(2), np.ones(2))

951:         assert_raises(TypeError, gradient, f_2d, x)

952:         assert_raises(TypeError, gradient, f_2d, x, axis=(0,1))

953:         assert_raises(TypeError, gradient, f_2d, x, x, x)

954:         assert_raises(TypeError, gradient, f_2d, 1, 1, 1)

955:         assert_raises(TypeError, gradient, f_2d, x, x, axis=1)

956:         assert_raises(TypeError, gradient, f_2d, 1, 1, axis=1)

967:         assert_array_equal(gradient(x), dx)

968:         assert_(dx.dtype == np.dtype('timedelta64[D]'))

975:         assert_equal(type(out), type(x))

978:         assert_(x._mask is not out._mask)

983:         assert_array_equal(x2.mask, [False, False, True, False, False])

995:         assert_(np.all(num_error < 0.03) == True)

1003:         assert_(np.all(num_error < 0.03) == True)

1023:             assert_array_equal(res1, res2)

1024:             assert_array_equal(res2, res3)

1025:             assert_almost_equal(res1[0], exp_res.T)

1026:             assert_almost_equal(res1[1], exp_res)

1030:             assert_(res1.shape == res2.shape)

1031:             assert_almost_equal(res2, exp_res.T)

1035:             assert_(res1.shape == res2.shape)

1036:             assert_array_equal(res2, exp_res)

1044:             assert_array_equal(res1, res2)

1045:             assert_almost_equal(res1[0], exp_res.T)

1046:             assert_almost_equal(res1[1], exp_res)

1049:             assert_almost_equal(res1, exp_res.T)

1052:             assert_almost_equal(res1, exp_res)

1057:         assert_array_equal(res1[0], res2[1])

1058:         assert_array_equal(res1[1], res2[0])

1059:         assert_almost_equal(res1[0], fdx_even_ord1.T)

1060:         assert_almost_equal(res1[1], fdx_uneven_ord1)

1064:         assert_array_equal(res1[0], res2[1])

1065:         assert_array_equal(res1[1], res2[0])

1066:         assert_almost_equal(res1[0], fdx_even_ord2.T)

1067:         assert_almost_equal(res1[1], fdx_uneven_ord2)

1075:         assert_array_equal(gradient(x, axis=0), dx[0])

1076:         assert_array_equal(gradient(x, axis=1), dx[1])

1077:         assert_array_equal(gradient(x, axis=-1), dx[1])

1078:         assert_array_equal(gradient(x, axis=(1, 0)), [dx[1], dx[0]])

1081:         assert_almost_equal(gradient(x, axis=None), [dx[0], dx[1]])

1083:         assert_almost_equal(gradient(x, axis=None), gradient(x))

1086:         assert_array_equal(gradient(x, 2, 3, axis=(1, 0)),

1089:         assert_raises(TypeError, gradient, x, 1, 2, axis=1)

1091:         assert_raises(np.AxisError, gradient, x, axis=3)

1092:         assert_raises(np.AxisError, gradient, x, axis=-3)

1093:         # assert_raises(TypeError, gradient, x, axis=[1,])

1103:         assert_array_equal(gradient(x), dx)

1104:         assert_(dx.dtype == np.dtype('timedelta64[D]'))

1110:             assert_equal(gradient(x).dtype, np.diff(x).dtype)

1118:         assert_raises(ValueError, gradient, np.arange(0), edge_order=1)

1119:         assert_raises(ValueError, gradient, np.arange(0), edge_order=2)

1120:         assert_raises(ValueError, gradient, np.arange(1), edge_order=1)

1121:         assert_raises(ValueError, gradient, np.arange(1), edge_order=2)

1122:         assert_raises(ValueError, gradient, np.arange(2), edge_order=2)

1129:         assert_array_equal(g, [-1]*len(f))

1138:         assert_array_equal(dfdx, [(maxint + 1) // 2]*2)

1146:         assert_array_equal(dfdx, [-2]*len(x))

1156:         assert_array_equal(dfdx, [0.5, 0.5])

1171:         assert_array_almost_equal(y, yo, 11)

1172:         assert_array_almost_equal(z, zo, 11)

1180:         assert_equal(type(actual), type(expected))

1181:         assert_equal(actual.mask, expected.mask)

1182:         assert_equal(actual, expected)

1200:             assert_array_equal(res, arr[slc])

1206:             assert_array_equal(res, arr[slc])

1212:             assert_array_equal(res, arr[slc])

1219:             assert len(res1) == 0

1222:             assert len(res2) == 0

1227:         assert_array_equal(arr, res)

1238:         assert_array_equal(res, arr[slc])

1243:         assert_array_equal(arr, res)

1248:         assert isinstance(res, list)

1255:         assert_array_equal(b, [3, 2, 2, 3, 3])

1260:         assert_raises(TypeError, place, [1, 2, 3], [True, False], [0, 1])

1264:         assert_array_equal(a, [1, 2, 3, 4, 5, 6, 7])

1267:         assert_array_equal(a, np.arange(1, 8))

1270:         assert_array_equal(a, [8, 2, 9, 4, 8, 6, 9])

1271:         assert_raises_regex(ValueError, "Cannot insert from an empty array",

1277:         assert_array_equal(a, ['12', '9'])

1286:         assert_array_equal(a, ac)

1310:         assert_array_equal(r, [1, 6, 1, 2])

1321:         assert_array_equal(r, [5, 8, 1, 4])

1327:         assert_array_equal(y, x)

1334:         assert_array_almost_equal(r1, r2)

1345:         assert_array_equal(r1, r2)

1348:         assert_array_equal(r1, r2)

1358:         assert_array_equal(r1, r2)

1369:         assert_array_equal(r1, r2)

1380:         assert_array_equal(r1, r2)

1381:         assert_array_equal(r1, r3)

1392:         assert_equal(r1, _foo2(10.4, z=100))

1393:         assert_equal(r2, _foo2(10.4, y=-1))

1394:         assert_equal(r3, _foo2(10.4))

1404:         assert_equal(r1, _foo2(z=100, x=10.4, y=-1))

1405:         assert_equal(r2, _foo2(1, 2, 3))

1427:         assert_array_equal(r1, r2)

1429:         assert_array_equal(r1, r2)

1432:         assert_array_equal(r1, r2)

1445:         assert_array_equal(ans, vpolyval(x=[0, 1], p=[1, 2, 3]))

1446:         assert_array_equal(ans, vpolyval([0, 1], p=[1, 2, 3]))

1447:         assert_array_equal(ans, vpolyval([0, 1], [1, 2, 3]))

1458:         assert_array_equal(f(a=[1, 2], b=[3, 4]), [3, 8])

1466:         assert_array_equal(f([1, 2], [3, 4]), [3, 8])

1473:         assert_array_equal(f(), 1)

1481:         assert_equal(f.__doc__, foo.__doc__)

1485:         assert_equal(f.__doc__, doc)

1495:         assert_array_equal(vectorize(Foo().bar)(np.arange(9)),

1497:         assert_array_equal(vectorize(Foo.bar)(Foo(), np.arange(9)),

1508:         assert_equal(res1a, res2a)

1509:         assert_equal(res1b, res2b)

1515:         assert_equal(s, f(s))

1528:         assert_array_equal(f(x), x * x)

1529:         assert_equal(_calls[0], len(x))

1535:         assert_array_equal(f(x), x)

1538:         assert_equal(nfb._parse_gufunc_signature('(x)->()'), ([('x',)], [()]))

1539:         assert_equal(nfb._parse_gufunc_signature('(x,y)->()'),

1541:         assert_equal(nfb._parse_gufunc_signature('(x),(y)->()'),

1543:         assert_equal(nfb._parse_gufunc_signature('(x)->(y)'),

1545:         assert_equal(nfb._parse_gufunc_signature('(x)->(y),()'),

1547:         assert_equal(nfb._parse_gufunc_signature('(),(a,b,c),(d)->(d,e)'),

1551:         assert_equal(nfb._parse_gufunc_signature('(x )->()'), ([('x',)], [()]))

1552:         assert_equal(nfb._parse_gufunc_signature('( x , y )->(  )'),

1554:         assert_equal(nfb._parse_gufunc_signature('(x),( y) ->()'),

1556:         assert_equal(nfb._parse_gufunc_signature('(  x)-> (y )  '),

1558:         assert_equal(nfb._parse_gufunc_signature(' (x)->( y),( )'),

1560:         assert_equal(nfb._parse_gufunc_signature(

1564:         with assert_raises(ValueError)
1566:         with assert_raises(ValueError)
1568:         with assert_raises(ValueError)
1580:         assert_array_equal(r, [1, 6, 1, 2])

1588:         assert_array_equal(r, [2, 3])

1596:         assert_array_equal(r, [[-1, 1], [-1, 1]])

1601:         assert_(isinstance(r, tuple) and len(r) == 2)

1602:         assert_array_equal(r[0], [1, 2, 3])

1603:         assert_array_equal(r[1], [1, 2, 3])

1608:         assert_array_equal(r, [[1, 2, 3], [2, 4, 6]])

1611:         assert_array_equal(r, [[[[1, 2, 3], [2, 4, 6]]]])

1614:         assert_array_equal(r, [[[1, 2, 3], [0, 0, 0]],

1618:         assert_array_equal(r, [[[1, 2, 3], [2, 4, 6]],

1624:         assert_array_equal(r, [1, 2])

1627:         assert_array_equal(r, [[1, 2], [2, 3]])

1635:         assert_array_equal(f([1, 2, 3]), [2, 3, 4])

1636:         assert_array_equal(f([1, 2, 3], b=0), [1, 2, 3])

1641:         assert_equal(r.dtype, np.dtype('float64'))

1642:         assert_array_equal(r, [1, 2, 3])

1646:         with assert_raises_regex(TypeError, 'wrong number of positional')
1648:         with assert_raises_regex(

1651:         with assert_raises_regex(

1656:         with assert_raises_regex(TypeError, 'wrong number of positional')
1662:         with assert_raises_regex(

1667:         with assert_raises_regex(ValueError, 'wrong number of outputs')
1671:         with assert_raises_regex(ValueError, 'wrong number of outputs')
1678:         with assert_raises_regex(ValueError, 'otypes')
1682:         assert_array_equal(f(x), x)

1685:         with assert_raises_regex(ValueError, 'otypes')
1689:         assert_array_equal(f(x), x)

1692:         assert_array_equal(f(x), x)

1695:         assert_array_equal(f(x.T), x.T)

1698:         with assert_raises_regex(ValueError, 'new output dimensions')
1712:         assert_equal(type(r), subclass)

1713:         assert_equal(r, [[1., 3., 2.], [4., 6., 5.], [7., 9., 8.]])

1718:         assert_equal(type(r), subclass)

1719:         assert_equal(r, m * v)

1755:             assert_equal(sys.getrefcount(A_func), refcount + incr)

1758:             assert_equal(sys.getrefcount(A_func), refcount)

1767:         assert_array_equal(digitize(x, bins), np.arange(11))

1772:         assert_array_equal(digitize(x, bins), np.arange(11))

1777:         assert_(np.all(digitize(x, bin) != 0))

1783:         assert_array_equal(digitize(x, bins), default_answer)

1785:         assert_array_equal(digitize(x, bins, True), right_answer)

1790:         assert_array_equal(digitize(x, bins, True), np.arange(11))

1795:         assert_array_equal(digitize(x, bins, True), np.arange(11))

1800:         assert_(np.all(digitize(x, bins, True) != 10))

1805:         assert_array_equal(digitize(x, bins, False), [0, 2, 3, 3])

1806:         assert_array_equal(digitize(x, bins, True), [0, 0, 2, 3])

1808:         assert_array_equal(digitize(x, bins, False), [3, 2, 0, 0])

1809:         assert_array_equal(digitize(x, bins, True), [3, 3, 2, 0])

1811:         assert_array_equal(digitize(x, bins, False), [0, 0, 4, 4])

1812:         assert_array_equal(digitize(x, bins, True), [0, 0, 0, 4])

1814:         assert_raises(ValueError, digitize, x, bins)

1816:         assert_raises(ValueError, digitize, x, bins)

1821:         assert_raises(TypeError, digitize, x, bins)

1823:         assert_raises(TypeError, digitize, x, bins)

1831:         assert_(not isinstance(digitize(b, a, False), A))

1832:         assert_(not isinstance(digitize(b, a, True), A))

1837:         assert_equal(np.digitize(x, [x - 1, x + 1]), 1)

1844:         assert_equal(np.digitize(x, [x + 1, x - 1]), 1)

1851:         assert_array_equal(unwrap([1, 1 + 2 * np.pi]), [1, 1])

1853:         assert_(np.all(diff(unwrap(rand(10) * 100)) < np.pi))

1857:         assert_array_equal(unwrap([1, 1 + 256], period=255), [1, 2])

1859:         assert_(np.all(diff(unwrap(rand(10) * 1000, period=255)) < 255))

1863:         assert_array_equal(unwrap(wrap_seq, period=255), simple_seq)

1868:         assert_array_equal(no_discont, [0, 75, 150, 225, 300, 180])

1870:         assert_array_equal(sm_discont, [0, 75, 150, 225, 300, 430])

1871:         assert sm_discont.dtype == wrap_uneven.dtype

1888:         assert w.dtype == ref_dtype

1891:         assert_equal(w, flipud(w))

1895:             assert_array_equal(w, np.array([]))

1897:             assert_array_equal(w, np.ones(1))

1899:             assert_almost_equal(np.sum(w, axis=0), 4.500, 4)

1909:         assert w.dtype == ref_dtype

1912:         assert_equal(w, flipud(w))

1916:             assert_array_equal(w, np.array([]))

1918:             assert_array_equal(w, np.ones(1))

1920:             assert_almost_equal(np.sum(w, axis=0), 4.9400, 4)

1930:         assert w.dtype == ref_dtype

1933:         assert_equal(w, flipud(w))

1937:             assert_array_equal(w, np.array([]))

1939:             assert_array_equal(w, np.ones(1))

1941:             assert_almost_equal(np.sum(w, axis=0), 4.4444, 4)

1951:         assert w.dtype == ref_dtype

1954:         assert_equal(w, flipud(w))

1958:             assert_array_equal(w, np.array([]))

1960:             assert_array_equal(w, np.ones(1))

1962:             assert_almost_equal(np.sum(w, axis=0), 3.7800, 4)

1972:         assert w.dtype == ref_dtype

1975:         assert_equal(w, flipud(w))

1979:             assert_array_equal(w, np.array([]))

1981:             assert_array_equal(w, np.ones(1))

1983:             assert_almost_equal(np.sum(w, axis=0), 10, 15)

1992:         assert_almost_equal(r, 1, 7)

2017:         assert_almost_equal(r, qx)

2019:         assert_almost_equal(r, qy)

2021:         assert_almost_equal(r, qz)

2025:         assert_almost_equal(r, qx)

2027:         assert_almost_equal(r, qy)

2029:         assert_almost_equal(r, qz)

2039:         assert_almost_equal(trapz(ym, x), r)

2042:         assert_almost_equal(trapz(ym, xm), r)

2045:         assert_almost_equal(trapz(y, xm), r)

2051:         assert_(sinc(0) == 1)

2054:         assert_array_almost_equal(w, flipud(w), 7)

2061:         assert_array_equal(y1, y2)

2062:         assert_array_equal(y1, y3)

2069:         assert_(np.all(unique(x) == [0, 1, 2, 3, 4]))

2070:         assert_(unique(np.array([1, 1, 1, 1, 1])) == np.array([1]))

2072:         assert_(np.all(unique(x) == ['bar', 'foo', 'ham', 'widget']))

2074:         assert_(np.all(unique(x) == [1 + 1j, 1 + 10j, 5 + 6j, 10]))

2084:         assert_raises(ValueError, np.lib.asarray_chkfinite, b)

2085:         assert_raises(ValueError, np.lib.asarray_chkfinite, c)

2091:         assert_(a.dtype == np.float64)

2116:         assert_almost_equal(np.corrcoef([0, 1, 0], [1, 0, 1]),

2121:         assert_almost_equal(tgt1, self.res1)

2122:         assert_(np.all(np.abs(tgt1) <= 1.0))

2125:         assert_almost_equal(tgt2, self.res2)

2126:         assert_(np.all(np.abs(tgt2) <= 1.0))

2132:             assert_warns(DeprecationWarning, corrcoef, self.A, ddof=-1)

2135:             assert_almost_equal(corrcoef(self.A, ddof=-1), self.res1)

2136:             assert_almost_equal(corrcoef(self.A, self.B, ddof=-1), self.res2)

2137:             assert_almost_equal(corrcoef(self.A, ddof=3), self.res1)

2138:             assert_almost_equal(corrcoef(self.A, self.B, ddof=3), self.res2)

2144:             assert_warns(DeprecationWarning, corrcoef, self.A, self.B, 1, 0)

2145:             assert_warns(DeprecationWarning, corrcoef, self.A, bias=0)

2148:             assert_almost_equal(corrcoef(self.A, bias=1), self.res1)

2154:         assert_allclose(res, tgt)

2155:         assert_(np.all(np.abs(res) <= 1.0))

2160:         assert_allclose(np.corrcoef(x, y), np.array([[1., -1.j], [1.j, 1.]]))

2165:             assert_array_equal(corrcoef(np.array([])), np.nan)

2166:             assert_array_equal(corrcoef(np.array([]).reshape(0, 2)),

2168:             assert_array_equal(corrcoef(np.array([]).reshape(2, 0)),

2175:         assert_array_almost_equal(c, np.array([[1., -1.], [-1., 1.]]))

2176:         assert_(np.all(np.abs(c) <= 1.0))

2182:         assert test_type == res.dtype

2199:         assert_allclose(cov(self.x1), self.res1)

2204:         assert_allclose(cov(x), res)

2205:         assert_allclose(cov(x, aweights=np.ones(3)), res)

2210:         assert_allclose(cov(x, y), np.array([[1., -1.j], [1.j, 1.]]))

2215:             assert_array_equal(cov(np.array([])), np.nan)

2216:             assert_array_equal(cov(np.array([]).reshape(0, 2)),

2218:             assert_array_equal(cov(np.array([]).reshape(2, 0)),

2224:             assert_array_equal(cov(self.x1, ddof=5),

2229:         assert_allclose(cov(self.x3), cov(self.x3, rowvar=False))

2231:         assert_allclose(cov(self.x3, y), cov(self.x3, y, rowvar=False))

2234:         assert_allclose(cov(self.x3, ddof=1), np.var(self.x3, ddof=1))

2237:         assert_allclose(cov(self.x2, fweights=self.frequencies),

2239:         assert_allclose(cov(self.x1, fweights=self.frequencies),

2241:         assert_allclose(cov(self.x1, fweights=self.unit_frequencies),

2244:         assert_raises(TypeError, cov, self.x1, fweights=nonint)

2246:         assert_raises(RuntimeError, cov, self.x1, fweights=f)

2248:         assert_raises(RuntimeError, cov, self.x1, fweights=f)

2250:         assert_raises(ValueError, cov, self.x1, fweights=f)

2253:         assert_allclose(cov(self.x1, aweights=self.weights), self.res3)

2254:         assert_allclose(cov(self.x1, aweights=3.0 * self.weights),

2256:         assert_allclose(cov(self.x1, aweights=self.unit_weights), self.res1)

2258:         assert_raises(RuntimeError, cov, self.x1, aweights=w)

2260:         assert_raises(RuntimeError, cov, self.x1, aweights=w)

2262:         assert_raises(ValueError, cov, self.x1, aweights=w)

2265:         assert_allclose(cov(self.x2, fweights=self.frequencies,

2268:         assert_allclose(cov(self.x1, fweights=self.frequencies,

2271:         assert_allclose(cov(self.x1, fweights=self.unit_frequencies,

2274:         assert_allclose(cov(self.x1, fweights=self.unit_frequencies,

2277:         assert_allclose(cov(self.x1, fweights=self.unit_frequencies,

2280:         assert_allclose(cov(self.x1, fweights=self.unit_frequencies,

2288:         assert test_type == res.dtype

2294:         assert_almost_equal(

2301:         assert_almost_equal(i0(A), expected)

2302:         assert_almost_equal(i0(-A), expected)

2309:         assert_almost_equal(

2318:         assert_equal(i0_0.shape, (1,))

2319:         assert_array_equal(np.i0([0.]), np.array([1.]))

2331:         assert isinstance(np.abs(array_like()), array_like)

2335:         assert_array_equal(exp, res)

2345:         assert_(np.isfinite(kaiser(1, 1.0)))

2346:         assert_almost_equal(kaiser(0, 1.0),

2348:         assert_almost_equal(kaiser(2, 1.0),

2350:         assert_almost_equal(kaiser(5, 1.0),

2353:         assert_almost_equal(kaiser(5, 1.56789),

2367:         assert_almost_equal(

2378:         assert_array_equal(X, np.array([[1, 2, 3],

2382:         assert_array_equal(Y, np.array([[4, 4, 4],

2389:         assert_array_equal(X, np.array([1, 2, 3, 4]))

2393:         assert_array_equal([], meshgrid(*args))

2394:         assert_array_equal([], meshgrid(*args, copy=False))

2400:         assert_array_equal(X, np.array([[1, 1, 1, 1],

2403:         assert_array_equal(Y, np.array([[4, 5, 6, 7],

2409:         assert_(meshgrid(x, y)[0].shape == (4, 3))

2410:         assert_(meshgrid(x, y, indexing='ij')[0].shape == (3, 4))

2411:         assert_(meshgrid(x, y, z)[0].shape == (4, 3, 2))

2412:         assert_(meshgrid(x, y, z, indexing='ij')[0].shape == (3, 4, 2))

2414:         assert_raises(ValueError, meshgrid, x, y, indexing='notvalid')

2418:         assert_array_equal(X, np.array([[1, 2, 3]]))

2419:         assert_array_equal(Y, np.array([[4], [5], [6], [7]]))

2425:         assert_raises(TypeError, meshgrid,

2437:         assert_(X.dtype == x.dtype)

2438:         assert_(Y.dtype == y.dtype)

2443:         assert_(X.dtype == x.dtype)

2444:         assert_(Y.dtype == y.dtype)

2449:         assert_(X.dtype == x.dtype)

2450:         assert_(Y.dtype == y.dtype)

2459:         assert_equal(x[0, 
2460:         assert_equal(x[1, 
2465:         assert_equal(a.shape, expected_shape)

2466:         assert_equal(b.shape, expected_shape)

2467:         assert_equal(c.shape, expected_shape)

2468:         assert_equal(d.shape, expected_shape)

2469:         assert_equal(e.shape, expected_shape)

2473:         assert_equal(a, [[[0, 0, 0]], [[0, 0, 0]]])

2474:         assert_equal(b, [[[1, 1, 1]], [[2, 2, 2]]])

2475:         assert_equal(c, [[[3, 4, 5]], [[3, 4, 5]]])

2479:         assert_equal(a, [[[0, 0, 0], [0, 0, 0]]])

2480:         assert_equal(b, [[[1, 1, 1], [2, 2, 2]]])

2481:         assert_equal(c, [[[3, 4, 5], [3, 4, 5]]])

2489:         assert_array_equal(x, [1, 0])

2493:         assert_array_equal(x, [1, 0])

2497:         assert_array_equal(x, [1, 0])

2501:         assert_array_equal(x, [1, 0])

2505:         assert_array_equal(x, [1, 0])

2508:         assert_array_equal(x, [0, -1])

2510:         assert_raises_regex(ValueError, '1 or 2 functions are expected',

2512:         assert_raises_regex(ValueError, '1 or 2 functions are expected',

2517:         assert_array_equal(x, [3, 4])

2521:         assert_equal(x, 4)

2526:         assert_array_equal(x, [2, 0])

2530:         assert_array_equal(x, [2, 3])

2535:         assert_(y.ndim == 0)

2536:         assert_(y == 0)

2540:         assert_(y.ndim == 0)

2541:         assert_(y == 1)

2545:         assert_array_equal(y, 3)

2550:         assert_equal(y, 4)

2555:         assert_array_equal(y, 2)

2557:         assert_raises_regex(ValueError, '2 or 3 functions are expected',

2559:         assert_raises_regex(ValueError, '2 or 3 functions are expected',

2566:         assert_equal(y, 2)

2572:         assert_array_equal(y, np.array([[-1., -1., -1.],

2580:         assert_equal(type(r), subclass)

2581:         assert_equal(r, [-1., -1., 0., 0., 1.])

2588:         assert_array_equal(y, np.ones(4))

2592:         assert_array_equal(y, np.array([0, 2, 1, 0, 1, 1]))

2598:         assert_array_equal(y, w)

2604:         assert_array_equal(y, np.array([0, 0.2, 0.5, 0, 0.5, 0.1]))

2609:         assert_array_equal(y, np.array([2, 3, 0]))

2612:         assert_array_equal(y, np.array([]))

2617:         assert_array_equal(y, np.array([1, 2, 2, 2]))

2619:         assert_array_equal(y, np.array([1, 2, 2, 2]))

2625:         assert_array_equal(y, np.array([0, 0.2, 0.5, 0, 0.5, 0.1, 0, 0]))

2630:         assert_array_equal(x, y)

2635:         assert_array_equal(y, np.zeros(5, dtype=int))

2639:         assert_raises_regex(TypeError,

2642:         assert_raises_regex(ValueError,

2647:         assert_raises_regex(TypeError,

2650:         assert_raises_regex(ValueError,

2662:         assert_equal(sys.getrefcount(np.dtype(np.intp)), intp_refcount)

2663:         assert_equal(sys.getrefcount(np.dtype(np.double)), double_refcount)

2667:         assert_equal(sys.getrefcount(np.dtype(np.intp)), intp_refcount)

2668:         assert_equal(sys.getrefcount(np.dtype(np.double)), double_refcount)

2674:         with assert_raises(ValueError)
2676:         with assert_raises(ValueError)
2683:         assert_raises(ValueError, interp, 0, [], [])

2684:         assert_raises(ValueError, interp, 0, [0], [1, 2])

2685:         assert_raises(ValueError, interp, 0, [0, 1], [1, 2], period=0)

2686:         assert_raises(ValueError, interp, 0, [], [], period=360)

2687:         assert_raises(ValueError, interp, 0, [0], [1, 2], period=360)

2693:         assert_almost_equal(np.interp(x0, x, y), x0)

2709:             assert_equal(incres, inctgt)

2710:             assert_equal(decres, dectgt)

2716:             assert_equal(incres, inctgt)

2717:             assert_equal(decres, dectgt)

2723:             assert_equal(incres, inctgt)

2724:             assert_equal(decres, dectgt)

2730:             assert_equal(incres, inctgt)

2731:             assert_equal(decres, dectgt)

2737:         assert_almost_equal(np.interp(x0, x, y), x0)

2739:         assert_almost_equal(np.interp(x0, x, y), x0)

2741:         assert_almost_equal(np.interp(x0, x, y), x0)

2743:         assert_almost_equal(np.interp(x0, x, y), x0)

2745:         assert_almost_equal(np.interp(x0, x, y), x0)

2751:         assert_almost_equal(np.interp(x, xp, fp), [1, 2, np.inf, np.inf, 4])

2753:         assert_almost_equal(np.interp(x, xp, fp), [1, 2, np.nan, np.nan, 4])

2772:         assert_equal(np.interp(0.5, [np.nan,      1], sc([     0,     10])), sc(np.nan))

2773:         assert_equal(np.interp(0.5, [     0, np.nan], sc([     0,     10])), sc(np.nan))

2774:         assert_equal(np.interp(0.5, [     0,      1], sc([np.nan,     10])), sc(np.nan))

2775:         assert_equal(np.interp(0.5, [     0,      1], sc([     0, np.nan])), sc(np.nan))

2779:         assert_equal(np.interp(0.5, [-np.inf, +np.inf], sc([      0,      10])), sc(np.nan))

2780:         assert_equal(np.interp(0.5, [      0,       1], sc([-np.inf, +np.inf])), sc(np.nan))

2781:         assert_equal(np.interp(0.5, [      0,       1], sc([+np.inf, -np.inf])), sc(np.nan))

2784:         assert_equal(np.interp(0.5, [-np.inf, +np.inf], sc([     10,      10])), sc(10))

2788:         assert_equal(np.interp(0.5, [-np.inf,       1], sc([-np.inf,      10])), sc(np.nan))

2789:         assert_equal(np.interp(0.5, [-np.inf,       1], sc([+np.inf,      10])), sc(np.nan))

2790:         assert_equal(np.interp(0.5, [-np.inf,       1], sc([      0, -np.inf])), sc(np.nan))

2791:         assert_equal(np.interp(0.5, [-np.inf,       1], sc([      0, +np.inf])), sc(np.nan))

2792:         assert_equal(np.interp(0.5, [      0, +np.inf], sc([-np.inf,      10])), sc(np.nan))

2793:         assert_equal(np.interp(0.5, [      0, +np.inf], sc([+np.inf,      10])), sc(np.nan))

2794:         assert_equal(np.interp(0.5, [      0, +np.inf], sc([      0, -np.inf])), sc(np.nan))

2795:         assert_equal(np.interp(0.5, [      0, +np.inf], sc([      0, +np.inf])), sc(np.nan))

2799:         assert_equal(np.interp(0.5, [-np.inf, -np.inf], sc([0, 10])), sc(10))

2800:         assert_equal(np.interp(0.5, [-np.inf, 1      ], sc([0, 10])), sc(10))

2801:         assert_equal(np.interp(0.5, [      0, +np.inf], sc([0, 10])), sc(0))

2802:         assert_equal(np.interp(0.5, [+np.inf, +np.inf], sc([0, 10])), sc(0))

2806:         assert_equal(np.interp(0.5, [0, 1], sc([      0, -np.inf])), sc(-np.inf))

2807:         assert_equal(np.interp(0.5, [0, 1], sc([      0, +np.inf])), sc(+np.inf))

2808:         assert_equal(np.interp(0.5, [0, 1], sc([-np.inf,      10])), sc(-np.inf))

2809:         assert_equal(np.interp(0.5, [0, 1], sc([+np.inf,      10])), sc(+np.inf))

2810:         assert_equal(np.interp(0.5, [0, 1], sc([-np.inf, -np.inf])), sc(-np.inf))

2811:         assert_equal(np.interp(0.5, [0, 1], sc([+np.inf, +np.inf])), sc(+np.inf))

2819:         assert_almost_equal(np.interp(x0, x, y), y0)

2823:         assert_almost_equal(np.interp(x0, x, y, left=left), left)

2826:         assert_almost_equal(np.interp(x0, x, y, right=right), right)

2832:         assert_almost_equal(np.interp(x, xp, fp), y)

2839:         assert_almost_equal(np.interp(x, xp, fp, period=360), y)

2845:         assert_almost_equal(np.interp(x0, x, y), x0)

2851:         assert_equal(actual, 0)

2852:         assert_(isinstance(actual, np.float64))

2855:         assert_equal(actual, 0.5)

2856:         assert_(isinstance(actual, np.float64))

2861:         assert_almost_equal(np.interp(np.pi, xp, fp), 0.0)

2868:         assert_almost_equal(np.interp(x, xp, fp, period=360), y)

2871:         assert_almost_equal(np.interp(x, xp, fp, period=360), y)

2878:         assert_equal(np.percentile(x, 0), 0.)

2879:         assert_equal(np.percentile(x, 100), 3.5)

2880:         assert_equal(np.percentile(x, 50), 1.75)

2882:         assert_equal(np.percentile(x, 0), np.nan)

2883:         assert_equal(np.percentile(x, 0, method='nearest'), np.nan)

2889:         assert_equal(p, Fraction(0))

2890:         assert_equal(type(p), Fraction)

2893:         assert_equal(p, Fraction(7, 2))

2894:         assert_equal(type(p), Fraction)

2897:         assert_equal(p, Fraction(7, 4))

2898:         assert_equal(type(p), Fraction)

2901:         assert_equal(p, np.array([Fraction(7, 4)]))

2902:         assert_equal(type(p), np.ndarray)

2917:         assert_array_equal(np.percentile(x, 50, axis=0), [1, 1, 1])

2927:         np.testing.assert_equal(res, np.NAN)

2928:         np.testing.assert_equal(res.dtype, arr.dtype)

2961:         np.testing.assert_almost_equal(actual, expected, 14)

2965:                 np.testing.assert_equal(np.asarray(actual).dtype, np.float64)

2967:                 np.testing.assert_equal(np.asarray(actual).dtype,

2970:             np.testing.assert_equal(np.asarray(actual).dtype,

2977:         assert_equal(np.percentile(np.arange(10, dtype=dtype), 50,

2979:         assert_equal(np.percentile(np.arange(10, dtype=dtype), 50,

2984:         assert_equal(np.percentile(np.arange(10, dtype=dtype), 51,

2986:         assert_equal(np.percentile(np.arange(9, dtype=dtype) + 1, 50,

2988:         assert_equal(np.percentile(np.arange(11, dtype=dtype), 51,

2990:         assert_equal(np.percentile(np.arange(11, dtype=dtype), 50,

2995:         assert_equal(np.percentile(np.arange(10, dtype=dtype), 51,

2997:         assert_equal(np.percentile(np.arange(10, dtype=dtype), 49,

3004:         np.testing.assert_equal(actual, arr.max())

3007:         np.testing.assert_equal(actual, arr.min())

3011:         assert_equal(np.percentile(x, [0, 100, 50]), [0, 3.5, 1.75])

3016:         assert_equal(np.percentile(x, (25, 50, 100)), [2.75, 5.5, 11.0])

3019:         assert_equal(np.percentile(x, (25, 50, 100), axis=0), r0)

3022:         assert_equal(np.percentile(x, (25, 50, 100), axis=1), np.array(r1).T)

3026:         assert_equal(np.percentile(x, (25, 50)).shape, (2,))

3027:         assert_equal(np.percentile(x, (25, 50, 75)).shape, (3,))

3028:         assert_equal(np.percentile(x, (25, 50), axis=0).shape, (2, 4, 5, 6))

3029:         assert_equal(np.percentile(x, (25, 50), axis=1).shape, (2, 3, 5, 6))

3030:         assert_equal(np.percentile(x, (25, 50), axis=2).shape, (2, 3, 4, 6))

3031:         assert_equal(np.percentile(x, (25, 50), axis=3).shape, (2, 3, 4, 5))

3032:         assert_equal(

3034:         assert_equal(np.percentile(x, (25, 50),

3036:         assert_equal(np.percentile(x, (25, 50, 75),

3038:         assert_equal(np.percentile(x, (25, 50), axis=0,

3040:         assert_equal(np.percentile(x, (25, 50), axis=1,

3042:         assert_equal(np.percentile(x, (25, 50), axis=2,

3044:         assert_equal(np.percentile(x, (25, 50), axis=3,

3046:         assert_equal(np.percentile(x, (25, 50, 75), axis=1,

3052:         assert_equal(np.percentile(x, 50), 5.5)

3053:         assert_(np.isscalar(np.percentile(x, 50)))

3055:         assert_equal(np.percentile(x, 50, axis=0), r0)

3056:         assert_equal(np.percentile(x, 50, axis=0).shape, r0.shape)

3058:         assert_almost_equal(np.percentile(x, 50, axis=1), r1)

3059:         assert_equal(np.percentile(x, 50, axis=1).shape, r1.shape)

3062:         assert_equal(np.percentile(x, 50, out=out), 5.5)

3063:         assert_equal(out, 5.5)

3065:         assert_equal(np.percentile(x, 50, axis=0, out=out), r0)

3066:         assert_equal(out, r0)

3068:         assert_equal(np.percentile(x, 50, axis=1, out=out), r1)

3069:         assert_equal(out, r1)

3073:         assert_equal(np.percentile(x, 50, method='lower'), 5.)

3074:         assert_(np.isscalar(np.percentile(x, 50)))

3077:         assert_equal(c0, r0)

3078:         assert_equal(c0.shape, r0.shape)

3081:         assert_almost_equal(c1, r1)

3082:         assert_equal(c1.shape, r1.shape)

3086:         assert_equal(c, 5)

3087:         assert_equal(out, 5)

3090:         assert_equal(c, r0)

3091:         assert_equal(out, r0)

3094:         assert_equal(c, r1)

3095:         assert_equal(out, r1)

3098:         assert_raises(ValueError, np.percentile, [1, 2], 56,

3100:         assert_raises(ValueError, np.percentile, [1], 101)

3101:         assert_raises(ValueError, np.percentile, [1], -1)

3102:         assert_raises(ValueError, np.percentile, [1], list(range(50)) + [101])

3103:         assert_raises(ValueError, np.percentile, [1], list(range(50)) + [-0.1])

3106:         assert_equal(np.percentile([1, 2, 3], 0), 1)

3113:         assert_equal(np.percentile(x, p), y)

3120:         assert_equal(np.percentile(x, p, axis=0), y)

3124:         assert_equal(np.percentile(x, p, axis=1), y)

3130:         assert_equal(np.percentile(x, (25, 50), axis=0, out=out), r0)

3131:         assert_equal(out, r0)

3134:         assert_equal(np.percentile(x, (25, 50), axis=1, out=out), r1)

3135:         assert_equal(out, r1)

3141:         assert_equal(c, r0)

3142:         assert_equal(out, r0)

3146:         assert_equal(c, r1)

3147:         assert_equal(out, r1)

3152:         assert_array_equal(np.percentile(d, 50, axis=0).shape, (1, 2, 1))

3153:         assert_array_equal(np.percentile(d, 50, axis=1).shape, (11, 2, 1))

3154:         assert_array_equal(np.percentile(d, 50, axis=2).shape, (11, 1, 1))

3155:         assert_array_equal(np.percentile(d, 50, axis=3).shape, (11, 1, 2))

3156:         assert_array_equal(np.percentile(d, 50, axis=-1).shape, (11, 1, 2))

3157:         assert_array_equal(np.percentile(d, 50, axis=-2).shape, (11, 1, 1))

3158:         assert_array_equal(np.percentile(d, 50, axis=-3).shape, (11, 2, 1))

3159:         assert_array_equal(np.percentile(d, 50, axis=-4).shape, (1, 2, 1))

3161:         assert_array_equal(np.percentile(d, 50, axis=2,

3164:         assert_array_equal(np.percentile(d, 50, axis=-2,

3168:         assert_array_equal(np.array(np.percentile(d, [10, 50], axis=0)).shape,

3170:         assert_array_equal(np.array(np.percentile(d, [10, 50], axis=1)).shape,

3172:         assert_array_equal(np.array(np.percentile(d, [10, 50], axis=2)).shape,

3174:         assert_array_equal(np.array(np.percentile(d, [10, 50], axis=3)).shape,

3180:         assert_equal(a, np.array([2, 3, 4, 1]))

3184:         assert_equal(a, np.array([2, 3, 4, 1]))

3189:         assert_array_equal(p, np.linspace(0., 100., num=5))

3192:         assert_array_equal(p, np.linspace(0., 100., num=5).tolist())

3197:         assert_equal(b, np.array([2.5]))

3200:         assert_equal(b, np.array([2.5]))

3205:         assert_equal(np.percentile(x, 30, axis=(0, 1)), np.percentile(o, 30))

3207:         assert_equal(np.percentile(x, 30, axis=(-2, -1)), np.percentile(o, 30))

3209:         assert_equal(np.percentile(x, 30, axis=(0, -1)), np.percentile(o, 30))

3212:         assert_equal(np.percentile(x, [25, 60], axis=(0, 1, 2)),

3214:         assert_equal(np.percentile(x, [25, 60], axis=(0,)),

3219:         assert_equal(np.percentile(d, 25,  axis=(0, 1, 2))[0],

3221:         assert_equal(np.percentile(d, [10, 90], axis=(0, 1, 3))[
3223:         assert_equal(np.percentile(d, 25, axis=(3, 1, -4))[2],

3225:         assert_equal(np.percentile(d, 25, axis=(3, 1, 2))[2],

3227:         assert_equal(np.percentile(d, 25, axis=(3, 2))[2, 1],

3229:         assert_equal(np.percentile(d, 25, axis=(1, -2))[2, 1],

3231:         assert_equal(np.percentile(d, 25, axis=(1, 3))[2, 2],

3236:         assert_raises(np.AxisError, np.percentile, d, axis=-5, q=25)

3237:         assert_raises(np.AxisError, np.percentile, d, axis=(0, -5), q=25)

3238:         assert_raises(np.AxisError, np.percentile, d, axis=4, q=25)

3239:         assert_raises(np.AxisError, np.percentile, d, axis=(0, 4), q=25)

3241:         assert_raises(ValueError, np.percentile, d, axis=(1, 1), q=25)

3242:         assert_raises(ValueError, np.percentile, d, axis=(-1, -1), q=25)

3243:         assert_raises(ValueError, np.percentile, d, axis=(3, -1), q=25)

3247:         assert_equal(np.percentile(d, 7, axis=None, keepdims=True).shape,

3249:         assert_equal(np.percentile(d, 7, axis=(0, 1), keepdims=True).shape,

3251:         assert_equal(np.percentile(d, 7, axis=(0, 3), keepdims=True).shape,

3253:         assert_equal(np.percentile(d, 7, axis=(1,), keepdims=True).shape,

3255:         assert_equal(np.percentile(d, 7, (0, 1, 2, 3), keepdims=True).shape,

3257:         assert_equal(np.percentile(d, 7, axis=(0, 1, 3), keepdims=True).shape,

3260:         assert_equal(np.percentile(d, [1, 7], axis=(0, 1, 3),

3262:         assert_equal(np.percentile(d, [1, 7], axis=(0, 3),

3268:         assert_equal(np.percentile(d, 0, 0, out=o), o)

3269:         assert_equal(np.percentile(d, 0, 0, method='nearest', out=o), o)

3271:         assert_equal(np.percentile(d, 1, 1, out=o), o)

3272:         assert_equal(np.percentile(d, 1, 1, method='nearest', out=o), o)

3275:         assert_equal(np.percentile(d, 2, out=o), o)

3276:         assert_equal(np.percentile(d, 2, method='nearest', out=o), o)

3284:             assert_equal(np.percentile(d, 0, 0, out=o), o)

3285:             assert_equal(

3288:             assert_equal(np.percentile(d, 1, 1, out=o), o)

3289:             assert_equal(

3292:             assert_equal(np.percentile(d, 1, out=o), o)

3293:             assert_equal(

3299:         assert_equal(np.percentile(a, 0.3), np.nan)

3300:         assert_equal(np.percentile(a, 0.3, axis=0), np.nan)

3301:         assert_equal(np.percentile(a, [0.3, 0.6], axis=0),

3309:         assert_equal(np.percentile(a, 0.3), np.nan)

3310:         assert_equal(np.percentile(a, 0.3).ndim, 0)

3316:         assert_equal(np.percentile(a, 0.3, 0), b)

3323:         assert_equal(np.percentile(a, [0.3, 0.6], 0), b)

3329:         assert_equal(np.percentile(a, 0.3, 1), b)

3335:         assert_equal(np.percentile(a, [0.3, 0.6], 1), b)

3342:         assert_equal(np.percentile(a, 0.3, (0, 2)), b)

3348:         assert_equal(np.percentile(a, [0.3, 0.6], (0, 2)), b)

3354:         assert_equal(np.percentile(

3378:         np.testing.assert_array_max_ulp(a, 0.18, maxulp=1)

3382:         assert_equal(np.quantile(x, 0), 0.)

3383:         assert_equal(np.quantile(x, 1), 3.5)

3384:         assert_equal(np.quantile(x, 0.5), 1.75)

3390:         assert_equal(tf_quant, a[0])

3391:         assert_equal(type(tf_quant), a.dtype)

3394:         assert_array_equal(quant_res, a)

3395:         assert_equal(quant_res.dtype, a.dtype)

3401:         assert_equal(q, 0)

3402:         assert_equal(type(q), Fraction)

3405:         assert_equal(q, Fraction(7, 2))

3406:         assert_equal(type(q), Fraction)

3409:         assert_equal(q, Fraction(7, 4))

3410:         assert_equal(type(q), Fraction)

3413:         assert_equal(q, np.array([Fraction(7, 4)]))

3414:         assert_equal(type(q), np.ndarray)

3417:         assert_equal(q, np.array([[Fraction(7, 4)]]))

3418:         assert_equal(type(q), np.ndarray)

3422:         assert_equal(np.quantile(x, Fraction(1, 2)), Fraction(7, 2))

3429:         assert_array_equal(p, p0)

3434:         assert_array_equal(p, p0)

3440:         assert res.dtype == dtype

3454:         assert_equal(np.sort(quantile), quantile)

3458:         assert_equal(np.sort(quantile), quantile)

3468:         assert_equal(np.sort(quantile), quantile)

3474:         assert np.isscalar(actual)

3475:         assert_equal(np.quantile(a, 0.5), np.nan)

3490:             assert l0 == l1  # uninteresting

3492:             assert l0 <= l1

3494:             assert l0 >= l1

3504:             assert a <= nfb._lerp(a, b, t) <= b

3506:             assert b <= nfb._lerp(a, b, t) <= a

3518:         assert left == right

3524:         assert nfb._lerp(a, b, t) == 2.6

3533:         assert_equal(np.median(a0), 1)

3534:         assert_allclose(np.median(a1), 0.5)

3535:         assert_allclose(np.median(a2), 2.5)

3536:         assert_allclose(np.median(a2, axis=0), [1.5,  2.5,  3.5])

3537:         assert_equal(np.median(a2, axis=1), [1, 4])

3538:         assert_allclose(np.median(a2, axis=None), 2.5)

3541:         assert_almost_equal((a[1] + a[3]) / 2., np.median(a))

3543:         assert_equal(a[0], np.median(a))

3545:         assert_equal(a[-1], np.median(a))

3547:         assert_equal(np.median(a).ndim, 0)

3549:         assert_equal(np.median(a).ndim, 0)

3561:             assert_array_equal(a, orig)

3563:         assert_allclose(np.median(a3, axis=0), [3,  4])

3564:         assert_allclose(np.median(a3.T, axis=1), [3,  4])

3565:         assert_allclose(np.median(a3), 3.5)

3566:         assert_allclose(np.median(a3, axis=None), 3.5)

3567:         assert_allclose(np.median(a3.T), 3.5)

3577:         assert_allclose(np.median(a0.copy(), overwrite_input=True), 1)

3578:         assert_allclose(np.median(a1.copy(), overwrite_input=True), 0.5)

3579:         assert_allclose(np.median(a2.copy(), overwrite_input=True), 2.5)

3580:         assert_allclose(np.median(a2.copy(), overwrite_input=True, axis=0),

3582:         assert_allclose(

3584:         assert_allclose(

3586:         assert_allclose(

3588:         assert_allclose(np.median(a3.T.copy(), overwrite_input=True, axis=1),

3593:         assert_allclose(np.median(a4, axis=None),

3595:         assert_allclose(np.median(a4, axis=0),

3597:         assert_allclose(np.median(a4, axis=1),

3599:         assert_allclose(np.median(a4, axis=2),

3604:         assert_almost_equal(np.median(x), 2)

3606:         assert_almost_equal(np.median(x2), 2)

3607:         assert_allclose(np.median(x2, axis=0), x)

3622:         assert_equal(np.median(a), -7)

3632:         assert isinstance(m, MySubclass)

3637:         assert_equal(np.median(d, 0, out=o), o)

3639:         assert_equal(np.median(d, 1, out=o), o)

3641:         assert_equal(np.median(d, out=o), o)

3649:             assert_equal(np.median(d, 0, out=o), o)

3651:             assert_equal(np.median(d, 1, out=o), o)

3653:             assert_equal(np.median(d, out=o), o)

3658:         assert_equal(np.median(a), np.nan)

3659:         assert_equal(np.median(a, axis=0), np.nan)

3666:         assert_equal(np.median(a), np.nan)

3667:         assert_equal(np.median(a).ndim, 0)

3673:         assert_equal(np.median(a, 0), b)

3679:         assert_equal(np.median(a, 1), b)

3685:         assert_equal(np.median(a, (0, 2)), b)

3692:             assert_equal(np.median(a), np.nan)

3693:             assert_(w[0].category is RuntimeWarning)

3694:             assert_equal(len(w), 2)

3701:             assert_equal(np.median(a), np.nan)

3702:             assert_(w[0].category is RuntimeWarning)

3706:         assert_equal(np.median(a, axis=0), b)

3707:         assert_equal(np.median(a, axis=1), b)

3713:             assert_equal(np.median(a, axis=2), b)

3714:             assert_(w[0].category is RuntimeWarning)

3718:         assert_(type(np.median(o.astype(object))), float)

3720:         assert_(type(np.median(o.astype(object))), float)

3725:         assert_equal(np.median(x, axis=(0, 1)), np.median(o))

3727:         assert_equal(np.median(x, axis=(-2, -1)), np.median(o))

3729:         assert_equal(np.median(x, axis=(0, -1)), np.median(o))

3731:         assert_equal(np.median(x, axis=(0, 1, 2)), np.median(x, axis=None))

3732:         assert_equal(np.median(x, axis=(0, )), np.median(x, axis=0))

3733:         assert_equal(np.median(x, axis=(-1, )), np.median(x, axis=-1))

3737:         assert_equal(np.median(d, axis=(0, 1, 2))[0],

3739:         assert_equal(np.median(d, axis=(0, 1, 3))[1],

3741:         assert_equal(np.median(d, axis=(3, 1, -4))[2],

3743:         assert_equal(np.median(d, axis=(3, 1, 2))[2],

3745:         assert_equal(np.median(d, axis=(3, 2))[2, 1],

3747:         assert_equal(np.median(d, axis=(1, -2))[2, 1],

3749:         assert_equal(np.median(d, axis=(1, 3))[2, 2],

3754:         assert_raises(np.AxisError, np.median, d, axis=-5)

3755:         assert_raises(np.AxisError, np.median, d, axis=(0, -5))

3756:         assert_raises(np.AxisError, np.median, d, axis=4)

3757:         assert_raises(np.AxisError, np.median, d, axis=(0, 4))

3758:         assert_raises(ValueError, np.median, d, axis=(1, 1))

3762:         assert_equal(np.median(d, axis=None, keepdims=True).shape,

3764:         assert_equal(np.median(d, axis=(0, 1), keepdims=True).shape,

3766:         assert_equal(np.median(d, axis=(0, 3), keepdims=True).shape,

3768:         assert_equal(np.median(d, axis=(1,), keepdims=True).shape,

3770:         assert_equal(np.median(d, axis=(0, 1, 2, 3), keepdims=True).shape,

3772:         assert_equal(np.median(d, axis=(0, 1, 3), keepdims=True).shape,

3779:         assert_raises(TypeError, add_newdoc_ufunc, 2, "blah")

3780:         assert_raises(ValueError, add_newdoc_ufunc, np.add, "blah")

3783:         assert_raises(TypeError, add_newdoc_ufunc, np.add, 3)

3793:         assert_equal(np.core.flatiter.index.__doc__[
3794:         assert_(len(np.core.ufunc.identity.__doc__) > 300)

3795:         assert_(len(np.lib.index_tricks.mgrid.__doc__) > 300)

3803:         assert prev_doc == np.core.flatiter.index.__doc__

3824:         with assert_raises(RuntimeError)
3831:         with assert_raises(RuntimeError)
3850:         assert_equal(actual, expected)

3851:         assert_equal(actual.dtype, expected.dtype)

3858:         assert_equal(actual, expected)

3859:         assert_equal(actual.dtype, expected.dtype)

Total asserts: 967

Filename: numpy/lib/tests/test_arraypad.py
7: from numpy.testing import assert_array_equal, assert_allclose, assert_equal

38:             assert_equal(result, expected)

41:         assert_equal(

52:             assert_equal(result, expected)

55:         assert_equal(

61:         assert_equal(

66:         assert_equal(

73:         assert_equal(

77:         assert_equal(

85:         assert_equal(

92:         assert_equal(

96:         assert_equal(

120:         assert_array_equal(test, np.pad(test, pad_amt, mode=mode))

126:         assert_array_equal(np.pad(test, pad_amt, mode='edge'),

133:         assert_array_equal(np.pad(test, pad_amt, mode=mode),

160:         assert_array_equal(a, b)

184:         assert_array_equal(a, b)

208:         assert_array_equal(a, b)

232:         assert_array_equal(a, b)

256:         assert_array_equal(a, b)

280:         assert_array_equal(a, b)

304:         assert_array_equal(a, b)

328:         assert_array_equal(a, b)

342:         assert_array_equal(a, b)

356:         assert_array_equal(a, b)

382:         assert_array_equal(a, b)

404:         assert_array_equal(a, b)

428:         assert_array_equal(a, b)

442:         assert_equal(a[0], a[-1])

473:         assert_array_equal(a, b)

484:         assert_equal(arr, expected)

522:         assert_array_equal(a, b)

546:         assert_array_equal(a, b)

566:         assert_allclose(test, expected)

587:         assert_allclose(test, expected)

611:         assert_allclose(a, b)

628:         assert_allclose(test, expected)

641:         assert_allclose(test, expected)

648:         assert_array_equal(test, expected)

654:         assert_array_equal(test, expected)

670:         assert_array_equal(arr, expected)

675:         assert result.shape == (3, 4, 4)

701:         assert_allclose(a, b, rtol=1e-5, atol=1e-5)

715:         assert_allclose(test, expected)

734:         assert_equal(actual, expected)

739:         assert_equal(a[
740:         assert_equal(a[
741:         assert_equal(a[0, 
742:         assert_equal(a[-1, 
755:         assert_equal(result, expected)

760:         assert_equal(result, expected)

786:         assert_array_equal(a, b)

810:         assert_array_equal(a, b)

833:         assert_array_equal(a, b)

855:         assert_array_equal(a, b)

860:         assert_array_equal(a, b)

865:         assert_array_equal(a, b)

870:         assert_array_equal(a, b)

894:         assert result.shape == (8, 0, 4)

920:         assert_array_equal(a, b)

944:         assert_array_equal(a, b)

968:         assert_array_equal(a, b)

991:         assert_array_equal(a, b)

1013:         assert_array_equal(a, b)

1018:         assert_array_equal(a, b)

1023:         assert_array_equal(a, b)

1028:         assert_array_equal(a, b)

1054:         assert_array_equal(a, b)

1114:         assert_array_equal(a, b)

1119:         assert_array_equal(a, b)

1124:         assert_array_equal(a, b)

1129:         assert_array_equal(a, b[
1138:         assert_array_equal(np.r_[a, a, a, a][3
1142:         assert_array_equal(np.r_[a, a, a, a][
1163:         assert_array_equal(a, b)

1171:         assert_array_equal(padded, expected)

1176:         assert_array_equal(padded, expected)

1181:         assert_array_equal(padded, expected)

1188:         assert result.shape == (9, 10)

1189:         assert_equal(arr, result[2
1194:         assert result.shape == (3, 4, 4)

1214:     assert_array_equal(a, b)

1220:     assert_array_equal(a, b)

1229:     assert_array_equal(np.pad(a, pad_amt, mode=mode), b)

1304:         assert_array_equal(a, b)

1310:         assert_array_equal(arr, np.pad(arr, pad_width, mode=mode))

1332:     assert_array_equal(np.pad(arr, 2), [0, 0, 1, 1, 0, 0])

1346:     assert result.shape == (7, 8)

1347:     assert_equal(result[2
1354:     assert np.pad(x, 5, mode).flags["C_CONTIGUOUS"]

1356:     assert np.pad(x, 5, mode).flags["F_CONTIGUOUS"]

1364:     assert result.dtype == dtype

Total asserts: 92

Filename: numpy/lib/tests/test_mixins.py
5: from numpy.testing import assert_, assert_equal, assert_raises

59: def _assert_equal_type_and_value(result, expected, err_msg=None)
60:     assert_equal(type(result), type(expected), err_msg=err_msg)

62:         assert_equal(len(result), len(expected), err_msg=err_msg)

64:             _assert_equal_type_and_value(result_item, expected_item, err_msg)

66:         assert_equal(result.value, expected.value, err_msg=err_msg)

67:         assert_equal(getattr(result.value, 'dtype', None),

99:             _assert_equal_type_and_value(result, ArrayLike(0))

116:         _assert_equal_type_and_value(array_like, ArrayLike(np.array([1])))

120:         _assert_equal_type_and_value(array, ArrayLike(np.array([1])))

138:         assert_(array_like + opt_out is opt_out)

139:         assert_(opt_out + array_like is opt_out)

142:         with assert_raises(TypeError)
145:         with assert_raises(TypeError)
147:         with assert_raises(TypeError)
157:         _assert_equal_type_and_value(x + y, y)

158:         _assert_equal_type_and_value(y + x, y)

163:         with assert_raises(TypeError)
165:         with assert_raises(TypeError)
167:         with assert_raises(TypeError)
177:             _assert_equal_type_and_value(op(array_like), ArrayLike(op(array)))

186:             _assert_equal_type_and_value(expected, actual, err_msg=err_msg)

193:             _assert_equal_type_and_value(expected, actual, err_msg=err_msg)

199:         _assert_equal_type_and_value(expected, np.matmul(array_like, array))

200:         _assert_equal_type_and_value(

202:         _assert_equal_type_and_value(

207:         assert_(np.negative.at(array, np.array([0, 1])) is None)

208:         _assert_equal_type_and_value(array, ArrayLike([-1, -2, 3, 4]))

213:         _assert_equal_type_and_value(

215:         _assert_equal_type_and_value(

Total asserts: 30

Filename: numpy/lib/tests/test_packbits.py
2: from numpy.testing import assert_array_equal, assert_equal, assert_raises

13:         assert_equal(b.dtype, np.uint8)

14:         assert_array_equal(b, np.array([[[160], [64]], [[192], [32]]]))

16:     assert_raises(TypeError, np.packbits, np.array(a, dtype=float))

28:             assert_equal(b.dtype, np.uint8)

29:             assert_equal(b.shape, (0,))

49:                 assert_equal(b.dtype, np.uint8)

50:                 assert_equal(b.shape, out_shape)

74:         assert_equal(b.dtype, np.uint8)

84:             assert_array_equal(b, r)

86:         assert_array_equal(np.unpackbits(b, bitorder=bitorder)[
90:         assert_array_equal(b, [128, 128, 128, 31, 30, 28, 24, 16, 0, 0, 0, 199,

96:         assert_equal(b.dtype, np.uint8)

97:         assert_array_equal(b, [[190, 186, 178, 178, 150, 215, 87, 83, 83, 195,

114:         assert_equal(b.dtype, np.uint8)

115:         assert_array_equal(b, [[252, 127, 192,   0],

154:         assert_equal(b.dtype, np.uint8)

155:         assert_array_equal(b, [[252, 7, 240, 255, 192, 142, 255, 7, 126, 255,

172:         assert_equal(b.dtype, np.uint8)

173:         assert_array_equal(b, [[190,  72, 113, 214,   0],

209:         assert_array_equal(np.unpackbits(b)[
211:     assert_raises(TypeError, np.packbits, np.array(a, dtype=float))

227:     assert_equal(b.dtype, np.uint8)

228:     assert_array_equal(b, np.array([[0, 0, 0, 0, 0, 0, 1, 0],

235:     assert_equal(b.dtype, np.uint8)

238:     assert_array_equal(b, b_big)

239:     assert_array_equal(a, np.packbits(b_little, axis=1, bitorder='little'))

240:     assert_array_equal(b[
241:     assert_array_equal(a, np.packbits(b_big, axis=1, bitorder='big'))

242:     assert_raises(ValueError, np.unpackbits, a, bitorder='r')

243:     assert_raises(TypeError, np.unpackbits, a, bitorder=10)

250:     assert_equal(b.dtype, np.uint8)

251:     assert_array_equal(b, np.empty((0,)))

270:             assert_equal(b.dtype, np.uint8)

271:             assert_equal(b.shape, out_shape)

277:     assert_array_equal(np.packbits(np.unpackbits(d)), d)

278:     assert_array_equal(np.packbits(np.unpackbits(d[
280:     assert_array_equal(np.packbits(np.unpackbits(d, axis=1), axis=1), d)

282:     assert_array_equal(np.packbits(np.unpackbits(d, axis=0), axis=0), d)

313:         assert_equal(unpacked.dtype, np.uint8)

314:         assert_array_equal(unpacked, self.padded1[
322:         assert_equal(unpacked.dtype, np.uint8)

323:         assert_array_equal(unpacked, self.padded1[
337:         assert_equal(unpacked0.dtype, np.uint8)

338:         assert_array_equal(unpacked0, self.padded2[
343:         assert_equal(unpacked1.dtype, np.uint8)

344:         assert_array_equal(unpacked1, self.padded2[
356:         assert_equal(unpacked0.dtype, np.uint8)

358:             assert_array_equal(unpacked0, self.padded2[
360:             assert_array_equal(unpacked0[
364:         assert_equal(unpacked1.dtype, np.uint8)

366:             assert_array_equal(unpacked1, self.padded2[
368:             assert_array_equal(unpacked1[
372:         assert_raises(ValueError, np.unpackbits, packed0, axis=0, count=-9)

374:         assert_raises(ValueError, np.unpackbits, packed1, axis=1, count=-9)

376:         assert_raises(ValueError, np.unpackbits, packed, count=-57)

Total asserts: 56

Filename: numpy/lib/tests/test__datasource.py
7: from numpy.testing import assert_, assert_equal, assert_raises

100:         assert_(fh)

105:         assert_raises(OSError, self.ds.open, url)

110:             assert_(e.errno is None)

113:         assert_raises(URLError, self.ds._cache, invalid_httpurl())

118:         assert_(fh)

123:         assert_raises(OSError, self.ds.open, invalid_file)

139:         assert_equal(magic_line, result)

155:         assert_equal(magic_line, result)

168:         assert_(self.ds.exists(valid_httpurl()))

171:         assert_equal(self.ds.exists(invalid_httpurl()), False)

176:         assert_(self.ds.exists(tmpfile))

180:         assert_(self.ds.exists(tmpfile))

185:         assert_equal(self.ds.exists(tmpfile), False)

201:         assert_equal(local_path, self.ds.abspath(valid_httpurl()))

207:         assert_equal(tmpfile, self.ds.abspath(tmpfilename))

209:         assert_equal(tmpfile, self.ds.abspath(tmpfile))

215:         assert_(invalidhttp != self.ds.abspath(valid_httpurl()))

222:         assert_(invalidfile != self.ds.abspath(tmpfilename))

224:         assert_(invalidfile != self.ds.abspath(tmpfile))

232:         assert_(tmp_path(valid_httpurl()).startswith(self.tmpdir))

233:         assert_(tmp_path(invalid_httpurl()).startswith(self.tmpdir))

234:         assert_(tmp_path(tmpfile).startswith(self.tmpdir))

235:         assert_(tmp_path(tmpfilename).startswith(self.tmpdir))

237:             assert_(tmp_path(http_path+fn).startswith(self.tmpdir))

238:             assert_(tmp_path(fn).startswith(self.tmpdir))

267:         assert_equal(local_path, filepath)

271:         assert_(tmp_path(valid_httpfile()).startswith(self.tmpdir))

273:             assert_(tmp_path(http_path+fn).startswith(self.tmpdir))

274:             assert_(tmp_path(fn).startswith(self.tmpdir))

298:         assert_(self.repos.exists(tmpfile))

302:         assert_equal(self.repos.exists(tmpfile), False)

305:         assert_(self.repos.exists(valid_httpurl()))

316:         assert_(self.repos.exists(tmpfile))

330:         assert_(fp)

334:         assert_(fp)

Total asserts: 36

Filename: numpy/lib/tests/test_stride_tricks.py
4:     assert_equal, assert_array_equal, assert_raises, assert_,

5:     assert_raises_regex, assert_warns,

14: def assert_shapes_correct(input_shapes, expected_shape)
22:     assert_equal(outshapes, expected)

25: def assert_incompatible_shapes_raise(input_shapes)
30:     assert_raises(ValueError, broadcast_arrays, *inarrays)

33: def assert_same_as_ufunc(shape0, shape1, transposed=False, flipped=False)
52:     assert_array_equal(y, b1)

59:     assert_array_equal(x, bx)

60:     assert_array_equal(y, by)

69:     with assert_raises_regex(TypeError, 'got an unexpected keyword')
79:     assert_array_equal(bx0, bx)

80:     assert_array_equal(by0, by)

101:         assert_shapes_correct(input_shapes, shape)

104:         assert_shapes_correct(input_shapes2, shape)

107:         assert_shapes_correct(input_shapes3, shape)

130:         assert_shapes_correct(input_shapes, expected_shape)

132:         assert_shapes_correct(input_shapes[
162:         assert_shapes_correct(input_shapes, expected_shape)

164:         assert_shapes_correct(input_shapes[
177:         assert_incompatible_shapes_raise(input_shapes)

179:         assert_incompatible_shapes_raise(input_shapes[
221:         assert_same_as_ufunc(input_shapes[0], input_shapes[1],

224:         assert_same_as_ufunc(input_shapes[1], input_shapes[0])

226:         assert_same_as_ufunc(input_shapes[0], input_shapes[1], True)

230:             assert_same_as_ufunc(input_shapes[0], input_shapes[1], False, True)

231:             assert_same_as_ufunc(input_shapes[0], input_shapes[1], True, True)

257:         assert_array_equal(expected, actual)

276:         assert_raises(ValueError, lambda
283:     assert_equal(_broadcast_shape(), ())

284:     assert_equal(_broadcast_shape([1, 2]), (2,))

285:     assert_equal(_broadcast_shape(np.ones((1, 1))), (1, 1))

286:     assert_equal(_broadcast_shape(np.ones((1, 1)), np.ones((3, 4))), (3, 4))

287:     assert_equal(_broadcast_shape(*([np.ones((1, 2))] * 32)), (1, 2))

288:     assert_equal(_broadcast_shape(*([np.ones((1, 2))] * 100)), (1, 2))

291:     assert_equal(_broadcast_shape(*([np.ones(2)] * 32 + [1])), (2,))

293:     assert_raises(ValueError, lambda
328:         assert_equal(broadcast_shapes(*input_shapes), target_shape)

330:     assert_equal(broadcast_shapes(*([(1, 2)] * 32)), (1, 2))

331:     assert_equal(broadcast_shapes(*([(1, 2)] * 100)), (1, 2))

334:     assert_equal(broadcast_shapes(*([(2,)] * 32)), (2,))

348:         assert_raises(ValueError, lambda
351:     assert_raises(ValueError, lambda
358:     assert_array_equal(a_view, np.array([None]))

363:     assert_array_equal(a_view, expected)

368:     assert_array_equal(a_view, expected)

377:     assert_equal(a_view.dtype, dt)

378:     assert_array_equal(expected_num, a_view['num'])

379:     assert_array_equal(expected_obj, a_view['obj'])

384:     assert_equal(a.dtype, a_view.dtype)

390:     assert_equal(a.dtype, a_view.dtype)

396:     assert_equal(a.dtype, a_view.dtype)

397:     assert_array_equal([r] * 3, a_view)

408:         assert_array_equal(arr_view, expected)

421:         assert_array_equal(arr_view, expected)

431:         assert_array_equal(arr_view, expected)

443:         assert_array_equal(arr_view, expected)

456:         assert_array_equal(arr_view, expected)

479:         assert_(not view.flags.writeable)

485:         assert_(view.flags.writeable)

487:         assert_array_equal(arr, np.array([0, 3, 2, 3, 4]))

494:         assert_(not isinstance(sliding_window_view(arr, 2,

497:         assert_(isinstance(sliding_window_view(arr, 2, subok=True), MyArray))

499:         assert_(not isinstance(sliding_window_view(arr, 2), MyArray))

505:     assert_(not view.flags.writeable)

509:     assert_(view.flags.writeable)

511:     assert_array_equal(arr, np.full_like(arr, 3))

517:     assert_(not view.flags.writeable)

538:     assert_(type(a) is VerySimpleSubClass)

540:     assert_(type(a_view) is np.ndarray)

542:     assert_(type(a_view) is VerySimpleSubClass)

546:     assert_(type(a_view) is SimpleSubClass)

547:     assert_(a_view.info == 'simple finalized')

552:     assert_(type(a_view) is np.ndarray)

553:     assert_(type(b_view) is np.ndarray)

554:     assert_(a_view.shape == b_view.shape)

556:     assert_(type(a_view) is SimpleSubClass)

557:     assert_(a_view.info == 'simple finalized')

558:     assert_(type(b_view) is np.ndarray)

559:     assert_(a_view.shape == b_view.shape)

564:     assert_(type(a_view) is np.ndarray)

565:     assert_(a_view.shape == shape)

567:     assert_(type(a_view) is SimpleSubClass)

568:     assert_(a_view.info == 'simple finalized')

569:     assert_(a_view.shape == shape)

576:     assert_equal(result.flags.writeable, False)

577:     assert_raises(ValueError, result.__setitem__, slice(None), 0)

586:                 with assert_warns(FutureWarning)
587:                     assert_equal(result.flags.writeable, True)

588:                 with assert_warns(DeprecationWarning)
591:                 assert_equal(result.flags.writeable, True)

594:                 assert_equal(result.flags.writeable, True)

602:             assert_equal(result.flags.writeable, True)

608:     assert_equal(result.flags.writeable, False)

616:     assert_(first.shape == second.shape)

633:                 assert memoryview(result).readonly

635:                 assert not memoryview(result).readonly

642:     assert_array_equal(expected, actual)

645:     assert_array_equal(expected, actual)

Total asserts: 99

Filename: numpy/lib/tests/test_recfunctions.py
6: from numpy.ma.testutils import assert_equal

7: from numpy.testing import assert_, assert_raises

38:         assert_equal(test,

41:         assert_equal(test,

46:         assert_equal(test,

49:         assert_equal(test,

55:         assert_equal(test,

60:         assert_equal(test,

74:         assert_equal(test, control)

79:         assert_equal(test, control)

85:         assert_equal(test, control)

90:         assert_equal(test, control)

95:         assert_equal(test, control)

105:         assert_equal(test.dtype, newdtype)

106:         assert_equal(test, control)

112:         assert_equal(test, ('A', 'B'))

116:         assert_equal(test, ('a', ('b', ('ba', 'bb'))))

120:         assert_equal(test, ('a', ('b', ())))

124:         assert_equal(test, ())

130:         assert_equal(test, ('A', 'B'))

134:         assert_equal(test, ('a', 'b', 'ba', 'bb'))

138:         assert_equal(test, ('a', 'b'))

142:         assert_equal(test, ())

150:         assert_equal(test, {'A'
155:         assert_equal(test, {'A'
164:         assert_equal(test, control)

169:         assert_equal(test, {})

181:         assert_equal(sorted(test[-1]), control)

182:         assert_equal(test[0], a[test[-1]])

186:         assert_equal(sorted(test[-1]), control)

187:         assert_equal(test[0], a[test[-1]])

191:         assert_equal(sorted(test[-1]), control)

192:         assert_equal(test[0], a[test[-1]])

196:         assert_equal(sorted(test[-1]), control)

197:         assert_equal(test[0], a[test[-1]])

201:         assert_equal(sorted(test[-1]), control)

202:         assert_equal(test[0], a[test[-1]])

211:         assert_equal(sorted(test[-1]), control)

212:         assert_equal(test[0], a[test[-1]])

216:         assert_equal(sorted(test[-1]), control)

217:         assert_equal(test[0], a[test[-1]])

223:         assert_equal(repack_fields(dt), np.dtype('u1,f4,i8'))

224:         assert_equal(repack_fields(a).itemsize, 13)

225:         assert_equal(repack_fields(repack_fields(dt), align=True), dt)

229:         assert_(repack_fields(dt).type is np.record)

234:         assert_equal(out, np.zeros((4,5), dtype='f8'))

239:         assert_equal(out, np.array([ 3. ,  5.5,  9. , 11. ]))

241:         assert_equal(out, np.array([ 1. ,  4. ,  7. , 10. ]))

252:         assert_equal(out, want)

256:         assert_equal(apply_along_fields(np.mean, d),

258:         assert_equal(apply_along_fields(np.mean, d[['x', 'z']]),

266:         assert_(dd.base is d)

267:         assert_(ddd.base is d)

276:         assert_(dd.base is d)

277:         assert_(ddd.base is d)

284:         assert_equal(res, np.zeros((10, 6), dtype=int))

301:         assert_equal(inspect(dt), ((6,), np.int32, dt))

304:         assert_equal(inspect(dt), ((4,), np.int32, dt))

307:         assert_equal(inspect(dt), ((1,), np.int32, dt))

310:         assert_equal(inspect(dt), ((5,), np.int32, dt))

313:         assert_raises(ValueError, structured_to_unstructured, np.zeros(3, dt))

316:         assert_raises(NotImplementedError, structured_to_unstructured,

318:         assert_raises(NotImplementedError, unstructured_to_structured,

325:         assert_equal(require_fields(a, newdt), np.ones(2, newdt))

329:         assert_equal(a, np.array([(1,1,2),(1,3,4)], dtype=a.dtype))

331:         assert_equal(a, np.array([(0,1,2),(0,3,4)], dtype=a.dtype))

336:         assert_equal(require_fields(a, newdt), np.ones(2, newdt))

339:         assert_equal(a, np.array([((1,2),), ((1,3),)], dtype=a.dtype))

341:         assert_equal(a, np.array([((0,2),), ((0,3),)], dtype=a.dtype))

346:         assert_equal(b[()], 3)

358:         assert_equal(test, control)

369:         assert_equal(test, control)

391:         assert_equal(test, control)

393:         assert_equal(test, control)

396:         assert_equal(test, z)

398:         assert_equal(test, z)

404:         assert_equal(test, w)

409:         assert_equal(test, control)

418:         assert_equal(test, control)

424:         assert_equal(test, control)

425:         assert_equal(test.mask, control.mask)

433:         assert_equal(test, control)

439:         assert_equal(test, control)

448:         assert_equal(test, control)

456:         assert_equal(test, control)

466:         assert_equal(test, control)

468:         assert_equal(test, control)

469:         assert_(isinstance(test, MaskedRecords))

478:         assert_equal(test, control)

488:         #assert_equal(test, control)

502:         assert_equal(test, control)

524:         assert_equal(test, control)

533:         assert_equal(test, control)

542:         assert_equal(test, control)

556:         assert_equal(test, control)

574:         assert_equal(test, x)

575:         assert_(test is x)

578:         assert_equal(test, x)

579:         assert_(test is x)

587:         assert_equal(test, control)

591:         assert_equal(test, control)

595:         assert_equal(test, control)

607:         assert_equal(test, control)

608:         assert_equal(test.mask, control.mask)

616:         assert_equal(test, control)

617:         assert_equal(test.mask, control.mask)

627:         assert_equal(test, control)

641:         assert_equal(test, control)

642:         assert_equal(test.mask, control.mask)

654:         assert_equal(test, control)

655:         assert_equal(test.mask, control.mask)

670:         assert_equal(test, control)

671:         assert_equal(test.data, control.data)

672:         assert_equal(test.mask, control.mask)

683:         assert_equal(test, control)

684:         assert_equal(test.mask, control.mask)

685:         with assert_raises(TypeError)
697:         assert_equal(test, control)

698:         assert_equal(test.mask, control.mask)

725:         assert_equal(res.dtype, expected.dtype)

726:         assert_equal(res, expected)

727:         assert_equal(res.mask, expected.mask)

749:         assert_equal(test, control)

761:         #assert_equal(test, control)

778:         assert_equal(res, bar.view(ma.MaskedArray))

806:         assert_equal(test, control)

823:         assert_equal(test, control)

831:         assert_equal(j.dtype.names, ['b', 'c', 'a1', 'a2'])

836:         assert_raises(ValueError, join_by, ['a', 'b', 'b'], a, b)

849:         assert_equal(res.dtype, expected_dtype)

862:         assert_equal(res.dtype, expected_dtype)

875:         assert_equal(res.dtype, expected_dtype)

876:         assert_equal(res, expected)

881:         assert_(len(dt.descr), 3)  # padding field is inserted

892:         assert_equal(res.dtype, expected_dtype)

918:         assert_equal(test, control)

921:         assert_raises(ValueError, join_by, 'a', self.a, self.b,

937:         assert_equal(test, control)

957:         assert_equal(test.dtype, control.dtype)

958:         assert_equal(test, control)

979:         assert_equal(test, control)

Total asserts: 141

Filename: numpy/lib/tests/test_nanfunctions.py
8:     assert_, assert_equal, assert_almost_equal, assert_raises,

9:     assert_array_equal, suppress_warnings

77:         np.testing.assert_equal(signature, nan_signature)

81:         np.testing.assert_equal(

96:             assert_equal(ndat, _ndat)

104:                 assert_(res.ndim == tgt.ndim)

112:             assert_almost_equal(res, resout)

113:             assert_almost_equal(res, tgt)

122:                 assert_(res is tgt)

126:                 assert_(res is tgt)

132:             assert_almost_equal(res, tgt)

149:             assert np.isnan(out).all()

150:             assert out.dtype == array.dtype

158:             assert_equal(res, tgt)

159:             assert_equal(mat._mask, msk)

160:             assert_(not np.isinf(mat).any())

164:             assert_(f(0.) == 0.)

175:             assert_(isinstance(res, MyNDArray))

176:             assert_(res.shape == (3,))

178:             assert_(isinstance(res, MyNDArray))

179:             assert_(res.shape == (3,))

181:             assert_(res.shape == ())

189:                 assert_(isinstance(res, MyNDArray))

190:                 assert_(not np.any(np.isnan(res)))

191:                 assert_(len(w) == 0)

196:                 assert_(isinstance(res, MyNDArray))

197:                 assert_(np.isnan(res[1]) and not np.isnan(res[0])

199:                 assert_(len(w) == 1, 'no warning raised')

200:                 assert_(issubclass(w[0].category, RuntimeWarning))

205:                 assert_(res.shape == ())

206:                 assert_(res != np.nan)

207:                 assert_(len(w) == 0)

211:         assert_equal(np.nanmin(arr), 1.0)

212:         assert_equal(np.nanmin(arr, axis=0), [1.0, 2.0])

216:             # assert_equal does not work on object arrays of nan

217:             assert_equal(list(np.nanmin(arr, axis=1)), [1.0, 4.0, np.nan])

218:             assert_(len(w) == 1, 'no warning raised')

219:             assert_(issubclass(w[0].category, RuntimeWarning))

233:             assert ret1.dtype == dtype

234:             assert ret1 == initial

237:             assert ret2.dtype == dtype

238:             assert ret2 == initial

254:             assert ret1.dtype == dtype

255:             assert ret1 == reference

258:             assert ret2.dtype == dtype

259:             assert ret2 == reference

271:             assert_equal(ndat, _ndat)

282:                     assert_(not np.isnan(val))

283:                     assert_(not fcmp(val, row).any())

284:                     assert_(not np.equal(val, row[
305:                 assert_raises(ValueError, f, mat, axis=axis)

308:                 assert_equal(res, np.zeros(0))

312:             assert_(f(0.) == 0.)

323:             assert_(isinstance(res, MyNDArray))

324:             assert_(res.shape == (3,))

326:             assert_(isinstance(res, MyNDArray))

327:             assert_(res.shape == (3,))

329:             assert_(res.shape == ())

339:             assert ret.ndim == ar.ndim

340:             assert ret == reference

351:             assert ret is out

352:             assert ret == reference

393:         assert_almost_equal(out, tgt)

395:             assert type(out) is type(tgt)

397:             assert out.dtype == tgt.dtype

409:         assert_almost_equal(out, tgt)

411:             assert type(out) is type(tgt)

413:             assert out.dtype == tgt.dtype

425:         assert_almost_equal(out, tgt)

427:             assert type(out) is type(tgt)

429:             assert out.dtype == tgt.dtype

438:             assert_equal(ndat, _ndat)

446:                 assert_(res.ndim == tgt.ndim)

454:             assert_almost_equal(res, resout)

455:             assert_almost_equal(res, tgt)

468:                     assert_(res is tgt)

472:                     assert_(res is tgt)

485:                     assert_(res is tgt)

489:                     assert_(res is tgt)

498:                 assert_(res is tgt, "res %s, tgt %s" % (res, tgt))

502:                 assert_(res is tgt)

508:             assert_almost_equal(res, tgt)

512:             assert_(f(0.) == 0.)

525:             assert_(isinstance(res, MyNDArray))

526:             assert_(res.shape == expected_shape)

529:             assert_(isinstance(res, MyNDArray))

530:             assert_(res.shape == expected_shape)

533:             assert_(isinstance(res, MyNDArray))

534:             assert_(res.shape == expected_shape)

555:             assert np.all(out == identity)

556:             assert out.dtype == array.dtype

563:             assert_equal(res, tgt)

566:             assert_equal(res, tgt)

569:             assert_equal(res, tgt)

579:             assert ret.dtype == dtype

580:             assert ret == reference

592:             assert ret.dtype == dtype

593:             assert ret == reference

614:             assert np.all(out == identity)

615:             assert out.dtype == array.dtype

622:             assert_equal(res, tgt)

625:             assert_equal(res, tgt)

628:             assert_equal(res, tgt)

636:                 assert_(res.ndim == tgt.ndim)

644:             assert_equal(res.shape, (1155,))

647:                 assert_equal(res.shape, (3, 5, 7, 11))

653:             assert_almost_equal(res, tgt)

656:             assert_almost_equal(res, tgt)

665:                 assert_almost_equal(res, resout)

666:                 assert_almost_equal(res, tgt)

677:                 assert_raises(TypeError, f, _ndat, axis=1, dtype=dtype)

683:                 assert_raises(TypeError, f, _ndat, axis=1, out=out)

692:                 assert_almost_equal(res, tgt)

705:                     assert_equal(np.isnan(res), tgt)

707:                         assert_(len(sup.log) == 1)

709:                         assert_(len(sup.log) == 0)

726:             assert np.isnan(out).all()

731:                 assert out.dtype == array.dtype

733:                 assert out.dtype == np.abs(array).dtype

741:                     assert_(np.isnan(f(mat, axis=axis)).all())

742:                     assert_(len(w) == 1)

743:                     assert_(issubclass(w[0].category, RuntimeWarning))

747:                     assert_equal(f(mat, axis=axis), np.zeros([]))

748:                     assert_(len(w) == 0)

762:             assert ret.dtype == dtype_reference

763:             np.testing.assert_allclose(ret, reference)

781:         assert_equal(ndat, _ndat)

788:             assert_(res.ndim == tgt.ndim)

798:             assert_equal(res.shape, (1, 1, 1, 1))

800:             assert_equal(res.shape, (1, 1, 7, 11))

802:             assert_equal(res.shape, (1, 5, 7, 1))

804:             assert_equal(res.shape, (3, 1, 7, 11))

806:             assert_equal(res.shape, (1, 1, 1, 1))

808:             assert_equal(res.shape, (1, 1, 7, 1))

816:         assert_almost_equal(res, resout)

817:         assert_almost_equal(res, tgt)

822:         assert_almost_equal(res, resout)

823:         assert_almost_equal(res, tgt)

825:         assert_almost_equal(res, resout)

826:         assert_almost_equal(res, tgt)

842:             assert_array_equal(np.nanmedian(d, axis=-1), tgt)

847:             assert_almost_equal(res, tgt)

857:             assert output.dtype == mat.dtype

858:             assert np.isnan(output).all()

861:                 assert_(len(sup.log) == 1)

863:                 assert_(len(sup.log) == 3)

868:             assert output_scalar.dtype == scalar.dtype

869:             assert np.isnan(output_scalar)

872:                 assert_(len(sup.log) == 2)

874:                 assert_(len(sup.log) == 4)

881:                 assert_(np.isnan(np.nanmedian(mat, axis=axis)).all())

882:                 assert_(len(w) == 1)

883:                 assert_(issubclass(w[0].category, RuntimeWarning))

887:                 assert_equal(np.nanmedian(mat, axis=axis), np.zeros([]))

888:                 assert_(len(w) == 0)

891:         assert_(np.nanmedian(0.) == 0.)

895:         assert_raises(np.AxisError, np.nanmedian, d, axis=-5)

896:         assert_raises(np.AxisError, np.nanmedian, d, axis=(0, -5))

897:         assert_raises(np.AxisError, np.nanmedian, d, axis=4)

898:         assert_raises(np.AxisError, np.nanmedian, d, axis=(0, 4))

899:         assert_raises(ValueError, np.nanmedian, d, axis=(1, 1))

906:                 assert_equal(np.nanmedian(a, axis=0), [inf,  np.nan])

907:                 assert_equal(np.nanmedian(a, axis=1), [inf,  np.nan])

908:                 assert_equal(np.nanmedian(a), inf)

913:                 assert_equal(np.nanmedian(a), inf)

914:                 assert_equal(np.nanmedian(a, axis=0), [np.nan, np.nan, inf])

915:                 assert_equal(np.nanmedian(a, axis=1), inf)

919:                 assert_equal(np.nanmedian(a, axis=1), inf)

926:                     assert_equal(np.nanmedian(a, axis=0), [4., 7., -inf, 5.])

927:                     assert_equal(np.nanmedian(a), 4.5)

929:                     assert_equal(np.nanmedian(a, axis=0), [-10., 7., -inf, -9.])

930:                     assert_equal(np.nanmedian(a), -2.5)

931:                 assert_equal(np.nanmedian(a, axis=-1), [-1., -2.5, inf])

936:                         assert_equal(np.nanmedian(a), inf)

937:                         assert_equal(np.nanmedian(a, axis=1), inf)

938:                         assert_equal(np.nanmedian(a, axis=0),

942:                         assert_equal(np.nanmedian(a), -inf)

943:                         assert_equal(np.nanmedian(a, axis=1), -inf)

944:                         assert_equal(np.nanmedian(a, axis=0),

954:         assert_equal(ndat, _ndat)

963:             assert_(res.ndim == tgt.ndim)

973:             assert_equal(res.shape, (1, 1, 1, 1))

975:             assert_equal(res.shape, (1, 1, 7, 11))

977:             assert_equal(res.shape, (1, 5, 7, 1))

979:             assert_equal(res.shape, (3, 1, 7, 11))

981:             assert_equal(res.shape, (1, 1, 1, 1))

983:             assert_equal(res.shape, (1, 1, 7, 1))

991:         assert_almost_equal(res, resout)

992:         assert_almost_equal(res, tgt)

997:         assert_almost_equal(res, resout)

998:         assert_almost_equal(res, tgt)

1000:         assert_almost_equal(res, resout)

1001:         assert_almost_equal(res, tgt)

1006:         assert_almost_equal(res, tgt)

1010:         assert_almost_equal(res, tgt)

1025:         assert np.isnan(out).all()

1026:         assert out.dtype == array.dtype

1033:                 assert_(np.isnan(np.nanpercentile(mat, 40, axis=axis)).all())

1034:                 assert_(len(w) == 1)

1035:                 assert_(issubclass(w[0].category, RuntimeWarning))

1039:                 assert_equal(np.nanpercentile(mat, 40, axis=axis), np.zeros([]))

1040:                 assert_(len(w) == 0)

1043:         assert_equal(np.nanpercentile(0., 100), 0.)

1046:         assert_equal(r, 2.5)

1047:         assert_(np.isscalar(r))

1051:         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=-5)

1052:         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=(0, -5))

1053:         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=4)

1054:         assert_raises(np.AxisError, np.nanpercentile, d, q=5, axis=(0, 4))

1055:         assert_raises(ValueError, np.nanpercentile, d, q=5, axis=(1, 1))

1072:                     assert_equal(nan_val.shape, val.shape)

1078:                     assert_equal(nan_val, val)

1081:         assert_equal(np.nanpercentile(megamat, perc, axis=(1, 2)).shape, (2, 3, 6))

1091:         assert_equal(np.nanquantile(ar, q=0.5), np.nanpercentile(ar, q=50))

1092:         assert_equal(np.nanquantile(ar, q=0.5, axis=0),

1094:         assert_equal(np.nanquantile(ar, q=0.5, axis=1),

1096:         assert_equal(np.nanquantile(ar, q=[0.5], axis=1),

1098:         assert_equal(np.nanquantile(ar, q=[0.25, 0.5, 0.75], axis=1),

1103:         assert_equal(np.nanquantile(x, 0), 0.)

1104:         assert_equal(np.nanquantile(x, 1), 3.5)

1105:         assert_equal(np.nanquantile(x, 0.5), 1.75)

1112:         assert_array_equal(p, p0)

1117:         assert_array_equal(p, p0)

1132:         assert np.isnan(out).all()

1133:         assert out.dtype == array.dtype

1154:         assert_equal(actual, expected)

1159:             assert actual is True

1169:         assert mask is None

1171:         assert result is arr

1176:         assert (mask == False).all()

1178:         assert result is not arr

1179:         assert_equal(result, arr)

1183:         assert_equal(mask_nan, np.array([False, False, True]))

1184:         assert result_nan is not arr_nan

1185:         assert_equal(result_nan, np.array([0, 1, 2]))

1186:         assert np.isnan(arr_nan[-1])

Total asserts: 236

Filename: numpy/lib/tests/test_loadtxt.py
13: from numpy.ma.testutils import assert_equal

14: from numpy.testing import assert_array_equal, HAS_REFCOUNT, IS_PYPY

30:     assert_array_equal(np.loadtxt(data, delimiter=","), expected)

38:     assert_equal(a, [[1.5, 2.5], [3.0, 4.0], [5.5, 6.0]])

79:     assert_array_equal(a, expected[skiprows
86:     assert_array_equal(a, expected["f0"])

87:     assert_array_equal(b, expected["f1"])

88:     assert_array_equal(c, expected["f2"])

89:     assert_array_equal(d, expected["f3"])

96:     assert_array_equal(np.loadtxt(data, delimiter=",", dtype=dtype), expected)

103:     assert_array_equal(np.loadtxt(data, dtype=dtype), expected)

118:     assert_array_equal(np.loadtxt(data, dtype=dt, delimiter=","), expected)

126:     assert_array_equal(np.loadtxt(data, delimiter=",", dtype=dt), expected)

153:     assert_array_equal(np.loadtxt(StringIO(data), dtype=int), arr)

154:     assert_array_equal(np.loadtxt(StringIO(data), dtype=int, ndmin=0), arr)

155:     assert_array_equal(np.loadtxt(StringIO(data), dtype=int, ndmin=1), arr)

156:     assert_array_equal(np.loadtxt(StringIO(data), dtype=int, ndmin=2), arr2d)

186:     assert_equal(

194:     assert_equal(

203:     assert_equal(res.dtype, dtype)

204:     assert_equal(res, np.array([["1.5", "2.5"], ["3.0", "4.0"]], dtype=dtype))

224:     assert_equal(res, expected)

239:     assert_equal(res, expected)

244:     assert_array_equal(res, [[0, -1], [0, -1]])

251:     assert_equal(res, expected)

263:     assert res.shape == (3,)

264:     assert res.dtype == np.dtype([])

277:     assert_equal(res, expected)

291:     assert_equal(res, expected)

302:     assert_equal(res, expected)

319:     assert_equal(res, expected)

327:     assert_equal(res, np.tile([1.5, 2.5], (2, 50000)))

336:     assert value == dtype.type("0.123456789")

357:     assert_equal(res, expected)

358:     assert_equal(res.dtype, expected_dtype)

377:     assert_equal(res, expected)

384:     assert res.dtype == bool

385:     assert_array_equal(res, [[True, False], [True, True]])

387:     assert_array_equal(res.view(np.uint8), [[1, 0], [1, 1]])

395:     assert np.loadtxt(["+2"], dtype=dtype) == 2

400:         assert np.loadtxt(["-2\n"], dtype=dtype) == -2

426:     assert_equal(res, expected)

436:     assert_equal(res, expected)

446:     assert_equal(res, expected)

476:     assert sys.getrefcount(sentinel) == 2

531:     assert_array_equal(res, expected)

547:     assert_array_equal(res, expected)

572:     assert_equal(res, [[1, 2], [3, 4]])

601:     assert_array_equal(res, expected)

608:     assert_equal(res, expected)

616:     assert_equal(res, expected)

622:     assert_equal(res, expected)

640:     assert res.shape == expected_shape

647:         assert res.shape == expected_shape

683:     assert full_dt.fields["b"][1] == 1

686:     assert res["b"] == dtype.type(value)

698:     assert_array_equal(res, np.array([3, 2]).astype(dtype))

708:     assert_array_equal(res, np.array([[1, 2+3j, 4+5j, 6-7j, 8j, 9j]] * 2))

747:     assert int("1_1") == float("1_1") == complex("1_1") == 11

773:     assert_array_equal(res, [[1., 2.], [2., 3.]])

784:     assert_array_equal(res, [['1', f'2{newline}'], ['3', f'4{newline}1']])

790:     assert_array_equal(res, [[1, 2, 3], [4, 5, 6]])

795:     assert res.tolist() == [["1\000", "2\000", "3"], ["4\000", "5\000", "6"]]

882:         assert_array_equal(res[
956:     assert a.dtype == expected.dtype

957:     assert_equal(a, expected)

964:     assert a.dtype == expected.dtype

965:     assert_equal(a, expected)

978:     assert a.dtype == expected.dtype

979:     assert_equal(a, expected)

986:     assert a.dtype == expected.dtype

987:     assert_equal(a, expected)

1006:     assert_equal(a, [1, 2, 3])

Total asserts: 73

Filename: numpy/lib/tests/test_format.py
285:     assert_, assert_array_equal, assert_raises, assert_raises_regex,

286:     assert_warns,

431: def assert_equal_(o1, o2)
432:     assert_(o1 == o2)

438:         assert_array_equal(arr, arr2)

445:             assert_array_equal(arr, arr2)

451:             assert_raises(ValueError, roundtrip_truncated, arr)

458:     assert_array_equal(long_str_arr, long_str_arr2)

484:         assert_equal_(normal_bytes, memmap_bytes)

497:     assert_array_equal(arr, arr1)

524:     assert_array_equal(arr, arr1)

531:     assert_array_equal(data, np.ones(2))

555:                 assert_(isinstance(data[3], str))

556:                 assert_array_equal(data[
558:                 assert_array_equal(data[-1].encode(encoding), expected[-1])

560:                 assert_(isinstance(data[3], bytes))

561:                 assert_array_equal(data, expected)

566:                 assert_raises(UnicodeError, data.__getitem__, 'x')

570:                 assert_raises(ImportError, data.__getitem__, 'x')

573:                 assert_raises(UnicodeError, np.load, path,

575:                 assert_raises(ImportError, np.load, path,

584:     assert_raises(ValueError, np.load, path,

589:         assert_raises(ValueError, f.__getitem__, 'x')

592:     assert_raises(ValueError, np.save, path, np.array([None], dtype=object),

646:     assert_equal_(dt1, dt)

649:     assert_array_equal(arr1, arr2)

661:         assert_(w[0].category is UserWarning)

666:     assert_(len(header) % format.ARRAY_ALIGN == 0)

670:     assert_array_equal(d, n)

673:     assert_raises(ValueError, format.write_array, f, d, (1, 0))

684:     assert_raises(ValueError, format.open_memmap, tf1, mode='w+', dtype=d.dtype,

692:     assert_array_equal(ma, d)

698:         assert_(w[0].category is UserWarning)

703:     assert_array_equal(ma, d)

728:         with assert_raises_regex(ValueError,

766:     assert_(version1 == (1, 0))

767:     assert_(version2 == (2, 0))

769:     assert_(s1.tell() == format.MAGIC_LEN)

770:     assert_(s2.tell() == format.MAGIC_LEN)

775:         assert_raises(ValueError, format.read_array, f)

781:         assert_raises(ValueError, format.read_array, f)

785:     assert_raises(ValueError, format.magic, -1, 1)

786:     assert_raises(ValueError, format.magic, 256, 1)

787:     assert_raises(ValueError, format.magic, 1, -1)

788:     assert_raises(ValueError, format.magic, 1, 256)

798:     assert_raises(ValueError, format.write_array_header_1_0, s, d)

810:     assert_(s.tell() % format.ARRAY_ALIGN == 0)

811:     assert_((shape, fortran, dtype) == ((3, 6), False, float))

823:     assert_(s.tell() % format.ARRAY_ALIGN == 0)

824:     assert_((shape, fortran, dtype) == ((3, 6), False, float))

830:     assert_raises(ValueError, format.read_array_header_1_0, s)

832:     assert_raises(ValueError, format.read_array_header_1_0, s)

836:     assert_raises(ValueError, format.read_array_header_1_0, s)

843:     assert_raises(ValueError, format.read_array_header_1_0, s)

851:     assert_raises(ValueError, format.read_array_header_1_0, s)

876:     assert_array_equal(r, d)

898:     assert_(a.shape == new_a.shape)

925:     assert_array_equal(arr, arr2)

929:         with assert_warns(UserWarning)
947:     with assert_warns(UserWarning)
951:         with assert_raises(ValueError)
955:         # BUG
957:         assert_array_equal(arr, arr2)

958:         assert _has_metadata(arr.dtype)

959:         assert not _has_metadata(arr2.dtype)

Total asserts: 65

Filename: numpy/lib/tests/test_histograms.py
5:     assert_, assert_equal, assert_array_equal, assert_almost_equal,

6:     assert_array_almost_equal, assert_raises, assert_allclose,

7:     assert_array_max_ulp, assert_raises_regex, suppress_warnings,

25:         assert_equal(np.sum(a, axis=0), n)

29:         assert_array_equal(a, 10)

34:         assert_array_equal(hist, [2, ])

35:         assert_array_equal(edges, [1, 2])

36:         assert_raises(ValueError, histogram, [1, 2], bins=0)

38:         assert_equal(h, np.array([2]))

39:         assert_allclose(e, np.array([1., 2.]))

50:             assert_almost_equal(area, 1)

51:             assert_equal(len(rec), 1)

62:             assert_almost_equal(area, 1)

63:             assert_equal(len(rec), 1)

71:         assert_almost_equal(area, 1)

77:         assert_array_equal(a, .1)

78:         assert_equal(np.sum(a * np.diff(b)), 1)

82:         assert_array_equal(a, [1, 2, 3, 4])

89:         assert_array_equal(a, [.1, .1, .1, 0.])

95:         assert_equal(counts, [.25, 0])

103:         assert_equal(h.sum(), 9)

107:         assert_equal(h.sum(), 9)

111:         assert_almost_equal((h * np.diff(b)).sum(), 1, decimal=15)

116:         assert_equal((h * np.diff(b)).sum(), 1)

119:         assert_equal(h, w[1
124:         with assert_raises_regex(ValueError, "same shape as")
132:         assert_(np.issubdtype(h.dtype, np.integer))

135:         assert_(np.issubdtype(h.dtype, np.floating))

138:         assert_(np.issubdtype(h.dtype, np.integer))

141:         assert_(np.issubdtype(h.dtype, np.floating))

148:         assert_equal(counts_hist.sum(), 3.)

163:             assert_equal(len(rec), 1)

164:             assert_array_equal(hist, int_hist)

165:             assert_array_equal(edges, int_edges)

174:         assert_array_almost_equal(a * 5, wa)

175:         assert_array_almost_equal(na, nwa)

181:         assert_array_almost_equal(wa, w)

185:         assert_array_equal(wa, [4, 5, 0, 1])

188:         assert_array_almost_equal(wa, np.array([4, 5, 0, 1]) / 10. / 3. * 4)

194:         assert_almost_equal(a, [.2, .1, .1, .075])

207:         assert_array_almost_equal(wa, np.array([1, 1]) + 1j * np.array([2, 3]))

211:         assert_array_almost_equal(wa, np.array([1, 1]) + 1j * np.array([2, 3]))

220:         assert_array_almost_equal(wa, [Decimal(1), Decimal(5)])

224:         assert_array_almost_equal(wa, [Decimal(1), Decimal(5)])

231:         assert_array_almost_equal(values, [1.3, 2.5, 2.3])

235:         assert_array_equal(a, np.array([0]))

236:         assert_array_equal(b, np.array([0, 1]))

242:         assert_raises(TypeError, histogram, vals, 2.4)

248:         assert_raises(ValueError, histogram, vals, range=[np.nan,0.75])

249:         assert_raises(ValueError, histogram, vals, range=[0.25,np.inf])

254:         with assert_raises_regex(ValueError, "max must be larger than")
265:             assert_(x >= left)

266:             assert_(x < right)

271:         assert_equal(hist[-1], 1)

277:         with assert_raises_regex(ValueError, "must be 1d")
285:         with assert_raises(ValueError)
290:         assert_raises(ValueError,

292:         assert_raises(ValueError,

309:             assert_raises(ValueError, histogram, one_nan, bins='auto')

310:             assert_raises(ValueError, histogram, all_nan, bins='auto')

314:             assert_equal(h.sum(), 2)  # nan is not counted

316:             assert_equal(h.sum(), 0)  # nan is not counted

320:             assert_equal(h.sum(), 2)  # nan is not counted

322:             assert_equal(h.sum(), 0)  # nan is not counted

340:         assert_equal(d_count, i_count)

341:         assert_equal(t_count, i_count)

343:         assert_equal((d_edge - begin).astype(int), i_edge)

344:         assert_equal(t_edge.astype(int), i_edge)

346:         assert_equal(d_edge.dtype, dates.dtype)

347:         assert_equal(t_edge.dtype, td)

353:         assert_equal(e, [-2**exponent + 4, 0, 2**exponent - 4])

354:         assert_equal(hist, [1, 1])

375:         assert_equal(count, [1])

378:         assert_equal(x_loc.dtype, float_small)

392:         assert_equal(count, [1])

395:         assert_equal(x_loc.dtype, float_small)

413:         assert_array_equal(edges, e)

418:         assert_array_equal(edges, e)

422:         assert_array_equal(edges, e)

437:             assert_array_equal(a, np.array([0]))

438:             assert_array_equal(b, np.array([0, 1]))

463:                 assert_equal(len(a), numbins, err_msg="For the {0} estimator "

483:                 assert_equal(len(a), expbins, err_msg="For the {0} estimator "

492:             assert_raises(ValueError, histogram, [1, 2, 3], estimator)

505:             assert_equal(len(a), numbins, err_msg="{0} estimator, "

518:         assert_equal(edges_auto, np.linspace(0, 100, 12))

521:         assert_equal(edges_fd, np.array([0, 100]))

524:         assert_equal(edges_sturges, np.linspace(0, 100, 12))

544:             assert_equal(len(a), numbins)

560:         assert_almost_equal(avg, [0.15, 0.09, 0.08, 0.03], decimal=2)

591:                 assert_equal(len(a), numbins, err_msg=msg)

600:         assert_array_equal(hist, hist32)

601:         assert_array_equal(edges, edges32)

609:             assert_raises(TypeError, histogram, [1, 2, 3],

622:         assert_array_equal(H, answer)

627:         assert_(np.all(H == answer / 12.))

635:         assert_array_almost_equal(H, answer / 6., 4)

645:         assert_array_equal(H, answer)

650:         assert_array_equal(H, Z)

659:             assert_(H.shape == b)

673:             assert_(H.shape == b)

680:         assert_array_equal(w_hist, hist)

682:         assert_array_equal(w_hist, n_hist)

684:         assert_array_equal(w_hist, 2 * hist)

689:         assert_array_equal(edges[0], np.array([-0.5, 0., 0.5]))

693:         assert_array_max_ulp(a, np.array([[0.]]))

695:         assert_array_max_ulp(a, np.zeros((2, 2, 2)))

701:         assert_raises(ValueError, np.histogramdd, x, bins=[-1, 2, 4, 5])

702:         assert_raises(ValueError, np.histogramdd, x, bins=[1, 0.99, 1, 1])

703:         assert_raises(

705:         assert_(np.histogramdd(x, bins=[1, 1, 1, [1, 2, 3, 4]]))

713:             assert_allclose(h, expected)

715:             assert_allclose(h, expected)

717:             assert_allclose(h, expected)

724:         assert_(hist[0] == 0.0)

725:         assert_(hist[1] == 1.)

729:         assert_(hist[0] == 0.0)

730:         assert_(hist[1] == 1.)

734:         assert_(hist[0] == 0.0)

735:         assert_(hist[1] == 0.0)

739:         assert_(hist[0] == 0.0)

740:         assert_(hist[1] == 0.0)

745:         assert_raises(ValueError, histogramdd, vals,

747:         assert_raises(ValueError, histogramdd, vals,

762:         assert_equal(hist, hist_expected)

772:         assert_equal(edges[0].dtype, x_edges.dtype)

773:         assert_equal(edges[1].dtype, y_edges.dtype)

785:         assert_equal(hist[0, 0], 1)

808:         assert_equal(hist, relative_areas)

812:         assert_equal(hist, 1 / (8*8))

820:         assert_equal(hist, hist_dd)

821:         assert_equal(edges, edges_dd[0])

829:         assert_equal(hist, hist_dd)

830:         assert_equal(edges, edges_dd[0])

835:         with assert_raises_regex(TypeError, "Cannot specify both")
Total asserts: 135

Filename: numpy/lib/tests/test_regression.py
5:     assert_, assert_equal, assert_array_equal, assert_array_almost_equal,

6:     assert_raises, _assert_valid_refcount,

13:         assert_equal(np.poly1d([1]) - np.poly1d([1, 0]),

22:         assert_array_equal(x, y)

32:         assert_array_equal([], np.unique(np.array([])))

43:         assert_array_equal(np.mgrid[0
44:         assert_array_equal(np.mgrid[0
51:         _assert_valid_refcount(v)

56:         assert_raises(np.linalg.LinAlgError, getattr, p, "r")

72:         assert_equal(q*v + r, u)

78:         assert_(x != y)

79:         assert_(x == x)

100:         assert_array_almost_equal(ref, tested)

107:         assert_(q.dtype == complex, msg)

111:         assert_(q.dtype == float, msg)

115:         assert_raises(ValueError, np.histogramdd, np.ones((1, 10)), bins=2**10)

121:         assert_(np.polyint(x).dtype == complex, msg)

124:         assert_(np.polyint(x).dtype == float, msg)

133:         assert_array_equal(np.array([np.nan]), np.asfarray([None]))

152:         assert_raises(ValueError, dp)

153:         assert_raises(ValueError, dp2)

158:         assert_(np.r_[x, x].dtype == dt)

182:             assert_(isinstance(path, str))

183:             assert_(path != '')

187:         assert_(isinstance(np.polyder(np.poly1d([1]), 0), np.poly1d))

188:         assert_(isinstance(np.polyder([1], 0), np.ndarray))

189:         assert_(isinstance(np.polyder(np.poly1d([1]), 1), np.poly1d))

190:         assert_(isinstance(np.polyder([1], 1), np.ndarray))

211:         assert_equal(x, np.array([((0, 1), (2, 3))], dtype=dt))

215:         assert_equal(x, np.array([(((0, 1, 2), 3),)], dtype=dt))

219:         assert_equal(x, np.array([(((0, 1), (2, 3)),)], dtype=dt))

224:         assert_equal(x, np.array(data, dtype=dt))

Total asserts: 32

Filename: numpy/lib/format.py
371:     assert version is not None

Total asserts: 1

Filename: numpy/lib/function_base.py
3785:     >>> assert not np.all(a==b)

3789:     >>> assert not np.all(a==b)

4093:     >>> assert not np.all(a == b)

4370:     >>> assert not np.all(a == b)

Total asserts: 4

Filename: numpy/fft/tests/test_pocketfft.py
5:         assert_array_equal, assert_raises, assert_allclose

21:         assert_raises(ValueError, np.fft.fft, [1, 2, 3], 0)

31:             assert_allclose(np.fft.ifft(np.fft.fft(x[0
33:             assert_allclose(np.fft.irfft(np.fft.rfft(xr[0
38:         assert_allclose(fft1(x), np.fft.fft(x), atol=1e-6)

39:         assert_allclose(fft1(x), np.fft.fft(x, norm="backward"), atol=1e-6)

40:         assert_allclose(fft1(x) / np.sqrt(30),

42:         assert_allclose(fft1(x) / 30.,

48:         assert_allclose(

58:         assert_allclose(np.fft.fft(np.fft.fft(x, axis=1), axis=0),

60:         assert_allclose(np.fft.fft2(x),

62:         assert_allclose(np.fft.fft2(x) / np.sqrt(30 * 20),

64:         assert_allclose(np.fft.fft2(x) / (30. * 20.),

69:         assert_allclose(np.fft.ifft(np.fft.ifft(x, axis=1), axis=0),

71:         assert_allclose(np.fft.ifft2(x),

73:         assert_allclose(np.fft.ifft2(x) * np.sqrt(30 * 20),

75:         assert_allclose(np.fft.ifft2(x) * (30. * 20.),

80:         assert_allclose(

83:         assert_allclose(np.fft.fftn(x),

85:         assert_allclose(np.fft.fftn(x) / np.sqrt(30 * 20 * 10),

87:         assert_allclose(np.fft.fftn(x) / (30. * 20. * 10.),

92:         assert_allclose(

95:         assert_allclose(np.fft.ifftn(x),

97:         assert_allclose(np.fft.ifftn(x) * np.sqrt(30 * 20 * 10),

99:         assert_allclose(np.fft.ifftn(x) * (30. * 20. * 10.),

106:                 assert_allclose(

109:             assert_allclose(

112:             assert_allclose(

115:             assert_allclose(

121:         assert_allclose(x, np.fft.irfft(np.fft.rfft(x)), atol=1e-6)

122:         assert_allclose(x, np.fft.irfft(np.fft.rfft(x, norm="backward"),

124:         assert_allclose(x, np.fft.irfft(np.fft.rfft(x, norm="ortho"),

126:         assert_allclose(x, np.fft.irfft(np.fft.rfft(x, norm="forward"),

131:         assert_allclose(np.fft.fft2(x)[
132:         assert_allclose(np.fft.rfft2(x),

134:         assert_allclose(np.fft.rfft2(x) / np.sqrt(30 * 20),

136:         assert_allclose(np.fft.rfft2(x) / (30. * 20.),

141:         assert_allclose(x, np.fft.irfft2(np.fft.rfft2(x)), atol=1e-6)

142:         assert_allclose(x, np.fft.irfft2(np.fft.rfft2(x, norm="backward"),

144:         assert_allclose(x, np.fft.irfft2(np.fft.rfft2(x, norm="ortho"),

146:         assert_allclose(x, np.fft.irfft2(np.fft.rfft2(x, norm="forward"),

151:         assert_allclose(np.fft.fftn(x)[
152:         assert_allclose(np.fft.rfftn(x),

154:         assert_allclose(np.fft.rfftn(x) / np.sqrt(30 * 20 * 10),

156:         assert_allclose(np.fft.rfftn(x) / (30. * 20. * 10.),

161:         assert_allclose(x, np.fft.irfftn(np.fft.rfftn(x)), atol=1e-6)

162:         assert_allclose(x, np.fft.irfftn(np.fft.rfftn(x, norm="backward"),

164:         assert_allclose(x, np.fft.irfftn(np.fft.rfftn(x, norm="ortho"),

166:         assert_allclose(x, np.fft.irfftn(np.fft.rfftn(x, norm="forward"),

173:         assert_allclose(np.fft.fft(x), np.fft.hfft(x_herm), atol=1e-6)

174:         assert_allclose(np.fft.hfft(x_herm),

176:         assert_allclose(np.fft.hfft(x_herm) / np.sqrt(30),

178:         assert_allclose(np.fft.hfft(x_herm) / 30.,

185:         assert_allclose(x_herm, np.fft.ihfft(np.fft.hfft(x_herm)), atol=1e-6)

186:         assert_allclose(x_herm, np.fft.ihfft(np.fft.hfft(x_herm,

188:         assert_allclose(x_herm, np.fft.ihfft(np.fft.hfft(x_herm,

190:         assert_allclose(x_herm, np.fft.ihfft(np.fft.hfft(x_herm,

201:             assert_allclose(op_tr, tr_op, atol=1e-6)

219:                     assert_allclose(x_norm,

228:         assert_allclose(np.fft.ifft(np.fft.fft(x)), x, atol=1e-6)

229:         assert_allclose(np.fft.irfft(np.fft.rfft(x)), x, atol=1e-6)

258:             assert_allclose(X_res, Y_res, atol=_tol, rtol=_tol)

266:             assert_allclose(X_res, Y_res, atol=_tol, rtol=_tol)

290:             assert_array_equal(q.get(timeout=5), expected,

Total asserts: 64

Filename: numpy/fft/tests/test_helper.py
7: from numpy.testing import assert_array_almost_equal

16:         assert_array_almost_equal(fft.fftshift(x), y)

17:         assert_array_almost_equal(fft.ifftshift(y), x)

20:         assert_array_almost_equal(fft.fftshift(x), y)

21:         assert_array_almost_equal(fft.ifftshift(y), x)

26:             assert_array_almost_equal(fft.ifftshift(fft.fftshift(x)), x)

31:         assert_array_almost_equal(fft.fftshift(freqs, axes=(0, 1)), shifted)

32:         assert_array_almost_equal(fft.fftshift(freqs, axes=0),

34:         assert_array_almost_equal(fft.ifftshift(shifted, axes=(0, 1)), freqs)

35:         assert_array_almost_equal(fft.ifftshift(shifted, axes=0),

38:         assert_array_almost_equal(fft.fftshift(freqs), shifted)

39:         assert_array_almost_equal(fft.ifftshift(shifted), freqs)

55:         assert_array_almost_equal(fft.fftshift(freqs, axes=0), shift_dim0)

56:         assert_array_almost_equal(fft.ifftshift(shift_dim0, axes=0), freqs)

57:         assert_array_almost_equal(fft.fftshift(freqs, axes=(0,)), shift_dim0)

58:         assert_array_almost_equal(fft.ifftshift(shift_dim0, axes=[0]), freqs)

66:         assert_array_almost_equal(fft.fftshift(freqs, axes=1), shift_dim1)

67:         assert_array_almost_equal(fft.ifftshift(shift_dim1, axes=1), freqs)

75:         assert_array_almost_equal(fft.fftshift(freqs, axes=(0, 1)), shift_dim_both)

76:         assert_array_almost_equal(fft.ifftshift(shift_dim_both, axes=(0, 1)), freqs)

77:         assert_array_almost_equal(fft.fftshift(freqs, axes=[0, 1]), shift_dim_both)

78:         assert_array_almost_equal(fft.ifftshift(shift_dim_both, axes=[0, 1]), freqs)

81:         assert_array_almost_equal(fft.fftshift(freqs, axes=None), shift_dim_both)

82:         assert_array_almost_equal(fft.ifftshift(shift_dim_both, axes=None), freqs)

83:         assert_array_almost_equal(fft.fftshift(freqs), shift_dim_both)

84:         assert_array_almost_equal(fft.ifftshift(shift_dim_both), freqs)

129:                     assert_array_almost_equal(fft.fftshift(inp, axes_keyword),

132:                     assert_array_almost_equal(fft.ifftshift(inp, axes_keyword),

140:         assert_array_almost_equal(9*fft.fftfreq(9), x)

141:         assert_array_almost_equal(9*pi*fft.fftfreq(9, pi), x)

143:         assert_array_almost_equal(10*fft.fftfreq(10), x)

144:         assert_array_almost_equal(10*pi*fft.fftfreq(10, pi), x)

151:         assert_array_almost_equal(9*fft.rfftfreq(9), x)

152:         assert_array_almost_equal(9*pi*fft.rfftfreq(9, pi), x)

154:         assert_array_almost_equal(10*fft.rfftfreq(10), x)

155:         assert_array_almost_equal(10*pi*fft.rfftfreq(10, pi), x)

Total asserts: 36

Filename: numpy/random/tests/test_generator_mt19937.py
9:     assert_, assert_raises, assert_equal, assert_allclose,

10:     assert_warns, assert_no_warnings, assert_array_equal,

11:     assert_array_almost_equal, suppress_warnings)

46:         assert_equal(s.integers(1000), 479)

48:         assert_equal(s.integers(1000), 324)

52:         assert_equal(s.integers(1000), 465)

54:         assert_equal(s.integers(1000), 465)

56:         assert_equal(s.integers(1000), 479)

58:         assert_equal(s.integers(1000), 324)

62:         assert_equal(s.random_raw(1), 2058676884)

66:         assert_raises(TypeError, MT19937, -0.5)

67:         assert_raises(ValueError, MT19937, -1)

71:         assert_raises(TypeError, MT19937, [-0.5])

72:         assert_raises(ValueError, MT19937, [-1])

73:         assert_raises(ValueError, MT19937, [1, -2, 4294967296])

76:         assert_raises(ValueError, Generator, MT19937)

86:             assert_(random.binomial(0, p) == 0)

87:             assert_array_equal(random.binomial(zeros, p), zeros)

91:         assert_raises(ValueError, random.binomial, 1, np.nan)

102:         assert_(-5 <= random.integers(-5, -1) < -1)

104:         assert_(np.all(-5 <= x))

105:         assert_(np.all(x < -1))

110:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

111:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

112:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

113:         assert_equal(random.multinomial(1, p, [2, 2]).shape, (2, 2, 2))

114:         assert_equal(random.multinomial(1, p, (2, 2)).shape, (2, 2, 2))

115:         assert_equal(random.multinomial(1, p, np.array((2, 2))).shape,

118:         assert_raises(TypeError, random.multinomial, 1, p,

122:         assert_raises(ValueError, random.multinomial, 100, [1.1, 0.2])

123:         assert_raises(ValueError, random.multinomial, 100, [-.1, 0.9])

126:         assert_raises(ValueError, random.multinomial, -1, [0.8, 0.2])

127:         assert_raises(ValueError, random.multinomial, [-1] * 10, [0.8, 0.2])

137:         assert_array_equal(non_contig, contig)

157:         assert_raises(ValueError, random.multivariate_hypergeometric,

161:         assert_raises(ValueError, random.multivariate_hypergeometric,

165:         assert_raises(ValueError, random.multivariate_hypergeometric,

169:         assert_raises(ValueError, random.multivariate_hypergeometric,

173:         assert_raises(ValueError, random.multivariate_hypergeometric,

177:         assert_raises(ValueError, random.multivariate_hypergeometric,

183:         assert_raises(ValueError, random.multivariate_hypergeometric,

193:         assert_array_equal(x, [0, 0, 0])

196:         assert_array_equal(x, [])

199:         assert_array_equal(x, np.empty((1, 0), dtype=np.int64))

202:         assert_array_equal(x, [0, 0, 0])

205:         assert_array_equal(x, [3, 0, 0])

210:         assert_array_equal(x, colors)

214:         assert_array_equal(x, [[3, 4, 5]]*3)

234:         assert_equal(sample.shape, expected_shape)

235:         assert_((sample >= 0).all())

236:         assert_((sample <= colors).all())

237:         assert_array_equal(sample.sum(axis=-1),

242:             assert_allclose(sample.mean(axis=0),

255:         assert_array_equal(sample, expected)

267:         assert_array_equal(sample, expected)

279:         assert_array_equal(sample, expected)

297:         assert_(np.all(old == new))

308:         assert_(np.all(old == new))

324:         assert_raises(TypeError, self.rfunc, 1, endpoint=endpoint, dtype=float)

331:             assert_raises(ValueError, self.rfunc, lbnd - 1, ubnd,

333:             assert_raises(ValueError, self.rfunc, lbnd, ubnd + 1,

335:             assert_raises(ValueError, self.rfunc, ubnd, lbnd,

337:             assert_raises(ValueError, self.rfunc, 1, 0, endpoint=endpoint,

340:             assert_raises(ValueError, self.rfunc, [lbnd - 1], ubnd,

342:             assert_raises(ValueError, self.rfunc, [lbnd], [ubnd + 1],

344:             assert_raises(ValueError, self.rfunc, [ubnd], [lbnd],

346:             assert_raises(ValueError, self.rfunc, 1, [0],

354:             assert_raises(ValueError, self.rfunc, [lbnd - 1] * 2, [ubnd] * 2,

356:             assert_raises(ValueError, self.rfunc, [lbnd] * 2,

358:             assert_raises(ValueError, self.rfunc, ubnd, [lbnd] * 2,

360:             assert_raises(ValueError, self.rfunc, [1] * 2, 0,

371:             assert_equal(self.rfunc(tgt, tgt + is_open, size=1000,

373:             assert_equal(self.rfunc([tgt], tgt + is_open, size=1000,

377:             assert_equal(self.rfunc(tgt, tgt + is_open, size=1000,

379:             assert_equal(self.rfunc(tgt, [tgt + is_open], size=1000,

383:             assert_equal(self.rfunc(tgt, tgt + is_open, size=1000,

385:             assert_equal(self.rfunc([tgt], [tgt + is_open],

397:             assert_equal(self.rfunc([tgt], [tgt + 1],

399:             assert_equal(self.rfunc(

401:             assert_equal(self.rfunc(

405:             assert_equal(self.rfunc([tgt], [tgt + 1],

407:             assert_equal(self.rfunc(

409:             assert_equal(self.rfunc(

413:             assert_equal(self.rfunc([tgt], [tgt + 1],

415:             assert_equal(self.rfunc(

417:             assert_equal(self.rfunc(

458:                 assert_(vals.max() < ubnd)

459:                 assert_(vals.min() >= 2)

463:         assert_(vals.max() < 2)

464:         assert_(vals.min() >= 0)

484:             assert_array_equal(scalar, scalar_array)

485:             assert_array_equal(scalar, array)

513:             assert_(tgt[np.dtype(dt).name] == res)

520:         assert_(tgt[np.dtype(bool).name] == res)

537:             assert_array_equal(val, val_bc)

543:             assert_array_equal(val, val_bc)

558:             assert_equal(x, expected if size is not None else expected[0])

581:             assert_array_equal(x, desired if size is not None else desired[0])

593:                 assert_raises(ValueError, random.integers, low, high,

595:                 assert_raises(ValueError, random.integers, low_a, high,

597:                 assert_raises(ValueError, random.integers, low, high_a,

599:                 assert_raises(ValueError, random.integers, low_a, high_a,

604:                 assert_raises(ValueError, random.integers, low_o, high,

606:                 assert_raises(ValueError, random.integers, low, high_o,

608:                 assert_raises(ValueError, random.integers, low_o, high_o,

632:         assert_equal(actual, tgt)

643:             assert_equal(sample.dtype, dt)

652:             assert not hasattr(sample, 'dtype')

653:             assert_equal(type(sample), dt)

664:             assert_equal(sample.dtype, dt)

667:             assert_equal(sample.dtype, dt)

673:             assert sample.shape == (3, 0, 4)

674:             assert sample.dtype == dt

675:             assert self.rfunc(0, -10, 0, endpoint=endpoint,

677:             assert_equal(random.integers(0, 0, size=(3, 0, 4)).shape,

679:             assert_equal(random.integers(0, -10, size=0).shape, (0,))

680:             assert_equal(random.integers(10, 10, size=0).shape, (0,))

703:         assert chi2 < chi2max

717:         assert_array_equal(actual, desired)

725:         assert_array_equal(actual, desired)

731:         assert_array_equal(actual, desired)

743:         assert_equal(actual, desired)

751:         assert_array_almost_equal(actual, desired, decimal=15)

755:         assert_array_almost_equal(actual, desired[0, 0], decimal=15)

763:         assert_array_almost_equal(actual, desired, decimal=7)

769:         assert_array_almost_equal(actual, desired, decimal=7)

781:         assert 24100 < num_ones_in_lsb < 25900

784:         assert_raises(TypeError, random.random, dtype='int32')

790:         assert_array_equal(actual, desired)

796:         assert_array_equal(actual, desired)

802:         assert_array_equal(actual, desired)

805:         assert_array_equal(actual, desired)

811:         assert_array_equal(actual, desired)

817:         assert_array_equal(actual, desired)

823:         assert_array_equal(actual, desired)

829:         assert_array_equal(actual, desired)

833:         assert_raises(ValueError, sample, -1, 3)

834:         assert_raises(ValueError, sample, 3., 3)

835:         assert_raises(ValueError, sample, [], 3)

836:         assert_raises(ValueError, sample, [1, 2, 3, 4], 3,

838:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4, 0.2])

839:         assert_raises(ValueError, sample, [1, 2], 3, p=[1.1, -0.1])

840:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4])

841:         assert_raises(ValueError, sample, [1, 2, 3], 4, replace=False)

843:         assert_raises(ValueError, sample, [1, 2, 3], -2, replace=False)

844:         assert_raises(ValueError, sample, [1, 2, 3], (-1,), replace=False)

845:         assert_raises(ValueError, sample, [1, 2, 3], (-1, 1), replace=False)

846:         assert_raises(ValueError, sample, [1, 2, 3], 2,

852:         assert_(np.isscalar(random.choice(2, replace=True)))

853:         assert_(np.isscalar(random.choice(2, replace=False)))

854:         assert_(np.isscalar(random.choice(2, replace=True, p=p)))

855:         assert_(np.isscalar(random.choice(2, replace=False, p=p)))

856:         assert_(np.isscalar(random.choice([1, 2], replace=True)))

857:         assert_(random.choice([None], replace=True) is None)

861:         assert_(random.choice(arr, replace=True) is a)

865:         assert_(not np.isscalar(random.choice(2, s, replace=True)))

866:         assert_(not np.isscalar(random.choice(2, s, replace=False)))

867:         assert_(not np.isscalar(random.choice(2, s, replace=True, p=p)))

868:         assert_(not np.isscalar(random.choice(2, s, replace=False, p=p)))

869:         assert_(not np.isscalar(random.choice([1, 2], s, replace=True)))

870:         assert_(random.choice([None], s, replace=True).ndim == 0)

874:         assert_(random.choice(arr, s, replace=True).item() is a)

879:         assert_equal(random.choice(6, s, replace=True).shape, s)

880:         assert_equal(random.choice(6, s, replace=False).shape, s)

881:         assert_equal(random.choice(6, s, replace=True, p=p).shape, s)

882:         assert_equal(random.choice(6, s, replace=False, p=p).shape, s)

883:         assert_equal(random.choice(np.arange(6), s, replace=True).shape, s)

886:         assert_equal(random.integers(0, 0, size=(3, 0, 4)).shape, (3, 0, 4))

887:         assert_equal(random.integers(0, -10, size=0).shape, (0,))

888:         assert_equal(random.integers(10, 10, size=0).shape, (0,))

889:         assert_equal(random.choice(0, size=0).shape, (0,))

890:         assert_equal(random.choice([], size=(0,)).shape, (0,))

891:         assert_equal(random.choice(['a', 'b'], size=(3, 0, 4)).shape,

893:         assert_raises(ValueError, random.choice, [], 10)

898:         assert_raises(ValueError, random.choice, a, p=p)

907:         assert_array_equal(non_contig, contig)

913:         assert actual.dtype == np.int64

915:         assert actual.dtype == np.int64

917:         assert actual.dtype == np.int64

919:         assert actual.dtype == np.int64

928:         assert_(choice_hash == res)

934:         assert_equal(actual, desired)

961:             assert_array_equal(actual, desired)

971:         assert_array_equal(actual, desired)

975:         assert_array_equal(actual, desired)

983:             assert_array_equal(actual, desired)

992:         assert_array_equal(y1, y2)

1002:             assert_equal(

1005:             assert_equal(

1011:         assert_raises(np.AxisError, random.shuffle, arr, 1)

1013:         assert_raises(np.AxisError, random.shuffle, arr, 3)

1014:         assert_raises(TypeError, random.shuffle, arr, slice(1, 2, None))

1016:         assert_raises(NotImplementedError, random.shuffle, arr, 1)

1019:         assert_raises(TypeError, random.shuffle, arr)

1021:         assert_raises(np.AxisError, random.shuffle, arr, 2)

1035:         assert_array_equal(actual, desired)

1040:         assert_array_equal(actual, np.atleast_2d(desired).T)

1043:         assert_raises(np.AxisError, random.permutation, bad_x_str)

1046:         assert_raises(np.AxisError, random.permutation, bad_x_float)

1053:         assert_array_equal(actual, desired)

1063:         assert_array_equal(actual, desired)

1066:         assert_array_equal(actual, desired)

1071:         assert_raises(np.AxisError, random.permutation, arr, 1)

1073:         assert_raises(np.AxisError, random.permutation, arr, 3)

1074:         assert_raises(TypeError, random.permutation, arr, slice(1, 2, None))

1088:         assert_array_equal(x, expected)

1093:         assert y.dtype == dtype

1094:         assert_array_equal(y, expected)

1104:         assert_array_equal(y, expected)

1107:         assert_array_equal(x1, x0)

1111:         assert_array_equal(y, [])

1139:         assert_array_almost_equal(actual, desired, decimal=15)

1147:         assert_array_equal(actual, desired)

1152:         assert_array_equal(actual, desired)

1160:         assert_array_almost_equal(actual, desired, decimal=13)

1172:         assert_array_almost_equal(actual, desired, decimal=15)

1174:         assert_raises(ValueError, random.dirichlet, bad_alpha)

1179:         assert_array_almost_equal(actual, desired[0, 0], decimal=15)

1184:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

1185:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

1186:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

1187:         assert_equal(random.dirichlet(p, [2, 2]).shape, (2, 2, 2))

1188:         assert_equal(random.dirichlet(p, (2, 2)).shape, (2, 2, 2))

1189:         assert_equal(random.dirichlet(p, np.array((2, 2))).shape, (2, 2, 2))

1191:         assert_raises(TypeError, random.dirichlet, p, float(1))

1196:         assert_raises(ValueError, random.dirichlet, alpha)

1199:         assert_raises(ValueError, random.dirichlet, [[5, 1]])

1200:         assert_raises(ValueError, random.dirichlet, [[5], [1]])

1201:         assert_raises(ValueError, random.dirichlet, [[[5], [1]], [[1], [5]]])

1202:         assert_raises(ValueError, random.dirichlet, np.array([[5, 1], [1, 5]]))

1212:         assert_array_almost_equal(non_contig, contig)

1227:         assert_array_almost_equal(actual, expected, decimal=15)

1237:         assert_allclose(sample_mean, exact_mean, rtol=1e-3)

1245:         assert_array_almost_equal(actual, desired, decimal=15)

1248:         assert_equal(random.exponential(scale=0), 0)

1249:         assert_raises(ValueError, random.exponential, scale=-0.)

1257:         assert_array_almost_equal(actual, desired, decimal=15)

1265:         assert_array_almost_equal(actual, desired, decimal=14)

1268:         assert_equal(random.gamma(shape=0, scale=0), 0)

1269:         assert_raises(ValueError, random.gamma, shape=-0., scale=-0.)

1277:         assert_array_equal(actual, desired)

1280:         assert_raises(ValueError, random.geometric, 1.1)

1281:         assert_raises(ValueError, random.geometric, [1.1] * 10)

1282:         assert_raises(ValueError, random.geometric, -0.1)

1283:         assert_raises(ValueError, random.geometric, [-0.1] * 10)

1285:             assert_raises(ValueError, random.geometric, np.nan)

1286:             assert_raises(ValueError, random.geometric, [np.nan] * 10)

1294:         assert_array_almost_equal(actual, desired, decimal=15)

1297:         assert_equal(random.gumbel(scale=0), 0)

1298:         assert_raises(ValueError, random.gumbel, scale=-0.)

1306:         assert_array_equal(actual, desired)

1311:         assert_array_equal(actual, desired)

1315:         assert_array_equal(actual, desired)

1320:         assert_array_equal(actual, desired)

1324:         assert_array_equal(actual, desired)

1332:         assert_array_almost_equal(actual, desired, decimal=15)

1335:         assert_equal(random.laplace(scale=0), 0)

1336:         assert_raises(ValueError, random.laplace, scale=-0.)

1344:         assert_array_almost_equal(actual, desired, decimal=15)

1352:         assert_array_almost_equal(actual, desired, decimal=13)

1355:         assert_equal(random.lognormal(sigma=0), 1)

1356:         assert_raises(ValueError, random.lognormal, sigma=-0.)

1364:         assert_array_equal(actual, desired)

1368:             assert_raises(ValueError, random.logseries, np.nan)

1369:             assert_raises(ValueError, random.logseries, [np.nan] * 10)

1380:         assert_array_equal(actual, desired)

1396:         assert_array_almost_equal(actual, desired, decimal=15)

1401:         assert_array_almost_equal(actual, desired, decimal=15)

1406:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1412:         assert_warns(RuntimeWarning, random.multivariate_normal, mean, cov)

1413:         assert_warns(RuntimeWarning, random.multivariate_normal, mean, cov,

1415:         assert_raises(LinAlgError, random.multivariate_normal, mean, cov,

1419:         assert_no_warnings(random.multivariate_normal, mean, cov,

1423:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1425:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1433:             assert_array_almost_equal(samples[..., 0], samples[..., 1],

1436:             assert_raises(LinAlgError, random.multivariate_normal, mean, cov,

1443:             assert len(w) == 0

1447:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1449:         assert_raises(ValueError, random.multivariate_normal,

1451:         assert_raises(ValueError, random.multivariate_normal,

1453:         assert_raises(ValueError, random.multivariate_normal,

1466:         assert np.all(np.abs(s_center.mean(-2)) < 0.1)

1467:         assert np.all(np.abs(cov_emp - cov) < 0.2)

1475:         assert_array_equal(actual, desired)

1479:             assert_raises(ValueError, random.negative_binomial, 100, np.nan)

1480:             assert_raises(ValueError, random.negative_binomial, 100,

1485:         with assert_raises(ValueError)
1492:             assert_raises(ValueError, random.negative_binomial, 2**62, 0.1)

1493:             assert_raises(ValueError, random.negative_binomial, [2**62], [0.1])

1501:         assert_array_almost_equal(actual, desired, decimal=14)

1507:         assert_array_almost_equal(actual, desired, decimal=14)

1514:         assert_array_almost_equal(actual, desired, decimal=14)

1523:         assert_array_almost_equal(actual, desired, decimal=14)

1528:         assert np.isnan(actual)

1536:         assert_array_almost_equal(actual, desired, decimal=15)

1539:         assert_equal(random.normal(scale=0), 0)

1540:         assert_raises(ValueError, random.normal, scale=-0.)

1554:         np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)

1562:         assert_array_equal(actual, desired)

1567:         assert_raises(ValueError, random.poisson, lamneg)

1568:         assert_raises(ValueError, random.poisson, [lamneg] * 10)

1569:         assert_raises(ValueError, random.poisson, lambig)

1570:         assert_raises(ValueError, random.poisson, [lambig] * 10)

1572:             assert_raises(ValueError, random.poisson, np.nan)

1573:             assert_raises(ValueError, random.poisson, [np.nan] * 10)

1581:         assert_array_almost_equal(actual, desired, decimal=15)

1589:         assert_array_almost_equal(actual, desired, decimal=14)

1592:         assert_equal(random.rayleigh(scale=0), 0)

1593:         assert_raises(ValueError, random.rayleigh, scale=-0.)

1601:         assert_array_almost_equal(actual, desired, decimal=15)

1609:         assert_array_almost_equal(actual, desired, decimal=15)

1612:         assert_raises(TypeError, random.standard_exponential, dtype=np.int32)

1620:         assert_array_almost_equal(actual, desired, decimal=14)

1626:         assert_array_almost_equal(actual, desired, decimal=6)

1634:         assert_array_almost_equal(actual, desired, decimal=5)

1643:         assert_array_almost_equal(actual, desired, decimal=5)

1647:         assert_array_almost_equal(actual, desired, decimal=5)

1650:         assert_raises(TypeError, random.standard_gamma, 1.,

1655:         assert_raises(ValueError, random.standard_gamma, 10.0, size=20,

1657:         assert_raises(ValueError, random.standard_gamma, 10.0, size=(10, 1),

1661:         assert_equal(random.standard_gamma(shape=0), 0)

1662:         assert_raises(ValueError, random.standard_gamma, shape=-0.)

1670:         assert_array_almost_equal(actual, desired, decimal=15)

1673:         assert_raises(TypeError, random.standard_normal, dtype=np.int32)

1681:         assert_array_almost_equal(actual, desired, decimal=15)

1690:         assert_array_almost_equal(actual, desired, decimal=14)

1698:         assert_array_almost_equal(actual, desired, decimal=15)

1705:         assert_raises(OverflowError, func, -np.inf, 0)

1706:         assert_raises(OverflowError, func, 0, np.inf)

1707:         assert_raises(OverflowError, func, fmin, fmax)

1708:         assert_raises(OverflowError, func, [-np.inf], [0])

1709:         assert_raises(OverflowError, func, [0], [np.inf])

1719:         assert_allclose(result, 1.5)

1721:         assert_allclose(result, [0.0, np.pi])

1723:         assert_allclose(result, 2145.12 + np.zeros((2, 2)))

1727:         assert_raises(ValueError, func, 2, 1)

1728:         assert_raises(ValueError, func,  [1, 2], [1, 1])

1729:         assert_raises(ValueError, func,  [[0, 1],[2, 3]], 2)

1743:         assert_raises(TypeError, random.uniform, throwing_float,

1751:         assert_raises(TypeError, random.hypergeometric, throwing_int, 1, 1)

1759:         assert_array_almost_equal(actual, desired, decimal=15)

1765:         assert_(np.isfinite(r).all())

1770:         assert_(np.isnan(r))

1782:             assert_allclose(random_state_vals, gen_vals)

1784:             assert np.all(random_state_vals != gen_vals)

1791:         assert_(np.all(r > -np.pi) and np.all(r <= np.pi))

1799:         assert_array_almost_equal(actual, desired, decimal=14)

1807:         assert_array_almost_equal(actual, desired, decimal=15)

1811:         assert_equal(random.weibull(a=0, size=12), np.zeros(12))

1812:         assert_raises(ValueError, random.weibull, a=-0.)

1820:         assert_array_equal(actual, desired)

1839:         assert_array_almost_equal(actual, desired, decimal=14)

1843:         assert_array_almost_equal(actual, desired, decimal=14)

1854:         assert_array_almost_equal(actual, desired, decimal=14)

1855:         assert_raises(ValueError, random.normal, loc * 3, bad_scale)

1860:         assert_array_almost_equal(actual, desired, decimal=14)

1861:         assert_raises(ValueError, normal, loc, bad_scale * 3)

1873:         assert_array_almost_equal(actual, desired, decimal=14)

1874:         assert_raises(ValueError, beta, bad_a * 3, b)

1875:         assert_raises(ValueError, beta, a * 3, bad_b)

1879:         assert_array_almost_equal(actual, desired, decimal=14)

1888:         assert_array_almost_equal(actual, desired, decimal=14)

1889:         assert_raises(ValueError, random.exponential, bad_scale * 3)

1899:         assert_array_almost_equal(actual, desired, decimal=14)

1900:         assert_raises(ValueError, std_gamma, bad_shape * 3)

1912:         assert_array_almost_equal(actual, desired, decimal=14)

1913:         assert_raises(ValueError, gamma, bad_shape * 3, scale)

1914:         assert_raises(ValueError, gamma, shape * 3, bad_scale)

1919:         assert_array_almost_equal(actual, desired, decimal=14)

1920:         assert_raises(ValueError, gamma, bad_shape, scale * 3)

1921:         assert_raises(ValueError, gamma, shape, bad_scale * 3)

1933:         assert_array_almost_equal(actual, desired, decimal=14)

1934:         assert_raises(ValueError, f, bad_dfnum * 3, dfden)

1935:         assert_raises(ValueError, f, dfnum * 3, bad_dfden)

1940:         assert_array_almost_equal(actual, desired, decimal=14)

1941:         assert_raises(ValueError, f, bad_dfnum, dfden * 3)

1942:         assert_raises(ValueError, f, dfnum, bad_dfden * 3)

1956:         assert_array_almost_equal(actual, desired, decimal=14)

1957:         assert np.all(np.isnan(nonc_f(dfnum, dfden, [np.nan] * 3)))

1959:         assert_raises(ValueError, nonc_f, bad_dfnum * 3, dfden, nonc)

1960:         assert_raises(ValueError, nonc_f, dfnum * 3, bad_dfden, nonc)

1961:         assert_raises(ValueError, nonc_f, dfnum * 3, dfden, bad_nonc)

1966:         assert_array_almost_equal(actual, desired, decimal=14)

1967:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden * 3, nonc)

1968:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden * 3, nonc)

1969:         assert_raises(ValueError, nonc_f, dfnum, dfden * 3, bad_nonc)

1974:         assert_array_almost_equal(actual, desired, decimal=14)

1975:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden, nonc * 3)

1976:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden, nonc * 3)

1977:         assert_raises(ValueError, nonc_f, dfnum, dfden, bad_nonc * 3)

1983:         assert_array_almost_equal(actual, desired, decimal=14)

1992:         assert_array_almost_equal(actual, desired, decimal=14)

1993:         assert_raises(ValueError, random.chisquare, bad_df * 3)

2005:         assert_array_almost_equal(actual, desired, decimal=14)

2006:         assert_raises(ValueError, nonc_chi, bad_df * 3, nonc)

2007:         assert_raises(ValueError, nonc_chi, df * 3, bad_nonc)

2012:         assert_array_almost_equal(actual, desired, decimal=14)

2013:         assert_raises(ValueError, nonc_chi, bad_df, nonc * 3)

2014:         assert_raises(ValueError, nonc_chi, df, bad_nonc * 3)

2023:         assert_array_almost_equal(actual, desired, decimal=14)

2024:         assert_raises(ValueError, random.standard_t, bad_df * 3)

2034:         assert_array_almost_equal(actual, desired, decimal=14)

2035:         assert_raises(ValueError, random.vonmises, mu * 3, bad_kappa)

2039:         assert_array_almost_equal(actual, desired, decimal=14)

2040:         assert_raises(ValueError, random.vonmises, mu, bad_kappa * 3)

2049:         assert_array_almost_equal(actual, desired, decimal=14)

2050:         assert_raises(ValueError, random.pareto, bad_a * 3)

2059:         assert_array_almost_equal(actual, desired, decimal=14)

2060:         assert_raises(ValueError, random.weibull, bad_a * 3)

2069:         assert_array_almost_equal(actual, desired, decimal=14)

2070:         assert_raises(ValueError, random.power, bad_a * 3)

2081:         assert_array_almost_equal(actual, desired, decimal=14)

2082:         assert_raises(ValueError, laplace, loc * 3, bad_scale)

2087:         assert_array_almost_equal(actual, desired, decimal=14)

2088:         assert_raises(ValueError, laplace, loc, bad_scale * 3)

2099:         assert_array_almost_equal(actual, desired, decimal=14)

2100:         assert_raises(ValueError, gumbel, loc * 3, bad_scale)

2105:         assert_array_almost_equal(actual, desired, decimal=14)

2106:         assert_raises(ValueError, gumbel, loc, bad_scale * 3)

2116:         assert_array_almost_equal(actual, desired, decimal=14)

2117:         assert_raises(ValueError, random.logistic, loc * 3, bad_scale)

2121:         assert_array_almost_equal(actual, desired, decimal=14)

2122:         assert_raises(ValueError, random.logistic, loc, bad_scale * 3)

2123:         assert_equal(random.logistic(1.0, 0.0), 1.0)

2134:         assert_array_almost_equal(actual, desired, decimal=14)

2135:         assert_raises(ValueError, lognormal, mean * 3, bad_sigma)

2139:         assert_raises(ValueError, random.lognormal, mean, bad_sigma * 3)

2152:         assert_array_almost_equal(actual, desired, decimal=14)

2153:         assert_raises(ValueError, random.rayleigh, bad_scale * 3)

2164:         assert_array_almost_equal(actual, desired, decimal=14)

2165:         assert_raises(ValueError, random.wald, bad_mean * 3, scale)

2166:         assert_raises(ValueError, random.wald, mean * 3, bad_scale)

2170:         assert_array_almost_equal(actual, desired, decimal=14)

2171:         assert_raises(ValueError, random.wald, bad_mean, scale * 3)

2172:         assert_raises(ValueError, random.wald, mean, bad_scale * 3)

2186:         assert_array_almost_equal(actual, desired, decimal=14)

2187:         assert_raises(ValueError, triangular, bad_left_one * 3, mode, right)

2188:         assert_raises(ValueError, triangular, left * 3, bad_mode_one, right)

2189:         assert_raises(ValueError, triangular, bad_left_two * 3, bad_mode_two,

2195:         assert_array_almost_equal(actual, desired, decimal=14)

2196:         assert_raises(ValueError, triangular, bad_left_one, mode * 3, right)

2197:         assert_raises(ValueError, triangular, left, bad_mode_one * 3, right)

2198:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two * 3,

2204:         assert_array_almost_equal(actual, desired, decimal=14)

2205:         assert_raises(ValueError, triangular, bad_left_one, mode, right * 3)

2206:         assert_raises(ValueError, triangular, left, bad_mode_one, right * 3)

2207:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two,

2210:         assert_raises(ValueError, triangular, 10., 0., 20.)

2211:         assert_raises(ValueError, triangular, 10., 25., 20.)

2212:         assert_raises(ValueError, triangular, 10., 10., 10.)

2225:         assert_array_equal(actual, desired)

2226:         assert_raises(ValueError, binom, bad_n * 3, p)

2227:         assert_raises(ValueError, binom, n * 3, bad_p_one)

2228:         assert_raises(ValueError, binom, n * 3, bad_p_two)

2232:         assert_array_equal(actual, desired)

2233:         assert_raises(ValueError, binom, bad_n, p * 3)

2234:         assert_raises(ValueError, binom, n, bad_p_one * 3)

2235:         assert_raises(ValueError, binom, n, bad_p_two * 3)

2248:         assert_array_equal(actual, desired)

2249:         assert_raises(ValueError, neg_binom, bad_n * 3, p)

2250:         assert_raises(ValueError, neg_binom, n * 3, bad_p_one)

2251:         assert_raises(ValueError, neg_binom, n * 3, bad_p_two)

2256:         assert_array_equal(actual, desired)

2257:         assert_raises(ValueError, neg_binom, bad_n, p * 3)

2258:         assert_raises(ValueError, neg_binom, n, bad_p_one * 3)

2259:         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)

2272:         assert_array_equal(actual, desired)

2273:         assert_raises(ValueError, poisson, bad_lam_one * 3)

2274:         assert_raises(ValueError, poisson, bad_lam_two * 3)

2284:         assert_array_equal(actual, desired)

2285:         assert_raises(ValueError, zipf, bad_a * 3)

2287:             assert_raises(ValueError, zipf, np.nan)

2288:             assert_raises(ValueError, zipf, [0, 0, np.nan])

2299:         assert_array_equal(actual, desired)

2300:         assert_raises(ValueError, geometric, bad_p_one * 3)

2301:         assert_raises(ValueError, geometric, bad_p_two * 3)

2315:         assert_array_equal(actual, desired)

2316:         assert_raises(ValueError, random.hypergeometric, bad_ngood * 3, nbad, nsample)

2317:         assert_raises(ValueError, random.hypergeometric, ngood * 3, bad_nbad, nsample)

2318:         assert_raises(ValueError, random.hypergeometric, ngood * 3, nbad, bad_nsample_one)

2319:         assert_raises(ValueError, random.hypergeometric, ngood * 3, nbad, bad_nsample_two)

2323:         assert_array_equal(actual, desired)

2324:         assert_raises(ValueError, random.hypergeometric, bad_ngood, nbad * 3, nsample)

2325:         assert_raises(ValueError, random.hypergeometric, ngood, bad_nbad * 3, nsample)

2326:         assert_raises(ValueError, random.hypergeometric, ngood, nbad * 3, bad_nsample_one)

2327:         assert_raises(ValueError, random.hypergeometric, ngood, nbad * 3, bad_nsample_two)

2332:         assert_array_equal(actual, desired)

2333:         assert_raises(ValueError, hypergeom, bad_ngood, nbad, nsample * 3)

2334:         assert_raises(ValueError, hypergeom, ngood, bad_nbad, nsample * 3)

2335:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_one * 3)

2336:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_two * 3)

2338:         assert_raises(ValueError, hypergeom, -1, 10, 20)

2339:         assert_raises(ValueError, hypergeom, 10, -1, 20)

2340:         assert_raises(ValueError, hypergeom, 10, 10, -1)

2341:         assert_raises(ValueError, hypergeom, 10, 10, 25)

2344:         assert_raises(ValueError, hypergeom, 2**30, 10, 20)

2345:         assert_raises(ValueError, hypergeom, 999, 2**31, 50)

2346:         assert_raises(ValueError, hypergeom, 999, [2**29, 2**30], 1000)

2357:         assert_array_equal(actual, desired)

2358:         assert_raises(ValueError, logseries, bad_p_one * 3)

2359:         assert_raises(ValueError, logseries, bad_p_two * 3)

2370:         assert_array_equal(actual, desired)

2376:         assert_array_equal(actual, desired)

2382:         assert_array_equal(actual, desired)

2390:         assert_array_equal(actual, desired)

2403:         assert actual.shape == expected_shape

2407:         assert actual.shape == expected_shape

2412:         assert actual.shape == expected_shape + (4,)

2414:         assert actual.shape == (3, 2) + expected_shape + (4,)

2423:         assert_raises(ValueError, random.multinomial, 1, pvals)

2424:         assert_raises(ValueError, random.multinomial, 6, 0.5)

2429:         assert actual.shape == (10, 0, 6, 6)

2431:         assert actual.shape == (10, 0, 10)

2434:         assert actual.shape == (3, 0, 7, 4)

2460:             assert_array_almost_equal(out1, out2)

2462:             assert_array_equal(out1, out2)

2508:             assert_equal(out.shape, self.tgtShape)

2529:             assert_equal(out.shape, self.tgtShape)

2532:             assert_equal(out.shape, self.tgtShape)

2535:             assert_equal(out.shape, self.tgtShape)

2546:             assert_equal(out.shape, self.tgtShape)

2549:             assert_equal(out.shape, self.tgtShape)

2552:             assert_equal(out.shape, self.tgtShape)

2560:             assert_equal(out.shape, self.tgtShape)

2563:             assert_equal(out.shape, self.tgtShape)

2566:             assert_equal(out.shape, self.tgtShape)

2585:     assert mt19937.state["state"]["pos"] == config["initial"]["pos"]

2586:     assert sha256.hexdigest() == config["initial"]["key_sha256"]

2593:     assert jumped.state["state"]["pos"] == config["jumped"]["pos"]

2594:     assert sha256.hexdigest() == config["jumped"]["key_sha256"]

2601:     assert random.normal(mu, sigma, size=(5, 4, 3)).shape == (5, 4, 3)

2635:     assert random.noncentral_f(a, b, c).shape == (5, 4, 3)

2652:     assert_no_warnings(gen.shuffle, seq)

2653:     assert seq == [1, [], []]

2689:     assert variates is out

2691:     assert variates is out

Total asserts: 537

Filename: numpy/random/tests/test_randomstate.py
9:         assert_, assert_raises, assert_equal, assert_warns,

10:         assert_no_warnings, assert_array_equal, assert_array_almost_equal,

56: def assert_mt19937_state_equal(a, b)
57:     assert_equal(a['bit_generator'], b['bit_generator'])

58:     assert_array_equal(a['state']['key'], b['state']['key'])

59:     assert_array_equal(a['state']['pos'], b['state']['pos'])

60:     assert_equal(a['has_gauss'], b['has_gauss'])

61:     assert_equal(a['gauss'], b['gauss'])

67:         assert_equal(s.randint(1000), 684)

69:         assert_equal(s.randint(1000), 419)

73:         assert_equal(s.randint(1000), 468)

75:         assert_equal(s.randint(1000), 468)

77:         assert_equal(s.randint(1000), 973)

79:         assert_equal(s.randint(1000), 265)

83:         assert_raises(TypeError, random.RandomState, -0.5)

84:         assert_raises(ValueError, random.RandomState, -1)

88:         assert_raises(TypeError, random.RandomState, [-0.5])

89:         assert_raises(ValueError, random.RandomState, [-1])

90:         assert_raises(ValueError, random.RandomState, [4294967296])

91:         assert_raises(ValueError, random.RandomState, [1, 2, 4294967296])

92:         assert_raises(ValueError, random.RandomState, [1, -2, 4294967296])

96:         assert_raises(ValueError, random.RandomState, np.array([],

98:         assert_raises(ValueError, random.RandomState, [[1, 2, 3]])

99:         assert_raises(ValueError, random.RandomState, [[1, 2, 3],

104:         with assert_raises(TypeError)
108:         assert_raises(ValueError, random.RandomState, MT19937)

118:             assert_(random.binomial(0, p) == 0)

119:             assert_array_equal(random.binomial(zeros, p), zeros)

123:         assert_raises(ValueError, random.binomial, 1, np.nan)

134:         assert_(-5 <= random.randint(-5, -1) < -1)

136:         assert_(np.all(-5 <= x))

137:         assert_(np.all(x < -1))

142:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

143:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

144:         assert_equal(random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

145:         assert_equal(random.multinomial(1, p, [2, 2]).shape, (2, 2, 2))

146:         assert_equal(random.multinomial(1, p, (2, 2)).shape, (2, 2, 2))

147:         assert_equal(random.multinomial(1, p, np.array((2, 2))).shape,

150:         assert_raises(TypeError, random.multinomial, 1, p,

154:         assert_raises(ValueError, random.multinomial, 100, [1.1, 0.2])

155:         assert_raises(ValueError, random.multinomial, 100, [-.1, 0.9])

158:         assert_raises(ValueError, random.multinomial, -1, [0.8, 0.2])

168:         assert_array_equal(non_contig, contig)

189:         assert_(np.all(old == new))

196:         assert_(np.all(old == new))

207:         assert_(np.all(old == new))

218:         assert_(np.all(x1 == x2))

219:         assert_(np.all(x1 == x3))

231:             assert_(len(w) == 1)

232:             assert isinstance(state, dict)

233:             assert state['bit_generator'] == 'PCG64'

238:         assert_raises(ValueError, self.random_state.set_state, new_state)

239:         assert_raises(TypeError, self.random_state.set_state,

243:         assert_raises(ValueError, self.random_state.set_state, state)

250:         assert_equal(pickled['has_gauss'], 1)

253:         assert_mt19937_state_equal(pickled, unpickled)

260:         assert_mt19937_state_equal(attr_state, state)

263:         assert repr(self.random_state).startswith('RandomState(MT19937)')

275:         assert_raises(TypeError, self.rfunc, 1, dtype=float)

281:             assert_raises(ValueError, self.rfunc, lbnd - 1, ubnd, dtype=dt)

282:             assert_raises(ValueError, self.rfunc, lbnd, ubnd + 1, dtype=dt)

283:             assert_raises(ValueError, self.rfunc, ubnd, lbnd, dtype=dt)

284:             assert_raises(ValueError, self.rfunc, 1, 0, dtype=dt)

292:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

295:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

298:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

321:                 assert_(vals.max() < ubnd)

322:                 assert_(vals.min() >= 2)

326:         assert_(vals.max() < 2)

327:         assert_(vals.min() >= 0)

353:             assert_(tgt[np.dtype(dt).name] == res)

359:         assert_(tgt[np.dtype(bool).name] == res)

383:             assert_array_equal(x, desired if size is not None else desired[0])

406:         assert_equal(actual, tgt)

415:             assert_equal(sample.dtype, np.dtype(dt))

423:             assert_(not hasattr(sample, 'dtype'))

424:             assert_equal(type(sample), dt)

440:         assert_array_almost_equal(actual, desired, decimal=15)

446:         assert_array_almost_equal(actual, desired, decimal=15)

454:         assert_array_almost_equal(actual, desired, decimal=15)

458:         assert_array_almost_equal(actual, desired[0, 0], decimal=15)

466:         assert_array_equal(actual, desired)

473:             assert_(len(w) == 1)

477:         assert_array_equal(actual, desired)

483:             assert_(len(w) == 1)

484:         assert_array_equal(actual, desired + 100)

500:         assert_equal(actual, desired)

504:         assert_equal(actual, desired[0, 0])

516:             assert_(len(w) == 1)

519:         assert_equal(actual, desired)

525:             assert_(len(w) == 1)

526:         assert_equal(actual, desired)

533:             assert_raises(DeprecationWarning,

538:             assert_raises(DeprecationWarning,

548:         assert_array_almost_equal(actual, desired, decimal=15)

552:         assert_array_almost_equal(actual, desired[0, 0], decimal=15)

558:         assert_array_equal(actual, desired)

564:         assert_array_equal(actual, desired)

570:         assert_array_equal(actual, desired)

576:         assert_array_equal(actual, desired)

582:         assert_array_equal(actual, desired)

586:         assert_raises(ValueError, sample, -1, 3)

587:         assert_raises(ValueError, sample, 3., 3)

588:         assert_raises(ValueError, sample, [[1, 2], [3, 4]], 3)

589:         assert_raises(ValueError, sample, [], 3)

590:         assert_raises(ValueError, sample, [1, 2, 3, 4], 3,

592:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4, 0.2])

593:         assert_raises(ValueError, sample, [1, 2], 3, p=[1.1, -0.1])

594:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4])

595:         assert_raises(ValueError, sample, [1, 2, 3], 4, replace=False)

597:         assert_raises(ValueError, sample, [1, 2, 3], -2, replace=False)

598:         assert_raises(ValueError, sample, [1, 2, 3], (-1,), replace=False)

599:         assert_raises(ValueError, sample, [1, 2, 3], (-1, 1), replace=False)

600:         assert_raises(ValueError, sample, [1, 2, 3], 2,

606:         assert_(np.isscalar(random.choice(2, replace=True)))

607:         assert_(np.isscalar(random.choice(2, replace=False)))

608:         assert_(np.isscalar(random.choice(2, replace=True, p=p)))

609:         assert_(np.isscalar(random.choice(2, replace=False, p=p)))

610:         assert_(np.isscalar(random.choice([1, 2], replace=True)))

611:         assert_(random.choice([None], replace=True) is None)

615:         assert_(random.choice(arr, replace=True) is a)

619:         assert_(not np.isscalar(random.choice(2, s, replace=True)))

620:         assert_(not np.isscalar(random.choice(2, s, replace=False)))

621:         assert_(not np.isscalar(random.choice(2, s, replace=True, p=p)))

622:         assert_(not np.isscalar(random.choice(2, s, replace=False, p=p)))

623:         assert_(not np.isscalar(random.choice([1, 2], s, replace=True)))

624:         assert_(random.choice([None], s, replace=True).ndim == 0)

628:         assert_(random.choice(arr, s, replace=True).item() is a)

633:         assert_equal(random.choice(6, s, replace=True).shape, s)

634:         assert_equal(random.choice(6, s, replace=False).shape, s)

635:         assert_equal(random.choice(6, s, replace=True, p=p).shape, s)

636:         assert_equal(random.choice(6, s, replace=False, p=p).shape, s)

637:         assert_equal(random.choice(np.arange(6), s, replace=True).shape, s)

640:         assert_equal(random.randint(0, 0, size=(3, 0, 4)).shape, (3, 0, 4))

641:         assert_equal(random.randint(0, -10, size=0).shape, (0,))

642:         assert_equal(random.randint(10, 10, size=0).shape, (0,))

643:         assert_equal(random.choice(0, size=0).shape, (0,))

644:         assert_equal(random.choice([], size=(0,)).shape, (0,))

645:         assert_equal(random.choice(['a', 'b'], size=(3, 0, 4)).shape,

647:         assert_raises(ValueError, random.choice, [], 10)

652:         assert_raises(ValueError, random.choice, a, p=p)

661:         assert_array_equal(non_contig, contig)

667:         assert_equal(actual, desired)

694:             assert_array_equal(actual, desired)

704:             assert_equal(

707:             assert_equal(

712:             assert_raises(TypeError, random.shuffle, x)

719:         assert_array_equal(actual, desired)

724:         assert_array_equal(actual, np.atleast_2d(desired).T)

728:         assert_raises(IndexError, random.permutation, bad_x_str)

732:         assert_raises(IndexError, random.permutation, bad_x_float)

739:         assert_array_equal(actual, desired)

748:         assert_array_almost_equal(actual, desired, decimal=15)

756:         assert_array_equal(actual, desired)

761:         assert_array_equal(actual, desired)

769:         assert_array_almost_equal(actual, desired, decimal=13)

781:         assert_array_almost_equal(actual, desired, decimal=15)

783:         assert_raises(ValueError, random.dirichlet, bad_alpha)

788:         assert_array_almost_equal(actual, desired[0, 0], decimal=15)

793:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

794:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

795:         assert_equal(random.dirichlet(p, np.uint32(1)).shape, (1, 2))

796:         assert_equal(random.dirichlet(p, [2, 2]).shape, (2, 2, 2))

797:         assert_equal(random.dirichlet(p, (2, 2)).shape, (2, 2, 2))

798:         assert_equal(random.dirichlet(p, np.array((2, 2))).shape, (2, 2, 2))

800:         assert_raises(TypeError, random.dirichlet, p, float(1))

805:         assert_raises(ValueError, random.dirichlet, alpha)

815:         assert_array_almost_equal(non_contig, contig)

823:         assert_array_almost_equal(actual, desired, decimal=15)

826:         assert_equal(random.exponential(scale=0), 0)

827:         assert_raises(ValueError, random.exponential, scale=-0.)

835:         assert_array_almost_equal(actual, desired, decimal=15)

843:         assert_array_almost_equal(actual, desired, decimal=14)

846:         assert_equal(random.gamma(shape=0, scale=0), 0)

847:         assert_raises(ValueError, random.gamma, shape=-0., scale=-0.)

855:         assert_array_equal(actual, desired)

858:         assert_raises(ValueError, random.geometric, 1.1)

859:         assert_raises(ValueError, random.geometric, [1.1] * 10)

860:         assert_raises(ValueError, random.geometric, -0.1)

861:         assert_raises(ValueError, random.geometric, [-0.1] * 10)

864:             assert_raises(ValueError, random.geometric, np.nan)

865:             assert_raises(ValueError, random.geometric, [np.nan] * 10)

873:         assert_array_almost_equal(actual, desired, decimal=15)

876:         assert_equal(random.gumbel(scale=0), 0)

877:         assert_raises(ValueError, random.gumbel, scale=-0.)

885:         assert_array_equal(actual, desired)

890:         assert_array_equal(actual, desired)

894:         assert_array_equal(actual, desired)

899:         assert_array_equal(actual, desired)

903:         assert_array_equal(actual, desired)

911:         assert_array_almost_equal(actual, desired, decimal=15)

914:         assert_equal(random.laplace(scale=0), 0)

915:         assert_raises(ValueError, random.laplace, scale=-0.)

923:         assert_array_almost_equal(actual, desired, decimal=15)

931:         assert_array_almost_equal(actual, desired, decimal=13)

934:         assert_equal(random.lognormal(sigma=0), 1)

935:         assert_raises(ValueError, random.lognormal, sigma=-0.)

943:         assert_array_equal(actual, desired)

948:             assert_raises(ValueError, random.logseries, np.nan)

949:             assert_raises(ValueError, random.logseries, [np.nan] * 10)

960:         assert_array_equal(actual, desired)

975:         assert_array_almost_equal(actual, desired, decimal=15)

980:         assert_array_almost_equal(actual, desired, decimal=15)

986:         assert_warns(RuntimeWarning, random.multivariate_normal, mean, cov)

989:         assert_no_warnings(random.multivariate_normal, mean, cov,

993:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1000:             assert len(w) == 0

1004:         assert_raises(ValueError, random.multivariate_normal, mean, cov,

1006:         assert_raises(ValueError, random.multivariate_normal,

1008:         assert_raises(ValueError, random.multivariate_normal,

1010:         assert_raises(ValueError, random.multivariate_normal,

1019:         assert_array_equal(actual, desired)

1024:             assert_raises(ValueError, random.negative_binomial, 100, np.nan)

1025:             assert_raises(ValueError, random.negative_binomial, 100,

1034:         assert_array_almost_equal(actual, desired, decimal=14)

1040:         assert_array_almost_equal(actual, desired, decimal=14)

1047:         assert_array_almost_equal(actual, desired, decimal=14)

1056:         assert_array_almost_equal(actual, desired, decimal=14)

1061:         assert np.isnan(actual)

1069:         assert_array_almost_equal(actual, desired, decimal=15)

1072:         assert_equal(random.normal(scale=0), 0)

1073:         assert_raises(ValueError, random.normal, scale=-0.)

1088:         np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)

1096:         assert_array_equal(actual, desired)

1101:         assert_raises(ValueError, random.poisson, lamneg)

1102:         assert_raises(ValueError, random.poisson, [lamneg] * 10)

1103:         assert_raises(ValueError, random.poisson, lambig)

1104:         assert_raises(ValueError, random.poisson, [lambig] * 10)

1107:             assert_raises(ValueError, random.poisson, np.nan)

1108:             assert_raises(ValueError, random.poisson, [np.nan] * 10)

1116:         assert_array_almost_equal(actual, desired, decimal=15)

1124:         assert_array_almost_equal(actual, desired, decimal=14)

1127:         assert_equal(random.rayleigh(scale=0), 0)

1128:         assert_raises(ValueError, random.rayleigh, scale=-0.)

1136:         assert_array_almost_equal(actual, desired, decimal=15)

1144:         assert_array_almost_equal(actual, desired, decimal=15)

1152:         assert_array_almost_equal(actual, desired, decimal=14)

1155:         assert_equal(random.standard_gamma(shape=0), 0)

1156:         assert_raises(ValueError, random.standard_gamma, shape=-0.)

1164:         assert_array_almost_equal(actual, desired, decimal=15)

1170:         assert_array_almost_equal(actual, desired, decimal=15)

1178:         assert_array_almost_equal(actual, desired, decimal=15)

1187:         assert_array_almost_equal(actual, desired, decimal=14)

1195:         assert_array_almost_equal(actual, desired, decimal=15)

1202:         assert_raises(OverflowError, func, -np.inf, 0)

1203:         assert_raises(OverflowError, func, 0, np.inf)

1204:         assert_raises(OverflowError, func, fmin, fmax)

1205:         assert_raises(OverflowError, func, [-np.inf], [0])

1206:         assert_raises(OverflowError, func, [0], [np.inf])

1225:         assert_raises(TypeError, random.uniform, throwing_float,

1233:         assert_raises(TypeError, random.hypergeometric, throwing_int, 1, 1)

1241:         assert_array_almost_equal(actual, desired, decimal=15)

1247:         assert_(np.isfinite(r).all())

1256:         assert_array_almost_equal(actual, desired, decimal=8)

1261:         assert_(np.isnan(r))

1269:         assert_array_almost_equal(actual, desired, decimal=14)

1277:         assert_array_almost_equal(actual, desired, decimal=15)

1281:         assert_equal(random.weibull(a=0, size=12), np.zeros(12))

1282:         assert_raises(ValueError, random.weibull, a=-0.)

1290:         assert_array_equal(actual, desired)

1312:         assert_array_almost_equal(actual, desired, decimal=14)

1316:         assert_array_almost_equal(actual, desired, decimal=14)

1329:         assert_array_almost_equal(actual, desired, decimal=14)

1330:         assert_raises(ValueError, normal, loc * 3, bad_scale)

1334:         assert_array_almost_equal(actual, desired, decimal=14)

1335:         assert_raises(ValueError, normal, loc, bad_scale * 3)

1349:         assert_array_almost_equal(actual, desired, decimal=14)

1350:         assert_raises(ValueError, beta, bad_a * 3, b)

1351:         assert_raises(ValueError, beta, a * 3, bad_b)

1355:         assert_array_almost_equal(actual, desired, decimal=14)

1356:         assert_raises(ValueError, beta, bad_a, b * 3)

1357:         assert_raises(ValueError, beta, a, bad_b * 3)

1369:         assert_array_almost_equal(actual, desired, decimal=14)

1370:         assert_raises(ValueError, exponential, bad_scale * 3)

1382:         assert_array_almost_equal(actual, desired, decimal=14)

1383:         assert_raises(ValueError, std_gamma, bad_shape * 3)

1397:         assert_array_almost_equal(actual, desired, decimal=14)

1398:         assert_raises(ValueError, gamma, bad_shape * 3, scale)

1399:         assert_raises(ValueError, gamma, shape * 3, bad_scale)

1403:         assert_array_almost_equal(actual, desired, decimal=14)

1404:         assert_raises(ValueError, gamma, bad_shape, scale * 3)

1405:         assert_raises(ValueError, gamma, shape, bad_scale * 3)

1419:         assert_array_almost_equal(actual, desired, decimal=14)

1420:         assert_raises(ValueError, f, bad_dfnum * 3, dfden)

1421:         assert_raises(ValueError, f, dfnum * 3, bad_dfden)

1425:         assert_array_almost_equal(actual, desired, decimal=14)

1426:         assert_raises(ValueError, f, bad_dfnum, dfden * 3)

1427:         assert_raises(ValueError, f, dfnum, bad_dfden * 3)

1443:         assert_array_almost_equal(actual, desired, decimal=14)

1444:         assert np.all(np.isnan(nonc_f(dfnum, dfden, [np.nan] * 3)))

1446:         assert_raises(ValueError, nonc_f, bad_dfnum * 3, dfden, nonc)

1447:         assert_raises(ValueError, nonc_f, dfnum * 3, bad_dfden, nonc)

1448:         assert_raises(ValueError, nonc_f, dfnum * 3, dfden, bad_nonc)

1452:         assert_array_almost_equal(actual, desired, decimal=14)

1453:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden * 3, nonc)

1454:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden * 3, nonc)

1455:         assert_raises(ValueError, nonc_f, dfnum, dfden * 3, bad_nonc)

1459:         assert_array_almost_equal(actual, desired, decimal=14)

1460:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden, nonc * 3)

1461:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden, nonc * 3)

1462:         assert_raises(ValueError, nonc_f, dfnum, dfden, bad_nonc * 3)

1468:         assert_array_almost_equal(actual, desired, decimal=14)

1480:         assert_array_almost_equal(actual, desired, decimal=14)

1481:         assert_raises(ValueError, chisquare, bad_df * 3)

1495:         assert_array_almost_equal(actual, desired, decimal=14)

1496:         assert_raises(ValueError, nonc_chi, bad_df * 3, nonc)

1497:         assert_raises(ValueError, nonc_chi, df * 3, bad_nonc)

1501:         assert_array_almost_equal(actual, desired, decimal=14)

1502:         assert_raises(ValueError, nonc_chi, bad_df, nonc * 3)

1503:         assert_raises(ValueError, nonc_chi, df, bad_nonc * 3)

1515:         assert_array_almost_equal(actual, desired, decimal=14)

1516:         assert_raises(ValueError, t, bad_df * 3)

1517:         assert_raises(ValueError, random.standard_t, bad_df * 3)

1530:         assert_array_almost_equal(actual, desired, decimal=14)

1531:         assert_raises(ValueError, vonmises, mu * 3, bad_kappa)

1535:         assert_array_almost_equal(actual, desired, decimal=14)

1536:         assert_raises(ValueError, vonmises, mu, bad_kappa * 3)

1548:         assert_array_almost_equal(actual, desired, decimal=14)

1549:         assert_raises(ValueError, pareto, bad_a * 3)

1550:         assert_raises(ValueError, random.pareto, bad_a * 3)

1562:         assert_array_almost_equal(actual, desired, decimal=14)

1563:         assert_raises(ValueError, weibull, bad_a * 3)

1564:         assert_raises(ValueError, random.weibull, bad_a * 3)

1576:         assert_array_almost_equal(actual, desired, decimal=14)

1577:         assert_raises(ValueError, power, bad_a * 3)

1578:         assert_raises(ValueError, random.power, bad_a * 3)

1591:         assert_array_almost_equal(actual, desired, decimal=14)

1592:         assert_raises(ValueError, laplace, loc * 3, bad_scale)

1596:         assert_array_almost_equal(actual, desired, decimal=14)

1597:         assert_raises(ValueError, laplace, loc, bad_scale * 3)

1610:         assert_array_almost_equal(actual, desired, decimal=14)

1611:         assert_raises(ValueError, gumbel, loc * 3, bad_scale)

1615:         assert_array_almost_equal(actual, desired, decimal=14)

1616:         assert_raises(ValueError, gumbel, loc, bad_scale * 3)

1629:         assert_array_almost_equal(actual, desired, decimal=14)

1630:         assert_raises(ValueError, logistic, loc * 3, bad_scale)

1634:         assert_array_almost_equal(actual, desired, decimal=14)

1635:         assert_raises(ValueError, logistic, loc, bad_scale * 3)

1636:         assert_equal(random.logistic(1.0, 0.0), 1.0)

1649:         assert_array_almost_equal(actual, desired, decimal=14)

1650:         assert_raises(ValueError, lognormal, mean * 3, bad_sigma)

1651:         assert_raises(ValueError, random.lognormal, mean * 3, bad_sigma)

1655:         assert_array_almost_equal(actual, desired, decimal=14)

1656:         assert_raises(ValueError, lognormal, mean, bad_sigma * 3)

1657:         assert_raises(ValueError, random.lognormal, mean, bad_sigma * 3)

1669:         assert_array_almost_equal(actual, desired, decimal=14)

1670:         assert_raises(ValueError, rayleigh, bad_scale * 3)

1684:         assert_array_almost_equal(actual, desired, decimal=14)

1685:         assert_raises(ValueError, wald, bad_mean * 3, scale)

1686:         assert_raises(ValueError, wald, mean * 3, bad_scale)

1687:         assert_raises(ValueError, random.wald, bad_mean * 3, scale)

1688:         assert_raises(ValueError, random.wald, mean * 3, bad_scale)

1692:         assert_array_almost_equal(actual, desired, decimal=14)

1693:         assert_raises(ValueError, wald, bad_mean, scale * 3)

1694:         assert_raises(ValueError, wald, mean, bad_scale * 3)

1695:         assert_raises(ValueError, wald, 0.0, 1)

1696:         assert_raises(ValueError, wald, 0.5, 0.0)

1712:         assert_array_almost_equal(actual, desired, decimal=14)

1713:         assert_raises(ValueError, triangular, bad_left_one * 3, mode, right)

1714:         assert_raises(ValueError, triangular, left * 3, bad_mode_one, right)

1715:         assert_raises(ValueError, triangular, bad_left_two * 3, bad_mode_two,

1720:         assert_array_almost_equal(actual, desired, decimal=14)

1721:         assert_raises(ValueError, triangular, bad_left_one, mode * 3, right)

1722:         assert_raises(ValueError, triangular, left, bad_mode_one * 3, right)

1723:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two * 3,

1728:         assert_array_almost_equal(actual, desired, decimal=14)

1729:         assert_raises(ValueError, triangular, bad_left_one, mode, right * 3)

1730:         assert_raises(ValueError, triangular, left, bad_mode_one, right * 3)

1731:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two,

1734:         assert_raises(ValueError, triangular, 10., 0., 20.)

1735:         assert_raises(ValueError, triangular, 10., 25., 20.)

1736:         assert_raises(ValueError, triangular, 10., 10., 10.)

1749:         assert_array_equal(actual, desired)

1750:         assert_raises(ValueError, binom, bad_n * 3, p)

1751:         assert_raises(ValueError, binom, n * 3, bad_p_one)

1752:         assert_raises(ValueError, binom, n * 3, bad_p_two)

1756:         assert_array_equal(actual, desired)

1757:         assert_raises(ValueError, binom, bad_n, p * 3)

1758:         assert_raises(ValueError, binom, n, bad_p_one * 3)

1759:         assert_raises(ValueError, binom, n, bad_p_two * 3)

1772:         assert_array_equal(actual, desired)

1773:         assert_raises(ValueError, neg_binom, bad_n * 3, p)

1774:         assert_raises(ValueError, neg_binom, n * 3, bad_p_one)

1775:         assert_raises(ValueError, neg_binom, n * 3, bad_p_two)

1779:         assert_array_equal(actual, desired)

1780:         assert_raises(ValueError, neg_binom, bad_n, p * 3)

1781:         assert_raises(ValueError, neg_binom, n, bad_p_one * 3)

1782:         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)

1795:         assert_array_equal(actual, desired)

1796:         assert_raises(ValueError, poisson, bad_lam_one * 3)

1797:         assert_raises(ValueError, poisson, bad_lam_two * 3)

1807:         assert_array_equal(actual, desired)

1808:         assert_raises(ValueError, zipf, bad_a * 3)

1810:             assert_raises(ValueError, zipf, np.nan)

1811:             assert_raises(ValueError, zipf, [0, 0, np.nan])

1822:         assert_array_equal(actual, desired)

1823:         assert_raises(ValueError, geom, bad_p_one * 3)

1824:         assert_raises(ValueError, geom, bad_p_two * 3)

1839:         assert_array_equal(actual, desired)

1840:         assert_raises(ValueError, hypergeom, bad_ngood * 3, nbad, nsample)

1841:         assert_raises(ValueError, hypergeom, ngood * 3, bad_nbad, nsample)

1842:         assert_raises(ValueError, hypergeom, ngood * 3, nbad, bad_nsample_one)

1843:         assert_raises(ValueError, hypergeom, ngood * 3, nbad, bad_nsample_two)

1847:         assert_array_equal(actual, desired)

1848:         assert_raises(ValueError, hypergeom, bad_ngood, nbad * 3, nsample)

1849:         assert_raises(ValueError, hypergeom, ngood, bad_nbad * 3, nsample)

1850:         assert_raises(ValueError, hypergeom, ngood, nbad * 3, bad_nsample_one)

1851:         assert_raises(ValueError, hypergeom, ngood, nbad * 3, bad_nsample_two)

1855:         assert_array_equal(actual, desired)

1856:         assert_raises(ValueError, hypergeom, bad_ngood, nbad, nsample * 3)

1857:         assert_raises(ValueError, hypergeom, ngood, bad_nbad, nsample * 3)

1858:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_one * 3)

1859:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_two * 3)

1861:         assert_raises(ValueError, hypergeom, -1, 10, 20)

1862:         assert_raises(ValueError, hypergeom, 10, -1, 20)

1863:         assert_raises(ValueError, hypergeom, 10, 10, 0)

1864:         assert_raises(ValueError, hypergeom, 10, 10, 25)

1875:         assert_array_equal(actual, desired)

1876:         assert_raises(ValueError, logseries, bad_p_one * 3)

1877:         assert_raises(ValueError, logseries, bad_p_two * 3)

1903:             assert_array_almost_equal(out1, out2)

1905:             assert_array_equal(out1, out2)

1951:             assert_equal(out.shape, self.tgtShape)

1972:             assert_equal(out.shape, self.tgtShape)

1975:             assert_equal(out.shape, self.tgtShape)

1978:             assert_equal(out.shape, self.tgtShape)

1986:             assert_equal(out.shape, self.tgtShape)

1989:             assert_equal(out.shape, self.tgtShape)

1992:             assert_equal(out.shape, self.tgtShape)

2001:     assert_(actual.dtype == np.dtype('l'))

2012:     assert_(res == sha256)

Total asserts: 431

Filename: numpy/random/tests/test_direct.py
6: from numpy.testing import (assert_equal, assert_allclose, assert_array_equal,

7:                            assert_raises)

39: def assert_state_equal(actual, target)
42:             assert_state_equal(actual[key], target[key])

44:             assert_array_equal(actual[key], target[key])

46:             assert actual[key] == target[key]

140:     assert_equal(s1.state, s2.state)

141:     assert_equal(s1.n_children_spawned, s2.n_children_spawned)

144:     assert_raises(TypeError, ISeedSequence)

145:     assert_raises(TypeError, ISpawnableSeedSequence)

147:     assert_raises(NotImplementedError, dummy.generate_state, 10)

148:     assert len(dummy.spawn(10)) == 10

178:         assert_equal(uints, self.data1['data'])

182:         assert_equal(uints, self.data1['data'][0])

186:         assert_equal(uints, self.data2['data'])

191:         assert uints is None

193:         assert uints is None

199:         assert_allclose(gauss,

204:         assert_allclose(gauss,

211:         assert_allclose(uniforms, vals)

212:         assert_equal(uniforms.dtype, np.float64)

217:         assert_allclose(uniforms, vals)

218:         assert_equal(uniforms.dtype, np.float64)

224:         assert_allclose(uniforms, vals)

225:         assert_equal(uniforms.dtype, np.float32)

230:         assert_allclose(uniforms, vals)

231:         assert_equal(uniforms.dtype, np.float32)

235:         assert 'Generator' in repr(rs)

236:         assert f'{id(rs)
240:         assert 'Generator' in str(rs)

241:         assert str(self.bit_generator.__name__) in str(rs)

242:         assert f'{id(rs)
252:         assert_array_equal(Generator(bit_generator).standard_normal(1000),

254:         assert bit_generator is not reloaded

255:         assert_state_equal(reloaded_state, state)

259:         assert_equal(ss.state, aa.state)

296:         assert isinstance(cffi_interface, interface)

298:         assert other_cffi_interface is cffi_interface

304:         assert isinstance(ctypes_interface, interface)

306:         assert other_ctypes_interface is ctypes_interface

312:         assert_state_equal(state, alt_state)

334:         assert_state_equal(bit_generator.state, keyed.state)

361:         assert val_neg == val_pos

362:         assert val_big == val_pos

369:         assert state["state"] == initial_state

373:         assert state["state"] == advanced_state

400:         assert val_neg == val_pos

401:         assert val_big == val_pos

408:         assert state["state"]["state"] == initial_state

412:         assert state["state"] == advanced_state

428:         assert_raises(TypeError, self.bit_generator, np.array([np.pi]))

429:         assert_raises(TypeError, self.bit_generator, np.array([-np.pi]))

430:         assert_raises(TypeError, self.bit_generator, np.array([np.pi, -np.pi]))

431:         assert_raises(TypeError, self.bit_generator, np.array([0, np.pi]))

432:         assert_raises(TypeError, self.bit_generator, [np.pi])

433:         assert_raises(TypeError, self.bit_generator, [0, np.pi])

444:         assert_equal(actual, desired)

448:         assert_equal(actual, desired)

470:             assert isinstance(rg.bit_generator, PCG64)

475:         assert rg.bit_generator is bg

477:         assert rg2 is rg

478:         assert rg2.bit_generator is bg

Total asserts: 62

Filename: numpy/random/tests/test_extending.py
66:             assert False, ("Could not find '{}' in C file, "

76:     assert so1 is not None

77:     assert so2 is not None

85:     assert values.shape == (10,)

86:     assert values.dtype == np.float64

Total asserts: 5

Filename: numpy/random/tests/test_smoke.py
6: from numpy.testing import assert_equal, assert_, assert_array_equal

18:     assert_(np.isscalar(val))

20:     assert_(val.shape == (10,))

22:     assert_(val.shape == (10, 10))

24:     assert_(val.shape == (10, 10, 10))

26:     assert_(val.shape == (5, 5))

123:         assert_(comp_state(state, new_state))

129:             assert_(not comp_state(state, self.rg.bit_generator.state))

139:             assert_(not comp_state(state, jumped_state))

144:             assert_(comp_state(jumped_state, rejumped_state))

153:         assert_(len(r) == 10)

154:         assert_((r > -1).all())

155:         assert_((r <= 0).all())

159:         assert_(len(r) == 10)

160:         assert_((r > -1).all())

161:         assert_((r <= 0).all())

164:         assert_(len(r) == 10)

165:         assert_((r > -1).all())

166:         assert_((r <= 0).all())

168:         assert_(len(r) == 10)

169:         assert_((r > -1).all())

170:         assert_((r <= 0).all())

173:         assert_(len(self.rg.random(10)) == 10)

177:         assert_(len(self.rg.standard_normal(10)) == 10)

180:         assert_(len(self.rg.standard_normal(10)) == 10)

184:         assert_(len(self.rg.standard_gamma(10, 10)) == 10)

185:         assert_(len(self.rg.standard_gamma(np.array([10] * 10), 10)) == 10)

189:         assert_(len(self.rg.standard_exponential(10)) == 10)

194:         assert_(len(randoms) == 10)

195:         assert randoms.dtype == np.float32

201:         assert_(len(randoms) == 10)

202:         assert randoms.dtype == np.float32

207:         assert_(len(self.rg.standard_cauchy(10)) == 10)

211:         assert_(len(self.rg.standard_t(10, 10)) == 10)

215:         assert_(self.rg.binomial(10, .5) >= 0)

216:         assert_(self.rg.binomial(1000, .5) >= 0)

223:         assert_(int_1 == int_2)

228:         assert_(not comp_state(rg.bit_generator.state,

236:         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))

246:         assert_array_equal(n1, n2)

256:         assert_array_equal(n1, n2)

266:         assert_((n1 == n2).all())

271:         assert_((original != permuted).any())

276:         assert_((original != permuted).any())

280:         assert_(len(vals) == 10)

282:         assert_(len(vals) == 10)

284:         assert_(len(vals) == 10)

286:         assert_(len(vals) == 10)

288:         assert_(vals.shape == (10, 10))

292:         assert_(len(vals) == 10)

296:         assert_(len(vals) == 10)

301:         assert_(len(vals) == 10)

306:         assert_(len(vals) == 10)

310:         assert_(len(vals) == 10)

314:         assert_(len(vals) == 10)

319:         assert_(len(vals) == 10)

323:         assert_(len(vals) == 10)

327:         assert_(len(vals) == 10)

331:         assert_(len(vals) == 10)

335:         assert_(len(vals) == 10)

339:         assert_(len(vals) == 10)

343:         assert_(len(vals) == 10)

345:         assert_(len(vals) == 10)

347:         assert_(len(vals) == 10)

349:         assert_(len(vals) == 10)

353:         assert_(len(vals) == 10)

357:         assert_(len(vals) == 10)

361:         assert_(len(vals) == 10)

363:         assert_(len(vals) == 10)

368:         assert_(len(vals) == 10)

372:         assert_(len(vals) == 10)

376:         assert_(len(vals) == 10)

381:         assert_(len(vals) == 10)

385:         assert_(len(vals) == 10)

389:         assert_(len(vals) == 10)

393:         assert_(len(vals) == 10)

395:         assert_(len(vals) == 100)

397:         assert_(vals.shape == (1, 100))

399:         assert_(vals.shape == (100, 100))

403:         assert_(np.isscalar(vals))

405:         assert_(vals.shape == (10,))

409:         assert_(np.isscalar(vals))

411:         assert_(vals.shape == (10,))

417:         assert_(x.shape == (5000, 2))

419:         assert_(x.shape == (5000, 2))

421:         assert_(x.shape == (5000, 2))

422:         assert_((x_zig != x_inv).any())

426:         assert_(vals.shape == (2,))

428:         assert_(vals.shape == (10, 2))

432:         assert_(s.shape == (20, 3))

437:         assert_((type(self.rg) == type(unpick)))

438:         assert_(comp_state(self.rg.bit_generator.state,

443:         assert_((type(self.rg) == type(unpick)))

444:         assert_(comp_state(self.rg.bit_generator.state,

461:         assert_(comp_state(state1, state2))

468:         assert_(not comp_state(state1, state2))

475:         assert_(not comp_state(state1, state2))

483:         assert_(not comp_state(state1, state2))

494:         assert_array_equal(r1, r2)

495:         assert_equal(r1.dtype, np.float32)

496:         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))

507:         assert_array_equal(r1, r2)

508:         assert_equal(r1.dtype, np.float32)

509:         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))

520:         assert_array_equal(r1, r2)

521:         assert_equal(r1.dtype, np.float32)

522:         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))

533:         assert_array_equal(r1, r2)

534:         assert_equal(r1.dtype, np.float32)

535:         assert_(comp_state(rg.bit_generator.state, rg2.bit_generator.state))

546:         assert_equal(direct, existing)

557:         assert_equal(direct, existing)

568:         assert_equal(direct, existing)

575:         assert_equal(direct, existing)

586:         assert_equal(direct, existing)

593:         assert_equal(direct, existing)

604:         assert_equal(direct, existing)

611:         assert_equal(direct, existing)

623:         assert_equal(direct, existing)

630:         assert_equal(direct, existing)

667:         assert_equal(a, b)

670:         assert_equal(a, c)

675:         assert_equal(a, d)

680:         assert_equal(a, e)

686:         assert_equal(a, b)

693:         assert out.shape == (1,)

696:         assert out.shape == (1,)

699:         assert out.shape == (1,)

737:         assert_((state[1] == state2['state']['key']).all())

738:         assert_((state[2] == state2['state']['pos']))

805:         assert_(isinstance(self.rg.bit_generator, PCG64))

Total asserts: 131

Filename: numpy/random/tests/test_randomstate_regression.py
6:     assert_, assert_array_equal, assert_raises,

20:             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))

24:         assert_(np.all(random.hypergeometric(3, 18, 11, size=10) < 4))

25:         assert_(np.all(random.hypergeometric(18, 3, 11, size=10) > 0))

36:             assert_(random.hypergeometric(*arg) > 0)

48:         assert_(freq > 0.45, msg)

52:         assert_(freq < 0.23, msg)

64:             assert_array_equal(np.array(shuffled, dtype=object), expected)

74:             assert_array_equal(m.choice(10, size=10, p=np.ones(10)/10.), res)

89:         assert_(not np.any(np.isnan(x)), 'Nans in random.beta')

101:             assert_(c in a)

102:             assert_raises(ValueError, random.choice, a, p=probs*0.9)

140:         assert_array_equal(perm, np.array([0, 2, 1]))

141:         assert_array_equal(orig, np.arange(3).view(N))

152:         assert_array_equal(perm, np.array([2, 1, 4, 0, 3]))

153:         assert_array_equal(m.__array__(), np.arange(5))

165:         assert rs1.randint(0, 100) == rs2.randint(0, 100)

170:         assert c.dtype == np.dtype(int)

172:         assert c.dtype == np.dtype(int)

174:         assert c.dtype == np.dtype(int)

176:         assert c.dtype == np.dtype(int)

187:         assert_array_equal(actual, expected)

193:         assert_array_equal(random.binomial(1, [0, 0.25, 0.5, 0.75, 1]),

202:         assert_array_equal(random.binomial([[0], [10]], 0.25, size=(2, 10)),

209:     assert random.multinomial(10, []).shape == (0,)

210:     assert random.multinomial(3, [], size=(7, 5, 3)).shape == (7, 5, 3, 0)

Total asserts: 26

Filename: numpy/random/tests/test_seed_sequence.py
2: from numpy.testing import assert_array_equal, assert_array_compare

52:         assert_array_equal(state, expected)

54:         assert_array_equal(state64, expected64)

64:     assert_array_compare(

73:     assert_array_equal(SeedSequence(42).generate_state(4), expected42)

77:     assert_array_compare(

Total asserts: 6

Filename: numpy/random/tests/test_generator_mt19937_regressions.py
1: from numpy.testing import (assert_, assert_array_equal)

16:             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))

20:         assert_(np.all(mt19937.hypergeometric(3, 18, 11, size=10) < 4))

21:         assert_(np.all(mt19937.hypergeometric(18, 3, 11, size=10) > 0))

25:         assert_(mt19937.hypergeometric(*args) > 0)

37:         assert_(freq > 0.45, msg)

41:         assert_(freq < 0.23, msg)

53:             assert_array_equal(np.array(shuffled, dtype=object), expected)

62:             assert_array_equal(m.choice(10, size=10, p=np.ones(10)/10.), res)

77:         assert_(not np.any(np.isnan(x)), 'Nans in mt19937.beta')

89:             assert_(c in a)

129:         assert_array_equal(perm, np.array([2, 0, 1]))

130:         assert_array_equal(orig, np.arange(3).view(N))

141:         assert_array_equal(perm, np.array([4, 1, 3, 0, 2]))

142:         assert_array_equal(m.__array__(), np.arange(5))

145:         assert mt19937.standard_gamma(0.0) == 0.0

146:         assert_array_equal(mt19937.standard_gamma([0.0]), 0.0)

150:         assert_array_equal(actual, expected)

Total asserts: 18

Filename: numpy/random/tests/test_random.py
7:         assert_, assert_raises, assert_equal, assert_warns,

8:         assert_no_warnings, assert_array_equal, assert_array_almost_equal,

18:         assert_equal(s.randint(1000), 684)

20:         assert_equal(s.randint(1000), 419)

24:         assert_equal(s.randint(1000), 468)

26:         assert_equal(s.randint(1000), 468)

28:         assert_equal(s.randint(1000), 973)

30:         assert_equal(s.randint(1000), 265)

34:         assert_raises(TypeError, np.random.RandomState, -0.5)

35:         assert_raises(ValueError, np.random.RandomState, -1)

39:         assert_raises(TypeError, np.random.RandomState, [-0.5])

40:         assert_raises(ValueError, np.random.RandomState, [-1])

41:         assert_raises(ValueError, np.random.RandomState, [4294967296])

42:         assert_raises(ValueError, np.random.RandomState, [1, 2, 4294967296])

43:         assert_raises(ValueError, np.random.RandomState, [1, -2, 4294967296])

47:         assert_raises(ValueError, np.random.RandomState,

49:         assert_raises(ValueError, np.random.RandomState, [[1, 2, 3]])

50:         assert_raises(ValueError, np.random.RandomState, [[1, 2, 3],

61:             assert_(random.binomial(0, p) == 0)

62:             assert_array_equal(random.binomial(zeros, p), zeros)

66:         assert_raises(ValueError, random.binomial, 1, np.nan)

77:         assert_(-5 <= random.randint(-5, -1) < -1)

79:         assert_(np.all(-5 <= x))

80:         assert_(np.all(x < -1))

85:         assert_equal(np.random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

86:         assert_equal(np.random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

87:         assert_equal(np.random.multinomial(1, p, np.uint32(1)).shape, (1, 2))

88:         assert_equal(np.random.multinomial(1, p, [2, 2]).shape, (2, 2, 2))

89:         assert_equal(np.random.multinomial(1, p, (2, 2)).shape, (2, 2, 2))

90:         assert_equal(np.random.multinomial(1, p, np.array((2, 2))).shape,

93:         assert_raises(TypeError, np.random.multinomial, 1, p,

97:         assert_raises(ValueError, np.random.multinomial, 10, [[0, 1]])

98:         assert_raises(ValueError, np.random.multinomial, 10, [[0], [1]])

99:         assert_raises(ValueError, np.random.multinomial, 10, [[[0], [1]], [[1], [0]]])

100:         assert_raises(ValueError, np.random.multinomial, 10, np.array([[0, 1], [1, 0]]))

113:         assert_(np.all(old == new))

120:         assert_(np.all(old == new))

131:         assert_(np.all(old == new))

142:         assert_(np.all(x1 == x2))

143:         assert_(np.all(x1 == x3))

160:         assert_raises(TypeError, self.rfunc, 1, dtype=float)

166:             assert_raises(ValueError, self.rfunc, lbnd - 1, ubnd, dtype=dt)

167:             assert_raises(ValueError, self.rfunc, lbnd, ubnd + 1, dtype=dt)

168:             assert_raises(ValueError, self.rfunc, ubnd, lbnd, dtype=dt)

169:             assert_raises(ValueError, self.rfunc, 1, 0, dtype=dt)

177:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

180:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

183:             assert_equal(self.rfunc(tgt, tgt + 1, size=1000, dtype=dt), tgt)

206:                 assert_(vals.max() < ubnd)

207:                 assert_(vals.min() >= 2)

211:         assert_(vals.max() < 2)

212:         assert_(vals.min() >= 0)

239:             assert_(tgt[np.dtype(dt).name] == res)

245:         assert_(tgt[np.dtype(bool).name] == res)

268:         assert_equal(actual, tgt)

277:             assert_equal(sample.dtype, np.dtype(dt))

285:             assert_(not hasattr(sample, 'dtype'))

286:             assert_equal(type(sample), dt)

302:         assert_array_almost_equal(actual, desired, decimal=15)

310:         assert_array_almost_equal(actual, desired, decimal=15)

318:         assert_array_equal(actual, desired)

325:             assert_(len(w) == 1)

329:         assert_array_equal(actual, desired)

341:             assert_(len(w) == 1)

344:         assert_equal(actual, desired)

351:             assert_raises(DeprecationWarning,

356:             assert_raises(DeprecationWarning,

366:         assert_array_almost_equal(actual, desired, decimal=15)

372:         assert_array_equal(actual, desired)

378:         assert_array_equal(actual, desired)

384:         assert_array_equal(actual, desired)

391:         assert_array_equal(actual, desired)

397:         assert_array_equal(actual, desired)

401:         assert_raises(ValueError, sample, -1, 3)

402:         assert_raises(ValueError, sample, 3., 3)

403:         assert_raises(ValueError, sample, [[1, 2], [3, 4]], 3)

404:         assert_raises(ValueError, sample, [], 3)

405:         assert_raises(ValueError, sample, [1, 2, 3, 4], 3,

407:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4, 0.2])

408:         assert_raises(ValueError, sample, [1, 2], 3, p=[1.1, -0.1])

409:         assert_raises(ValueError, sample, [1, 2], 3, p=[0.4, 0.4])

410:         assert_raises(ValueError, sample, [1, 2, 3], 4, replace=False)

412:         assert_raises(ValueError, sample, [1, 2, 3], -2, replace=False)

413:         assert_raises(ValueError, sample, [1, 2, 3], (-1,), replace=False)

414:         assert_raises(ValueError, sample, [1, 2, 3], (-1, 1), replace=False)

415:         assert_raises(ValueError, sample, [1, 2, 3], 2,

421:         assert_(np.isscalar(np.random.choice(2, replace=True)))

422:         assert_(np.isscalar(np.random.choice(2, replace=False)))

423:         assert_(np.isscalar(np.random.choice(2, replace=True, p=p)))

424:         assert_(np.isscalar(np.random.choice(2, replace=False, p=p)))

425:         assert_(np.isscalar(np.random.choice([1, 2], replace=True)))

426:         assert_(np.random.choice([None], replace=True) is None)

430:         assert_(np.random.choice(arr, replace=True) is a)

434:         assert_(not np.isscalar(np.random.choice(2, s, replace=True)))

435:         assert_(not np.isscalar(np.random.choice(2, s, replace=False)))

436:         assert_(not np.isscalar(np.random.choice(2, s, replace=True, p=p)))

437:         assert_(not np.isscalar(np.random.choice(2, s, replace=False, p=p)))

438:         assert_(not np.isscalar(np.random.choice([1, 2], s, replace=True)))

439:         assert_(np.random.choice([None], s, replace=True).ndim == 0)

443:         assert_(np.random.choice(arr, s, replace=True).item() is a)

448:         assert_equal(np.random.choice(6, s, replace=True).shape, s)

449:         assert_equal(np.random.choice(6, s, replace=False).shape, s)

450:         assert_equal(np.random.choice(6, s, replace=True, p=p).shape, s)

451:         assert_equal(np.random.choice(6, s, replace=False, p=p).shape, s)

452:         assert_equal(np.random.choice(np.arange(6), s, replace=True).shape, s)

455:         assert_equal(np.random.randint(0, 0, size=(3, 0, 4)).shape, (3, 0, 4))

456:         assert_equal(np.random.randint(0, -10, size=0).shape, (0,))

457:         assert_equal(np.random.randint(10, 10, size=0).shape, (0,))

458:         assert_equal(np.random.choice(0, size=0).shape, (0,))

459:         assert_equal(np.random.choice([], size=(0,)).shape, (0,))

460:         assert_equal(np.random.choice(['a', 'b'], size=(3, 0, 4)).shape,

462:         assert_raises(ValueError, np.random.choice, [], 10)

467:         assert_raises(ValueError, np.random.choice, a, p=p)

473:         assert_equal(actual, desired)

499:             assert_array_equal(actual, desired)

509:             assert_equal(

512:             assert_equal(

523:         assert "test_random" in rec[0].filename

541:         assert all(id(i) in item_ids for i in arr)

550:             assert all(id(i) in item_ids for i in arr)

559:         assert_equal(np.asarray(a), [0, 1, 4, 3, 2])

562:         assert_equal(np.asarray(a), [0, 1, 2, 3, 4])

565:         assert_equal(np.asarray(a), [4, 1, 0, 3, 2])

580:         assert_array_almost_equal(actual, desired, decimal=15)

588:         assert_array_equal(actual, desired)

596:         assert_array_almost_equal(actual, desired, decimal=13)

608:         assert_array_almost_equal(actual, desired, decimal=15)

613:         assert_equal(np.random.dirichlet(p, np.uint32(1)).shape, (1, 2))

614:         assert_equal(np.random.dirichlet(p, np.uint32(1)).shape, (1, 2))

615:         assert_equal(np.random.dirichlet(p, np.uint32(1)).shape, (1, 2))

616:         assert_equal(np.random.dirichlet(p, [2, 2]).shape, (2, 2, 2))

617:         assert_equal(np.random.dirichlet(p, (2, 2)).shape, (2, 2, 2))

618:         assert_equal(np.random.dirichlet(p, np.array((2, 2))).shape, (2, 2, 2))

620:         assert_raises(TypeError, np.random.dirichlet, p, float(1))

625:         assert_raises(ValueError, np.random.mtrand.dirichlet, alpha)

628:         assert_raises(ValueError, random.dirichlet, [[5, 1]])

629:         assert_raises(ValueError, random.dirichlet, [[5], [1]])

630:         assert_raises(ValueError, random.dirichlet, [[[5], [1]], [[1], [5]]])

631:         assert_raises(ValueError, random.dirichlet, np.array([[5, 1], [1, 5]]))

639:         assert_array_almost_equal(actual, desired, decimal=15)

642:         assert_equal(np.random.exponential(scale=0), 0)

643:         assert_raises(ValueError, np.random.exponential, scale=-0.)

651:         assert_array_almost_equal(actual, desired, decimal=15)

659:         assert_array_almost_equal(actual, desired, decimal=14)

662:         assert_equal(np.random.gamma(shape=0, scale=0), 0)

663:         assert_raises(ValueError, np.random.gamma, shape=-0., scale=-0.)

671:         assert_array_equal(actual, desired)

679:         assert_array_almost_equal(actual, desired, decimal=15)

682:         assert_equal(np.random.gumbel(scale=0), 0)

683:         assert_raises(ValueError, np.random.gumbel, scale=-0.)

691:         assert_array_equal(actual, desired)

696:         assert_array_equal(actual, desired)

700:         assert_array_equal(actual, desired)

705:         assert_array_equal(actual, desired)

709:         assert_array_equal(actual, desired)

717:         assert_array_almost_equal(actual, desired, decimal=15)

720:         assert_equal(np.random.laplace(scale=0), 0)

721:         assert_raises(ValueError, np.random.laplace, scale=-0.)

729:         assert_array_almost_equal(actual, desired, decimal=15)

737:         assert_array_almost_equal(actual, desired, decimal=13)

740:         assert_equal(np.random.lognormal(sigma=0), 1)

741:         assert_raises(ValueError, np.random.lognormal, sigma=-0.)

749:         assert_array_equal(actual, desired)

760:         assert_array_equal(actual, desired)

775:         assert_array_almost_equal(actual, desired, decimal=15)

780:         assert_array_almost_equal(actual, desired, decimal=15)

786:         assert_warns(RuntimeWarning, np.random.multivariate_normal, mean, cov)

789:         assert_no_warnings(np.random.multivariate_normal, mean, cov,

793:         assert_raises(ValueError, np.random.multivariate_normal, mean, cov,

800:             assert len(w) == 0

808:         assert_array_equal(actual, desired)

816:         assert_array_almost_equal(actual, desired, decimal=14)

822:         assert_array_almost_equal(actual, desired, decimal=14)

829:         assert_array_almost_equal(actual, desired, decimal=14)

838:         assert_array_almost_equal(actual, desired, decimal=14)

846:         assert_array_almost_equal(actual, desired, decimal=15)

849:         assert_equal(np.random.normal(scale=0), 0)

850:         assert_raises(ValueError, np.random.normal, scale=-0.)

865:         np.testing.assert_array_almost_equal_nulp(actual, desired, nulp=30)

873:         assert_array_equal(actual, desired)

878:         assert_raises(ValueError, np.random.poisson, lamneg)

879:         assert_raises(ValueError, np.random.poisson, [lamneg]*10)

880:         assert_raises(ValueError, np.random.poisson, lambig)

881:         assert_raises(ValueError, np.random.poisson, [lambig]*10)

889:         assert_array_almost_equal(actual, desired, decimal=15)

897:         assert_array_almost_equal(actual, desired, decimal=14)

900:         assert_equal(np.random.rayleigh(scale=0), 0)

901:         assert_raises(ValueError, np.random.rayleigh, scale=-0.)

909:         assert_array_almost_equal(actual, desired, decimal=15)

917:         assert_array_almost_equal(actual, desired, decimal=15)

925:         assert_array_almost_equal(actual, desired, decimal=14)

928:         assert_equal(np.random.standard_gamma(shape=0), 0)

929:         assert_raises(ValueError, np.random.standard_gamma, shape=-0.)

937:         assert_array_almost_equal(actual, desired, decimal=15)

945:         assert_array_almost_equal(actual, desired, decimal=15)

954:         assert_array_almost_equal(actual, desired, decimal=14)

962:         assert_array_almost_equal(actual, desired, decimal=15)

969:         assert_raises(OverflowError, func, -np.inf, 0)

970:         assert_raises(OverflowError, func,  0,      np.inf)

971:         assert_raises(OverflowError, func,  fmin,   fmax)

972:         assert_raises(OverflowError, func, [-np.inf], [0])

973:         assert_raises(OverflowError, func, [0], [np.inf])

992:         assert_raises(TypeError, np.random.uniform, throwing_float,

1002:         assert_raises(TypeError, np.random.hypergeometric, throwing_int, 1, 1)

1010:         assert_array_almost_equal(actual, desired, decimal=15)

1016:         np.testing.assert_(np.isfinite(r).all())

1024:         assert_array_almost_equal(actual, desired, decimal=14)

1032:         assert_array_almost_equal(actual, desired, decimal=15)

1036:         assert_equal(np.random.weibull(a=0, size=12), np.zeros(12))

1037:         assert_raises(ValueError, np.random.weibull, a=-0.)

1045:         assert_array_equal(actual, desired)

1070:         assert_array_almost_equal(actual, desired, decimal=14)

1074:         assert_array_almost_equal(actual, desired, decimal=14)

1087:         assert_array_almost_equal(actual, desired, decimal=14)

1088:         assert_raises(ValueError, normal, loc * 3, bad_scale)

1092:         assert_array_almost_equal(actual, desired, decimal=14)

1093:         assert_raises(ValueError, normal, loc, bad_scale * 3)

1107:         assert_array_almost_equal(actual, desired, decimal=14)

1108:         assert_raises(ValueError, beta, bad_a * 3, b)

1109:         assert_raises(ValueError, beta, a * 3, bad_b)

1113:         assert_array_almost_equal(actual, desired, decimal=14)

1114:         assert_raises(ValueError, beta, bad_a, b * 3)

1115:         assert_raises(ValueError, beta, a, bad_b * 3)

1127:         assert_array_almost_equal(actual, desired, decimal=14)

1128:         assert_raises(ValueError, exponential, bad_scale * 3)

1140:         assert_array_almost_equal(actual, desired, decimal=14)

1141:         assert_raises(ValueError, std_gamma, bad_shape * 3)

1155:         assert_array_almost_equal(actual, desired, decimal=14)

1156:         assert_raises(ValueError, gamma, bad_shape * 3, scale)

1157:         assert_raises(ValueError, gamma, shape * 3, bad_scale)

1161:         assert_array_almost_equal(actual, desired, decimal=14)

1162:         assert_raises(ValueError, gamma, bad_shape, scale * 3)

1163:         assert_raises(ValueError, gamma, shape, bad_scale * 3)

1177:         assert_array_almost_equal(actual, desired, decimal=14)

1178:         assert_raises(ValueError, f, bad_dfnum * 3, dfden)

1179:         assert_raises(ValueError, f, dfnum * 3, bad_dfden)

1183:         assert_array_almost_equal(actual, desired, decimal=14)

1184:         assert_raises(ValueError, f, bad_dfnum, dfden * 3)

1185:         assert_raises(ValueError, f, dfnum, bad_dfden * 3)

1201:         assert_array_almost_equal(actual, desired, decimal=14)

1202:         assert_raises(ValueError, nonc_f, bad_dfnum * 3, dfden, nonc)

1203:         assert_raises(ValueError, nonc_f, dfnum * 3, bad_dfden, nonc)

1204:         assert_raises(ValueError, nonc_f, dfnum * 3, dfden, bad_nonc)

1208:         assert_array_almost_equal(actual, desired, decimal=14)

1209:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden * 3, nonc)

1210:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden * 3, nonc)

1211:         assert_raises(ValueError, nonc_f, dfnum, dfden * 3, bad_nonc)

1215:         assert_array_almost_equal(actual, desired, decimal=14)

1216:         assert_raises(ValueError, nonc_f, bad_dfnum, dfden, nonc * 3)

1217:         assert_raises(ValueError, nonc_f, dfnum, bad_dfden, nonc * 3)

1218:         assert_raises(ValueError, nonc_f, dfnum, dfden, bad_nonc * 3)

1224:         assert_array_almost_equal(actual, desired, decimal=14)

1236:         assert_array_almost_equal(actual, desired, decimal=14)

1237:         assert_raises(ValueError, chisquare, bad_df * 3)

1251:         assert_array_almost_equal(actual, desired, decimal=14)

1252:         assert_raises(ValueError, nonc_chi, bad_df * 3, nonc)

1253:         assert_raises(ValueError, nonc_chi, df * 3, bad_nonc)

1257:         assert_array_almost_equal(actual, desired, decimal=14)

1258:         assert_raises(ValueError, nonc_chi, bad_df, nonc * 3)

1259:         assert_raises(ValueError, nonc_chi, df, bad_nonc * 3)

1271:         assert_array_almost_equal(actual, desired, decimal=14)

1272:         assert_raises(ValueError, t, bad_df * 3)

1285:         assert_array_almost_equal(actual, desired, decimal=14)

1286:         assert_raises(ValueError, vonmises, mu * 3, bad_kappa)

1290:         assert_array_almost_equal(actual, desired, decimal=14)

1291:         assert_raises(ValueError, vonmises, mu, bad_kappa * 3)

1303:         assert_array_almost_equal(actual, desired, decimal=14)

1304:         assert_raises(ValueError, pareto, bad_a * 3)

1316:         assert_array_almost_equal(actual, desired, decimal=14)

1317:         assert_raises(ValueError, weibull, bad_a * 3)

1329:         assert_array_almost_equal(actual, desired, decimal=14)

1330:         assert_raises(ValueError, power, bad_a * 3)

1343:         assert_array_almost_equal(actual, desired, decimal=14)

1344:         assert_raises(ValueError, laplace, loc * 3, bad_scale)

1348:         assert_array_almost_equal(actual, desired, decimal=14)

1349:         assert_raises(ValueError, laplace, loc, bad_scale * 3)

1362:         assert_array_almost_equal(actual, desired, decimal=14)

1363:         assert_raises(ValueError, gumbel, loc * 3, bad_scale)

1367:         assert_array_almost_equal(actual, desired, decimal=14)

1368:         assert_raises(ValueError, gumbel, loc, bad_scale * 3)

1381:         assert_array_almost_equal(actual, desired, decimal=14)

1382:         assert_raises(ValueError, logistic, loc * 3, bad_scale)

1386:         assert_array_almost_equal(actual, desired, decimal=14)

1387:         assert_raises(ValueError, logistic, loc, bad_scale * 3)

1400:         assert_array_almost_equal(actual, desired, decimal=14)

1401:         assert_raises(ValueError, lognormal, mean * 3, bad_sigma)

1405:         assert_array_almost_equal(actual, desired, decimal=14)

1406:         assert_raises(ValueError, lognormal, mean, bad_sigma * 3)

1418:         assert_array_almost_equal(actual, desired, decimal=14)

1419:         assert_raises(ValueError, rayleigh, bad_scale * 3)

1433:         assert_array_almost_equal(actual, desired, decimal=14)

1434:         assert_raises(ValueError, wald, bad_mean * 3, scale)

1435:         assert_raises(ValueError, wald, mean * 3, bad_scale)

1439:         assert_array_almost_equal(actual, desired, decimal=14)

1440:         assert_raises(ValueError, wald, bad_mean, scale * 3)

1441:         assert_raises(ValueError, wald, mean, bad_scale * 3)

1442:         assert_raises(ValueError, wald, 0.0, 1)

1443:         assert_raises(ValueError, wald, 0.5, 0.0)

1459:         assert_array_almost_equal(actual, desired, decimal=14)

1460:         assert_raises(ValueError, triangular, bad_left_one * 3, mode, right)

1461:         assert_raises(ValueError, triangular, left * 3, bad_mode_one, right)

1462:         assert_raises(ValueError, triangular, bad_left_two * 3, bad_mode_two,

1467:         assert_array_almost_equal(actual, desired, decimal=14)

1468:         assert_raises(ValueError, triangular, bad_left_one, mode * 3, right)

1469:         assert_raises(ValueError, triangular, left, bad_mode_one * 3, right)

1470:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two * 3,

1475:         assert_array_almost_equal(actual, desired, decimal=14)

1476:         assert_raises(ValueError, triangular, bad_left_one, mode, right * 3)

1477:         assert_raises(ValueError, triangular, left, bad_mode_one, right * 3)

1478:         assert_raises(ValueError, triangular, bad_left_two, bad_mode_two,

1492:         assert_array_equal(actual, desired)

1493:         assert_raises(ValueError, binom, bad_n * 3, p)

1494:         assert_raises(ValueError, binom, n * 3, bad_p_one)

1495:         assert_raises(ValueError, binom, n * 3, bad_p_two)

1499:         assert_array_equal(actual, desired)

1500:         assert_raises(ValueError, binom, bad_n, p * 3)

1501:         assert_raises(ValueError, binom, n, bad_p_one * 3)

1502:         assert_raises(ValueError, binom, n, bad_p_two * 3)

1515:         assert_array_equal(actual, desired)

1516:         assert_raises(ValueError, neg_binom, bad_n * 3, p)

1517:         assert_raises(ValueError, neg_binom, n * 3, bad_p_one)

1518:         assert_raises(ValueError, neg_binom, n * 3, bad_p_two)

1522:         assert_array_equal(actual, desired)

1523:         assert_raises(ValueError, neg_binom, bad_n, p * 3)

1524:         assert_raises(ValueError, neg_binom, n, bad_p_one * 3)

1525:         assert_raises(ValueError, neg_binom, n, bad_p_two * 3)

1538:         assert_array_equal(actual, desired)

1539:         assert_raises(ValueError, poisson, bad_lam_one * 3)

1540:         assert_raises(ValueError, poisson, bad_lam_two * 3)

1550:         assert_array_equal(actual, desired)

1551:         assert_raises(ValueError, zipf, bad_a * 3)

1553:             assert_raises(ValueError, zipf, np.nan)

1554:             assert_raises(ValueError, zipf, [0, 0, np.nan])

1565:         assert_array_equal(actual, desired)

1566:         assert_raises(ValueError, geom, bad_p_one * 3)

1567:         assert_raises(ValueError, geom, bad_p_two * 3)

1582:         assert_array_equal(actual, desired)

1583:         assert_raises(ValueError, hypergeom, bad_ngood * 3, nbad, nsample)

1584:         assert_raises(ValueError, hypergeom, ngood * 3, bad_nbad, nsample)

1585:         assert_raises(ValueError, hypergeom, ngood * 3, nbad, bad_nsample_one)

1586:         assert_raises(ValueError, hypergeom, ngood * 3, nbad, bad_nsample_two)

1590:         assert_array_equal(actual, desired)

1591:         assert_raises(ValueError, hypergeom, bad_ngood, nbad * 3, nsample)

1592:         assert_raises(ValueError, hypergeom, ngood, bad_nbad * 3, nsample)

1593:         assert_raises(ValueError, hypergeom, ngood, nbad * 3, bad_nsample_one)

1594:         assert_raises(ValueError, hypergeom, ngood, nbad * 3, bad_nsample_two)

1598:         assert_array_equal(actual, desired)

1599:         assert_raises(ValueError, hypergeom, bad_ngood, nbad, nsample * 3)

1600:         assert_raises(ValueError, hypergeom, ngood, bad_nbad, nsample * 3)

1601:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_one * 3)

1602:         assert_raises(ValueError, hypergeom, ngood, nbad, bad_nsample_two * 3)

1613:         assert_array_equal(actual, desired)

1614:         assert_raises(ValueError, logseries, bad_p_one * 3)

1615:         assert_raises(ValueError, logseries, bad_p_two * 3)

1641:             assert_array_almost_equal(out1, out2)

1643:             assert_array_equal(out1, out2)

1686:             assert_equal(out.shape, self.tgtShape)

1707:             assert_equal(out.shape, self.tgtShape)

1710:             assert_equal(out.shape, self.tgtShape)

1713:             assert_equal(out.shape, self.tgtShape)

1725: #            self.assert_equal(out.shape, self.tgtShape)

1728: #            self.assert_equal(out.shape, self.tgtShape)

1731: #            self.assert_equal(out.shape, self.tgtShape)

1739:             assert_equal(out.shape, self.tgtShape)

1742:             assert_equal(out.shape, self.tgtShape)

1745:             assert_equal(out.shape, self.tgtShape)

Total asserts: 366

Filename: numpy/random/tests/test_regression.py
3:     assert_, assert_array_equal, assert_raises,

16:             assert_(np.all(r > -np.pi) and np.all(r <= np.pi))

20:         assert_(np.all(np.random.hypergeometric(3, 18, 11, size=10) < 4))

21:         assert_(np.all(np.random.hypergeometric(18, 3, 11, size=10) > 0))

32:             assert_(np.random.hypergeometric(*arg) > 0)

44:         assert_(freq > 0.45, msg)

48:         assert_(freq < 0.23, msg)

60:             assert_array_equal(np.array(shuffled, dtype=object), expected)

70:             assert_array_equal(m.choice(10, size=10, p=np.ones(10)/10.), res)

85:         assert_(not np.any(np.isnan(x)), 'Nans in np.random.beta')

97:             assert_(c in a)

98:             assert_raises(ValueError, np.random.choice, a, p=probs*0.9)

136:         assert_array_equal(perm, np.array([0, 2, 1]))

137:         assert_array_equal(orig, np.arange(3).view(N))

148:         assert_array_equal(perm, np.array([2, 1, 4, 0, 3]))

149:         assert_array_equal(m.__array__(), np.arange(5))

Total asserts: 16

Filename: numpy/random/_examples/cffi/extending.py
40:     assert vals[i] == vals_cffi[i]

Total asserts: 1

Filename: numpy/matrixlib/tests/test_defmatrix.py
6:     assert_, assert_equal, assert_almost_equal, assert_array_equal,

7:     assert_array_almost_equal, assert_raises

16:         assert_(np.all(mA.A == A))

24:         assert_(np.all(B.A == D))

25:         assert_(np.all(C.A == D))

29:         assert_(np.all(bmat([A, E]) == AEresult))

33:         assert_(mvec.shape == (1, 5))

37:         assert_raises(ValueError, matrix, "invalid")

50:         assert_(np.all(bmat("A,A;A,A") == Aresult))

51:         assert_(np.all(bmat("A,A;A,A", ldict={'A'
52:         assert_raises(TypeError, bmat, "A,A;A,A", gdict={'A'
53:         assert_(

56:         assert_(np.all(b2 == mixresult))

71:         assert_array_equal(sum0, M.sum(axis=0))

72:         assert_array_equal(sum1, M.sum(axis=1))

73:         assert_equal(sumall, M.sum())

75:         assert_array_equal(sum0, np.sum(M, axis=0))

76:         assert_array_equal(sum1, np.sum(M, axis=1))

77:         assert_equal(sumall, np.sum(M))

81:         assert_equal(x.prod(), 720)

82:         assert_equal(x.prod(0), matrix([[4, 10, 18]]))

83:         assert_equal(x.prod(1), matrix([[6], [120]]))

85:         assert_equal(np.prod(x), 720)

86:         assert_equal(np.prod(x, axis=0), matrix([[4, 10, 18]]))

87:         assert_equal(np.prod(x, axis=1), matrix([[6], [120]]))

90:         assert_(y.prod() == 0)

94:         assert_equal(x.max(), 6)

95:         assert_equal(x.max(0), matrix([[4, 5, 6]]))

96:         assert_equal(x.max(1), matrix([[3], [6]]))

98:         assert_equal(np.max(x), 6)

99:         assert_equal(np.max(x, axis=0), matrix([[4, 5, 6]]))

100:         assert_equal(np.max(x, axis=1), matrix([[3], [6]]))

104:         assert_equal(x.min(), 1)

105:         assert_equal(x.min(0), matrix([[1, 2, 3]]))

106:         assert_equal(x.min(1), matrix([[1], [4]]))

108:         assert_equal(np.min(x), 1)

109:         assert_equal(np.min(x, axis=0), matrix([[1, 2, 3]]))

110:         assert_equal(np.min(x, axis=1), matrix([[1], [4]]))

114:         assert_(x.ptp() == 3)

115:         assert_(np.all(x.ptp(0) == np.array([2, 2])))

116:         assert_(np.all(x.ptp(1) == np.array([1, 1])))

121:         assert_equal(x.var(ddof=0), mx.var(ddof=0))

122:         assert_equal(x.var(ddof=1), mx.var(ddof=1))

130:         assert_(np.allclose(linalg.inv(A), mA.I))

131:         assert_(np.all(np.array(np.transpose(A) == mA.T)))

132:         assert_(np.all(np.array(np.transpose(A) == mA.H)))

133:         assert_(np.all(A == mA.A))

137:         assert_(np.allclose(linalg.inv(B), mB.I))

138:         assert_(np.all(np.array(np.transpose(B) == mB.T)))

139:         assert_(np.all(np.array(np.transpose(B).conj() == mB.H)))

146:         assert_almost_equal(x.I, xpinv)

152:         assert_(np.all(mB == A+0.1))

153:         assert_(np.all(mB == matrix(A+0.1)))

154:         assert_(not np.any(mB == matrix(A-0.1)))

155:         assert_(np.all(mA < mB))

156:         assert_(np.all(mA <= mB))

157:         assert_(np.all(mA <= mA))

158:         assert_(not np.any(mA < mA))

160:         assert_(not np.any(mB < mA))

161:         assert_(np.all(mB >= mA))

162:         assert_(np.all(mB >= mB))

163:         assert_(not np.any(mB > mB))

165:         assert_(np.all(mA == mA))

166:         assert_(not np.any(mA == mB))

167:         assert_(np.all(mB != mA))

169:         assert_(not np.all(abs(mA) > 0))

170:         assert_(np.all(abs(mB > 0)))

176:         assert_(A[0, 0] == mA[0, 0])

180:         assert_(A.sum() == matrix(2))

181:         assert_(A.mean() == matrix(0.5))

185:         assert_(repr(A) == "matrix([[1, 0],\n        [0, 1]])")

190:         assert_array_equal(A, B)

200:         assert_(mB.dtype.type == np.float64)

201:         assert_(np.all(mA != mB))

202:         assert_(np.all(mB == mA+0.1))

207:         assert_(mC.dtype.type == np.complex128)

208:         assert_(np.all(mA != mB))

220:             assert_(np.allclose((mA ** i).A, B))

226:             assert_(np.allclose((mA ** -i).A, B))

229:         assert_(np.allclose((mA * mA).A, np.dot(A, A)))

230:         assert_(np.allclose((mA + mA).A, (A + A)))

231:         assert_(np.allclose((3*mA).A, (3*A)))

235:         assert_(np.allclose(mA2.A, 3*A))

246:         assert_array_almost_equal(m2, m**2)

247:         assert_array_almost_equal(m4, np.dot(m2, m2))

248:         assert_array_almost_equal(np.dot(mi, m), np.eye(2))

254:             assert_array_almost_equal(m ** 2, m ** two)

262:         with assert_raises(TypeError)
266:         with assert_raises(TypeError)
304:                 assert_(type(b) is matrix, "%s" % attrib)

305:         assert_(type(a.real) is matrix)

306:         assert_(type(a.imag) is matrix)

308:         assert_(type(c) is np.ndarray)

309:         assert_(type(d) is np.ndarray)

318:         assert_equal(x, [[0, 1], [0, 0], [0, 0]])

327:         assert_equal(x.ndim, 2)

332:         assert_equal(x.shape, [2, 2, 2])

336:         assert_equal(a.tolist(), [[1, 2], [3, 4]])

341:         assert_(isinstance(x, matrix))

342:         assert_equal(x, matrix([[3,  4,  3]]))

344:         assert_(isinstance(x, matrix))

345:         assert_equal(x, matrix([[3,  4], [1, 2]]))

347:         assert_(isinstance(x, matrix))

348:         assert_equal(x, matrix([[4,  3], [1,  2]]))

352:         assert_equal(x[0][0], matrix([[1, 2, 3]]))

353:         assert_equal(x[0][0].shape, (1, 3))

354:         assert_equal(x[0].shape, (1, 3))

355:         assert_equal(x[
358:         assert_equal(x[0, 0], 0)

359:         assert_equal(x[0], 0)

360:         assert_equal(x[
364:         assert_equal(x[0, 0], x[0][0])

368:         assert_array_equal(x[0,
369:         assert_array_equal(x[1,
370:         assert_array_equal(x[
371:         assert_array_equal(x[
377:         assert_array_equal(x[
378:         assert_array_equal(x[np.array([True, False, False]),
384:         assert_array_equal(x[
385:         assert_array_equal(x[[2, 1, 0],
391:         assert_(type(matrix_power(a, 2)) is np.ndarray)

393:         assert_(type(matrix_power(a, 2)) is matrix)

396:         assert_array_equal(matrix_power([[0, 1], [0, 0]], 2), [[0, 0], [0, 0]])

405:         assert_equal(self.a.shape, (2, 1))

406:         assert_equal(self.m.shape, (2, 1))

409:         assert_equal(np.ravel(self.a).shape, (2,))

410:         assert_equal(np.ravel(self.m).shape, (2,))

413:         assert_equal(self.a.ravel().shape, (2,))

414:         assert_equal(self.m.ravel().shape, (1, 2))

417:         assert_equal(self.a.flatten().shape, (2,))

418:         assert_equal(self.m.flatten().shape, (1, 2))

422:         assert_equal(np.ravel(x), [1, 2, 3, 4, 5, 6])

423:         assert_equal(np.ravel(x, order='F'), [1, 4, 2, 5, 3, 6])

424:         assert_equal(np.ravel(x.T), [1, 4, 2, 5, 3, 6])

425:         assert_equal(np.ravel(x.T, order='A'), [1, 2, 3, 4, 5, 6])

427:         assert_equal(np.ravel(x), [1, 2, 3, 4, 5, 6])

428:         assert_equal(np.ravel(x, order='F'), [1, 4, 2, 5, 3, 6])

429:         assert_equal(np.ravel(x.T), [1, 4, 2, 5, 3, 6])

430:         assert_equal(np.ravel(x.T, order='A'), [1, 2, 3, 4, 5, 6])

434:         assert_equal(x.ravel(), [[1, 2, 3, 4, 5, 6]])

435:         assert_equal(x.ravel(order='F'), [[1, 4, 2, 5, 3, 6]])

436:         assert_equal(x.T.ravel(), [[1, 4, 2, 5, 3, 6]])

437:         assert_equal(x.T.ravel(order='A'), [[1, 2, 3, 4, 5, 6]])

440:         assert_(np.may_share_memory(self.a, self.a.ravel()))

441:         assert_(not np.may_share_memory(self.a, self.a.flatten()))

444:         assert_(np.may_share_memory(self.m, self.m.ravel()))

445:         assert_(not np.may_share_memory(self.m, self.m.flatten()))

452:         assert_equal(expanded.ndim, 3)

453:         assert_(not isinstance(expanded, np.matrix))

Total asserts: 149

Filename: numpy/matrixlib/tests/test_interaction.py
11: from numpy.testing import (assert_, assert_equal, assert_raises,

12:                            assert_raises_regex, assert_array_equal,

13:                            assert_almost_equal, assert_array_almost_equal)

23:     assert_(isinstance(m[[0, 1, 0], 
28:     assert_equal(x[
38:     assert_(isinstance(res, np.matrix))

46:     assert_equal(actual, expected)

47:     assert_(type(expected) is np.matrix)

56:     assert_equal(actual, expected)

57:     assert_(type(expected) is np.matrix)

65:     assert_equal(np.dot(arr, 3), desired)

66:     assert_equal(np.dot(3, arr), desired)

75:         assert_equal(np.inner(arr, sca), desired)

76:         assert_equal(np.inner(sca, arr), desired)

84:     assert_equal(np.inner(arr, 3), desired)

85:     assert_equal(np.inner(3, arr), desired)

98:     assert_(type(i.operands[2]) is np.matrix)

99:     assert_(type(i.operands[2]) is not np.ndarray)

100:     assert_equal(i.operands[2].shape, (2, 2))

104:     assert_raises(RuntimeError, np.nditer, [a, b, None], [],

110:     assert_(type(i.operands[2]) is np.ndarray)

111:     assert_(type(i.operands[2]) is not np.matrix)

112:     assert_equal(i.operands[2].shape, (1, 2, 2))

120:         assert_(type(b) is np.matrix)

123:         assert_(type(c) is not np.matrix)

131:     assert_(a is b)

135:     assert_equal(a, b)

136:     assert_equal(type(b), np.matrix)

140:     assert_equal(a, b)

141:     assert_(not (a is b))

142:     assert_(type(b) is not np.matrix)

149:     assert_raises_regex(ValueError, 'shape too large to be a matrix',

158:     assert_equal(np.multiply(arr, 3), desired)

159:     assert_equal(np.multiply(3, arr), desired)

169:         assert_(isinstance(res, np.matrix))

170:         assert_(res.shape == (1, 3))

172:         assert_(isinstance(res, np.matrix))

173:         assert_(res.shape == (3, 1))

175:         assert_(np.isscalar(res))

182:             assert_(isinstance(res, np.matrix))

183:             assert_(not np.any(np.isnan(res)))

184:             assert_(len(w) == 0)

189:             assert_(isinstance(res, np.matrix))

190:             assert_(np.isnan(res[1, 0]) and not np.isnan(res[0, 0])

192:             assert_(len(w) == 1, 'no warning raised')

193:             assert_(issubclass(w[0].category, RuntimeWarning))

198:             assert_(np.isscalar(res))

199:             assert_(res != np.nan)

200:             assert_(len(w) == 0)

211:         assert_(isinstance(res, np.matrix))

212:         assert_(res.shape == (1, 3))

214:         assert_(isinstance(res, np.matrix))

215:         assert_(res.shape == (3, 1))

217:         assert_(np.isscalar(res))

221:         assert_(isinstance(res, np.matrix))

222:         assert_(res.shape == (3, 3))

224:         assert_(isinstance(res, np.matrix))

225:         assert_(res.shape == (3, 3))

227:         assert_(isinstance(res, np.matrix))

228:         assert_(res.shape == (1, 3*3))

234:     assert_array_equal(y.mean(0), np.average(y, 0))

240:     assert_equal(type(r), np.matrix)

241:     assert_equal(r, [[2.5, 10.0/3]])

253:     assert_almost_equal(mr, r)

258:     assert(isinstance(np.ediff1d(np.matrix(1)), np.matrix))

259:     assert(isinstance(np.ediff1d(np.matrix(1), to_begin=1), np.matrix))

273:     assert_(isinstance(result, np.matrix))

274:     assert_array_equal(result, expected)

277:     assert_(isinstance(result, np.matrix))

278:     assert_array_equal(result, expected)

285:     assert_equal(type(np.kron(a, a)), np.ndarray)

286:     assert_equal(type(np.kron(m, m)), np.matrix)

287:     assert_equal(type(np.kron(a, m)), np.matrix)

288:     assert_equal(type(np.kron(m, a)), np.matrix)

300:         assert_equal(type(ab_r), np.matrix)

301:         assert_equal(type(ab_c), np.matrix)

303:         assert_equal(np.array(ab_r), [[1, 2, 3, 4]])

304:         assert_equal(np.array(ab_c), [[1], [2], [3], [4]])

306:         assert_raises(ValueError, lambda
310:         assert_equal(type(r), np.matrix)

311:         assert_equal(np.array(r), [[1, 2, 3]])

321:         assert_equal(actual, expected)

322:         assert_equal(type(actual), type(expected))

328:         assert_equal(np.array([1, 2]), np.matrix([1, 2]))

337:     assert_equal(msg, msg_reference)

349:     for assert_func in assert_array_almost_equal, assert_almost_equal
351:             assert_func(m, m)

353:             assert_func(a, m)

354:             assert_func(m, a)

Total asserts: 89

Filename: numpy/matrixlib/tests/test_numeric.py
2: from numpy.testing import assert_equal

7:         assert_equal(b1*1.0, b1)

15:     assert_equal(b1.diagonal(), diag_b1)

16:     assert_equal(np.diagonal(b1), array_b1)

17:     assert_equal(np.diag(b1), array_b1)

Total asserts: 5

Filename: numpy/matrixlib/tests/test_masked_matrix.py
2: from numpy.testing import assert_warns

3: from numpy.ma.testutils import (assert_, assert_equal, assert_raises,

4:                                 assert_array_equal)

42:         assert_(type(x2[1, 0]) is type(x1[1, 0]))

43:         assert_(x1[1, 0] == x2[1, 0])

44:         assert_(x2[1, 1] is masked)

45:         assert_equal(x1[0, 2], x2[0, 2])

46:         assert_equal(x1[0, 1
47:         assert_equal(x1[
48:         assert_equal(x1[
49:         assert_equal(x1[1
52:         assert_equal(x1, x2)

55:         assert_equal(x1, x2)

57:         assert_equal(x1, x2)

59:         assert_equal(x1, x2)

62:         assert_(allequal(getmask(x2), np.array([[0, 1, 0], [0, 1, 0]])))

64:         assert_(allequal(getmask(x3)[1], masked_array([1, 1, 0])))

65:         assert_(allequal(getmask(x3[1]), masked_array([1, 1, 0])))

67:         assert_(allequal(getmask(x4[1]), masked_array([1, 1, 0])))

68:         assert_(allequal(x4[1], masked_array([1, 2, 3])))

71:         assert_equal(x1, x2)

72:         assert_(allequal(masked_array([0, 0, 0, 1, 0], dtype=MaskType),

74:         assert_equal(3.0, x2.fill_value)

81:             assert_equal(a_pickled._mask, a._mask)

82:             assert_equal(a_pickled, a)

83:             assert_(isinstance(a_pickled._data, np.matrix))

88:         assert_equal(m.count(axis=0).shape, (1, 2))

89:         assert_equal(m.count(axis=1).shape, (2, 1))

92:         assert_equal(m.mean(axis=0), [[2., 3.]])

93:         assert_equal(m.mean(axis=1), [[1.5], [3.5]])

99:         assert_equal(test.flat[1], 2)

100:         assert_equal(test.flat[2], masked)

101:         assert_(np.all(test.flat[0
106:         assert_equal(test, control)

111:         assert_equal(test, control)

117:         assert_equal(b01.data, np.array([[1., 0.]]))

118:         assert_equal(b01.mask, np.array([[False, False]]))

132:         assert_(not mXbig.all())

133:         assert_(mXbig.any())

134:         assert_equal(mXbig.all(0), np.matrix([False, False, True]))

135:         assert_equal(mXbig.all(1), np.matrix([False, False, True]).T)

136:         assert_equal(mXbig.any(0), np.matrix([False, False, True]))

137:         assert_equal(mXbig.any(1), np.matrix([True, True, True]).T)

139:         assert_(not mXsmall.all())

140:         assert_(mXsmall.any())

141:         assert_equal(mXsmall.all(0), np.matrix([True, True, False]))

142:         assert_equal(mXsmall.all(1), np.matrix([False, False, False]).T)

143:         assert_equal(mXsmall.any(0), np.matrix([True, True, False]))

144:         assert_equal(mXsmall.any(1), np.matrix([True, True, False]).T)

149:         assert_equal(b, a)

150:         assert_(isinstance(b, np.matrix))

153:         assert_equal(b, [[2, 3, 4]])

158:         assert_equal(aravel.shape, (1, 5))

159:         assert_equal(aravel._mask.shape, a.shape)

168:         assert_equal(test, data)

169:         assert_(isinstance(test, np.matrix))

170:         assert_(not isinstance(test, MaskedArray))

184:         assert_(isinstance(mx._data, np.matrix))

190:             assert_(isinstance(log(mx), MMatrix))

191:             assert_equal(log(x), np.log(x))

197:         assert_(isinstance(add(mx, mx), MMatrix))

198:         assert_(isinstance(add(mx, x), MMatrix))

200:         assert_equal(add(mx, x), mx+x)

201:         assert_(isinstance(add(mx, mx)._data, np.matrix))

202:         with assert_warns(DeprecationWarning)
203:             assert_(isinstance(add.outer(mx, mx), MMatrix))

204:         assert_(isinstance(hypot(mx, mx), MMatrix))

205:         assert_(isinstance(hypot(mx, x), MMatrix))

211:         assert_(isinstance(divide(mx, mx), MMatrix))

212:         assert_(isinstance(divide(mx, x), MMatrix))

213:         assert_equal(divide(mx, mx), divide(xmx, xmx))

219:         assert_raises(np.ma.MAError, lambda
227:         assert_array_equal(actual, expected)

230:         assert_equal(type(actual), type(expected))

231:         assert_equal(type(actual.data), type(expected.data))

Total asserts: 75

Filename: numpy/matrixlib/tests/test_multiarray.py
2: from numpy.testing import assert_, assert_equal, assert_array_equal

7:         assert_(isinstance(x.view(np.matrix), np.matrix))

13:         assert_array_equal(y, [[513]])

15:         assert_(isinstance(y, np.matrix))

16:         assert_equal(y.dtype, np.dtype('<i2'))

Total asserts: 5

Filename: numpy/matrixlib/tests/test_regression.py
2: from numpy.testing import assert_, assert_equal, assert_raises

9:         assert_equal(type(np.kron(x, x)), type(x))

14:         assert_(type(a.real) is np.matrix)

15:         assert_(type(a.imag) is np.matrix)

17:         assert_(type(c) is np.ndarray)

18:         assert_(type(d) is np.ndarray)

25:         assert_raises(ValueError, mul)

30:         assert_equal(x.std().shape, ())

31:         assert_equal(x.argmax().shape, ())

Total asserts: 9

Filename: numpy/polynomial/tests/test_chebyshev.py
10:     assert_almost_equal, assert_raises, assert_equal, assert_,

38:             assert_equal(res, tgt)

45:             assert_equal(res, tgt)

51:         assert_equal(cheb.chebdomain, [-1, 1])

54:         assert_equal(cheb.chebzero, [0])

57:         assert_equal(cheb.chebone, [1])

60:         assert_equal(cheb.chebx, [0, 1])

73:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

83:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

86:         assert_equal(cheb.chebmulx([0]), [0])

87:         assert_equal(cheb.chebmulx([1]), [0, 1])

91:             assert_equal(cheb.chebmulx(ser), tgt)

101:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

112:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

121:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

136:         assert_equal(cheb.chebval([], [1]).size, 0)

145:             assert_almost_equal(res, tgt, err_msg=msg)

151:             assert_equal(cheb.chebval(x, [1]).shape, dims)

152:             assert_equal(cheb.chebval(x, [1, 0]).shape, dims)

153:             assert_equal(cheb.chebval(x, [1, 0, 0]).shape, dims)

160:         assert_raises(ValueError, cheb.chebval2d, x1, x2[
165:         assert_almost_equal(res, tgt)

170:         assert_(res.shape == (2, 3))

177:         assert_raises(ValueError, cheb.chebval3d, x1, x2, x3[
182:         assert_almost_equal(res, tgt)

187:         assert_(res.shape == (2, 3))

196:         assert_almost_equal(res, tgt)

201:         assert_(res.shape == (2, 3)*2)

210:         assert_almost_equal(res, tgt)

215:         assert_(res.shape == (2, 3)*3)

222:         assert_raises(TypeError, cheb.chebint, [0], .5)

223:         assert_raises(ValueError, cheb.chebint, [0], -1)

224:         assert_raises(ValueError, cheb.chebint, [0], 1, [0, 0])

225:         assert_raises(ValueError, cheb.chebint, [0], lbnd=[0])

226:         assert_raises(ValueError, cheb.chebint, [0], scl=[0])

227:         assert_raises(TypeError, cheb.chebint, [0], axis=.5)

233:             assert_almost_equal(res, [0, 1])

243:             assert_almost_equal(trim(res), trim(tgt))

251:             assert_almost_equal(cheb.chebval(-1, chebint), i)

261:             assert_almost_equal(trim(res), trim(tgt))

271:                 assert_almost_equal(trim(res), trim(tgt))

281:                 assert_almost_equal(trim(res), trim(tgt))

291:                 assert_almost_equal(trim(res), trim(tgt))

301:                 assert_almost_equal(trim(res), trim(tgt))

309:         assert_almost_equal(res, tgt)

313:         assert_almost_equal(res, tgt)

317:         assert_almost_equal(res, tgt)

324:         assert_raises(TypeError, cheb.chebder, [0], .5)

325:         assert_raises(ValueError, cheb.chebder, [0], -1)

331:             assert_equal(trim(res), trim(tgt))

338:                 assert_almost_equal(trim(res), trim(tgt))

345:                 assert_almost_equal(trim(res), trim(tgt))

353:         assert_almost_equal(res, tgt)

357:         assert_almost_equal(res, tgt)

368:         assert_(v.shape == (3, 4))

371:             assert_almost_equal(v[..., i], cheb.chebval(x, coef))

376:         assert_(v.shape == (3, 2, 4))

379:             assert_almost_equal(v[..., i], cheb.chebval(x, coef))

388:         assert_almost_equal(res, tgt)

392:         assert_(van.shape == (1, 5, 6))

401:         assert_almost_equal(res, tgt)

405:         assert_(van.shape == (1, 5, 24))

418:         assert_raises(ValueError, cheb.chebfit, [1], [1], -1)

419:         assert_raises(TypeError, cheb.chebfit, [[1]], [1], 0)

420:         assert_raises(TypeError, cheb.chebfit, [], [1], 0)

421:         assert_raises(TypeError, cheb.chebfit, [1], [[[1]]], 0)

422:         assert_raises(TypeError, cheb.chebfit, [1, 2], [1], 0)

423:         assert_raises(TypeError, cheb.chebfit, [1], [1, 2], 0)

424:         assert_raises(TypeError, cheb.chebfit, [1], [1], 0, w=[[1]])

425:         assert_raises(TypeError, cheb.chebfit, [1], [1], 0, w=[1, 1])

426:         assert_raises(ValueError, cheb.chebfit, [1], [1], [-1,])

427:         assert_raises(ValueError, cheb.chebfit, [1], [1], [2, -1, 6])

428:         assert_raises(TypeError, cheb.chebfit, [1], [1], [])

435:         assert_equal(len(coef3), 4)

436:         assert_almost_equal(cheb.chebval(x, coef3), y)

438:         assert_equal(len(coef3), 4)

439:         assert_almost_equal(cheb.chebval(x, coef3), y)

442:         assert_equal(len(coef4), 5)

443:         assert_almost_equal(cheb.chebval(x, coef4), y)

445:         assert_equal(len(coef4), 5)

446:         assert_almost_equal(cheb.chebval(x, coef4), y)

449:         assert_equal(len(coef4), 5)

450:         assert_almost_equal(cheb.chebval(x, coef4), y)

453:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

455:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

462:         assert_almost_equal(wcoef3, coef3)

464:         assert_almost_equal(wcoef3, coef3)

467:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

469:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

473:         assert_almost_equal(cheb.chebfit(x, x, 1), [0, 1])

474:         assert_almost_equal(cheb.chebfit(x, x, [0, 1]), [0, 1])

479:         assert_almost_equal(cheb.chebval(x, coef1), y)

481:         assert_almost_equal(cheb.chebval(x, coef2), y)

482:         assert_almost_equal(coef1, coef2)

491:         assert_raises(ValueError, cheb.chebinterpolate, self.f, -1)

492:         assert_raises(TypeError, cheb.chebinterpolate, self.f, 10.)

496:             assert_(cheb.chebinterpolate(self.f, deg).shape == (deg + 1,))

507:                 assert_almost_equal(cheb.chebval(x, c), powx(x, p), decimal=12)

513:         assert_raises(ValueError, cheb.chebcompanion, [])

514:         assert_raises(ValueError, cheb.chebcompanion, [1])

519:             assert_(cheb.chebcompanion(coef).shape == (i, i))

522:         assert_(cheb.chebcompanion([1, 2])[0, 0] == -.5)

537:         assert_almost_equal(vv, np.eye(100))

541:         assert_almost_equal(w.sum(), tgt)

548:         assert_almost_equal(trim(res), [1])

553:             assert_almost_equal(trim(res), trim(tgt))

556:         assert_almost_equal(cheb.chebroots([1]), [])

557:         assert_almost_equal(cheb.chebroots([1, 2]), [-.5])

561:             assert_almost_equal(trim(res), trim(tgt))

567:         assert_raises(ValueError, cheb.chebtrim, coef, -1)

570:         assert_equal(cheb.chebtrim(coef), coef[
571:         assert_equal(cheb.chebtrim(coef, 1), coef[
572:         assert_equal(cheb.chebtrim(coef, 2), [0])

575:         assert_equal(cheb.chebline(3, 4), [3, 4])

579:             assert_almost_equal(cheb.cheb2poly([0]*i + [1]), Tlist[i])

583:             assert_almost_equal(cheb.poly2cheb(Tlist[i]), [0]*i + [1])

589:         assert_almost_equal(res, tgt)

593:         assert_raises(ValueError, cheb.chebpts1, 1.5)

594:         assert_raises(ValueError, cheb.chebpts1, 0)

598:         assert_almost_equal(cheb.chebpts1(1), tgt)

600:         assert_almost_equal(cheb.chebpts1(2), tgt)

602:         assert_almost_equal(cheb.chebpts1(3), tgt)

604:         assert_almost_equal(cheb.chebpts1(4), tgt)

608:         assert_raises(ValueError, cheb.chebpts2, 1.5)

609:         assert_raises(ValueError, cheb.chebpts2, 1)

613:         assert_almost_equal(cheb.chebpts2(2), tgt)

615:         assert_almost_equal(cheb.chebpts2(3), tgt)

617:         assert_almost_equal(cheb.chebpts2(4), tgt)

619:         assert_almost_equal(cheb.chebpts2(5), tgt)

Total asserts: 129

Filename: numpy/polynomial/tests/test_hermite_e.py
10:     assert_almost_equal, assert_raises, assert_equal, assert_,

34:         assert_equal(herme.hermedomain, [-1, 1])

37:         assert_equal(herme.hermezero, [0])

40:         assert_equal(herme.hermeone, [1])

43:         assert_equal(herme.hermex, [0, 1])

57:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

67:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

70:         assert_equal(herme.hermemulx([0]), [0])

71:         assert_equal(herme.hermemulx([1]), [0, 1])

75:             assert_equal(herme.hermemulx(ser), tgt)

88:                 assert_(len(pol3) == i + j + 1, msg)

89:                 assert_almost_equal(val3, val1*val2, err_msg=msg)

100:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

109:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

124:         assert_equal(herme.hermeval([], [1]).size, 0)

133:             assert_almost_equal(res, tgt, err_msg=msg)

139:             assert_equal(herme.hermeval(x, [1]).shape, dims)

140:             assert_equal(herme.hermeval(x, [1, 0]).shape, dims)

141:             assert_equal(herme.hermeval(x, [1, 0, 0]).shape, dims)

148:         assert_raises(ValueError, herme.hermeval2d, x1, x2[
153:         assert_almost_equal(res, tgt)

158:         assert_(res.shape == (2, 3))

165:         assert_raises(ValueError, herme.hermeval3d, x1, x2, x3[
170:         assert_almost_equal(res, tgt)

175:         assert_(res.shape == (2, 3))

184:         assert_almost_equal(res, tgt)

189:         assert_(res.shape == (2, 3)*2)

198:         assert_almost_equal(res, tgt)

203:         assert_(res.shape == (2, 3)*3)

210:         assert_raises(TypeError, herme.hermeint, [0], .5)

211:         assert_raises(ValueError, herme.hermeint, [0], -1)

212:         assert_raises(ValueError, herme.hermeint, [0], 1, [0, 0])

213:         assert_raises(ValueError, herme.hermeint, [0], lbnd=[0])

214:         assert_raises(ValueError, herme.hermeint, [0], scl=[0])

215:         assert_raises(TypeError, herme.hermeint, [0], axis=.5)

221:             assert_almost_equal(res, [0, 1])

231:             assert_almost_equal(trim(res), trim(tgt))

239:             assert_almost_equal(herme.hermeval(-1, hermeint), i)

249:             assert_almost_equal(trim(res), trim(tgt))

259:                 assert_almost_equal(trim(res), trim(tgt))

269:                 assert_almost_equal(trim(res), trim(tgt))

279:                 assert_almost_equal(trim(res), trim(tgt))

289:                 assert_almost_equal(trim(res), trim(tgt))

297:         assert_almost_equal(res, tgt)

301:         assert_almost_equal(res, tgt)

305:         assert_almost_equal(res, tgt)

312:         assert_raises(TypeError, herme.hermeder, [0], .5)

313:         assert_raises(ValueError, herme.hermeder, [0], -1)

319:             assert_equal(trim(res), trim(tgt))

326:                 assert_almost_equal(trim(res), trim(tgt))

334:                 assert_almost_equal(trim(res), trim(tgt))

342:         assert_almost_equal(res, tgt)

346:         assert_almost_equal(res, tgt)

357:         assert_(v.shape == (3, 4))

360:             assert_almost_equal(v[..., i], herme.hermeval(x, coef))

365:         assert_(v.shape == (3, 2, 4))

368:             assert_almost_equal(v[..., i], herme.hermeval(x, coef))

377:         assert_almost_equal(res, tgt)

381:         assert_(van.shape == (1, 5, 6))

390:         assert_almost_equal(res, tgt)

394:         assert_(van.shape == (1, 5, 24))

407:         assert_raises(ValueError, herme.hermefit, [1], [1], -1)

408:         assert_raises(TypeError, herme.hermefit, [[1]], [1], 0)

409:         assert_raises(TypeError, herme.hermefit, [], [1], 0)

410:         assert_raises(TypeError, herme.hermefit, [1], [[[1]]], 0)

411:         assert_raises(TypeError, herme.hermefit, [1, 2], [1], 0)

412:         assert_raises(TypeError, herme.hermefit, [1], [1, 2], 0)

413:         assert_raises(TypeError, herme.hermefit, [1], [1], 0, w=[[1]])

414:         assert_raises(TypeError, herme.hermefit, [1], [1], 0, w=[1, 1])

415:         assert_raises(ValueError, herme.hermefit, [1], [1], [-1,])

416:         assert_raises(ValueError, herme.hermefit, [1], [1], [2, -1, 6])

417:         assert_raises(TypeError, herme.hermefit, [1], [1], [])

424:         assert_equal(len(coef3), 4)

425:         assert_almost_equal(herme.hermeval(x, coef3), y)

427:         assert_equal(len(coef3), 4)

428:         assert_almost_equal(herme.hermeval(x, coef3), y)

431:         assert_equal(len(coef4), 5)

432:         assert_almost_equal(herme.hermeval(x, coef4), y)

434:         assert_equal(len(coef4), 5)

435:         assert_almost_equal(herme.hermeval(x, coef4), y)

438:         assert_equal(len(coef4), 5)

439:         assert_almost_equal(herme.hermeval(x, coef4), y)

442:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

444:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

451:         assert_almost_equal(wcoef3, coef3)

453:         assert_almost_equal(wcoef3, coef3)

456:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

458:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

462:         assert_almost_equal(herme.hermefit(x, x, 1), [0, 1])

463:         assert_almost_equal(herme.hermefit(x, x, [0, 1]), [0, 1])

468:         assert_almost_equal(herme.hermeval(x, coef1), y)

470:         assert_almost_equal(herme.hermeval(x, coef2), y)

471:         assert_almost_equal(coef1, coef2)

477:         assert_raises(ValueError, herme.hermecompanion, [])

478:         assert_raises(ValueError, herme.hermecompanion, [1])

483:             assert_(herme.hermecompanion(coef).shape == (i, i))

486:         assert_(herme.hermecompanion([1, 2])[0, 0] == -.5)

501:         assert_almost_equal(vv, np.eye(100))

505:         assert_almost_equal(w.sum(), tgt)

512:         assert_almost_equal(trim(res), [1])

518:             assert_(len(pol) == i + 1)

519:             assert_almost_equal(herme.herme2poly(pol)[-1], 1)

520:             assert_almost_equal(res, tgt)

523:         assert_almost_equal(herme.hermeroots([1]), [])

524:         assert_almost_equal(herme.hermeroots([1, 1]), [-1])

528:             assert_almost_equal(trim(res), trim(tgt))

534:         assert_raises(ValueError, herme.hermetrim, coef, -1)

537:         assert_equal(herme.hermetrim(coef), coef[
538:         assert_equal(herme.hermetrim(coef, 1), coef[
539:         assert_equal(herme.hermetrim(coef, 2), [0])

542:         assert_equal(herme.hermeline(3, 4), [3, 4])

546:             assert_almost_equal(herme.herme2poly([0]*i + [1]), Helist[i])

550:             assert_almost_equal(herme.poly2herme(Helist[i]), [0]*i + [1])

556:         assert_almost_equal(res, tgt)

Total asserts: 114

Filename: numpy/polynomial/tests/test_polynomial.py
9:     assert_almost_equal, assert_raises, assert_equal, assert_,

10:     assert_warns, assert_array_equal, assert_raises_regex)

33:         assert_equal(poly.polydomain, [-1, 1])

36:         assert_equal(poly.polyzero, [0])

39:         assert_equal(poly.polyone, [1])

42:         assert_equal(poly.polyx, [0, 1])

55:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

65:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

68:         assert_equal(poly.polymulx([0]), [0])

69:         assert_equal(poly.polymulx([1]), [0, 1])

73:             assert_equal(poly.polymulx(ser), tgt)

82:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

86:         assert_raises(ZeroDivisionError, poly.polydiv, [1], [0])

90:         assert_equal((quo, rem), (1, 0))

92:         assert_equal((quo, rem), ((1, 1), 0))

103:                 assert_equal(res, tgt, err_msg=msg)

112:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

127:         assert_equal(poly.polyval([], [1]).size, 0)

135:             assert_almost_equal(res, tgt)

138:         assert_almost_equal(res, tgt)

144:             assert_equal(poly.polyval(x, [1]).shape, dims)

145:             assert_equal(poly.polyval(x, [1, 0]).shape, dims)

146:             assert_equal(poly.polyval(x, [1, 0, 0]).shape, dims)

152:         assert_array_equal(res.mask, mask)

159:         assert_equal(type(np.polyval([2, 3, 4], cx)), C)

164:         assert_raises(ValueError, poly.polyvalfromroots,

168:         assert_equal(poly.polyvalfromroots([], [1]).size, 0)

169:         assert_(poly.polyvalfromroots([], [1]).shape == (0,))

172:         assert_equal(poly.polyvalfromroots([], [[1] * 5]).size, 0)

173:         assert_(poly.polyvalfromroots([], [[1] * 5]).shape == (5, 0))

176:         assert_equal(poly.polyvalfromroots(1, 1), 0)

177:         assert_(poly.polyvalfromroots(1, np.ones((3, 3))).shape == (3,))

185:             assert_almost_equal(res, tgt)

188:         assert_almost_equal(res, tgt)

194:             assert_equal(poly.polyvalfromroots(x, [1]).shape, dims)

195:             assert_equal(poly.polyvalfromroots(x, [1, 0]).shape, dims)

196:             assert_equal(poly.polyvalfromroots(x, [1, 0, 0]).shape, dims)

202:         assert_almost_equal(poly.polyval(x, ptest),

214:         assert_equal(res, tgt)

223:         assert_equal(res, tgt)

230:         assert_raises_regex(ValueError, 'incompatible',

236:         assert_almost_equal(res, tgt)

241:         assert_(res.shape == (2, 3))

248:         assert_raises_regex(ValueError, 'incompatible',

254:         assert_almost_equal(res, tgt)

259:         assert_(res.shape == (2, 3))

268:         assert_almost_equal(res, tgt)

273:         assert_(res.shape == (2, 3)*2)

282:         assert_almost_equal(res, tgt)

287:         assert_(res.shape == (2, 3)*3)

294:         assert_raises(TypeError, poly.polyint, [0], .5)

295:         assert_raises(ValueError, poly.polyint, [0], -1)

296:         assert_raises(ValueError, poly.polyint, [0], 1, [0, 0])

297:         assert_raises(ValueError, poly.polyint, [0], lbnd=[0])

298:         assert_raises(ValueError, poly.polyint, [0], scl=[0])

299:         assert_raises(TypeError, poly.polyint, [0], axis=.5)

300:         with assert_warns(DeprecationWarning)
307:             assert_almost_equal(res, [0, 1])

315:             assert_almost_equal(trim(res), trim(tgt))

322:             assert_almost_equal(poly.polyval(-1, res), i)

330:             assert_almost_equal(trim(res), trim(tgt))

340:                 assert_almost_equal(trim(res), trim(tgt))

350:                 assert_almost_equal(trim(res), trim(tgt))

360:                 assert_almost_equal(trim(res), trim(tgt))

370:                 assert_almost_equal(trim(res), trim(tgt))

378:         assert_almost_equal(res, tgt)

382:         assert_almost_equal(res, tgt)

386:         assert_almost_equal(res, tgt)

393:         assert_raises(TypeError, poly.polyder, [0], .5)

394:         assert_raises(ValueError, poly.polyder, [0], -1)

400:             assert_equal(trim(res), trim(tgt))

407:                 assert_almost_equal(trim(res), trim(tgt))

414:                 assert_almost_equal(trim(res), trim(tgt))

422:         assert_almost_equal(res, tgt)

426:         assert_almost_equal(res, tgt)

437:         assert_(v.shape == (3, 4))

440:             assert_almost_equal(v[..., i], poly.polyval(x, coef))

445:         assert_(v.shape == (3, 2, 4))

448:             assert_almost_equal(v[..., i], poly.polyval(x, coef))

457:         assert_almost_equal(res, tgt)

461:         assert_(van.shape == (1, 5, 6))

470:         assert_almost_equal(res, tgt)

474:         assert_(van.shape == (1, 5, 24))

478:         assert_raises(ValueError, poly.polyvander, x, -1)

484:         assert_raises(ValueError, poly.polycompanion, [])

485:         assert_raises(ValueError, poly.polycompanion, [1])

490:             assert_(poly.polycompanion(coef).shape == (i, i))

493:         assert_(poly.polycompanion([1, 2])[0, 0] == -.5)

500:         assert_almost_equal(trim(res), [1])

505:             assert_almost_equal(trim(res), trim(tgt))

508:         assert_almost_equal(poly.polyroots([1]), [])

509:         assert_almost_equal(poly.polyroots([1, 2]), [-.5])

513:             assert_almost_equal(trim(res), trim(tgt))

523:         assert_raises(ValueError, poly.polyfit, [1], [1], -1)

524:         assert_raises(TypeError, poly.polyfit, [[1]], [1], 0)

525:         assert_raises(TypeError, poly.polyfit, [], [1], 0)

526:         assert_raises(TypeError, poly.polyfit, [1], [[[1]]], 0)

527:         assert_raises(TypeError, poly.polyfit, [1, 2], [1], 0)

528:         assert_raises(TypeError, poly.polyfit, [1], [1, 2], 0)

529:         assert_raises(TypeError, poly.polyfit, [1], [1], 0, w=[[1]])

530:         assert_raises(TypeError, poly.polyfit, [1], [1], 0, w=[1, 1])

531:         assert_raises(ValueError, poly.polyfit, [1], [1], [-1,])

532:         assert_raises(ValueError, poly.polyfit, [1], [1], [2, -1, 6])

533:         assert_raises(TypeError, poly.polyfit, [1], [1], [])

540:         assert_equal(len(coef3), 4)

541:         assert_almost_equal(poly.polyval(x, coef3), y)

543:         assert_equal(len(coef3), 4)

544:         assert_almost_equal(poly.polyval(x, coef3), y)

547:         assert_equal(len(coef4), 5)

548:         assert_almost_equal(poly.polyval(x, coef4), y)

550:         assert_equal(len(coef4), 5)

551:         assert_almost_equal(poly.polyval(x, coef4), y)

554:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

556:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

563:         assert_almost_equal(wcoef3, coef3)

565:         assert_almost_equal(wcoef3, coef3)

568:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

570:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

574:         assert_almost_equal(poly.polyfit(x, x, 1), [0, 1])

575:         assert_almost_equal(poly.polyfit(x, x, [0, 1]), [0, 1])

580:         assert_almost_equal(poly.polyval(x, coef1), y)

582:         assert_almost_equal(poly.polyval(x, coef2), y)

583:         assert_almost_equal(coef1, coef2)

589:         assert_raises(ValueError, poly.polytrim, coef, -1)

592:         assert_equal(poly.polytrim(coef), coef[
593:         assert_equal(poly.polytrim(coef, 1), coef[
594:         assert_equal(poly.polytrim(coef, 2), [0])

597:         assert_equal(poly.polyline(3, 4), [3, 4])

600:         assert_equal(poly.polyline(3, 0), [3])

Total asserts: 129

Filename: numpy/polynomial/tests/test_laguerre.py
10:     assert_almost_equal, assert_raises, assert_equal, assert_,

31:         assert_equal(lag.lagdomain, [0, 1])

34:         assert_equal(lag.lagzero, [0])

37:         assert_equal(lag.lagone, [1])

40:         assert_equal(lag.lagx, [1, -1])

54:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

64:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

67:         assert_equal(lag.lagmulx([0]), [0])

68:         assert_equal(lag.lagmulx([1]), [1, -1])

72:             assert_almost_equal(lag.lagmulx(ser), tgt)

85:                 assert_(len(pol3) == i + j + 1, msg)

86:                 assert_almost_equal(val3, val1*val2, err_msg=msg)

97:                 assert_almost_equal(trim(res), trim(tgt), err_msg=msg)

106:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

121:         assert_equal(lag.lagval([], [1]).size, 0)

130:             assert_almost_equal(res, tgt, err_msg=msg)

136:             assert_equal(lag.lagval(x, [1]).shape, dims)

137:             assert_equal(lag.lagval(x, [1, 0]).shape, dims)

138:             assert_equal(lag.lagval(x, [1, 0, 0]).shape, dims)

145:         assert_raises(ValueError, lag.lagval2d, x1, x2[
150:         assert_almost_equal(res, tgt)

155:         assert_(res.shape == (2, 3))

162:         assert_raises(ValueError, lag.lagval3d, x1, x2, x3[
167:         assert_almost_equal(res, tgt)

172:         assert_(res.shape == (2, 3))

181:         assert_almost_equal(res, tgt)

186:         assert_(res.shape == (2, 3)*2)

195:         assert_almost_equal(res, tgt)

200:         assert_(res.shape == (2, 3)*3)

207:         assert_raises(TypeError, lag.lagint, [0], .5)

208:         assert_raises(ValueError, lag.lagint, [0], -1)

209:         assert_raises(ValueError, lag.lagint, [0], 1, [0, 0])

210:         assert_raises(ValueError, lag.lagint, [0], lbnd=[0])

211:         assert_raises(ValueError, lag.lagint, [0], scl=[0])

212:         assert_raises(TypeError, lag.lagint, [0], axis=.5)

218:             assert_almost_equal(res, [1, -1])

228:             assert_almost_equal(trim(res), trim(tgt))

236:             assert_almost_equal(lag.lagval(-1, lagint), i)

246:             assert_almost_equal(trim(res), trim(tgt))

256:                 assert_almost_equal(trim(res), trim(tgt))

266:                 assert_almost_equal(trim(res), trim(tgt))

276:                 assert_almost_equal(trim(res), trim(tgt))

286:                 assert_almost_equal(trim(res), trim(tgt))

294:         assert_almost_equal(res, tgt)

298:         assert_almost_equal(res, tgt)

302:         assert_almost_equal(res, tgt)

309:         assert_raises(TypeError, lag.lagder, [0], .5)

310:         assert_raises(ValueError, lag.lagder, [0], -1)

316:             assert_equal(trim(res), trim(tgt))

323:                 assert_almost_equal(trim(res), trim(tgt))

330:                 assert_almost_equal(trim(res), trim(tgt))

338:         assert_almost_equal(res, tgt)

342:         assert_almost_equal(res, tgt)

353:         assert_(v.shape == (3, 4))

356:             assert_almost_equal(v[..., i], lag.lagval(x, coef))

361:         assert_(v.shape == (3, 2, 4))

364:             assert_almost_equal(v[..., i], lag.lagval(x, coef))

373:         assert_almost_equal(res, tgt)

377:         assert_(van.shape == (1, 5, 6))

386:         assert_almost_equal(res, tgt)

390:         assert_(van.shape == (1, 5, 24))

400:         assert_raises(ValueError, lag.lagfit, [1], [1], -1)

401:         assert_raises(TypeError, lag.lagfit, [[1]], [1], 0)

402:         assert_raises(TypeError, lag.lagfit, [], [1], 0)

403:         assert_raises(TypeError, lag.lagfit, [1], [[[1]]], 0)

404:         assert_raises(TypeError, lag.lagfit, [1, 2], [1], 0)

405:         assert_raises(TypeError, lag.lagfit, [1], [1, 2], 0)

406:         assert_raises(TypeError, lag.lagfit, [1], [1], 0, w=[[1]])

407:         assert_raises(TypeError, lag.lagfit, [1], [1], 0, w=[1, 1])

408:         assert_raises(ValueError, lag.lagfit, [1], [1], [-1,])

409:         assert_raises(ValueError, lag.lagfit, [1], [1], [2, -1, 6])

410:         assert_raises(TypeError, lag.lagfit, [1], [1], [])

417:         assert_equal(len(coef3), 4)

418:         assert_almost_equal(lag.lagval(x, coef3), y)

420:         assert_equal(len(coef3), 4)

421:         assert_almost_equal(lag.lagval(x, coef3), y)

424:         assert_equal(len(coef4), 5)

425:         assert_almost_equal(lag.lagval(x, coef4), y)

427:         assert_equal(len(coef4), 5)

428:         assert_almost_equal(lag.lagval(x, coef4), y)

431:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

433:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

440:         assert_almost_equal(wcoef3, coef3)

442:         assert_almost_equal(wcoef3, coef3)

445:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

447:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

451:         assert_almost_equal(lag.lagfit(x, x, 1), [1, -1])

452:         assert_almost_equal(lag.lagfit(x, x, [0, 1]), [1, -1])

458:         assert_raises(ValueError, lag.lagcompanion, [])

459:         assert_raises(ValueError, lag.lagcompanion, [1])

464:             assert_(lag.lagcompanion(coef).shape == (i, i))

467:         assert_(lag.lagcompanion([1, 2])[0, 0] == 1.5)

482:         assert_almost_equal(vv, np.eye(100))

486:         assert_almost_equal(w.sum(), tgt)

493:         assert_almost_equal(trim(res), [1])

499:             assert_(len(pol) == i + 1)

500:             assert_almost_equal(lag.lag2poly(pol)[-1], 1)

501:             assert_almost_equal(res, tgt)

504:         assert_almost_equal(lag.lagroots([1]), [])

505:         assert_almost_equal(lag.lagroots([0, 1]), [1])

509:             assert_almost_equal(trim(res), trim(tgt))

515:         assert_raises(ValueError, lag.lagtrim, coef, -1)

518:         assert_equal(lag.lagtrim(coef), coef[
519:         assert_equal(lag.lagtrim(coef, 1), coef[
520:         assert_equal(lag.lagtrim(coef, 2), [0])

523:         assert_equal(lag.lagline(3, 4), [7, -4])

527:             assert_almost_equal(lag.lag2poly([0]*i + [1]), Llist[i])

531:             assert_almost_equal(lag.poly2lag(Llist[i]), [0]*i + [1])

537:         assert_almost_equal(res, tgt)

Total asserts: 109

Filename: numpy/polynomial/tests/test_legendre.py
10:     assert_almost_equal, assert_raises, assert_equal, assert_,

34:         assert_equal(leg.legdomain, [-1, 1])

37:         assert_equal(leg.legzero, [0])

40:         assert_equal(leg.legone, [1])

43:         assert_equal(leg.legx, [0, 1])

57:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

67:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

70:         assert_equal(leg.legmulx([0]), [0])

71:         assert_equal(leg.legmulx([1]), [0, 1])

76:             assert_equal(leg.legmulx(ser), tgt)

89:                 assert_(len(pol3) == i + j + 1, msg)

90:                 assert_almost_equal(val3, val1*val2, err_msg=msg)

101:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

110:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

125:         assert_equal(leg.legval([], [1]).size, 0)

134:             assert_almost_equal(res, tgt, err_msg=msg)

140:             assert_equal(leg.legval(x, [1]).shape, dims)

141:             assert_equal(leg.legval(x, [1, 0]).shape, dims)

142:             assert_equal(leg.legval(x, [1, 0, 0]).shape, dims)

149:         assert_raises(ValueError, leg.legval2d, x1, x2[
154:         assert_almost_equal(res, tgt)

159:         assert_(res.shape == (2, 3))

166:         assert_raises(ValueError, leg.legval3d, x1, x2, x3[
171:         assert_almost_equal(res, tgt)

176:         assert_(res.shape == (2, 3))

185:         assert_almost_equal(res, tgt)

190:         assert_(res.shape == (2, 3)*2)

199:         assert_almost_equal(res, tgt)

204:         assert_(res.shape == (2, 3)*3)

211:         assert_raises(TypeError, leg.legint, [0], .5)

212:         assert_raises(ValueError, leg.legint, [0], -1)

213:         assert_raises(ValueError, leg.legint, [0], 1, [0, 0])

214:         assert_raises(ValueError, leg.legint, [0], lbnd=[0])

215:         assert_raises(ValueError, leg.legint, [0], scl=[0])

216:         assert_raises(TypeError, leg.legint, [0], axis=.5)

222:             assert_almost_equal(res, [0, 1])

232:             assert_almost_equal(trim(res), trim(tgt))

240:             assert_almost_equal(leg.legval(-1, legint), i)

250:             assert_almost_equal(trim(res), trim(tgt))

260:                 assert_almost_equal(trim(res), trim(tgt))

270:                 assert_almost_equal(trim(res), trim(tgt))

280:                 assert_almost_equal(trim(res), trim(tgt))

290:                 assert_almost_equal(trim(res), trim(tgt))

298:         assert_almost_equal(res, tgt)

302:         assert_almost_equal(res, tgt)

306:         assert_almost_equal(res, tgt)

309:         assert_equal(leg.legint((1, 2, 3), 0), (1, 2, 3))

316:         assert_raises(TypeError, leg.legder, [0], .5)

317:         assert_raises(ValueError, leg.legder, [0], -1)

323:             assert_equal(trim(res), trim(tgt))

330:                 assert_almost_equal(trim(res), trim(tgt))

337:                 assert_almost_equal(trim(res), trim(tgt))

345:         assert_almost_equal(res, tgt)

349:         assert_almost_equal(res, tgt)

353:         assert_equal(leg.legder(c, 4), [0])

363:         assert_(v.shape == (3, 4))

366:             assert_almost_equal(v[..., i], leg.legval(x, coef))

371:         assert_(v.shape == (3, 2, 4))

374:             assert_almost_equal(v[..., i], leg.legval(x, coef))

383:         assert_almost_equal(res, tgt)

387:         assert_(van.shape == (1, 5, 6))

396:         assert_almost_equal(res, tgt)

400:         assert_(van.shape == (1, 5, 24))

403:         assert_raises(ValueError, leg.legvander, (1, 2, 3), -1)

416:         assert_raises(ValueError, leg.legfit, [1], [1], -1)

417:         assert_raises(TypeError, leg.legfit, [[1]], [1], 0)

418:         assert_raises(TypeError, leg.legfit, [], [1], 0)

419:         assert_raises(TypeError, leg.legfit, [1], [[[1]]], 0)

420:         assert_raises(TypeError, leg.legfit, [1, 2], [1], 0)

421:         assert_raises(TypeError, leg.legfit, [1], [1, 2], 0)

422:         assert_raises(TypeError, leg.legfit, [1], [1], 0, w=[[1]])

423:         assert_raises(TypeError, leg.legfit, [1], [1], 0, w=[1, 1])

424:         assert_raises(ValueError, leg.legfit, [1], [1], [-1,])

425:         assert_raises(ValueError, leg.legfit, [1], [1], [2, -1, 6])

426:         assert_raises(TypeError, leg.legfit, [1], [1], [])

433:         assert_equal(len(coef3), 4)

434:         assert_almost_equal(leg.legval(x, coef3), y)

436:         assert_equal(len(coef3), 4)

437:         assert_almost_equal(leg.legval(x, coef3), y)

440:         assert_equal(len(coef4), 5)

441:         assert_almost_equal(leg.legval(x, coef4), y)

443:         assert_equal(len(coef4), 5)

444:         assert_almost_equal(leg.legval(x, coef4), y)

447:         assert_equal(len(coef4), 5)

448:         assert_almost_equal(leg.legval(x, coef4), y)

451:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

453:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

460:         assert_almost_equal(wcoef3, coef3)

462:         assert_almost_equal(wcoef3, coef3)

465:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

467:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

471:         assert_almost_equal(leg.legfit(x, x, 1), [0, 1])

472:         assert_almost_equal(leg.legfit(x, x, [0, 1]), [0, 1])

477:         assert_almost_equal(leg.legval(x, coef1), y)

479:         assert_almost_equal(leg.legval(x, coef2), y)

480:         assert_almost_equal(coef1, coef2)

486:         assert_raises(ValueError, leg.legcompanion, [])

487:         assert_raises(ValueError, leg.legcompanion, [1])

492:             assert_(leg.legcompanion(coef).shape == (i, i))

495:         assert_(leg.legcompanion([1, 2])[0, 0] == -.5)

510:         assert_almost_equal(vv, np.eye(100))

514:         assert_almost_equal(w.sum(), tgt)

521:         assert_almost_equal(trim(res), [1])

527:             assert_(len(pol) == i + 1)

528:             assert_almost_equal(leg.leg2poly(pol)[-1], 1)

529:             assert_almost_equal(res, tgt)

532:         assert_almost_equal(leg.legroots([1]), [])

533:         assert_almost_equal(leg.legroots([1, 2]), [-.5])

537:             assert_almost_equal(trim(res), trim(tgt))

543:         assert_raises(ValueError, leg.legtrim, coef, -1)

546:         assert_equal(leg.legtrim(coef), coef[
547:         assert_equal(leg.legtrim(coef, 1), coef[
548:         assert_equal(leg.legtrim(coef, 2), [0])

551:         assert_equal(leg.legline(3, 4), [3, 4])

554:         assert_equal(leg.legline(3, 0), [3])

558:             assert_almost_equal(leg.leg2poly([0]*i + [1]), Llist[i])

562:             assert_almost_equal(leg.poly2leg(Llist[i]), [0]*i + [1])

568:         assert_almost_equal(res, tgt)

Total asserts: 118

Filename: numpy/polynomial/tests/test_printing.py
4: from numpy.testing import assert_equal, assert_

26:         assert_equal(res, tgt)

37:         assert_equal(res, tgt)

48:         assert_equal(res, tgt)

59:         assert_equal(res, tgt)

71:         assert_equal(res, tgt)

82:         assert_equal(res, tgt)

100:         assert_equal(res, tgt)

112:         assert_equal(res, tgt)

124:         assert_equal(res, tgt)

136:         assert_equal(res, tgt)

148:         assert_equal(res, tgt)

160:         assert_equal(res, tgt)

172:         assert_equal(len(str(p)), 74)

173:         assert_equal(str(p), (

181:         assert_equal(len(str(p)), 75)

182:         assert_equal(str(p), (

192:         assert_equal(len(str(p).split('\n')[0]), 74)

193:         assert_equal(str(p), (

203:         assert_equal(str(p), (

224:             assert_equal(str(p), tgt)

226:                 assert_(len(line) < lw)

233:     assert_equal(str(p), "1.0 + 2.0 x**1 + 3.0 x**2")

234:     assert_equal(str(c), "1.0 + 2.0 T_1(x) + 3.0 T_2(x)")

236:     assert_equal(str(p), "1.0 + 2.0·x¹ + 3.0·x²")

237:     assert_equal(str(c), "1.0 + 2.0·T₁(x) + 3.0·T₂(x)")

250:     assert_equal(str(p1), "1j + (1+1j)·x¹ - (2-2j)·x² + (3+0j)·x³")

251:     assert_equal(str(p2), "1j + (1+1j)·x¹ + (-2+2j)·x² + (3+0j)·x³")

253:     assert_equal(str(p1), "1j + (1+1j) x**1 - (2-2j) x**2 + (3+0j) x**3")

254:     assert_equal(str(p2), "1j + (1+1j) x**1 + (-2+2j) x**2 + (3+0j) x**3")

271:     assert_equal(str(p), tgt)

284:     assert_equal(str(p), tgt)

291:         assert_equal(format(p, 'unicode'), "1.0 + 2.0·x¹ + 0.0·x² - 1.0·x³")

296:         assert_equal(

303:         assert_equal(format(p), "1.0 + 2.0 x**1 + 3.0 x**2")

304:         assert_equal(f"{p}", "1.0 + 2.0 x**1 + 3.0 x**2")

316:         assert_equal(res, tgt)

321:         assert_equal(res, tgt)

326:         assert_equal(res, tgt)

331:         assert_equal(res, tgt)

336:         assert_equal(res, tgt)

341:         assert_equal(res, tgt)

360:         assert_equal(self.as_latex(p),

365:         assert_equal(self.as_latex(p),

370:         assert_equal(self.as_latex(p),

375:         assert_equal(self.as_latex(p),

380:         assert_equal(self.as_latex(p),

384:         assert_equal(self.as_latex(p),

389:         assert_equal(self.as_latex(p),

Total asserts: 49

Filename: numpy/polynomial/tests/test_hermite.py
10:     assert_almost_equal, assert_raises, assert_equal, assert_,

34:         assert_equal(herm.hermdomain, [-1, 1])

37:         assert_equal(herm.hermzero, [0])

40:         assert_equal(herm.hermone, [1])

43:         assert_equal(herm.hermx, [0, .5])

57:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

67:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

70:         assert_equal(herm.hermmulx([0]), [0])

71:         assert_equal(herm.hermmulx([1]), [0, .5])

75:             assert_equal(herm.hermmulx(ser), tgt)

88:                 assert_(len(pol3) == i + j + 1, msg)

89:                 assert_almost_equal(val3, val1*val2, err_msg=msg)

100:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

109:                 assert_equal(trim(res), trim(tgt), err_msg=msg)

124:         assert_equal(herm.hermval([], [1]).size, 0)

133:             assert_almost_equal(res, tgt, err_msg=msg)

139:             assert_equal(herm.hermval(x, [1]).shape, dims)

140:             assert_equal(herm.hermval(x, [1, 0]).shape, dims)

141:             assert_equal(herm.hermval(x, [1, 0, 0]).shape, dims)

148:         assert_raises(ValueError, herm.hermval2d, x1, x2[
153:         assert_almost_equal(res, tgt)

158:         assert_(res.shape == (2, 3))

165:         assert_raises(ValueError, herm.hermval3d, x1, x2, x3[
170:         assert_almost_equal(res, tgt)

175:         assert_(res.shape == (2, 3))

184:         assert_almost_equal(res, tgt)

189:         assert_(res.shape == (2, 3)*2)

198:         assert_almost_equal(res, tgt)

203:         assert_(res.shape == (2, 3)*3)

210:         assert_raises(TypeError, herm.hermint, [0], .5)

211:         assert_raises(ValueError, herm.hermint, [0], -1)

212:         assert_raises(ValueError, herm.hermint, [0], 1, [0, 0])

213:         assert_raises(ValueError, herm.hermint, [0], lbnd=[0])

214:         assert_raises(ValueError, herm.hermint, [0], scl=[0])

215:         assert_raises(TypeError, herm.hermint, [0], axis=.5)

221:             assert_almost_equal(res, [0, .5])

231:             assert_almost_equal(trim(res), trim(tgt))

239:             assert_almost_equal(herm.hermval(-1, hermint), i)

249:             assert_almost_equal(trim(res), trim(tgt))

259:                 assert_almost_equal(trim(res), trim(tgt))

269:                 assert_almost_equal(trim(res), trim(tgt))

279:                 assert_almost_equal(trim(res), trim(tgt))

289:                 assert_almost_equal(trim(res), trim(tgt))

297:         assert_almost_equal(res, tgt)

301:         assert_almost_equal(res, tgt)

305:         assert_almost_equal(res, tgt)

312:         assert_raises(TypeError, herm.hermder, [0], .5)

313:         assert_raises(ValueError, herm.hermder, [0], -1)

319:             assert_equal(trim(res), trim(tgt))

326:                 assert_almost_equal(trim(res), trim(tgt))

333:                 assert_almost_equal(trim(res), trim(tgt))

341:         assert_almost_equal(res, tgt)

345:         assert_almost_equal(res, tgt)

356:         assert_(v.shape == (3, 4))

359:             assert_almost_equal(v[..., i], herm.hermval(x, coef))

364:         assert_(v.shape == (3, 2, 4))

367:             assert_almost_equal(v[..., i], herm.hermval(x, coef))

376:         assert_almost_equal(res, tgt)

380:         assert_(van.shape == (1, 5, 6))

389:         assert_almost_equal(res, tgt)

393:         assert_(van.shape == (1, 5, 24))

406:         assert_raises(ValueError, herm.hermfit, [1], [1], -1)

407:         assert_raises(TypeError, herm.hermfit, [[1]], [1], 0)

408:         assert_raises(TypeError, herm.hermfit, [], [1], 0)

409:         assert_raises(TypeError, herm.hermfit, [1], [[[1]]], 0)

410:         assert_raises(TypeError, herm.hermfit, [1, 2], [1], 0)

411:         assert_raises(TypeError, herm.hermfit, [1], [1, 2], 0)

412:         assert_raises(TypeError, herm.hermfit, [1], [1], 0, w=[[1]])

413:         assert_raises(TypeError, herm.hermfit, [1], [1], 0, w=[1, 1])

414:         assert_raises(ValueError, herm.hermfit, [1], [1], [-1,])

415:         assert_raises(ValueError, herm.hermfit, [1], [1], [2, -1, 6])

416:         assert_raises(TypeError, herm.hermfit, [1], [1], [])

423:         assert_equal(len(coef3), 4)

424:         assert_almost_equal(herm.hermval(x, coef3), y)

426:         assert_equal(len(coef3), 4)

427:         assert_almost_equal(herm.hermval(x, coef3), y)

430:         assert_equal(len(coef4), 5)

431:         assert_almost_equal(herm.hermval(x, coef4), y)

433:         assert_equal(len(coef4), 5)

434:         assert_almost_equal(herm.hermval(x, coef4), y)

437:         assert_equal(len(coef4), 5)

438:         assert_almost_equal(herm.hermval(x, coef4), y)

441:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

443:         assert_almost_equal(coef2d, np.array([coef3, coef3]).T)

450:         assert_almost_equal(wcoef3, coef3)

452:         assert_almost_equal(wcoef3, coef3)

455:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

457:         assert_almost_equal(wcoef2d, np.array([coef3, coef3]).T)

461:         assert_almost_equal(herm.hermfit(x, x, 1), [0, .5])

462:         assert_almost_equal(herm.hermfit(x, x, [0, 1]), [0, .5])

467:         assert_almost_equal(herm.hermval(x, coef1), y)

469:         assert_almost_equal(herm.hermval(x, coef2), y)

470:         assert_almost_equal(coef1, coef2)

476:         assert_raises(ValueError, herm.hermcompanion, [])

477:         assert_raises(ValueError, herm.hermcompanion, [1])

482:             assert_(herm.hermcompanion(coef).shape == (i, i))

485:         assert_(herm.hermcompanion([1, 2])[0, 0] == -.25)

500:         assert_almost_equal(vv, np.eye(100))

504:         assert_almost_equal(w.sum(), tgt)

511:         assert_almost_equal(trim(res), [1])

517:             assert_(len(pol) == i + 1)

518:             assert_almost_equal(herm.herm2poly(pol)[-1], 1)

519:             assert_almost_equal(res, tgt)

522:         assert_almost_equal(herm.hermroots([1]), [])

523:         assert_almost_equal(herm.hermroots([1, 1]), [-.5])

527:             assert_almost_equal(trim(res), trim(tgt))

533:         assert_raises(ValueError, herm.hermtrim, coef, -1)

536:         assert_equal(herm.hermtrim(coef), coef[
537:         assert_equal(herm.hermtrim(coef, 1), coef[
538:         assert_equal(herm.hermtrim(coef, 2), [0])

541:         assert_equal(herm.hermline(3, 4), [3, 2])

545:             assert_almost_equal(herm.herm2poly([0]*i + [1]), Hlist[i])

549:             assert_almost_equal(herm.poly2herm(Hlist[i]), [0]*i + [1])

555:         assert_almost_equal(res, tgt)

Total asserts: 114

Filename: numpy/polynomial/tests/test_classes.py
14:     assert_almost_equal, assert_raises, assert_equal, assert_,

38: def assert_poly_almost_equal(p1, p2, msg="")
40:         assert_(np.all(p1.domain == p2.domain))

41:         assert_(np.all(p1.window == p2.window))

42:         assert_almost_equal(p1.coef, p2.coef)

68:     assert_almost_equal(p2.domain, d2)

69:     assert_almost_equal(p2.window, w2)

70:     assert_almost_equal(p2(x), p1(x))

85:     assert_almost_equal(p2.domain, d2)

86:     assert_almost_equal(p2.window, w2)

87:     assert_almost_equal(p2(x), p1(x))

100:     assert_equal(p.domain, d)

101:     assert_equal(p.window, w)

102:     assert_almost_equal(p(x), x)

109:     assert_equal(p.domain, d)

110:     assert_equal(p.window, w)

111:     assert_equal(p.coef, [0]*5 + [1])

121:     assert_equal(p1.degree(), len(r))

122:     assert_equal(p1.domain, d)

123:     assert_equal(p1.window, w)

124:     assert_almost_equal(p1(r), 0)

130:     assert_almost_equal(p2.coef[-1], 1)

141:     assert record[0].message.args[0] == "The fit may be poorly conditioned"

153:     assert_almost_equal(p.domain, [0, 3])

154:     assert_almost_equal(p(x), y)

155:     assert_equal(p.degree(), 3)

161:     assert_almost_equal(p(x), y)

162:     assert_almost_equal(p.domain, d)

163:     assert_almost_equal(p.window, w)

165:     assert_almost_equal(p(x), y)

166:     assert_almost_equal(p.domain, d)

167:     assert_almost_equal(p.window, w)

171:     assert_equal(p.domain, Poly.domain)

172:     assert_equal(p.window, Poly.window)

174:     assert_equal(p.domain, Poly.domain)

175:     assert_equal(p.window, Poly.window)

184:     assert_almost_equal(p1(x), p2(x))

185:     assert_almost_equal(p2(x), p3(x))

193:     assert_(p1 == p1)

194:     assert_(not p1 == p2)

195:     assert_(not p1 == p3)

196:     assert_(not p1 == p4)

204:     assert_(not p1 != p1)

205:     assert_(p1 != p2)

206:     assert_(p1 != p3)

207:     assert_(p1 != p4)

217:     assert_poly_almost_equal(p2 + p1, p3)

218:     assert_poly_almost_equal(p1 + c2, p3)

219:     assert_poly_almost_equal(c2 + p1, p3)

220:     assert_poly_almost_equal(p1 + tuple(c2), p3)

221:     assert_poly_almost_equal(tuple(c2) + p1, p3)

222:     assert_poly_almost_equal(p1 + np.array(c2), p3)

223:     assert_poly_almost_equal(np.array(c2) + p1, p3)

224:     assert_raises(TypeError, op.add, p1, Poly([0], domain=Poly.domain + 1))

225:     assert_raises(TypeError, op.add, p1, Poly([0], window=Poly.window + 1))

227:         assert_raises(TypeError, op.add, p1, Chebyshev([0]))

229:         assert_raises(TypeError, op.add, p1, Polynomial([0]))

239:     assert_poly_almost_equal(p2 - p1, -p3)

240:     assert_poly_almost_equal(p1 - c2, p3)

241:     assert_poly_almost_equal(c2 - p1, -p3)

242:     assert_poly_almost_equal(p1 - tuple(c2), p3)

243:     assert_poly_almost_equal(tuple(c2) - p1, -p3)

244:     assert_poly_almost_equal(p1 - np.array(c2), p3)

245:     assert_poly_almost_equal(np.array(c2) - p1, -p3)

246:     assert_raises(TypeError, op.sub, p1, Poly([0], domain=Poly.domain + 1))

247:     assert_raises(TypeError, op.sub, p1, Poly([0], window=Poly.window + 1))

249:         assert_raises(TypeError, op.sub, p1, Chebyshev([0]))

251:         assert_raises(TypeError, op.sub, p1, Polynomial([0]))

260:     assert_poly_almost_equal(p2 * p1, p3)

261:     assert_poly_almost_equal(p1 * c2, p3)

262:     assert_poly_almost_equal(c2 * p1, p3)

263:     assert_poly_almost_equal(p1 * tuple(c2), p3)

264:     assert_poly_almost_equal(tuple(c2) * p1, p3)

265:     assert_poly_almost_equal(p1 * np.array(c2), p3)

266:     assert_poly_almost_equal(np.array(c2) * p1, p3)

267:     assert_poly_almost_equal(p1 * 2, p1 * Poly([2]))

268:     assert_poly_almost_equal(2 * p1, p1 * Poly([2]))

269:     assert_raises(TypeError, op.mul, p1, Poly([0], domain=Poly.domain + 1))

270:     assert_raises(TypeError, op.mul, p1, Poly([0], window=Poly.window + 1))

272:         assert_raises(TypeError, op.mul, p1, Chebyshev([0]))

274:         assert_raises(TypeError, op.mul, p1, Polynomial([0]))

286:     assert_poly_almost_equal(p4 // p2, p1)

287:     assert_poly_almost_equal(p4 // c2, p1)

288:     assert_poly_almost_equal(c4 // p2, p1)

289:     assert_poly_almost_equal(p4 // tuple(c2), p1)

290:     assert_poly_almost_equal(tuple(c4) // p2, p1)

291:     assert_poly_almost_equal(p4 // np.array(c2), p1)

292:     assert_poly_almost_equal(np.array(c4) // p2, p1)

293:     assert_poly_almost_equal(2 // p2, Poly([0]))

294:     assert_poly_almost_equal(p2 // 2, 0.5*p2)

295:     assert_raises(

297:     assert_raises(

300:         assert_raises(TypeError, op.floordiv, p1, Chebyshev([0]))

302:         assert_raises(TypeError, op.floordiv, p1, Polynomial([0]))

315:         assert_poly_almost_equal(op.truediv(p2, s), p1)

316:         assert_raises(TypeError, op.truediv, s, p2)

319:         assert_poly_almost_equal(op.truediv(p2, s), p1)

320:         assert_raises(TypeError, op.truediv, s, p2)

323:         assert_poly_almost_equal(op.truediv(p2, s), p1)

324:         assert_raises(TypeError, op.truediv, s, p2)

326:         assert_raises(TypeError, op.truediv, p2, s)

327:         assert_raises(TypeError, op.truediv, s, p2)

329:         assert_raises(TypeError, op.truediv, p2, ptype(1))

342:     assert_poly_almost_equal(p4 % p2, p3)

343:     assert_poly_almost_equal(p4 % c2, p3)

344:     assert_poly_almost_equal(c4 % p2, p3)

345:     assert_poly_almost_equal(p4 % tuple(c2), p3)

346:     assert_poly_almost_equal(tuple(c4) % p2, p3)

347:     assert_poly_almost_equal(p4 % np.array(c2), p3)

348:     assert_poly_almost_equal(np.array(c4) % p2, p3)

349:     assert_poly_almost_equal(2 % p2, Poly([2]))

350:     assert_poly_almost_equal(p2 % 2, Poly([0]))

351:     assert_raises(TypeError, op.mod, p1, Poly([0], domain=Poly.domain + 1))

352:     assert_raises(TypeError, op.mod, p1, Poly([0], window=Poly.window + 1))

354:         assert_raises(TypeError, op.mod, p1, Chebyshev([0]))

356:         assert_raises(TypeError, op.mod, p1, Polynomial([0]))

370:     assert_poly_almost_equal(quo, p1)

371:     assert_poly_almost_equal(rem, p3)

373:     assert_poly_almost_equal(quo, p1)

374:     assert_poly_almost_equal(rem, p3)

376:     assert_poly_almost_equal(quo, p1)

377:     assert_poly_almost_equal(rem, p3)

379:     assert_poly_almost_equal(quo, p1)

380:     assert_poly_almost_equal(rem, p3)

382:     assert_poly_almost_equal(quo, p1)

383:     assert_poly_almost_equal(rem, p3)

385:     assert_poly_almost_equal(quo, p1)

386:     assert_poly_almost_equal(rem, p3)

388:     assert_poly_almost_equal(quo, p1)

389:     assert_poly_almost_equal(rem, p3)

391:     assert_poly_almost_equal(quo, 0.5*p2)

392:     assert_poly_almost_equal(rem, Poly([0]))

394:     assert_poly_almost_equal(quo, Poly([0]))

395:     assert_poly_almost_equal(rem, Poly([2]))

396:     assert_raises(TypeError, divmod, p1, Poly([0], domain=Poly.domain + 1))

397:     assert_raises(TypeError, divmod, p1, Poly([0], window=Poly.window + 1))

399:         assert_raises(TypeError, divmod, p1, Chebyshev([0]))

401:         assert_raises(TypeError, divmod, p1, Polynomial([0]))

409:     assert_almost_equal(res, tgt)

412:     assert_almost_equal(res, tgt)

417:     assert_equal(p.degree(), 5)

423:     assert_(p1 == p2)

424:     assert_(p1 is not p2)

425:     assert_(p1.coef is not p2.coef)

426:     assert_(p1.domain is not p2.domain)

427:     assert_(p1.window is not p2.window)

436:     assert_poly_almost_equal(p1, P([0, 2, 3, 4]))

437:     assert_poly_almost_equal(p2, P([0, 0, 1, 1, 1]))

442:     assert_poly_almost_equal(p1, P([1, 2, 3, 4]))

443:     assert_poly_almost_equal(p2, P([1, 1, 1, 1, 1]))

448:     assert_poly_almost_equal(p1, P([-9, 2, 3, 4]))

449:     assert_poly_almost_equal(p2, P([6, -9, 1, 1, 1]))

455:     assert_poly_almost_equal(p1, P([0, 2, 3, 4]))

456:     assert_poly_almost_equal(p2, P([0, 0, 1, 1, 1]))

467:     assert_almost_equal(p2.deriv(1).coef, p3.coef)

468:     assert_almost_equal(p2.deriv(2).coef, p1.coef)

473:     assert_almost_equal(p2.deriv(1).coef, p3.coef)

474:     assert_almost_equal(p2.deriv(2).coef, p1.coef)

485:     assert_almost_equal(xres, xtgt)

486:     assert_almost_equal(yres, ytgt)

491:     assert_almost_equal(xres, xtgt)

492:     assert_almost_equal(yres, ytgt)

501:         assert_poly_almost_equal(tst**i, tgt)

507:         assert_poly_almost_equal(tst**i, tgt)

510:     assert_raises(ValueError, op.pow, tgt, 1.5)

511:     assert_raises(ValueError, op.pow, tgt, -1)

523:     assert_almost_equal(res, tgt)

528:     assert_raises(ValueError, p.cutdeg, .5)

529:     assert_raises(ValueError, p.cutdeg, -1)

530:     assert_equal(len(p.cutdeg(3)), 3)

531:     assert_equal(len(p.cutdeg(2)), 3)

532:     assert_equal(len(p.cutdeg(1)), 2)

533:     assert_equal(len(p.cutdeg(0)), 1)

538:     assert_raises(ValueError, p.truncate, .5)

539:     assert_raises(ValueError, p.truncate, 0)

540:     assert_equal(len(p.truncate(4)), 3)

541:     assert_equal(len(p.truncate(3)), 3)

542:     assert_equal(len(p.truncate(2)), 2)

543:     assert_equal(len(p.truncate(1)), 1)

549:     assert_equal(p.trim().coef, c[
550:     assert_equal(p.trim(1e-10).coef, c[
551:     assert_equal(p.trim(1e-5).coef, c[
559:     assert_almost_equal([0, 1], p.mapparms())

563:     assert_almost_equal([1, 2], p.mapparms())

569:     assert_raises(TypeError, np.add, p, x)

570:     assert_raises(TypeError, np.add, x, p)

584:         assert_raises(ValueError, Chebyshev.interpolate, self.f, -1)

585:         assert_raises(TypeError, Chebyshev.interpolate, self.f, 10.)

589:             assert_(Chebyshev.interpolate(self.f, deg).degree() == deg)

600:                 assert_almost_equal(p(x), powx(x, t), decimal=11)

Total asserts: 190

Filename: numpy/polynomial/tests/test_polyutils.py
7:     assert_almost_equal, assert_raises, assert_equal, assert_,

17:             assert_equal(res, tgt)

21:         assert_raises(ValueError, pu.as_series, [[]])

22:         assert_raises(ValueError, pu.as_series, [[[1, 2]]])

23:         assert_raises(ValueError, pu.as_series, [[1], ['a']])

31:                 assert_(resi.dtype.char == resj.dtype.char)

32:                 assert_(resj.dtype.char == types[i])

37:         assert_raises(ValueError, pu.trimcoef, coef, -1)

39:         assert_equal(pu.trimcoef(coef), coef[
40:         assert_equal(pu.trimcoef(coef, 1), coef[
41:         assert_equal(pu.trimcoef(coef, 2), [0])

45:         assert_raises(ValueError, pu._vander_nd, (), (1, 2, 3), [90])

47:         assert_raises(ValueError, pu._vander_nd, (), (), [90.65])

49:         assert_raises(ValueError, pu._vander_nd, (), (), [])

53:         assert_raises(ZeroDivisionError, pu._div, pu._div, (1, 2, 3), [0])

57:         assert_raises(ValueError, pu._pow, (), [1, 2, 3], 5, 4)

66:         assert_almost_equal(res, tgt)

72:         assert_almost_equal(res, tgt)

80:         assert_almost_equal(res, tgt)

88:         assert_almost_equal(res, tgt)

96:         assert_almost_equal(res, tgt)

106:         assert_(isinstance(res, MyNDArray))

114:         assert_almost_equal(res, tgt)

121:         assert_almost_equal(res, tgt)

Total asserts: 24

Filename: runtests.py
612:     assert in_config != out_config

613:     assert len(custom_vars) > 0

Total asserts: 2

Filename: tools/openblas_support.py
45:     assert plat in SUPPORTED_PLATFORMS,  f'invalid platform {plat}'

64:     assert ret in ('1', '2010', '2014', '_2_24'), f'invalid MB_ML_VER {ret}'

315:     assert check_str in res, f'{expected_version} not found in {res}'

317:         assert b"USE64BITINT" in res

319:         assert b"USE64BITINT" not in res

Total asserts: 5

Filename: tools/swig/test/testArray.py
27:         self.assertTrue(isinstance(a, Array.Array1))

28:         self.assertTrue(len(a) == 0)

32:         self.assertTrue(isinstance(self.array1, Array.Array1))

38:         self.assertTrue(isinstance(aa, Array.Array1))

44:         self.assertTrue(arrayCopy == self.array1)

48:         self.assertRaises(ValueError, Array.Array1, -4)

52:         self.assertTrue(self.array1.length() == self.length)

56:         self.assertTrue(len(self.array1) == self.length)

62:         self.assertTrue(len(self.array1) == newLen)

68:         self.assertTrue(len(self.array1) == a.size)

72:         self.assertRaises(ValueError, self.array1.resize, -5)

80:             self.assertTrue(self.array1[i] == i*i)

84:         self.assertRaises(IndexError, self.array1.__setitem__, -1, 0)

88:         self.assertRaises(IndexError, self.array1.__setitem__, self.length+1, 0)

92:         self.assertRaises(IndexError, self.array1.__getitem__, -1)

96:         self.assertRaises(IndexError, self.array1.__getitem__, self.length+1)

101:         self.assertTrue(self.array1.asString() == "[ 1, 2, 3, 4, 5 ]")

106:         self.assertTrue(str(self.array1) == "[ -2, -1, 0, 1, 2 ]")

112:         self.assertTrue(isinstance(a, np.ndarray))

113:         self.assertTrue(len(a) == self.length)

114:         self.assertTrue((a == [1, 2, 3, 4, 5]).all())

128:         self.assertTrue(isinstance(a, Array.Array2))

129:         self.assertTrue(len(a) == 0)

133:         self.assertTrue(isinstance(self.array2, Array.Array2))

139:         self.assertTrue(isinstance(aa, Array.Array2))

147:         self.assertTrue(arrayCopy == self.array2)

151:         self.assertRaises(ValueError, Array.Array2, -4, 4)

155:         self.assertRaises(ValueError, Array.Array2, 4, -4)

159:         self.assertTrue(self.array2.nrows() == self.nrows)

163:         self.assertTrue(self.array2.ncols() == self.ncols)

167:         self.assertTrue(len(self.array2) == self.nrows*self.ncols)

174:         self.assertTrue(len(self.array2) == newRows * newCols)

180:         self.assertTrue(len(self.array2) == a.size)

184:         self.assertRaises(ValueError, self.array2.resize, -5, 5)

188:         self.assertRaises(ValueError, self.array2.resize, 5, -5)

201:             self.assertTrue(self.array2[i] == array1[i])

212:                 self.assertTrue(self.array2[i][j] == i*j)

217:         self.assertRaises(IndexError, self.array2.__setitem__, -1, a)

222:         self.assertRaises(IndexError, self.array2.__setitem__, self.nrows+1, a)

226:         self.assertRaises(IndexError, self.array2.__getitem__, -1)

230:         self.assertRaises(IndexError, self.array2.__getitem__, self.nrows+1)

244:         self.assertTrue(self.array2.asString() == result)

258:         self.assertTrue(str(self.array2) == result)

263:         self.assertTrue(isinstance(a, np.ndarray))

264:         self.assertTrue(len(a) == self.nrows)

277:         self.assertTrue(isinstance(a, Array.ArrayZ))

278:         self.assertTrue(len(a) == 0)

282:         self.assertTrue(isinstance(self.array3, Array.ArrayZ))

288:         self.assertTrue(isinstance(aa, Array.ArrayZ))

294:         self.assertTrue(arrayCopy == self.array3)

298:         self.assertRaises(ValueError, Array.ArrayZ, -4)

302:         self.assertTrue(self.array3.length() == self.length)

306:         self.assertTrue(len(self.array3) == self.length)

312:         self.assertTrue(len(self.array3) == newLen)

318:         self.assertTrue(len(self.array3) == a.size)

322:         self.assertRaises(ValueError, self.array3.resize, -5)

330:             self.assertTrue(self.array3[i] == i*i)

334:         self.assertRaises(IndexError, self.array3.__setitem__, -1, 0)

338:         self.assertRaises(IndexError, self.array3.__setitem__, self.length+1, 0)

342:         self.assertRaises(IndexError, self.array3.__getitem__, -1)

346:         self.assertRaises(IndexError, self.array3.__getitem__, self.length+1)

351:         self.assertTrue(self.array3.asString() == "[ (1,-1), (2,-2), (3,-3), (4,-4), (5,-5) ]")

356:         self.assertTrue(str(self.array3) == "[ (-2,-4), (-1,-2), (0,0), (1,2), (2,4) ]")

362:         self.assertTrue(isinstance(a, np.ndarray))

363:         self.assertTrue(len(a) == self.length)

364:         self.assertTrue((a == [1+2j, 2+3j, 3+4j, 4+5j, 5+6j]).all())

Total asserts: 66

Filename: tools/swig/test/testFarray.py
31:         self.assertTrue(isinstance(self.array, Farray.Farray))

39:         self.assertTrue(arrayCopy == self.array)

43:         self.assertRaises(ValueError, Farray.Farray, -4, 4)

47:         self.assertRaises(ValueError, Farray.Farray, 4, -4)

51:         self.assertTrue(self.array.nrows() == self.nrows)

55:         self.assertTrue(self.array.ncols() == self.ncols)

59:         self.assertTrue(len(self.array) == self.nrows*self.ncols)

70:                 self.assertTrue(self.array[i, j] == i*j)

74:         self.assertRaises(IndexError, self.array.__setitem__, (-1, 3), 0)

78:         self.assertRaises(IndexError, self.array.__setitem__, (1, -3), 0)

82:         self.assertRaises(IndexError, self.array.__setitem__, (self.nrows+1, 0), 0)

86:         self.assertRaises(IndexError, self.array.__setitem__, (0, self.ncols+1), 0)

90:         self.assertRaises(IndexError, self.array.__getitem__, (-1, 3))

94:         self.assertRaises(IndexError, self.array.__getitem__, (1, -3))

98:         self.assertRaises(IndexError, self.array.__getitem__, (self.nrows+1, 0))

102:         self.assertRaises(IndexError, self.array.__getitem__, (0, self.ncols+1))

116:         self.assertTrue(self.array.asString() == result)

130:         self.assertTrue(str(self.array) == result)

138:         self.assertTrue(isinstance(a, np.ndarray))

139:         self.assertTrue(a.flags.f_contiguous)

142:                 self.assertTrue(a[i, j] == i+j)

Total asserts: 21

Filename: tools/swig/test/testTensor.py
33:             self.assertEqual(norm(tensor), self.result)

35:             self.assertAlmostEqual(norm(tensor), self.result, 6)

44:         self.assertRaises(BadListError, norm, tensor)

53:         self.assertRaises(TypeError, norm, tensor)

62:         self.assertRaises(TypeError, norm, tensor)

69:         self.assertRaises(TypeError, norm, None)

78:         self.assertEqual(max(tensor), 8)

87:         self.assertRaises(BadListError, max, tensor)

94:         self.assertRaises(TypeError, max, None)

101:         self.assertRaises(TypeError, max, [0, -1, 2, -3])

110:         self.assertEqual(min(tensor), 2)

119:         self.assertRaises(BadListError, min, tensor)

126:         self.assertRaises(TypeError, min, True)

133:         self.assertRaises(TypeError, min, [[1, 3], [5, 7]])

144:         self.assertEqual((tensor == [[[4, 0, 4], [0, 4, 0], [4, 0, 4]],

156:         self.assertRaises(TypeError, scale, tensor)

165:         self.assertRaises(TypeError, scale, tensor)

175:         self.assertRaises(TypeError, scale, tensor)

182:         self.assertRaises(TypeError, scale, True)

192:         np.testing.assert_array_equal(tensor, np.array([[[4, 4], [4, 4]],

202:         self.assertRaises(TypeError, floor, tensor)

210:         self.assertRaises(TypeError, floor, tensor)

217:         self.assertRaises(TypeError, floor, object)

227:         np.testing.assert_array_equal(tensor, np.array([[[5, 5], [5, 5]],

237:         self.assertRaises(TypeError, ceil, tensor)

245:         self.assertRaises(TypeError, ceil, tensor)

254:         self.assertRaises(TypeError, ceil, tensor)

263:         self.assertEqual((lower == [[[1, 1], [1, 0]],

265:         self.assertEqual((upper == [[[0, 0], [0, 1]],

Total asserts: 29

Filename: tools/swig/test/testSuperTensor.py
32:         self.assertAlmostEqual(norm(supertensor), answer, 6)

40:         self.assertRaises(BadListError, norm, supertensor)

48:         self.assertRaises(TypeError, norm, supertensor)

56:         self.assertRaises(TypeError, norm, supertensor)

63:         self.assertRaises(TypeError, norm, None)

71:         self.assertEqual(max(supertensor), 8)

79:         self.assertRaises(BadListError, max, supertensor)

86:         self.assertRaises(TypeError, max, None)

93:         self.assertRaises(TypeError, max, [0, -1, 2, -3])

101:         self.assertEqual(min(supertensor), 2)

109:         self.assertRaises(BadListError, min, supertensor)

116:         self.assertRaises(TypeError, min, True)

123:         self.assertRaises(TypeError, min, [[1, 3], [5, 7]])

133:         self.assertEqual((supertensor == answer).all(), True)

143:         self.assertRaises(TypeError, scale, supertensor)

152:         self.assertRaises(TypeError, scale, supertensor)

162:         self.assertRaises(TypeError, scale, supertensor)

169:         self.assertRaises(TypeError, scale, True)

181:         np.testing.assert_array_equal(supertensor, answer)

189:         self.assertRaises(TypeError, floor, supertensor)

197:         self.assertRaises(TypeError, floor, supertensor)

204:         self.assertRaises(TypeError, floor, object)

215:         np.testing.assert_array_equal(supertensor, answer)

223:         self.assertRaises(TypeError, ceil, supertensor)

231:         self.assertRaises(TypeError, ceil, supertensor)

239:         self.assertRaises(TypeError, ceil, supertensor)

250:         self.assertEqual((lower == answer_lower).all(), True)

251:         self.assertEqual((upper == answer_upper).all(), True)

Total asserts: 28

Filename: tools/swig/test/testFortran.py
30:         self.assertEqual(second(matrix), 3)

37:         self.assertEqual(second(matrix), 3)

Total asserts: 2

Filename: tools/swig/test/testVector.py
28:         self.assertEqual(length([5, 12, 0]), 13)

35:         self.assertRaises(BadListError, length, [5, "twelve", 0])

42:         self.assertRaises(TypeError, length, [5, 12])

49:         self.assertRaises(TypeError, length, [[1, 2], [3, 4]])

56:         self.assertRaises(TypeError, length, None)

63:         self.assertEqual(prod([1, 2, 3, 4]), 24)

70:         self.assertRaises(BadListError, prod, [[1, "two"], ["e", "pi"]])

77:         self.assertRaises(TypeError, prod, [[1, 2], [8, 9]])

84:         self.assertRaises(TypeError, prod, None)

91:         self.assertEqual(sum([5, 6, 7, 8]), 26)

98:         self.assertRaises(BadListError, sum, [3, 4, 5, "pi"])

105:         self.assertRaises(TypeError, sum, [[3, 4], [5, 6]])

112:         self.assertRaises(TypeError, sum, True)

121:         self.assertEqual((vector == [4, 2, 1]).all(), True)

129:         self.assertRaises(TypeError, reverse, vector)

137:         self.assertRaises(TypeError, reverse, vector)

145:         self.assertRaises(TypeError, reverse, vector)

152:         self.assertRaises(TypeError, reverse, [2, 4, 6])

161:         np.testing.assert_array_equal(vector, np.array([1, 1, 1, 1, 1]))

169:         self.assertRaises(TypeError, ones, vector)

177:         self.assertRaises(TypeError, ones, vector)

184:         self.assertRaises(TypeError, ones, [2, 4, 6, 8])

193:         np.testing.assert_array_equal(vector, np.array([0, 0, 0, 0, 0]))

201:         self.assertRaises(TypeError, zeros, vector)

209:         self.assertRaises(TypeError, zeros, vector)

216:         self.assertRaises(TypeError, zeros, [1, 3, 5, 7, 9])

224:         self.assertEqual((even == [1, 0, 3]).all(), True)

225:         self.assertEqual((odd  == [0, 2, 0]).all(), True)

233:         self.assertEqual((vector == [2, 2, 2, 2, 2]).all(), True)

240:         self.assertRaises(TypeError, twos, 5.0)

248:         self.assertEqual((vector == [3, 3, 3, 3, 3, 3]).all(), True)

255:         self.assertRaises(TypeError, threes, "threes")

Total asserts: 32

Filename: tools/swig/test/testMatrix.py
29:         self.assertEqual(det(matrix), 30)

37:         self.assertRaises(BadListError, det, matrix)

45:         self.assertRaises(TypeError, det, matrix)

53:         self.assertRaises(TypeError, det, matrix)

60:         self.assertRaises(TypeError, det, None)

68:         self.assertEqual(max(matrix), 6)

76:         self.assertRaises(BadListError, max, matrix)

83:         self.assertRaises(TypeError, max, None)

90:         self.assertRaises(TypeError, max, [0, 1, 2, 3])

98:         self.assertEqual(min(matrix), 4)

106:         self.assertRaises(BadListError, min, matrix)

113:         self.assertRaises(TypeError, min, [1, 3, 5, 7, 9])

120:         self.assertRaises(TypeError, min, False)

129:         self.assertEqual((matrix == [[4, 8, 12], [8, 4, 8], [12, 8, 4]]).all(), True)

137:         self.assertRaises(TypeError, scale, matrix)

145:         self.assertRaises(TypeError, scale, matrix)

153:         self.assertRaises(TypeError, scale, matrix)

161:         self.assertRaises(TypeError, scale, matrix)

170:         np.testing.assert_array_equal(matrix, np.array([[7, 7], [8, 9]]))

178:         self.assertRaises(TypeError, floor, matrix)

186:         self.assertRaises(TypeError, floor, matrix)

194:         self.assertRaises(TypeError, floor, matrix)

203:         np.testing.assert_array_equal(matrix, np.array([[1, 2], [3, 3]]))

211:         self.assertRaises(TypeError, ceil, matrix)

219:         self.assertRaises(TypeError, ceil, matrix)

227:         self.assertRaises(TypeError, ceil, matrix)

235:         self.assertEqual((lower == [[1, 0, 0], [4, 5, 0], [7, 8, 9]]).all(), True)

236:         self.assertEqual((upper == [[0, 2, 3], [0, 0, 6], [0, 0, 0]]).all(), True)

Total asserts: 28

Filename: tools/swig/test/testFlat.py
36:         self.assertEqual(np.all((x+1)==y),True)

49:         self.assertEqual(np.all((x+1)==y),True)

62:         self.assertEqual(np.all((x.T+1)==y.T),True)

73:         self.assertRaises(TypeError, process, x[
Total asserts: 4

Filename: tools/refguide_check.py
619:       'assert_allclose'
620:       'assert_equal'
1202:                 assert isinstance(v, tuple), v

Total asserts: 3

Filename: tools/cythonize.py
58:     assert fromfile.endswith('.pyx.in')

71:     assert fromfile.endswith('.pxd.in')

72:     assert tofile.endswith('.pxd')

82:     assert fromfile.endswith('.pxi.in')

83:     assert tofile.endswith('.pxi')

93:     assert fromfile.endswith('.pxd.in')

94:     assert tofile.endswith('.pxd')

Total asserts: 7

Filename: tools/npy_tempita/__init__.py
114:             assert len(delimiters) == 2 and all(

270:             assert 0, "Unknown code
295:             assert not isinstance(part, basestring_)

925:         assert 0, "Unexpected token %r at %s" % (first, pos)

944:     assert first.startswith('for ')

975:     assert first.startswith('default ')

997:     assert first.startswith('inherit ')

1005:     assert first.startswith('def ')

Total asserts: 8

Filename: versioneer.py
380:     assert isinstance(commands, list)

484:     assert isinstance(commands, list)

1414:     assert cfg.VCS is not None, "please set [versioneer]VCS= in setup.cfg"

1416:     assert handlers, "unrecognized VCS '%s'" % cfg.VCS

1418:     assert cfg.versionfile_source is not None, \

1420:     assert cfg.tag_prefix is not None, "please set versioneer.tag_prefix"

Total asserts: 6

Total Test Files with assert statements: 226
