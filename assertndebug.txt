./tools/openblas_support.py:45:    assert plat in SUPPORTED_PLATFORMS,  f'invalid platform {plat}'
./tools/openblas_support.py:64:    assert ret in ('1', '2010', '2014', '_2_24'), f'invalid MB_ML_VER {ret}'
./tools/openblas_support.py:315:    assert check_str in res, f'{expected_version} not found in {res}'
./tools/openblas_support.py:317:        assert b"USE64BITINT" in res
./tools/openblas_support.py:319:        assert b"USE64BITINT" not in res
./tools/refguide_check.py:1202:                assert isinstance(v, tuple), v
./tools/cythonize.py:58:    assert fromfile.endswith('.pyx.in')
./tools/cythonize.py:71:    assert fromfile.endswith('.pxd.in')
./tools/cythonize.py:72:    assert tofile.endswith('.pxd')
./tools/cythonize.py:82:    assert fromfile.endswith('.pxi.in')
./tools/cythonize.py:83:    assert tofile.endswith('.pxi')
./tools/cythonize.py:93:    assert fromfile.endswith('.pxd.in')
./tools/cythonize.py:94:    assert tofile.endswith('.pxd')
./tools/npy_tempita/__init__.py:114:            assert len(delimiters) == 2 and all(
./tools/npy_tempita/__init__.py:270:            assert 0, "Unknown code: %r" % name
./tools/npy_tempita/__init__.py:295:            assert not isinstance(part, basestring_)
./tools/npy_tempita/__init__.py:925:        assert 0, "Unexpected token %r at %s" % (first, pos)
./tools/npy_tempita/__init__.py:944:    assert first.startswith('for ')
./tools/npy_tempita/__init__.py:975:    assert first.startswith('default ')
./tools/npy_tempita/__init__.py:997:    assert first.startswith('inherit ')
./tools/npy_tempita/__init__.py:1005:    assert first.startswith('def ')
./numpy/distutils/unixccompiler.py:137:        log.debug("skipping %s (up-to-date)", output_filename)
./numpy/distutils/ccompiler.py:774:    log.debug('new_compiler returns %s' % (klass))
./numpy/distutils/misc_util.py:144:        assert apath[len(pd)] in [os.sep], repr((path, apath[len(pd)]))
./numpy/distutils/misc_util.py:192:            assert is_string(p)
./numpy/distutils/misc_util.py:267:    assert is_sequence(paths), repr(type(paths))
./numpy/distutils/misc_util.py:269:    assert not is_string(paths), repr(paths)
./numpy/distutils/misc_util.py:1000:        assert '*' not in subpackage_name, repr((subpackage_name, subpackage_path, parent_name))
./numpy/distutils/misc_util.py:1063:            assert isinstance(d, dict), repr(type(d))
./numpy/distutils/misc_util.py:1170:                            assert s==path_list[i], repr((s, path_list[i], data_path, d, path, rpath))
./numpy/distutils/misc_util.py:1182:        assert not is_glob_pattern(d), repr(d)
./numpy/distutils/misc_util.py:1296:        assert len(files)==1
./numpy/distutils/misc_util.py:1345:        assert not is_glob_pattern(d), repr((d, filepat))
./numpy/distutils/misc_util.py:1504:                assert isinstance(info, dict), repr(info)
./numpy/distutils/misc_util.py:1884:            assert isinstance(extlib, Extension), repr(extlib)
./numpy/distutils/system_info.py:737:        assert isinstance(self.search_static_first, int)
./numpy/distutils/system_info.py:924:        log.debug('( %s = %s )', key, ':'.join(ret))
./numpy/distutils/system_info.py:1010:        assert is_string(lib_dir)
./numpy/distutils/system_info.py:1023:                assert len(p) == 1
./numpy/distutils/system_info.py:3099:    log.debug('(paths: %s)', ','.join(result))
./numpy/distutils/exec_command.py:113:        assert os.path.isfile(pythonexe), '%r is not a file' % (pythonexe,)
./numpy/distutils/exec_command.py:126:    log.debug('find_executable(%r)' % exe)
./numpy/distutils/exec_command.py:168:    log.debug('_preserve_environment(%r)' % (names))
./numpy/distutils/exec_command.py:173:    log.debug('_update_environment(...)')
./numpy/distutils/exec_command.py:211:    log.debug('exec_command(%r,%s)' % (command,
./numpy/distutils/exec_command.py:232:        log.debug('New cwd: %s' % execute_in)
./numpy/distutils/exec_command.py:234:        log.debug('Retaining cwd: %s' % oldcwd)
./numpy/distutils/exec_command.py:247:            log.debug('Restored cwd to %s' % oldcwd)
./numpy/distutils/mingw32ccompiler.py:300:        log.debug('Skip building import library: '
./numpy/distutils/mingw32ccompiler.py:306:        log.debug('Skip building msvcr library:'
./numpy/distutils/mingw32ccompiler.py:318:        log.debug('Skip building msvcr library: "%s" exists' %
./numpy/distutils/mingw32ccompiler.py:399:        log.debug('Skip building import library: "%s" exists', out_file)
./numpy/distutils/mingw32ccompiler.py:421:        log.debug('Skip building import library: "%s" exists', out_file)
./numpy/distutils/fcompiler/gnu.py:255:        assert "," not in dir
./numpy/distutils/fcompiler/intel.py:25:        assert "," not in dir
./numpy/distutils/fcompiler/__init__.py:245:            assert self._is_customised
./numpy/distutils/fcompiler/__init__.py:272:        assert value is None or is_sequence_of_strings(value[1:]), (key, value)
./numpy/distutils/fcompiler/__init__.py:294:        assert self._is_customised
./numpy/distutils/fcompiler/__init__.py:423:        assert self._is_customised
./numpy/distutils/fcompiler/__init__.py:592:        assert self.compile_switch.strip()
./numpy/distutils/fcompiler/__init__.py:683:            log.debug("skipping %s (up-to-date)", output_filename)
./numpy/distutils/fcompiler/__init__.py:821:            log.debug("_find_existing_fcompiler: compiler_type='%s' raised DistutilsModuleError", compiler_type)
./numpy/distutils/fcompiler/__init__.py:823:            log.debug("_find_existing_fcompiler: compiler_type='%s' not found", compiler_type)
./numpy/distutils/fcompiler/__init__.py:931:            log.debug("show_fcompilers: %s not found" % (compiler,))
./numpy/distutils/fcompiler/__init__.py:932:            log.debug(repr(e))
./numpy/distutils/command/build_ext.py:387:            log.debug("Detected changes on compiler optimizations")
./numpy/distutils/command/build_ext.py:390:            log.debug("skipping '%s' extension (up-to-date)", ext.name)
./numpy/distutils/command/build_src.py:490:                    log.debug('  source %s does not exist: skipping f2py\'ing.' \
./numpy/distutils/command/build_src.py:546:                log.debug("  skipping '%s' f2py interface (up-to-date)" % (source))
./numpy/distutils/command/build_src.py:566:                log.debug("  skipping f2py fortran files for '%s' (up-to-date)"\
./numpy/distutils/command/build_src.py:713:                log.debug("  skipping '%s' swig interface (up-to-date)" \
./numpy/distutils/command/__init__.py:11:        assert_raises(AttributeError, delattr, a, s)
./numpy/distutils/command/build_clib.py:247:            log.debug("Detected changes on compiler optimizations")
./numpy/distutils/command/build_clib.py:250:            log.debug("skipping '%s' library (up-to-date)", lib_name)
./numpy/distutils/_shell_utils.py:68:        assert not ctypes.windll.kernel32.LocalFree(lpargs)
./numpy/distutils/_shell_utils.py:71:        assert args[0] == "dummy"
./numpy/distutils/ccompiler_opt.py:601:        assert(isinstance(sources, list))
./numpy/distutils/ccompiler_opt.py:602:        assert(isinstance(flags, list))
./numpy/distutils/ccompiler_opt.py:613:        assert(isinstance(source, str))
./numpy/distutils/ccompiler_opt.py:1053:                assert(isinstance(flags, str))
./numpy/distutils/ccompiler_opt.py:1066:        assert(isinstance(flags, list))
./numpy/distutils/ccompiler_opt.py:1097:        assert(isinstance(flags, list))
./numpy/distutils/ccompiler_opt.py:1254:        assert(
./numpy/distutils/ccompiler_opt.py:1260:        assert(force_flags is None or isinstance(force_flags, list))
./numpy/distutils/ccompiler_opt.py:1281:        assert(name.isupper())
./numpy/distutils/ccompiler_opt.py:1351:            assert(hasattr(names, "__iter__"))
./numpy/distutils/ccompiler_opt.py:1393:        assert(
./numpy/distutils/ccompiler_opt.py:1427:        assert(
./numpy/distutils/ccompiler_opt.py:1558:        assert(name.isupper())
./numpy/distutils/ccompiler_opt.py:1559:        assert(force_flags is None or isinstance(force_flags, list))
./numpy/distutils/ccompiler_opt.py:1575:        assert(isinstance(name, str))
./numpy/distutils/ccompiler_opt.py:1596:        assert isinstance(name, str)
./numpy/distutils/ccompiler_opt.py:1646:        assert(feature_name.isupper())
./numpy/distutils/ccompiler_opt.py:1648:        assert(feature is not None)
./numpy/distutils/ccompiler_opt.py:1915:        assert(isinstance(tokens, str))
./numpy/distutils/ccompiler_opt.py:2511:        assert(isinstance(target, (str, tuple)))
./numpy/core/overrides.py:119:        assert example.__module__ == 'numpy'
./numpy/core/code_generators/generate_umath.py:86:        assert len(self.in_) == nin
./numpy/core/code_generators/generate_umath.py:89:        assert len(self.out) == nout
./numpy/core/code_generators/ufunc_docstrings.py:53:            assert '$OUT_SCALAR_1' in doc, "in {}".format(name)
./numpy/core/code_generators/ufunc_docstrings.py:55:            assert '$OUT_SCALAR_2' in doc, "in {}".format(name)
./numpy/core/code_generators/ufunc_docstrings.py:57:            assert False, "Could not detect number of inputs in {}".format(name)
./numpy/core/code_generators/numpy_api.py:304:    'NpyIter_DebugPrint':                   (261,),
./numpy/core/code_generators/numpy_api.py:330:    'PyArray_DebugPrint':                   (285,),
./numpy/core/numeric.py:1645:            assert b.shape[-1] == 3
./numpy/core/numeric.py:1655:        assert a.shape[-1] == 3
./numpy/core/numeric.py:1670:            assert b.shape[-1] == 2
./numpy/core/_exceptions.py:27:    assert issubclass(cls, Exception)
./numpy/core/_exceptions.py:44:        assert len(self.dtypes) == 2
./numpy/core/arrayprint.py:354:    ...      assert_equal(opts, np.get_printoptions())
./numpy/core/src/multiarray/arrayfunction_override.c:16:    assert(method != NULL);
./numpy/core/src/multiarray/arrayfunction_override.c:415:        assert(args == NULL);
./numpy/core/src/multiarray/arrayfunction_override.c:416:        assert(kwargs == NULL);
./numpy/core/src/multiarray/common.c:212:        assert(!PyArray_CHKFLAGS(ap, NPY_ARRAY_OWNDATA));
./numpy/core/src/multiarray/item_selection.c:1666:        assert(N > 0);  /* Guaranteed and assumed by indbuffer */
./numpy/core/src/multiarray/item_selection.c:2344:    assert(elsize <= 8);
./numpy/core/src/multiarray/buffer.c:150:        assert(offset == 0);
./numpy/core/src/multiarray/buffer.c:152:            assert(descr->elsize % descr->alignment == 0);
./numpy/core/src/multiarray/buffer.c:407:            assert(descr->elsize % 4 == 0);
./numpy/core/src/multiarray/buffer.c:480:        assert(PyArray_Check(obj));
./numpy/core/src/multiarray/buffer.c:498:            assert((size_t)info->shape % sizeof(npy_intp) == 0);
./numpy/core/src/multiarray/multiarraymodule.c:446:        assert(dtype == NULL);
./numpy/core/src/multiarray/multiarraymodule.c:491:        assert(PyArray_DESCR(ret) == descr);
./numpy/core/src/multiarray/multiarraymodule.c:561:        assert(dtype == NULL);
./numpy/core/src/multiarray/multiarraymodule.c:596:        assert(PyArray_DESCR(ret) == descr);
./numpy/core/src/multiarray/nditer_api.c:1420:NpyIter_DebugPrint(NpyIter *iter)
./numpy/core/src/multiarray/nditer_api.c:2051:                assert(0);
./numpy/core/src/multiarray/nditer_api.c:2230:                assert(!(op_itflags[iop] & NPY_OP_ITFLAG_USINGBUFFER));
./numpy/core/src/multiarray/nditer_api.c:2243:                assert(!(op_itflags[iop] & NPY_OP_ITFLAG_USINGBUFFER));
./numpy/core/src/multiarray/abstractdtypes.c:26:    assert(PyLong_Check(obj));
./numpy/core/src/multiarray/abstractdtypes.c:65:    assert(PyFloat_CheckExact(obj));
./numpy/core/src/multiarray/abstractdtypes.c:79:    assert(PyComplex_CheckExact(obj));
./numpy/core/src/multiarray/abstractdtypes.c:221:            assert(other->type_num == NPY_LONGDOUBLE);
./numpy/core/src/multiarray/iterators.c:1762:            assert(PyArray_EquivArrTypes(x->ao, fill) == NPY_TRUE);
./numpy/core/src/multiarray/refcount.c:78:        assert(0);
./numpy/core/src/multiarray/refcount.c:140:        assert(0);
./numpy/core/src/multiarray/refcount.c:351:        assert(0);
./numpy/core/src/multiarray/dragon4.c:42:#define DEBUG_ASSERT(stmnt) assert(stmnt)
./numpy/core/src/multiarray/dragon4.c:44:#define DEBUG_ASSERT(stmnt) do {} while(0)
./numpy/core/src/multiarray/dragon4.c:367:        DEBUG_ASSERT(carry == 1);
./numpy/core/src/multiarray/dragon4.c:368:        DEBUG_ASSERT((npy_uint32)(resultCur - result->blocks) ==
./numpy/core/src/multiarray/dragon4.c:390:    DEBUG_ASSERT(result != lhs && result != rhs);
./numpy/core/src/multiarray/dragon4.c:404:    DEBUG_ASSERT(maxResultLen <= c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:434:            DEBUG_ASSERT(resultCur < result->blocks + maxResultLen);
./numpy/core/src/multiarray/dragon4.c:466:        DEBUG_ASSERT(lhs->length + 1 <= c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:493:        DEBUG_ASSERT(in->length + 1 <= c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:519:        DEBUG_ASSERT(result->length + 1 <= c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:542:        DEBUG_ASSERT(result->length + 1 <= c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:768:    DEBUG_ASSERT(exponent < 8192);
./numpy/core/src/multiarray/dragon4.c:816:    DEBUG_ASSERT(exponent < 8192);
./numpy/core/src/multiarray/dragon4.c:870:    DEBUG_ASSERT(blockIdx < c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:931:    DEBUG_ASSERT(quotient <= 9);
./numpy/core/src/multiarray/dragon4.c:1012:    DEBUG_ASSERT(inLength + shiftBlocks < c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:1013:    DEBUG_ASSERT(shift != 0);
./numpy/core/src/multiarray/dragon4.c:1047:        DEBUG_ASSERT(outBlockIdx < c_BigInt_MaxBlocks);
./numpy/core/src/multiarray/dragon4.c:1062:        DEBUG_ASSERT(outBlockIdx == shiftBlocks + 1);
./numpy/core/src/multiarray/dragon4.c:1183:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:1406:    DEBUG_ASSERT(scale->length > 0);
./numpy/core/src/multiarray/dragon4.c:1422:        DEBUG_ASSERT(hiBlockLog2 < 3 || hiBlockLog2 > 27);
./numpy/core/src/multiarray/dragon4.c:1448:            DEBUG_ASSERT(outputDigit < 10);
./numpy/core/src/multiarray/dragon4.c:1494:            DEBUG_ASSERT(outputDigit < 10);
./numpy/core/src/multiarray/dragon4.c:1574:    DEBUG_ASSERT(outputLen <= bufferSize);
./numpy/core/src/multiarray/dragon4.c:1656:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:1659:        DEBUG_ASSERT(precision >= 0);
./numpy/core/src/multiarray/dragon4.c:1676:    DEBUG_ASSERT(numDigits > 0);
./numpy/core/src/multiarray/dragon4.c:1677:    DEBUG_ASSERT(numDigits <= bufferSize);
./numpy/core/src/multiarray/dragon4.c:1862:    DEBUG_ASSERT(pos <= maxPrintLen);
./numpy/core/src/multiarray/dragon4.c:1899:        DEBUG_ASSERT(precision >= 0);
./numpy/core/src/multiarray/dragon4.c:1902:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:1934:    DEBUG_ASSERT(numDigits > 0);
./numpy/core/src/multiarray/dragon4.c:1935:    DEBUG_ASSERT(numDigits <= bufferSize);
./numpy/core/src/multiarray/dragon4.c:2038:        DEBUG_ASSERT(printExponent < 100000);
./numpy/core/src/multiarray/dragon4.c:2065:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:2084:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:2118:    DEBUG_ASSERT(bufferSize > 0);
./numpy/core/src/multiarray/dragon4.c:3034:            DEBUG_ASSERT(exponent1 == -1022);
./numpy/core/src/multiarray/array_coercion.c:229:    assert(PyObject_TypeCheck(DType, (PyTypeObject *)&PyArrayDTypeMeta_Type));
./numpy/core/src/multiarray/array_coercion.c:523:                assert(i == 0);
./numpy/core/src/multiarray/array_coercion.c:618:    assert(!(*flags & DESCRIPTOR_WAS_SET));
./numpy/core/src/multiarray/array_coercion.c:725:        assert(DType->type_num != NPY_OBJECT);  /* not parametric */
./numpy/core/src/multiarray/array_coercion.c:1073:    assert(!PyBytes_Check(obj) && !PyUnicode_Check(obj));
./numpy/core/src/multiarray/array_coercion.c:1185:    assert(*out_descr == NULL || fixed_DType == NULL);
./numpy/core/src/multiarray/array_coercion.c:1188:        assert(PyObject_TypeCheck(
./numpy/core/src/multiarray/array_coercion.c:1193:        assert(fixed_DType == NPY_DTYPE(requested_descr));
./numpy/core/src/multiarray/array_coercion.c:1304:                assert(PyArray_NDIM(arr) + current->depth >= ndim);
./numpy/core/src/multiarray/array_coercion.c:1372:        assert(*out_descr == requested_descr);
./numpy/core/src/multiarray/array_coercion.c:1451:            assert(dtype != (PyObject * )&PyArrayDescr_Type);  /* not np.dtype */
./numpy/core/src/multiarray/methods.c:1140:    assert(PyTuple_CheckExact(args));
./numpy/core/src/multiarray/methods.c:1141:    assert(kwds == NULL || PyDict_CheckExact(kwds));
./numpy/core/src/multiarray/dtypemeta.c:27:    assert(((PyTypeObject *)self)->tp_flags & Py_TPFLAGS_HEAPTYPE);
./numpy/core/src/multiarray/dtypemeta.c:93:    assert(0);
./numpy/core/src/multiarray/dtypemeta.c:94:    assert(!NPY_DT_is_legacy(type) && (PyTypeObject *)type != &PyArrayDescr_Type);
./numpy/core/src/multiarray/dtypemeta.c:131:    assert(!NPY_DT_is_parametric(cls));
./numpy/core/src/multiarray/dtypemeta.c:518:    assert(cls->type_num < NPY_NTYPES);
./numpy/core/src/multiarray/dtypemeta.c:545:    assert(cls->type_num < NPY_NTYPES && cls != other);
./numpy/core/src/multiarray/alloc.c:77:    assert((esz == 1 && cache == datacache) ||
./numpy/core/src/multiarray/alloc.c:79:    assert(PyGILState_Check());
./numpy/core/src/multiarray/alloc.c:114:    assert(PyGILState_Check());
./numpy/core/src/multiarray/alloc.c:263:    assert(size != 0);
./numpy/core/src/multiarray/alloc.c:327:    assert(size != 0);
./numpy/core/src/multiarray/alloc.c:425:    assert(size != 0);
./numpy/core/src/multiarray/alloc.c:494:    assert(size != 0);
./numpy/core/src/multiarray/common_dtype.c:120:    assert(length >= 2);
./numpy/core/src/multiarray/arrayobject.c:256:        assert(cache->converted_obj == src_object);
./numpy/core/src/multiarray/arrayobject.c:275:        assert (ndim <= PyArray_NDIM(dest));  /* would error during discovery */
./numpy/core/src/multiarray/arrayobject.c:495:PyArray_DebugPrint(PyArrayObject *obj)
./numpy/core/src/multiarray/arrayobject.c:545:        PyArray_DebugPrint((PyArrayObject *)fobj->base);
./numpy/core/src/multiarray/arrayobject.c:1306:         *   assert np.array(l, dtype="S1") == np.array(l, dtype="O")
./numpy/core/src/multiarray/dtype_transfer.c:1121:    assert(PyDataType_ISNOTSWAPPED(src_dtype));
./numpy/core/src/multiarray/dtype_transfer.c:1210:    assert(src_dtype->type_num == NPY_UNICODE);
./numpy/core/src/multiarray/dtype_transfer.c:3030:    assert(PyArray_DescrCheck(cast_info->descriptors[0]));
./numpy/core/src/multiarray/dtype_transfer.c:3031:    assert(PyArray_DescrCheck(cast_info->descriptors[1]));
./numpy/core/src/multiarray/dtype_transfer.c:3064:    assert(cast_info->auxdata == NULL);
./numpy/core/src/multiarray/dtype_transfer.c:3160:            assert(castdata.from.func != NULL);
./numpy/core/src/multiarray/dtype_transfer.c:3199:            assert(castdata.to.func != NULL);
./numpy/core/src/multiarray/dtype_transfer.c:3261:    assert(src_dtype != NULL);
./numpy/core/src/multiarray/dtype_transfer.c:3273:        assert(move_references);
./numpy/core/src/multiarray/dtype_transfer.c:3517:    assert(dst_dtype != NULL);
./numpy/core/src/multiarray/dlpack.c:46:        assert(!PyErr_Occurred());
./numpy/core/src/multiarray/dlpack.c:73:        assert(!PyErr_Occurred());
./numpy/core/src/multiarray/nditer_constr.c:1984:            assert(i < orig_op_ndim);
./numpy/core/src/multiarray/nditer_constr.c:2574:                    assert(!reduction_axis || shape[i] == 1);
./numpy/core/src/multiarray/convert_datatype.c:421:        assert(casting != NPY_NO_CASTING);
./numpy/core/src/multiarray/convert_datatype.c:424:        assert(casting != NPY_EQUIV_CASTING
./numpy/core/src/multiarray/convert_datatype.c:1035:    assert(n > 0);  /* concatenate requires at least one array input. */
./numpy/core/src/multiarray/convert_datatype.c:1912:    assert(ndescr > 0);
./numpy/core/src/multiarray/convert_datatype.c:2318:    assert(loop_descrs[0]->elsize == loop_descrs[1]->elsize);
./numpy/core/src/multiarray/convert_datatype.c:2369:    assert(NPY_DT_is_legacy(dtypes[0]) && NPY_DT_is_legacy(dtypes[1]));
./numpy/core/src/multiarray/convert_datatype.c:2406:    assert(descrs[0]->kind == descrs[1]->kind);
./numpy/core/src/multiarray/convert_datatype.c:2407:    assert(descrs[0]->elsize == descrs[1]->elsize);
./numpy/core/src/multiarray/convert_datatype.c:2516:    assert(slots[1].pfunc && slots[2].pfunc && slots[3].pfunc && slots[4].pfunc);
./numpy/core/src/multiarray/convert_datatype.c:2609:            assert(given_descrs[0]->elsize <= 8);
./numpy/core/src/multiarray/convert_datatype.c:2610:            assert(given_descrs[0]->elsize > 0);
./numpy/core/src/multiarray/convert_datatype.c:2676:        assert(dtypes[0]->type_num == NPY_UNICODE &&
./numpy/core/src/multiarray/convert_datatype.c:2791:    assert(NPY_DTYPE(descrs[0]) == NPY_DTYPE(descrs[1]));
./numpy/core/src/multiarray/convert_datatype.c:3426:        assert(from_sub || to_sub);
./numpy/core/src/multiarray/descriptor.c:733:    assert(PyUnicode_Check(obj));
./numpy/core/src/multiarray/descriptor.c:1829:        assert(0);
./numpy/core/src/multiarray/descriptor.c:1962:    assert(PyTuple_Check(self->subarray->shape));
./numpy/core/src/multiarray/ctors.c:486:            assert(ndim != 0);  /* guaranteed by PyArray_AssignFromCache */
./numpy/core/src/multiarray/ctors.c:487:            assert(PyArray_NDIM(self) == 0);
./numpy/core/src/multiarray/ctors.c:497:            assert(0);
./numpy/core/src/multiarray/ctors.c:520:        assert(PyArray_Check(obj));
./numpy/core/src/multiarray/ctors.c:526:        assert(depth != ndim);
./numpy/core/src/multiarray/ctors.c:596:    assert(cache->sequence);
./numpy/core/src/multiarray/ctors.c:597:    assert(ndim != 0);  /* guaranteed if cache contains a sequence */
./numpy/core/src/multiarray/ctors.c:1696:            assert(PyArray_NDIM(ret) != ndim);
./numpy/core/src/multiarray/ctors.c:1749:        assert(cache->converted_obj == op);
./numpy/core/src/multiarray/ctors.c:1768:        assert(ndim == 0);
./numpy/core/src/multiarray/ctors.c:1791:        assert(ndim == 0);
./numpy/core/src/multiarray/ctors.c:1846:        assert(ndim == 0);
./numpy/core/src/multiarray/ctors.c:1856:    assert(ndim != 0);
./numpy/core/src/multiarray/ctors.c:1857:    assert(op == cache->converted_obj);
./numpy/core/src/multiarray/compiled_base.c:1188:    assert(order == NPY_CORDER || order == NPY_FORTRANORDER);
./numpy/core/src/multiarray/nditer_pywrap.c:1378:        NpyIter_DebugPrint(self->iter);
./numpy/core/src/multiarray/datetime.c:45:    assert(unit > 0);
./numpy/core/src/multiarray/datetime.c:52:    assert(mod >= 0);
./numpy/core/src/multiarray/datetime.c:59:    assert(unit > 0);
./numpy/core/src/multiarray/datetime.c:66:    assert(mod >= 0);
./numpy/core/src/multiarray/datetime.c:568:                assert(out->hour >= 0);
./numpy/core/src/multiarray/datetime.c:587:                assert(out->sec >= 0);
./numpy/core/src/multiarray/datetime.c:2951:            assert(NPY_FALSE);
./numpy/core/src/multiarray/datetime.c:3368:        assert(type_nums[0] == NPY_TIMEDELTA);
./numpy/core/src/multiarray/datetime.c:3784:    assert(meta1 != NULL);
./numpy/core/src/multiarray/datetime.c:3786:    assert(meta2 != NULL);
./numpy/core/src/multiarray/datetime.c:3896:    assert(needs_api == 0);
./numpy/core/src/multiarray/datetime.c:3915:        assert(meta != NULL);
./numpy/core/src/multiarray/datetime.c:3956:            assert(meta != NULL);
./numpy/core/src/multiarray/datetime.c:4003:        assert(descrs[1]->type_num == NPY_UNICODE);
./numpy/core/src/multiarray/datetime.c:4062:        assert(descrs[0]->type_num == NPY_UNICODE);
./numpy/core/src/multiarray/textreading/rows.c:36:    assert(converters != Py_None);
./numpy/core/src/multiarray/textreading/rows.c:191:        assert(homogeneous || num_field_types == num_usecols);
./numpy/core/src/multiarray/textreading/rows.c:195:        assert(usecols == NULL || num_field_types == num_usecols);
./numpy/core/src/multiarray/textreading/rows.c:314:                assert(max_rows >=0);
./numpy/core/src/multiarray/textreading/rows.c:438:        assert(row_count == 0 && result_shape[0] == 0);
./numpy/core/src/multiarray/textreading/field_types.c:15:    assert(num_field_types >= 0);
./numpy/core/src/multiarray/textreading/field_types.c:51:                assert(0);
./numpy/core/src/multiarray/textreading/field_types.c:65:                assert(0);
./numpy/core/src/multiarray/textreading/growth.c:21:    assert((min_grow & (min_grow - 1)) == 0);
./numpy/core/src/npymath/halffloat.c:433:        assert(d_exp - 998 >= 0);
./numpy/core/src/common/numpyos.c:87:            assert(extra_zeros_cnt >= 0);
./numpy/core/src/common/mem_overlap.c:213:    assert(a1 > 0);
./numpy/core/src/common/mem_overlap.c:214:    assert(a2 > 0);
./numpy/core/src/common/mem_overlap.c:266:    assert(n >= 2);
./numpy/core/src/common/npy_hashtable.c:98:    assert(key_len > 0);
./numpy/core/src/common/npy_hashtable.c:126:    assert(prev_size > 0);
./numpy/core/src/common/npy_hashtable.c:142:        assert(new_size >= 4);
./numpy/core/src/common/npy_argparse.c:361:    assert(len_args + len_kwargs <= cache->nargs);
./numpy/core/src/common/npy_argparse.c:397:        assert(0);
./numpy/core/src/umath/legacy_array_method.c:200:    assert(aligned);
./numpy/core/src/umath/legacy_array_method.c:201:    assert(!move_references);
./numpy/core/src/umath/ufunc_object.c:1220:    assert(context->method->nout == 1);
./numpy/core/src/umath/ufunc_object.c:1238:            assert(iop == nin);
./numpy/core/src/umath/ufunc_object.c:1422:        assert(PyArray_TYPE(op[nop]) == NPY_BOOL);
./numpy/core/src/umath/ufunc_object.c:1972:            assert(core_start_dim >= 0);
./numpy/core/src/umath/ufunc_object.c:2226:        assert(!(axes != NULL && axis != NULL));
./numpy/core/src/umath/ufunc_object.c:2495:    assert(!NpyIter_IsBuffered(iter));
./numpy/core/src/umath/ufunc_object.c:2836:        assert(!masked);  /* Path currently not available for masked */
./numpy/core/src/umath/ufunc_object.c:3057:    assert(PyArray_EquivTypes(descrs[0], descrs[1])
./numpy/core/src/umath/ufunc_object.c:3474:    assert(PyArray_EquivTypes(descrs[0], descrs[1])
./numpy/core/src/umath/ufunc_object.c:3583:        assert(out == NULL);
./numpy/core/src/umath/ufunc_object.c:4385:    assert(signature_obj != NULL);
./numpy/core/src/umath/wrapping_array_method.c:149:    assert(move_references == 0);  /* only used internally for "decref" funcs */
./numpy/core/src/umath/reduction.c:189:    assert(loop != NULL);
./numpy/core/src/umath/reduction.c:245:        assert(op_dtypes[2]->type_num == NPY_BOOL);
./numpy/core/src/umath/override.c:183:            assert(strcmp(keywords[i], "initial") == 0);
./numpy/core/src/umath/dispatching.c:229:            assert((PyObject *)given_dtype != Py_None);
./numpy/core/src/umath/dispatching.c:854:            assert(i >= ufunc->nin || !NPY_DT_is_abstract(signature[i]));
./numpy/core/src/umath/dispatching.c:918:            assert((PyObject *)signature[i] == PyTuple_GET_ITEM(all_dtypes, i));
./numpy/core/src/umath/dispatching.c:946:    assert(ufunc->nin > 1);
./numpy/core/src/umath/dispatching.c:948:        assert(ufunc->nin == 2 && ufunc->nout == 1);  /* must be reduction */
./numpy/core/src/umath/ufunc_type_resolution.c:1812:    assert(n_specified == nop);
./numpy/linalg/linalg.py:2803:        assert out is None
./numpy/ma/timer_comparison.py:80:                assert cond, msg
./numpy/ma/timer_comparison.py:98:                assert cond, msg
./numpy/ma/timer_comparison.py:137:        assert((xm-ym).filled(0).any())
./numpy/ma/timer_comparison.py:139:        assert(xm.size == reduce(lambda x, y:x*y, s))
./numpy/ma/timer_comparison.py:140:        assert(self.count(xm) == len(m1) - reduce(lambda x, y:x+y, m1))
./numpy/ma/timer_comparison.py:148:            assert(self.count(xm) == len(m1) - reduce(lambda x, y:x+y, m1))
./numpy/ma/timer_comparison.py:164:        assert type(x2[1]) is type(x1[1])
./numpy/ma/timer_comparison.py:165:        assert x1[1] == x2[1]
./numpy/ma/timer_comparison.py:184:        assert x1[1:1].shape == (0,)
./numpy/ma/timer_comparison.py:189:        assert(m is m2)
./numpy/ma/timer_comparison.py:191:        assert(m is not m3)
./numpy/ma/timer_comparison.py:202:        assert self.allequal(self.concatenate([x4, x4]), y4)
./numpy/ma/timer_comparison.py:203:        assert self.allequal(self.getmask(y4), [0, 0, 1, 0, 0, 0, 1, 0])
./numpy/ma/timer_comparison.py:207:        assert self.allequal(y5, y6)
./numpy/ma/timer_comparison.py:209:        assert self.allequal(y5, y7)
./numpy/ma/timer_comparison.py:211:        assert self.allequal(y5, y8)
./numpy/ma/timer_comparison.py:224:        assert self.allequal(np.transpose(y, (2, 0, 1)), self.transpose(x, (2, 0, 1)))
./numpy/ma/timer_comparison.py:225:        assert self.allequal(np.take(y, (2, 0, 1), 1), self.take(x, (2, 0, 1), 1))
./numpy/ma/timer_comparison.py:226:        assert self.allequal(np.inner(self.filled(x, 0), self.filled(y, 0)),
./numpy/ma/timer_comparison.py:228:        assert self.allequal(np.outer(self.filled(x, 0), self.filled(y, 0)),
./numpy/ma/timer_comparison.py:233:        assert t[0] == 'abc'
./numpy/ma/timer_comparison.py:234:        assert t[1] == 2
./numpy/ma/timer_comparison.py:235:        assert t[2] == 3
./numpy/ma/timer_comparison.py:248:        assert self.allequal(x, y+1)
./numpy/ma/timer_comparison.py:250:        assert self.allequal(xm, y+1)
./numpy/ma/timer_comparison.py:256:        assert self.allequal(x, y-1)
./numpy/ma/timer_comparison.py:258:        assert self.allequal(xm, y-1)
./numpy/ma/timer_comparison.py:264:        assert self.allequal(x, y*2)
./numpy/ma/timer_comparison.py:266:        assert self.allequal(xm, y*2)
./numpy/ma/timer_comparison.py:272:        assert self.allequal(x, y)
./numpy/ma/timer_comparison.py:274:        assert self.allequal(xm, y)
./numpy/ma/timer_comparison.py:280:        assert self.allequal(x, y/2.0)
./numpy/ma/timer_comparison.py:288:        assert self.allequal(x, y + 1.)
./numpy/ma/timer_comparison.py:305:        assert self.allequal(x, y+a)
./numpy/ma/timer_comparison.py:306:        assert self.allequal(xm, y+a)
./numpy/ma/timer_comparison.py:307:        assert self.allequal(xm.mask, self.mask_or(m, a.mask))
./numpy/ma/timer_comparison.py:317:        assert self.allequal(x, y-a)
./numpy/ma/timer_comparison.py:318:        assert self.allequal(xm, y-a)
./numpy/ma/timer_comparison.py:319:        assert self.allequal(xm.mask, self.mask_or(m, a.mask))
./numpy/ma/timer_comparison.py:329:        assert self.allequal(x, y*a)
./numpy/ma/timer_comparison.py:330:        assert self.allequal(xm, y*a)
./numpy/ma/timer_comparison.py:331:        assert self.allequal(xm.mask, self.mask_or(m, a.mask))
./numpy/ma/timer_comparison.py:385:        assert(wts == 4.0)
./numpy/ma/timer_comparison.py:387:        assert(self.average(ott, axis=0) is self.masked)
./numpy/ma/timer_comparison.py:392:        assert(self.average(ott, axis=1)[0] is self.masked)
./numpy/_version.py:72:    assert isinstance(commands, list)
./numpy/f2py/cfuncs.py:668:        assert(ISCONTIGUOUS(arr));
./numpy/f2py/crackfortran.py:636:    assert not (set('"\'') & set(characters)), "cannot split by unquoted quotes"
./numpy/f2py/crackfortran.py:677:        assert reset == 0, repr(reset)
./numpy/f2py/crackfortran.py:854:    assert not f, repr((f, line, l))
./numpy/f2py/crackfortran.py:1143:            assert result is None, repr(result)
./numpy/f2py/f2py2e.py:576:    assert len(flib_flags) <= 2, repr(flib_flags)
./numpy/f2py/func2subr.py:79:    assert isfunction(rout)
./numpy/f2py/func2subr.py:185:    assert issubroutine(rout)
./numpy/f2py/symbolic.py:163:        assert isinstance(op, Op)
./numpy/f2py/symbolic.py:169:            assert isinstance(data, tuple) and len(data) == 2
./numpy/f2py/symbolic.py:170:            assert isinstance(data[0], int)
./numpy/f2py/symbolic.py:171:            assert isinstance(data[1], (int, str)), data
./numpy/f2py/symbolic.py:175:            assert isinstance(data, tuple) and len(data) == 2
./numpy/f2py/symbolic.py:176:            assert isinstance(data[0], float)
./numpy/f2py/symbolic.py:177:            assert isinstance(data[1], (int, str)), data
./numpy/f2py/symbolic.py:180:            assert isinstance(data, tuple) and len(data) == 2
./numpy/f2py/symbolic.py:184:            assert isinstance(data, tuple) and len(data) == 2
./numpy/f2py/symbolic.py:185:            assert (isinstance(data[0], str)
./numpy/f2py/symbolic.py:187:            assert isinstance(data[1], (int, str)), data
./numpy/f2py/symbolic.py:190:            assert hash(data) is not None
./numpy/f2py/symbolic.py:193:            assert isinstance(data, tuple)
./numpy/f2py/symbolic.py:194:            assert all(isinstance(item, Expr) for item in data), data
./numpy/f2py/symbolic.py:198:            assert isinstance(data, dict)
./numpy/f2py/symbolic.py:202:            assert isinstance(data, tuple) and len(data) == 3
./numpy/f2py/symbolic.py:204:            assert hash(data[0]) is not None
./numpy/f2py/symbolic.py:205:            assert isinstance(data[1], tuple)
./numpy/f2py/symbolic.py:206:            assert isinstance(data[2], dict)
./numpy/f2py/symbolic.py:209:            assert isinstance(data, tuple) and len(data) == 2
./numpy/f2py/symbolic.py:211:            assert hash(data[0]) is not None
./numpy/f2py/symbolic.py:214:            assert isinstance(data, tuple) and len(data) == 3
./numpy/f2py/symbolic.py:217:            assert isinstance(data, Expr)
./numpy/f2py/symbolic.py:220:            assert isinstance(data, tuple) and len(data) == 3
./numpy/f2py/symbolic.py:593:                assert paren == 'ROUND', (paren, value)
./numpy/f2py/symbolic.py:840:            assert isinstance(coeff, number_types)
./numpy/f2py/symbolic.py:1188:    assert '"' not in new_s
./numpy/f2py/symbolic.py:1189:    assert "'" not in new_s
./numpy/f2py/symbolic.py:1249:    assert s.startswith('@__f2py_PARENTHESIS_'), s
./numpy/f2py/symbolic.py:1323:        assert isinstance(s, str), (type(s), s)
./numpy/f2py/symbolic.py:1350:            assert context == 'expr', context
./numpy/f2py/symbolic.py:1389:                    assert op == '-'
./numpy/f2py/symbolic.py:1416:                    assert op == '/'
./numpy/f2py/symbolic.py:1498:                assert paren == 'SQUARE'
./numpy/lib/format.py:371:    assert version is not None
./numpy/random/_examples/cffi/extending.py:40:    assert vals[i] == vals_cffi[i]
./doc/source/conf.py:43:    assert 'numpy.core._add_newdocs_scalars' not in sys.modules
./doc/source/reference/simd/gen_features.py:117:        assert(not rows or len(field_names) == len(rows[0]))
./versioneer.py:380:    assert isinstance(commands, list)
./versioneer.py:484:    assert isinstance(commands, list)
./versioneer.py:1414:    assert cfg.VCS is not None, "please set [versioneer]VCS= in setup.cfg"
./versioneer.py:1416:    assert handlers, "unrecognized VCS '%s'" % cfg.VCS
./versioneer.py:1418:    assert cfg.versionfile_source is not None, \
./versioneer.py:1420:    assert cfg.tag_prefix is not None, "please set versioneer.tag_prefix"
